package org.profamilia.hc.model.dao.imp;

import java.io.IOException;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;

import org.apache.commons.lang.StringUtils;
import org.hibernate.Hibernate;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.Query;
import org.jboss.logging.Logger;
import org.profamilia.hc.model.dao.ClinicoDao;
import org.profamilia.hc.model.dto.*;
import org.profamilia.hc.model.exceptions.DAOException;
import org.profamilia.hc.model.exceptions.ModelException;
import org.profamilia.hc.model.utils.hibernate.HibernateUtil;
import org.profamilia.hc.view.backing.webService.saludTotal.SaludTotalWS;
import org.profamilia.hc.view.backing.webService.saludTotal.dto.request.Afiliado;
import org.profamilia.hc.view.backing.webService.saludTotal.dto.request.Analito;
import org.profamilia.hc.view.backing.webService.saludTotal.dto.request.Clasificacion;
import org.profamilia.hc.view.backing.webService.saludTotal.dto.request.GrupoLaboratorio;
import org.profamilia.hc.view.backing.webService.saludTotal.dto.request.IPS;
import org.profamilia.hc.view.backing.webService.saludTotal.dto.request.Servicio;
import org.profamilia.hc.view.backing.webService.saludTotal.dto.response.ResultadosLCResponse;
import org.profamilia.hc.view.constantes.IConstantes;
import org.springframework.orm.hibernate3.HibernateCallback;
import org.springframework.orm.hibernate3.support.HibernateDaoSupport;


public class ClinicoDaoImp extends HibernateDaoSupport implements ClinicoDao {

	private boolean colocarLetreros = true;

	public ClinicoDaoImp() {

		super();

	}

	private static Logger log = Logger.getLogger(ClinicoDaoImp.class);

	private final String HORA_INICIAL = " 00:00";
	private final String HORA_FINAL = " 23:59";

	/**
	 * INICIO CAMBIO DE CLAVE
	 *
	 */

	/**
	 * the session.
	 */
	private Session session = null;

	/**
	 * The currently active transaction.
	 */
	private Transaction transaction = null;

	/**
	 * User name reference.
	 */
	private String user = null;

	public String getUser() {
		return user;
	}

	public void setUser(String user) {
		this.user = user;
	}

	// CAMBIO DE PASSWORD

	public final void openSession(final String pUser) {

		Session s = session;
		setUser(pUser);
		if (s == null) {

			s = HibernateUtil.sessionFactory.openSession();
			session = s;
			// Sesion creada

		}

		// Se omite password, pues ya est� autenticado.
		this.setupConnection(getUser(), "");
		this.startTransaction();
	}

	private void setupConnection(final String userName, final String password) {

		validateUserThin(userName, password);

	}

	/**
	 * Gets the connection.
	 * 
	 * @return Connection the SQL connection.
	 */
	public final Connection getConnection() {

		if (getUser() == null) {
			throw new DAOException("ERROR al intentar obtener conexi�n. No se ha asignado usuario.");
		}

		Session s = session;
		if (s == null) {
			this.openSession(getUser());
		}
		return session.connection();
	}

	private void validateUserThin(final String userName, final String password) {
		log.debug(getUser() + "entra validateUserTHIN() " + userName);

		Connection con = this.getConnection();
		// OracleConnection oracleConn = null;

		// try {
		// oracleConn = (OracleConnection)con.getMetaData().getConnection();
		// } catch (SQLException e) {
		// throw new DAOException("ERROR: " + e.getMessage() + "CAUSA: " +
		// e.getMessage());
		// }

//		if (con instanceof WrappedConnection) {
//			// Para Jboss
//			WrappedConnection wrappedConn = (WrappedConnection) con;
//			Connection underlyingConn = null;
//			try {
//				underlyingConn = wrappedConn.getUnderlyingConnection();
//			} catch (SQLException excp) {
//				log.debug("imposible obtener la conexion jboss");
//			}
//			oracleConn = (OracleConnection) underlyingConn;
//		} else {
//			// Para OAS
//			try {
//				oracleConn = (OracleConnection) con.getMetaData().getConnection();
//			} catch (SQLException e) {
//				throw new DAOException("ERROR: " + e.getMessage() + "CAUSA: " + e.getMessage());
//			}
//		}

		// if (oracleConn.isProxySession()) {
		// 	try {
		// 		oracleConn.close(OracleConnection.PROXY_SESSION);
		// 	} catch (SQLException e) {
		// 		throw new DAOException("ERROR: " + e.getMessage() + "CAUSA: " + e.getMessage());
		// 	}
		// }

		// try {
		// 	Properties properties = new Properties();
		// 	properties.put(OracleConnection.PROXY_USER_NAME, userName);
		// 	oracleConn.openProxySession(OracleConnection.PROXYTYPE_USER_NAME, properties);
		// } catch (SQLException e) {
		// 	throw new DAOException("ERROR al validar el usuario " + e.getMessage());
		// }
	}

	/**
	 * Starts a TransactionManager.
	 */
	public final void startTransaction() {

		Transaction t = transaction;
		if (t != null) {
			this.closeSession();
		}
		try {
			if (t == null) {
				t = this.getSession().getTransaction();
				t = this.getSession().beginTransaction();
				transaction = t;
			}
		} catch (RuntimeException e) {
			this.closeSession();
			throw new DAOException("ERROR: " + e.getMessage() + "CAUSA: " + e.getMessage());
		}
	}

	/**
	 * Closes Hibernate Session.
	 */
	public final void closeSession() {

		Session s = session;
		session = null;
		log.debug(getUser() + " : entra a closeSession()" + s);
		if ((s != null) && s.isOpen()) {
			s.flush();
			try {
				Connection connection = s.connection();
				// if (connection instanceof OracleConnection && ((OracleConnection) connection).isProxySession()) {
				// 	((OracleConnection) connection).close(OracleConnection.PROXY_SESSION);
				// }
				connection.close();
			} catch (HibernateException e) {
				e.printStackTrace();
			} catch (SQLException e) {
				e.printStackTrace();
			}
			s.clear();
			s.close();
		}
		this.transaction = null;
	}

	/**
	 * Modifica el password del usuario. No realiza commit
	 * 
	 * @param username    nombre del usuario
	 * @param oldPassword contrase�a anterior
	 * @param newPassword nueva contrase�a
	 * @throws DAOException
	 * @throws SQLException
	 */
	public void changePassword(String username, String oldPassword, String newPassword) throws DAOException {

		try {
			this.openSession(username);
		} catch (DAOException e) {
			throw new DAOException("ERROR: Al intentar abrir la sesi�n, usuario no reconocido.");
		}

		UsuarioDaoImp udi = new UsuarioDaoImp();
		if (udi.esUsuarioValido(username, oldPassword) != true) {
			throw new DAOException("ERROR: La contrase�a no es correcta.");

		} else {

			Connection con = getConnection();

			try {
				// Se cambia el password del usuario.
				String sql = "ALTER USER " + username + " IDENTIFIED BY " + newPassword;
				Statement st = con.createStatement();
				st.executeUpdate(sql);
				st.close();

				// La clave se cambio correctamente.

				// Se reestablece el n�mero de d�as restantes para la expiraci�n de su
				// contrase�a.
				sql = "UPDATE activos.sausuario " + "SET susndiexp = 30 " + "WHERE susclogin = '" + username + "'";
				st = con.createStatement();
				st.executeUpdate(sql);
				st.close();

				con.commit();
			} catch (SQLException e) {
				throw new DAOException("ERROR: " + e.getMessage() + "CAUSA: " + e.getMessage());

			} finally {
				closeSession();
			}

		}
	}

	/**
	 * FIN CAMBIO DE CLAVE
	 *
	 */

	/**
	 * Obtener una Clinica.
	 */
	public Cpclinica getClinica(Integer cclncodigo) throws ModelException {
		Cpclinica cpclinica = new Cpclinica();
		java.util.List resultList = null;
		try {
			StringBuffer sb = new StringBuffer();
			sb.append("select a from Cpclinica as a where a.cclncodigo = ? ");

			resultList = this.getHibernateTemplate().find(sb.toString(), cclncodigo);

			if (resultList.size() != 0)
				cpclinica = (Cpclinica) resultList.get(0);
		} catch (HibernateException e) {
			throw new ModelException("Error consultando clinica:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando clinica:" + e.getMessage(), e);
		}
		return cpclinica;
	}

	/**
	 * @param userName
	 * @return
	 * @throws ModelException
	 */
	public List getClinicasUsuario(String userName) throws ModelException {
		java.util.List resultList = null;
		try {
			if (userName != null && !userName.equals("")) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select cpcl.cclncodigo, cpcl.cclcnombre ");
				sb.append(" from clinico.cpusuxclin cpuc, clinico.cpclinica cpcl ");
				sb.append(" where  cpcl.cclncodigo = cpuc.cucnclinic and  cuccusuari = ? ");
				sb.append(" order by cpcl.cclcnombre ");

				Query query = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
						.createQuery(sb.toString());
				query.setParameter(0, userName);
				resultList = query.list();
			}
			if (resultList.size() != 0)
				return resultList;
		} catch (HibernateException e) {
			throw new ModelException("Error consultando clinica:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando clinica:" + e.getMessage(), e);
		}
		return null;
	}

	/**
	 * @param dirrouter
	 * @return
	 * @throws ModelException
	 */
	public Cpclinica getClinicaRouter(String dirrouter) throws ModelException {
		List<Cpclinica> resultList = null;
		List parametros = new ArrayList();

		try {
			if (dirrouter != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select cpcl from " + Cpclinica.class.getName() + " cpcl  where cpcl.cclcrouter like ?  ");
				parametros.add(dirrouter + "%");
				resultList = (List<Cpclinica>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

				return null;
			} else {
				return null;
			}

		} catch (HibernateException e) {
			throw new ModelException("Error consultando clinica :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando clinica:" + e.getMessage(), e);
		}

	}

	// ADMINISTRACION

	/**
	 * Obtener una Usuario.
	 */
	public Cpusuario getUsuarioPorId(String curcusuari) throws ModelException {
		Cpusuario cpusuario = new Cpusuario();
		java.util.List resultList = null;

		try {
			StringBuffer sb = new StringBuffer();
			sb.append("select a from Cpusuario as a where upper(a.curcusuari) = ? ");

			resultList = this.getHibernateTemplate().find(sb.toString(), curcusuari);

			if (resultList.size() != 0) {
				cpusuario = (Cpusuario) resultList.get(0);
			}

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Usuario:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Usuario:" + e.getMessage(), e);
		}
		return cpusuario;
	}

	// MENU

	/**
	 * Obtener Sausuario.
	 */
	public Sausuario getSausuario(String login) throws ModelException {

		java.util.List resultList = null;
		Sausuario sausuario = new Sausuario();
		try {

			StringBuffer sb = new StringBuffer();
			sb.append("SELECT a FROM Sausuario a WHERE a.susclogin = ? ");
			resultList = this.getHibernateTemplate().find(sb.toString(), login);

			if (resultList.size() != 0)
				sausuario = (Sausuario) resultList.get(0);

		} catch (HibernateException e) {
			throw new ModelException(
					"Error consultando Sausuario:" + e.getMessage() + " Causa: " + e.getCause().getMessage(), e);
		} catch (Exception e) {
			throw new ModelException(
					"Error consultando Sausuario:" + e.getMessage() + " Causa: " + e.getCause().getMessage(), e);
		}
		return sausuario;
	}

	/**
	 * @param curcusuari
	 * @return
	 * @throws ModelException
	 */
	public String getNombreUsuarioPorId(String curcusuari) throws ModelException {
		String cpusuario = "";
		java.util.List resultList = null;

		try {
			StringBuffer sb = new StringBuffer();
			sb.append("select a from Cpusuario as a where a.curcusuari = ? ");

			resultList = this.getHibernateTemplate().find(sb.toString(), curcusuari);

			if (resultList.size() != 0) {
				cpusuario = ((Cpusuario) resultList.get(0)).getCurcnombre();
			}

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Usuario:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Usuario:" + e.getMessage(), e);
		}
		return cpusuario;
	}

	/**
	 * Obtener Permisos de Usuario.
	 */
	public List getPermisosUsuario(String login) throws ModelException {
		java.util.List resultList = null;
		try {
			StringBuffer sb = new StringBuffer();
			sb.append(
					"SELECT a FROM Sapermiso a WHERE a.id.spmcusuari = (SELECT b.suscgrulog FROM Sausuario b WHERE b.susclogin = ? ) order by a.saprograma.spgcdescri asc ");

			resultList = this.getHibernateTemplate().find(sb.toString(), login);

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Permisos:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Permisos:" + e.getMessage(), e);
		}
		return resultList;
	}

	/**
	 * @param login
	 * @param aplicacion
	 * @return
	 * @throws ModelException
	 */
	public List getPermisosUsuarioRol(String login, String aplicacion) throws ModelException {
		java.util.List resultList = null;
		List parametros = new ArrayList();
		String HORA_INICIAL = " 00:00";
		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		String ftoday = dateFormat.format(new Date()) + HORA_INICIAL;

		try {
			StringBuffer sb = new StringBuffer();
			sb.append("SELECT DISTINCT sapg " + " FROM  Sarolsusua saru, Sarol saro, Sapermrol sapr, Saprograma sapg  "
					+ " WHERE saru.id.srucusuari = ? AND saru.id.srucaplica = ? "
					+ " AND saro.srocetapa ='AC' AND saru.srucetapa = 'AC' AND  sapr.sprcetapa = 'AC' AND sapg.spgcetapa = 'AC' "
					+ " AND TO_DATE(?,'dd/MM/yyyy hh24:mi') BETWEEN saru.srudfecini AND NVL(saru.srudfecfin, TO_DATE(?,'dd/MM/yyyy hh24:mi')) "
					+ " AND saru.id.srucrol  =  saro.id.srocnombre AND saro.id.srocaplica = saru.id.srucaplica  "
					+ " AND sapr.id.sprcrol = saro.id.srocnombre AND sapr.id.sprcaplica = saro.id.srocaplica "
					+ " AND sapg.spgcnombre = sapr.id.sprcprogra " + " AND sapg.spgcnombre NOT IN   "
					+ "  (SELECT sapu.id.spucprogra FROM Sapermusua sapu  "
					+ "   WHERE sapu.id.spucusuari = ? AND sapu.id.spucprogra = sapg.spgcnombre  "
					+ "   AND sapu.spucetapa = 'AC' AND sapu.spuchabili = 'N'  "
					+ "   AND TO_DATE(?,'dd/MM/yyyy hh24:mi') BETWEEN sapu.spudfecini AND NVL(sapu.spudfecfin,TO_DATE(?,'dd/MM/yyyy hh24:mi'))) ");
			sb.append(" ORDER BY sapg.spgcdescri ");

			parametros.add(login);
			parametros.add(aplicacion);
			parametros.add(ftoday);
			parametros.add(ftoday);
			parametros.add(login);
			parametros.add(ftoday);
			parametros.add(ftoday);

			resultList = this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Permisos:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Permisos:" + e.getMessage(), e);
		}
		return resultList;
	}

	/**
	 * Obtener Permisos sobre la forma.
	 */
	public Sapermiso getPermisosForma(String login, String programa) throws ModelException {
		Sapermiso sapermiso = new Sapermiso();
		java.util.List resultList = null;
		try {
			StringBuffer sb = new StringBuffer();
			sb.append(
					"SELECT a FROM Sapermiso a WHERE a.id.spmcprogra=? AND a.id.spmcusuari = (SELECT b.suscgrulog FROM Sausuario b WHERE b.susclogin = ? )");

			Object[] param = new Object[2];
			param[0] = programa;
			param[1] = login;

			resultList = this.getHibernateTemplate().find(sb.toString(), param);

			if (resultList.size() != 0)
				sapermiso = (Sapermiso) resultList.get(0);

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Permisos Forma:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Permisos Forma:" + e.getMessage(), e);
		}
		return sapermiso;
	}

	/**
	 * @param usuario
	 * @param consulta
	 * @throws ModelException
	 */
	public void saveUsuario(final Chusuario usuario, final Cnconsclin consulta, final String userName,
			final Long codigoAgenda) throws ModelException {

		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {
					String ESTADO_ABIERTO = "AB";
					Chconsulta consultaUsuario;
					List lstHonorarios = null;

					consultaUsuario = null;
					if (usuario != null) {
						usuario.setHusdultimacons(new Date());
						session.update(usuario);
					}

					StringBuffer sb = new StringBuffer();
					sb.append(" select chco from Chconsulta" + " chco  where chco.hcolnumero = :numeroConsulta   ");
					Query query = session.createQuery(sb.toString());
					query.setParameter("numeroConsulta", consulta.getCconnumero());

					consultaUsuario = (Chconsulta) query.uniqueResult();

					if (consultaUsuario == null) {
						consultaUsuario = new Chconsulta();

					}

					if (consulta != null && usuario != null) {
						consultaUsuario.setHcodfecinicio(new Date());
						consultaUsuario.setHcocentidadadm(usuario.getHuscentidadadm());
						consultaUsuario.setHcocnombacompa(usuario.getHuscnomacompana());
						consultaUsuario.setHcocnombrespo(usuario.getHuscnomresponsa());
						consultaUsuario.setHcocoperador(userName);
						consultaUsuario.setHcocservicio(consulta.getCcocservic());
						consultaUsuario.setHcocteleacompa(usuario.getHusctelacompana());
						consultaUsuario.setHcoctelerespo(usuario.getHusctelresponsa());
						consultaUsuario.setHcodfecregistr(new Date());
						consultaUsuario.setHcoeetapa(ESTADO_ABIERTO);
						consultaUsuario.setHconfolio(usuario.getHusnfolioactua());
						consultaUsuario.setHcontipoconsu(consulta.getCcontconcl());
						consultaUsuario.setHconclinica(consulta.getCconclinic());
						consultaUsuario.setHconnumdoc(consulta.getCconnumdoc());
						consultaUsuario.setHcontipdoc(consulta.getCcontipdoc());
						consultaUsuario.setHcoctiposervi(IConstantes.TIPO_CONSULTA);
						if (consulta.getCconnumero() != null)
							consultaUsuario.setHcolconsuclini(new Long(consulta.getCconnumero()));
						consultaUsuario.setHcolnumero(new Long(consulta.getCconnumero()));
						consultaUsuario.setHcolusuario(usuario);
						if (codigoAgenda != null) {
							consultaUsuario.setHconcodagen(codigoAgenda);
						}
						consultaUsuario.setHcocreaconinf(usuario.getHcocreaconinf());

						consultaUsuario.setHcoccuacondil(usuario.getHcoccuacondil());

						consultaUsuario.setHcocautusodat(usuario.getHcocautusodat());

						session.saveOrUpdate(consultaUsuario);

					}

					// VERIFICAMOS SI EXISTE MAS DE UN PROFESIONAL VIGENTE ASIGNADO A LA CONSULTA NO
					// CAMBIAMOS LA FECHA DE LA CONSULTA,. NI ACTUALIZAMOS LA FECHA DE LA CONSULTA

					if (consulta != null) {

						StringBuffer sb5 = new StringBuffer();
						sb5.append(" select cnpc from " + Cnprofxcon.class.getName()
								+ " cnpc  where cnpc.id.cpnnconcli = :cpnnconcli AND cnpc.cpncestado != 'XX'  ");
						Query query5 = session.createQuery(sb5.toString());
						query5.setParameter("cpnnconcli", consulta.getCconnumero());

						lstHonorarios = query5.list();

					}

					if (consulta != null && lstHonorarios != null && lstHonorarios.size() <= 1) {
						consulta.setCcodfeccon(new Date());
						generarHonorariosProfesional(session, consulta, consultaUsuario, userName, null);

					}

					if (consulta != null) {

						StringBuffer sbAda = new StringBuffer();
						sbAda.append(" update clinico.Cnconsclin   set CCOCETAPA = 'EC' ");
						sbAda.append(" where CCONNUMERO =  :wnumero  ");

						Query queryAda = session.createQuery(sbAda.toString());
						queryAda.setParameter("wnumero", consulta.getCconnumero());

						queryAda.executeUpdate();

					}

					return usuario;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		}
	}

	/**
	 * @param usuario
	 * @throws ModelException
	 */
	public void saveUsuarioAsesoria(final Chusuario usuario, final String userName) throws ModelException {

		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {

					if (usuario != null) {
						Long huslnumero = null;

						/*
						 * if (usuario != null && usuario.getHuslnumero() == null) { BigDecimal
						 * secuenciaActual = (BigDecimal)session.
						 * createQuery("SELECT cpco.connnumero FROM clinico.Cpconsec cpco where cpco.conncodigo = "
						 * + IConstantes.CCONUSUA + " FOR UPDATE nowait").uniqueResult();
						 * 
						 * if (secuenciaActual != null) { huslnumero = secuenciaActual.longValue(); }
						 * 
						 * session.
						 * createQuery("update clinico.Cpconsec set connnumero = connnumero + 1  where conncodigo = "
						 * + IConstantes.CCONUSUA + " ").executeUpdate();
						 * 
						 * usuario.setHuslnumero(huslnumero); }
						 */

						usuario.setHusnfolioactua(0);
						usuario.setHusdfecregistr(new Date());
						usuario.setHuscoperador(userName);
						usuario.setHusehistoria("N");
						usuario.setHuseestado(IConstantes.ESTADO_VIGENTE);

						session.saveOrUpdate(usuario);
					}

					return usuario;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		}
	}

	/**
	 * @param usuario
	 * @param consulta
	 * @param citologia
	 * @throws ModelException
	 */
	public void saveUsuarioCitologia(final Chusuario usuario, final Cnconsclin consulta, final Cncitologi citologia,
			final String userName, final Long codigoAgenda) throws ModelException {
		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {

					Integer consecutivo;
					consecutivo = null;

					String ESTADO_ABIERTO = "AB";
					Chconsulta consultaUsuario = null;
					if (usuario != null) {
						usuario.setHusdultimacons(new Date());
					}

					StringBuffer sb = new StringBuffer();
					sb.append(" select chco from Chconsulta"
							+ " chco  where chco.hcolnumero = :numeroCirugia  AND chco.hcoctiposervi = :tipoServicio ");
					Query query = session.createQuery(sb.toString());
					query.setParameter("numeroCirugia", consulta.getCconnumero());
					query.setParameter("tipoServicio", IConstantes.TIPO_CONSULTA);

					consultaUsuario = (Chconsulta) query.uniqueResult();

					if (consultaUsuario == null) {
						consultaUsuario = new Chconsulta();
						consultaUsuario.setHcodfecinicio(new Date());
					}

					if (usuario != null && citologia != null) {
						usuario.setHuscprimernomb(citologia.getCcicprinom());
						usuario.setHuscsegundnomb(citologia.getCcicsegnom());
						usuario.setHuscprimerapel(citologia.getCcicpriape());
						usuario.setHuscsegundapel(citologia.getCcicsegape());
						usuario.setHusndepartamen(citologia.getCcindepart());
						usuario.setHusnciudad(citologia.getCcinmunici());
						usuario.setHuscdireccion(citologia.getCcicdirecc());
						usuario.setHusctelefono(citologia.getCcictelefo());
						usuario.setHuscentidadadm(citologia.getCcicasegur());
						usuario.setHusetipoafilia(citologia.getCcictipafi());
					}

					if (consulta != null && usuario != null) {
						consultaUsuario.setHcocentidadadm(usuario.getHuscentidadadm());
						consultaUsuario.setHcocnombacompa(usuario.getHuscnomacompana());
						consultaUsuario.setHcocnombrespo(usuario.getHuscnomresponsa());
						consultaUsuario.setHcocoperador(userName);
						consultaUsuario.setHcocservicio(consulta.getCcocservic());
						consultaUsuario.setHcocteleacompa(usuario.getHusctelacompana());
						consultaUsuario.setHcoctelerespo(usuario.getHusctelresponsa());
						consultaUsuario.setHcodfecregistr(new Date());
						consultaUsuario.setHcoeetapa(ESTADO_ABIERTO);
						consultaUsuario.setHconfolio(usuario.getHusnfolioactua());
						consultaUsuario.setHcontipoconsu(consulta.getCcontconcl());
						consultaUsuario.setHconnumdoc(consulta.getCconnumdoc());
						consultaUsuario.setHcontipdoc(consulta.getCcontipdoc());
						consultaUsuario.setHcolusuario(usuario);
						consultaUsuario.setHconclinica(consulta.getCconclinic());
						consultaUsuario.setHcoctiposervi(IConstantes.TIPO_CONSULTA);
						if (codigoAgenda != null) {
							consultaUsuario.setHconcodagen(codigoAgenda);
						}

						if (consulta.getCconnumero() != null) {
							consultaUsuario.setHcolconsuclini(new Long(consulta.getCconnumero()));
							consultaUsuario.setHcolnumero(new Long(consulta.getCconnumero()));
						}
					}

					generarRipsProcedimiento(session, consulta, userName);

					session.saveOrUpdate(usuario);
					session.saveOrUpdate(citologia);
					session.saveOrUpdate(consultaUsuario);

					if (consultaUsuario.getHconcodagen() != null) {

						StringBuffer sbAgenda = new StringBuffer();
						sbAgenda.append(" select ag from ").append(Agendamiento.class.getName());
						sbAgenda.append(" ag  where  ag.id = :codigoAgenda");

						String hql = sbAgenda.toString();
						Query queryAgenda = session.createQuery(hql);

						queryAgenda.setParameter("codigoAgenda", consultaUsuario.getHconcodagen());

						Agendamiento agenda = new Agendamiento();

						if (!queryAgenda.list().isEmpty()) {
							agenda = (Agendamiento) queryAgenda.list().get(0);
							if (agenda != null) {
								agenda.setFecha_atencion(new Date());
								session.update(agenda);
							}
						}
					}

					return usuario;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		}
	}

	/**
	 * @param usuario
	 * @param consulta
	 * @param citologia
	 * @throws ModelException
	 */
	public void saveUsuarioVph(final Chusuario usuario, final Cnconsclin consulta, final Chdatosvph citologia,
			final String userName) throws ModelException {
		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {

					Integer consecutivo;
					consecutivo = null;

					String ESTADO_ABIERTO = "AB";
					Chconsulta consultaUsuario = null;
					if (usuario != null) {
						usuario.setHusdultimacons(new Date());
					}

					StringBuffer sb = new StringBuffer();
					sb.append(" select chco from Chconsulta"
							+ " chco  where chco.hcolnumero = :numeroCirugia  AND chco.hcoctiposervi = :tipoServicio ");
					Query query = session.createQuery(sb.toString());
					query.setParameter("numeroCirugia", consulta.getCconnumero());
					query.setParameter("tipoServicio", IConstantes.TIPO_CONSULTA);

					consultaUsuario = (Chconsulta) query.uniqueResult();

					if (consultaUsuario == null) {
						consultaUsuario = new Chconsulta();
						consultaUsuario.setHcodfecinicio(new Date());
					}

					if (usuario != null && citologia != null) {
						usuario.setHuscprimernomb(citologia.getHdvcprinom());
						usuario.setHuscsegundnomb(citologia.getHdvcsegnom());
						usuario.setHuscprimerapel(citologia.getHdvcpriape());
						usuario.setHuscsegundapel(citologia.getHdvcsegape());
						usuario.setHusndepartamen(citologia.getHdvndepart());
						usuario.setHusnciudad(citologia.getHdvnmunici());
						usuario.setHuscdireccion(citologia.getHdvcdirecc());
						usuario.setHusctelefono(citologia.getHdvctelefo());
						usuario.setHuscentidadadm(citologia.getHdvcasegur());
						usuario.setHusetipoafilia(citologia.getHdvctipafi());
					}

					if (consulta != null && usuario != null) {
						consultaUsuario.setHcocentidadadm(usuario.getHuscentidadadm());
						consultaUsuario.setHcocnombacompa(usuario.getHuscnomacompana());
						consultaUsuario.setHcocnombrespo(usuario.getHuscnomresponsa());
						consultaUsuario.setHcocoperador(userName);
						consultaUsuario.setHcocservicio(consulta.getCcocservic());
						consultaUsuario.setHcocteleacompa(usuario.getHusctelacompana());
						consultaUsuario.setHcoctelerespo(usuario.getHusctelresponsa());
						consultaUsuario.setHcodfecregistr(new Date());
						consultaUsuario.setHcoeetapa(ESTADO_ABIERTO);
						consultaUsuario.setHconfolio(usuario.getHusnfolioactua());
						consultaUsuario.setHcontipoconsu(consulta.getCcontconcl());
						consultaUsuario.setHconnumdoc(consulta.getCconnumdoc());
						consultaUsuario.setHcontipdoc(consulta.getCcontipdoc());
						consultaUsuario.setHcolusuario(usuario);
						consultaUsuario.setHconclinica(consulta.getCconclinic());
						consultaUsuario.setHcoctiposervi(IConstantes.TIPO_CONSULTA);

						if (consulta.getCconnumero() != null) {
							consultaUsuario.setHcolconsuclini(new Long(consulta.getCconnumero()));
							consultaUsuario.setHcolnumero(new Long(consulta.getCconnumero()));
						}
					}

					if (citologia != null && citologia.getHdvnconsec() == null) {
						BigDecimal secuenciaActual = (BigDecimal) session.createQuery(
								"SELECT cpco.connnumero FROM clinico.Cpconsec cpco where cpco.conncodigo = "
										+ IConstantes.CCONVPH + " FOR UPDATE nowait")
								.uniqueResult();

						if (secuenciaActual != null) {
							consecutivo = secuenciaActual.intValue();
						}

						session.createQuery(
								"update clinico.Cpconsec set connnumero = connnumero + 1  where conncodigo = "
										+ IConstantes.CCONVPH + " ")
								.executeUpdate();

						citologia.setHdvnconsec(consecutivo);
					}
					generarRipsProcedimiento(session, consulta, userName);

					session.saveOrUpdate(usuario);
					session.saveOrUpdate(citologia);
					session.saveOrUpdate(consultaUsuario);

					return usuario;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		}
	}

	/**
	 * @param lectura
	 * @throws ModelException
	 */
	public void saveLecturaCitologia(final Cncitolect lectura, final Cnconsclin consulta, final String userName,
			final Integer tipoLectura) throws ModelException {
		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {
					session.saveOrUpdate(lectura);
					Date fechaConsClin;
					Calendar calendar = Calendar.getInstance();
					fechaConsClin = calendar.getTime();
					BigDecimal codigoCentroLectura = null;
					List<Cpparamcitol> cpparamcitol = null;
					List<Cfdetaadmision> cfdeta = null;
					boolean aplicaCambio = true;

					StringBuffer sb12 = new StringBuffer();
					StringBuffer sb11 = new StringBuffer();
					sb11.append(
							" select cppar FROM Cfdetaadmision cfdet,Cpparamcitol cppar WHERE cfdet.id.cdannumadm = :numAdm and cfdet.cdacservic \n"
									+ "= cppar.cpcccodser and cppar.cpcccodpaq = cfdet.cdacpaquet and  cppar.cpcncodclin = :clinica and cppar.cpcestado = 'VG' \n"
									+ "");
					Query query11 = session.createQuery(sb11.toString());
					query11.setParameter("numAdm", consulta.getCconnumdoc());
					query11.setParameter("clinica", consulta.getCconclinic());
					cpparamcitol = query11.list();

					if (cpparamcitol != null && !cpparamcitol.isEmpty()) {
						aplicaCambio = false;
						codigoCentroLectura = new BigDecimal(cpparamcitol.get(0).getCpcccodlab());
					}

					List lstHonorarios = null;
					if (consulta != null) {
						consulta.setCcothorate(new Date());
						consulta.setCcocetapa(IConstantes.ETAPA_ATENDIDO);
						consulta.setCcocusumod(userName);
						// Cambiamos el estado de la consulta x clinica a atendida y se asigna el
						// honorario a el lab parametrizado
						if (aplicaCambio && tipoLectura.equals(IConstantes.HISTORIA_LECTURA_CITOLOGIA_BASE_LIQUIDA)) {
							cpparamcitol = null;
							consulta.setCconclinic(1);
							// consulta.setCconclidoc(1);
							sb12.append(" select cppar FROM Cpparamcitol cppar WHERE \n"
									+ "  cppar.cpcncodclin = 9 and cppar.cpcestado = 'VG' \n" + "");
							Query query12 = session.createQuery(sb12.toString());
							cpparamcitol = query12.list();
							if (cpparamcitol != null && !cpparamcitol.isEmpty()) {
								codigoCentroLectura = new BigDecimal(cpparamcitol.get(0).getCpcccodlab());
							}

						}
						session.update(consulta);

						if (consulta != null) {

							StringBuffer sb5 = new StringBuffer();
							sb5.append(" select cnpc from " + Cnprofxcon.class.getName()
									+ " cnpc  where cnpc.id.cpnnconcli = :cpnnconcli AND cnpc.cpncestado != 'XX'  ");
							Query query5 = session.createQuery(sb5.toString());
							query5.setParameter("cpnnconcli", consulta.getCconnumero());
							session.update(consulta);
							lstHonorarios = query5.list();

						}

						if (consulta != null && lstHonorarios != null && lstHonorarios.size() == 0) {
							consulta.setCcodfeccon(fechaConsClin);

							if (tipoLectura != null) {
								if (tipoLectura.equals(IConstantes.HISTORIA_LECTURA_CITOLOGIA_CONVENCIONAL)) {

									generarHonorariosCitologiaConvencional(session, consulta, userName);
								}

								if (tipoLectura.equals(IConstantes.HISTORIA_LECTURA_CITOLOGIA_BASE_LIQUIDA)) {

									generarHonorariosCitologiaBaseLiquida(session, consulta, userName, aplicaCambio,
											codigoCentroLectura);
								}
							}

						}

					}
					return lectura;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Lectura Citologia:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Lectura Citologia:" + e.getMessage(), e);
		}
	}

	/**
	 * @param consecutivo
	 * @return
	 * @throws ModelException
	 */
	public Cncitolect getLecturaCitologia(Integer consecutivo) throws ModelException {
		List<Cncitolect> resultList = null;
		List parametros = new ArrayList();

		try {
			if (consecutivo != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select cncl from " + Cncitolect.class.getName() + " cncl  where cncl.clcnconsec = ?  ");
				parametros.add(consecutivo);
				resultList = (List<Cncitolect>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

				return null;
			} else {
				return null;
			}

		} catch (HibernateException e) {
			throw new ModelException("Error Obteniendo Lectura Citologia :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Obteniendo Lectura Citologia:" + e.getMessage(), e);
		}

	}

	/**
	 * @param consecutivo
	 * @return
	 * @throws ModelException
	 */
	public Chlibrocitol getLibroCitologia(Integer consecutivo) throws ModelException {
		List<Chlibrocitol> resultList = null;
		List parametros = new ArrayList();

		try {
			if (consecutivo != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chlc from " + Chlibrocitol.class.getName() + " chlc  where chlc.hlcnconsec = ?  ");
				parametros.add(consecutivo);
				resultList = (List<Chlibrocitol>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

				return null;
			} else {
				return null;
			}

		} catch (HibernateException e) {
			throw new ModelException("Error Obteniendo Libro Citologia :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Obteniendo Libro Citologia:" + e.getMessage(), e);
		}

	}

	/**
	 * @param toma
	 * @throws ModelException
	 */
	public void saveTomaCitologia(Cncitotoma toma) throws ModelException {
		try {
			if (toma != null) {
				this.getHibernateTemplate().saveOrUpdate(toma);
			}

		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Toma Citologia:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Toma Citologia:" + e.getMessage(), e);
		}
	}

	/**
	 * @param consulta
	 * @throws ModelException
	 */
	public void closeTomaCitologia(final Cncitotoma toma, final Cnconsclin consulta, final String userName,
			final boolean temporal) throws ModelException {
		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {

					List lstHonorarios = null;
					Calendar calendar = Calendar.getInstance();
					calendar.set(Calendar.MINUTE, 0);
					calendar.set(Calendar.HOUR_OF_DAY, 0);
					Date fechaConsClin;

					fechaConsClin = calendar.getTime();

					if (toma != null) {
						session.saveOrUpdate(toma);
					}

					Chconsulta consultaActual = null;

					StringBuffer sb = new StringBuffer();
					sb.append(" select chco from Chconsulta"
							+ " chco  where chco.hcolnumero = :numeroCirugia  AND chco.hcoctiposervi = :tipoServicio ");
					Query query = session.createQuery(sb.toString());
					query.setParameter("numeroCirugia", consulta.getCconnumero());
					query.setParameter("tipoServicio", IConstantes.TIPO_CONSULTA);

					consultaActual = (Chconsulta) query.uniqueResult();

					// VERIFICAMOS SI EXISTE MAS DE UN PROFESIONAL ASIGNADO A LA CONSULTA NO
					// CAMBIAMOS LA FECHA DE LA CONSULTA,. NI ACTUALIZAMOS LA FECHA DE LA CONSULTA

					if (consulta != null) {

						StringBuffer sb5 = new StringBuffer();
						sb5.append(" select cnpc from " + Cnprofxcon.class.getName()
								+ " cnpc  where cnpc.id.cpnnconcli = :cpnnconcli AND cnpc.cpncestado != 'XX'  ");
						Query query5 = session.createQuery(sb5.toString());
						query5.setParameter("cpnnconcli", consulta.getCconnumero());

						lstHonorarios = query5.list();

					}

					if (consulta != null && lstHonorarios != null && lstHonorarios.size() <= 2) {
						consulta.setCcodfeccon(fechaConsClin);
						generarHonorariosProfesional(session, consulta, consultaActual, userName, null);
						/*
						 * generarHonorariosCitologia(session, consulta, consultaActual, userName);
						 */

					}

					StringBuffer sbAda = new StringBuffer();
					sbAda.append(" update clinico.CFDETAFACTURA ccdf1  set ccdf1.CDFCETAPA = 'AT' ");
					sbAda.append(" where (ccdf1.CDFNCONSFACT, ccdf1.CDFNNUMITEM) in( ");
					sbAda.append(" select ccdf.CDFNCONSFACT, ccdf.CDFNNUMITEM ");
					sbAda.append(" from clinico.CFFACTURA ccfa, clinico.CFDETAFACTURA ccdf ");
					sbAda.append(" where ccfa.CFNCONSFACT = ccdf.CDFNCONSFACT ");
					sbAda.append(" and ccfa.CFNADMISION = :wadmision ");
					sbAda.append(" and ccdf.CDFCSERVICIO = :wservicio ) ");

					Query queryAda = session.createQuery(sbAda.toString());
					queryAda.setParameter("wadmision", consulta.getCconnumdoc());
					queryAda.setParameter("wservicio", consulta.getCcocservic().getCsvccodigo());
					queryAda.executeUpdate();

					if (consulta != null) {
						consulta.setCcothorate(new Date());
						consulta.setCcocetapa(IConstantes.ETAPA_ATENDIDO);
						consulta.setCcocusumod(userName);
						// Cambiamos el estado de la consulta x clinica a atendida
						session.update(consulta);
					}

					return consulta;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		}
	}

	/**
	 * @param consulta
	 * @throws ModelException
	 */
	public void closeTomaVph(final Chvphtoma toma, final Cnconsclin consulta, final String userName,
			final boolean temporal) throws ModelException {
		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {

					List lstHonorarios = null;
					Calendar calendar = Calendar.getInstance();
					calendar.set(Calendar.MINUTE, 0);
					calendar.set(Calendar.HOUR_OF_DAY, 0);
					Date fechaConsClin;

					fechaConsClin = calendar.getTime();

					if (toma != null) {
						session.saveOrUpdate(toma);
					}

					Chconsulta consultaActual = null;

					StringBuffer sb = new StringBuffer();
					sb.append(" select chco from Chconsulta"
							+ " chco  where chco.hcolnumero = :numeroCirugia  AND chco.hcoctiposervi = :tipoServicio ");
					Query query = session.createQuery(sb.toString());
					query.setParameter("numeroCirugia", consulta.getCconnumero());
					query.setParameter("tipoServicio", IConstantes.TIPO_CONSULTA);

					consultaActual = (Chconsulta) query.uniqueResult();

					// VERIFICAMOS SI EXISTE MAS DE UN PROFESIONAL ASIGNADO A LA CONSULTA NO
					// CAMBIAMOS LA FECHA DE LA CONSULTA,. NI ACTUALIZAMOS LA FECHA DE LA CONSULTA

					if (consulta != null) {

						StringBuffer sb5 = new StringBuffer();
						sb5.append(" select cnpc from " + Cnprofxcon.class.getName()
								+ " cnpc  where cnpc.id.cpnnconcli = :cpnnconcli AND cnpc.cpncestado != 'XX'  ");
						Query query5 = session.createQuery(sb5.toString());
						query5.setParameter("cpnnconcli", consulta.getCconnumero());

						lstHonorarios = query5.list();

					}

					if (consulta != null && lstHonorarios != null && lstHonorarios.size() <= 2) {
						consulta.setCcodfeccon(fechaConsClin);
						generarHonorariosProfesional(session, consulta, consultaActual, userName, null);
						/*
						 * generarHonorariosCitologia(session, consulta, consultaActual, userName);
						 */

					}

					StringBuffer sbAda = new StringBuffer();
					sbAda.append(" update clinico.CFDETAFACTURA ccdf1  set ccdf1.CDFCETAPA = 'AT' ");
					sbAda.append(" where (ccdf1.CDFNCONSFACT, ccdf1.CDFNNUMITEM) in( ");
					sbAda.append(" select ccdf.CDFNCONSFACT, ccdf.CDFNNUMITEM ");
					sbAda.append(" from clinico.CFFACTURA ccfa, clinico.CFDETAFACTURA ccdf ");
					sbAda.append(" where ccfa.CFNCONSFACT = ccdf.CDFNCONSFACT ");
					sbAda.append(" and ccfa.CFNADMISION = :wadmision ");
					sbAda.append(" and ccdf.CDFCSERVICIO = :wservicio ) ");

					Query queryAda = session.createQuery(sbAda.toString());
					queryAda.setParameter("wadmision", consulta.getCconnumdoc());
					queryAda.setParameter("wservicio", consulta.getCcocservic().getCsvccodigo());
					queryAda.executeUpdate();

					if (consulta != null) {
						consulta.setCcothorate(new Date());
						consulta.setCcocetapa(IConstantes.ETAPA_ATENDIDO);
						consulta.setCcocusumod(userName);
						// Cambiamos el estado de la consulta x clinica a atendida
						session.update(consulta);
					}

					return consulta;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		}
	}

	/**
	 * @param libro
	 * @throws ModelException
	 */
	public void saveLibroCitologia(Chlibrocitol libro) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(libro);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Libro Citologia:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Libro Citologia:" + e.getMessage(), e);
		}
	}

	/**
	 * @param citologia
	 * @throws ModelException
	 */
	public void entregarCitologia(final Cncitologi citologia, final Chlibrocitol libro) throws ModelException {
		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {

					if (citologia != null) {
						citologia.setCcidfecent(new Date());
						citologia.setCcicentreg("S");
					}

					session.update(citologia);
					session.saveOrUpdate(libro);

					return citologia;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		}
	}

	/**
	 * @param consulta
	 * @throws ModelException
	 */
	public void closeLecturaCitologia(Chconsulta consulta) throws ModelException {
		boolean wexito = true;
		if (consulta != null && consulta.getHcolnumero() != null) {
			consulta.setHcoeetapa(IConstantes.ETAPA_CERRADA);
			consulta.setHcodfeccierre(new Date());
		} else {
			wexito = false;
		}

		if (wexito) {
			// Cambiamos el estado de la consulta a cerrado
			this.getHibernateTemplate().update(consulta);

		}
	}

	/**
	 * @param consecutivo
	 * @return
	 * @throws ModelException
	 */
	public Cncitotoma getTomaCitologia(Integer consecutivo) throws ModelException {
		List<Cncitotoma> resultList = null;
		List parametros = new ArrayList();

		try {
			if (consecutivo != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select cnci from " + Cncitotoma.class.getName() + " cnci  where cnci.ctmnconsec = ?  ");
				parametros.add(consecutivo);
				resultList = (List<Cncitotoma>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

				return null;
			} else {
				return null;
			}

		} catch (HibernateException e) {
			throw new ModelException("Error Obteniendo Toma Citologia :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Obteniendo Toma Citologia:" + e.getMessage(), e);
		}

	}

	/**
	 * @param consecutivo
	 * @return
	 * @throws ModelException
	 */
	public Chvphtoma getTomaVph(Integer consecutivo) throws ModelException {
		List<Chvphtoma> resultList = null;
		List parametros = new ArrayList();

		try {
			if (consecutivo != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select cnci from " + Chvphtoma.class.getName() + " cnci  where cnci.hvtnconsec = ?  ");
				parametros.add(consecutivo);
				resultList = (List<Chvphtoma>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

				return null;
			} else {
				return null;
			}

		} catch (HibernateException e) {
			throw new ModelException("Error Obteniendo Toma VPH :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Obteniendo Toma VPH:" + e.getMessage(), e);
		}

	}

	/**
	 * @param citologia
	 * @return
	 * @throws ModelException
	 */
	public List<Cncitologi> getCitologiasParaEntregar(Cncitologi citologia) throws ModelException {
		List<Cncitologi> resultList = null;
		List parametros = new ArrayList();

		try {
			if (citologia != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select cnci from " + Cncitologi.class.getName() + " cnci  where cnci.ccicentreg = 'N'  ");
				if (citologia != null) {

					if (citologia.getCcianumide() != null) {
						sb.append(" and cnci.ccianumide = ? ");
						parametros.add(citologia.getCcianumide());
					}

					if (citologia.getCcictipide() != null && !citologia.getCcictipide().equals("")) {
						sb.append(" and cnci.ccictipide = ? ");
						parametros.add(citologia.getCcictipide());
					}

					if (citologia.getCcinconsec() != null) {
						sb.append(" and cnci.ccinconsec = ? ");
						parametros.add(citologia.getCcinconsec());
					}

					sb.append(" order by cnci.ccidfecreg desc  ");

				}

				resultList = (List<Cncitologi>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList;
				}

				return null;
			} else {
				return null;
			}

		} catch (HibernateException e) {
			throw new ModelException("Error Obteniendo Citologias para Entregar :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Obteniendo Citologias para Entregar :" + e.getMessage(), e);
		}

	}

	/**
	 * @param consulta
	 * @return
	 * @throws ModelException
	 */
	public Cncitologi getUsuarioCitologia(Cnconsclin consulta) throws ModelException {
		List<Cncitologi> resultList = null;
		List parametros = new ArrayList();

		try {
			if (consulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select cnci from " + Cncitologi.class.getName() + " cnci  where cnci.ccintipdoc = ?  ");
				sb.append(" and cnci.ccinnumdoc = ? ");
				sb.append(" and cnci.ccilconcli = ? ");

				parametros.add(consulta.getCcontipdoc());
				parametros.add(consulta.getCconnumdoc());
				parametros.add(consulta.getCconnumero());
				resultList = (List<Cncitologi>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

				return null;
			} else {
				return null;
			}

		} catch (HibernateException e) {
			throw new ModelException("Error Obteniendo Usuario Citologia :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Obteniendo Usuario Citologia:" + e.getMessage(), e);
		}

	}

	/**
	 * @param consulta
	 * @return
	 * @throws ModelException
	 */
	public Chdatosvph getUsuarioVph(Cnconsclin consulta) throws ModelException {
		List<Chdatosvph> resultList = null;
		List parametros = new ArrayList();

		try {
			if (consulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chdv from " + Chdatosvph.class.getName() + " chdv where chdv.hdvntipdoc = ?  ");
				sb.append(" and chdv.hdvnnumdoc = ? ");

				parametros.add(consulta.getCcontipdoc());
				parametros.add(consulta.getCconnumdoc());
				resultList = (List<Chdatosvph>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

				return null;
			} else {
				return null;
			}

		} catch (HibernateException e) {
			throw new ModelException("Error Obteniendo Usuario Citologia :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Obteniendo Usuario Citologia:" + e.getMessage(), e);
		}

	}

	/**
	 * @param consecutivo
	 * @return
	 * @throws ModelException
	 */
	public Cncitologi getEncabezadoCitologia(Integer consecutivo) throws ModelException {
		List<Cncitologi> resultList = null;
		List parametros = new ArrayList();

		try {
			if (consecutivo != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select cnci from " + Cncitologi.class.getName() + " cnci where cnci.ccinconsec = ?  ");
				parametros.add(consecutivo);
				resultList = (List<Cncitologi>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

				return null;
			} else {
				return null;
			}

		} catch (HibernateException e) {
			throw new ModelException("Error Obteniendo Encabezado Citologia :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Obteniendo Encabezado Citologia:" + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroUsuario
	 * @return
	 * @throws ModelException
	 */
	public List getCopiaCitologia(Long numeroUsuario) throws ModelException {

		List resultList = null;

		try {
			if (numeroUsuario != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(
						" select cnci.ccinconsec, cnci.ccinnumero, cnci.ccictipide, cnci.ccianumide, cnci.ccicprinom, NVL(cnci.ccicsegnom,'--'), cnci.ccicpriape, NVL(cnci.ccicsegape,'--'),cnct.ctmdfectom,cncl.clcdfecreg   ");
				sb.append(" from clinico.cncitologi cnci ");
				sb.append(" LEFT JOIN clinico.cncitotoma cnct  ON  cnci.ccinconsec = cnct.ctmnconsec  ");
				sb.append(" LEFT JOIN  clinico.cncitolect cncl ON cnci.ccinconsec = cncl.clcnconsec  ");
				sb.append(" where ccilusuario = ? ");
				sb.append(" AND ccintiphis != ? ");
				sb.append(" order by cnct.ctmdfectom desc  ");

				Query query = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
						.createQuery(sb.toString());
				query.setParameter(0, numeroUsuario);
				query.setParameter(1, IConstantes.HISTORIA_PROCEDIMIENTO_VPH_TOMA);

				resultList = query.list();

				if (!resultList.isEmpty()) {
					return resultList;
				}

				return null;
			} else {
				return null;
			}

		} catch (HibernateException e) {
			throw new ModelException("Error obteniendo copia de citologia :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error obteniendo copia de citologia:" + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroUsuario
	 * @return
	 * @throws ModelException
	 */
	public List getEstadoCitologia(Long numeroUsuario) throws ModelException {

		List resultList = null;

		try {
			if (numeroUsuario != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(
						" select cnci.ccinconsec, cnci.ccinnumero, cnci.ccictipide, cnci.ccianumide, cnci.ccicprinom, NVL(cnci.ccicsegnom,'--'), cnci.ccicpriape, NVL(cnci.ccicsegape,'--'),cnct.ctmdfectom, NVL(TO_CHAR(cncl.clcdfecreg, 'dd-MM-yyyy'),'--' ), NVL(TO_CHAR(chlc.hlcdfecregistr,'dd-MM-yyyy'), '--')  ");
				sb.append(" from clinico.cncitologi cnci ");
				sb.append(" LEFT JOIN clinico.cncitotoma cnct  ON  cnci.ccinconsec = cnct.ctmnconsec  ");
				sb.append(" LEFT JOIN  clinico.cncitolect cncl ON cnci.ccinconsec = cncl.clcnconsec  ");
				sb.append(" LEFT JOIN  historia.chlibrocitol chlc ON cnci.ccinconsec = chlc.hlcnconsec  ");
				sb.append(" where   ccilusuario = ?  ");
				sb.append(" order by cnct.ctmdfectom desc, cncl.clcdfecreg desc  ");

				Query query = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
						.createQuery(sb.toString());
				query.setParameter(0, numeroUsuario);

				resultList = query.list();

				if (!resultList.isEmpty()) {
					return resultList;
				}

				return null;
			} else {
				return null;
			}

		} catch (HibernateException e) {
			throw new ModelException("Error obteniendo copia de citologia :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error obteniendo copia de citologia:" + e.getMessage(), e);
		}

	}

	/**
	 * @param consulta
	 * @return
	 * @throws ModelException
	 */
	public Cncitologi getUsuarioCitologia(Chconsulta consulta) throws ModelException {
		List<Cncitologi> resultList = null;
		List parametros = new ArrayList();

		try {
			if (consulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select cnci from " + Cncitologi.class.getName() + " cnci  where cnci.ccilconcli = ?  ");
				parametros.add(consulta.getHcolnumero());
				resultList = (List<Cncitologi>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

				return null;
			} else {
				return null;
			}

		} catch (HibernateException e) {
			throw new ModelException("Error Obteniendo Usuario Citologia :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Obteniendo Usuario Citologia:" + e.getMessage(), e);
		}

	}

	/**
	 * @return
	 * @throws ModelException
	 */
	public

			Integer getConsecutivoCitologia(Session session) throws ModelException {
		Integer consecutivo = null;
		consecutivo = null;
		try {

			BigDecimal secuenciaActual = (BigDecimal) session
					.createQuery("SELECT cpco.connnumero FROM clinico.Cpconsec cpco where cpco.conncodigo = "
							+ IConstantes.CCONCITO + " FOR UPDATE nowait")
					.uniqueResult();

			if (secuenciaActual != null) {
				consecutivo = secuenciaActual.intValue();
			}

			session.createQuery("update clinico.Cpconsec set connnumero = connnumero + 1  where conncodigo = "
					+ IConstantes.CCONCITO + " ").executeUpdate();

		} catch (HibernateException e) {
			throw new ModelException("Error Obteniendo Consecutivo Citologia:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Obteniendo Consecutivo Citologia:" + e.getMessage(), e);
		}
		return consecutivo;

	}

	/**
	 * @param usuario
	 * @throws ModelException
	 */
	public

			void updateUsuario(Chusuario usuario) throws ModelException {

		if (usuario != null) {
			usuario.setHusdfecregistr(new Date());
		}

		try {
			if (usuario != null) {
				this.getHibernateTemplate().saveOrUpdate(usuario);
			}

		} catch (HibernateException e) {
			throw new ModelException("Error Modificando Usuario:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Modificando Usuario:" + e.getMessage(), e);
		}
	}

	/**
	 * @param numeroConsulta
	 * @return
	 * @throws ModelException
	 */
	public Chconsulta getConsultaActual(final Long numeroConsulta) throws ModelException {
		Chconsulta pis = (Chconsulta) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				if (numeroConsulta != null) {
					StringBuffer sb = new StringBuffer();
					sb.append(" select chco from " + Chconsulta.class.getName()
							+ " chco  where chco.hcolnumero = :numeroConsulta   ");

					String hql = sb.toString();

					Query query = session.createQuery(hql);
					query.setParameter("numeroConsulta", numeroConsulta);
					Chconsulta pis;
					pis = (Chconsulta) query.uniqueResult();

					if (pis != null) {
						Chusuario usu = pis.getHcolusuario();
						Hibernate.initialize(usu);
						Cpservicio servicio = pis.getHcocservicio();
						Hibernate.initialize(servicio);
						Set impresion = pis.getChimprdiags();
						Hibernate.initialize(impresion);
					}

					return pis;
				}
				return null;
			}
		});
		return pis;
	}

	/**
	 * @param numeroUsuario
	 * @return
	 * @throws ModelException
	 */
	public List<Chconsulta> getConsultaPorId(final Long numeroUsuario) throws ModelException {
		List<Chconsulta> pis = (List<Chconsulta>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				StringBuffer sb = new StringBuffer();
				sb.append("SELECT c from ");
				sb.append(Chconsulta.class.getName()).append(" c ");
				sb.append("WHERE c.hcoeetapa = 'CE' and c.hcolusuario.huslnumero =  ").append(numeroUsuario)
						.append(" order by  c.hcodfecregistr asc ");

				String hql = sb.toString();

				Query query = session.createQuery(hql);
				List<Chconsulta> pis;
				pis = query.list();

				for (Chconsulta co : pis) {
					Set antecedentes = co.getChantecegenes();
					Hibernate.initialize(antecedentes);

					Chusuario usu = co.getHcolusuario();
					Hibernate.initialize(usu);

				}

				return pis;
			}
		});
		return pis;
	}

	/**
	 * @param procedimiento
	 * @throws ModelException
	 */
	public void saveProcedimientoConsultorio(Chproceconsu procedimiento) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(procedimiento);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Procedimientos de Consultorio:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Procedimientos de Consultorio:" + e.getMessage(), e);
		}
	}

	/**
	 * @param consclin
	 * @return
	 * @throws ModelException
	 */
	public Chproceconsu getProcedimientoConsultorio(Cnconsclin consclin) throws ModelException {
		List<Chproceconsu> resultList = null;
		List parametros = new ArrayList();

		try {
			if (consclin != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chpc from " + Chproceconsu.class.getName()
						+ " chpc  where chpc.id.hpclconsulta = ? AND chpc.id.hpcctiposervi = ? ");
				parametros.add(consclin.getCconnumero());
				parametros.add(IConstantes.TIPO_CONSULTA);

				resultList = (List<Chproceconsu>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Procedimiento Consultorio:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Procedimiento Consultorio:" + e.getMessage(), e);
		}

	}

	/**
	 * @see ClinicoDaoImp#saveEncuestaViolencia(encuesta) Salvar o modificar uan
	 *      encuesta de violencia
	 */
	public void saveEncuestaViolencia(Chviolencia encuesta) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(encuesta);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Encuesta de Violencia:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Encuesta de Violencia:" + e.getMessage(), e);
		}
	}

	/**
	 * @see ClinicoDaoImp#saveMotivoConsulta(motivo) Salvar o modificar el motivo de
	 *      consulta
	 */
	public void saveMotivoConsulta(final Chmotivocon motivo, final Chrevissiste revision) throws ModelException {

		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {

					if (motivo != null) {
						session.saveOrUpdate(motivo);
					}

					if (revision != null) {
						session.saveOrUpdate(revision);
					}

					return motivo;

				}

			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		}
	}

	/**
	 * @see ClinicoDaoImp#saveConsulta(motivo) Salvar o modificar la consulta
	 */
	public void saveConsulta(Chconsulta consulta) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(consulta);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Consulta:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando  Consulta :" + e.getMessage(), e);
		}
	}

	/**
	 * @return
	 * @throws ModelException
	 */
	public List getEntidadAdm() throws ModelException {
		List resultList = null;
		try {
			resultList = this.getSession()
					.createQuery("SELECT c " + "FROM Cpentidadadm AS c " + "ORDER BY c.ceacnombre ").list();
		} catch (HibernateException e) {
			throw new ModelException("Error consultando entidad administradora:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando entidad administradora:" + e.getMessage(), e);
		}
		return resultList;
	}

	/**
	 * @return
	 * @throws ModelException
	 */
	public Cpempresa getEmpresa(Integer codigo) throws ModelException {
		List<Cpempresa> resultList = null;
		List parametros = new ArrayList();

		try {
			if (codigo != null && !codigo.equals("")) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select cpem from " + Cpempresa.class.getName() + " cpem  where cpem.cemncodigo = ? ");
				parametros.add(codigo);

				resultList = (List<Cpempresa>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Empresa:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Empresa:" + e.getMessage(), e);
		}

	}

	/**
	 * @param ceaccodigo
	 * @return
	 * @throws ModelException
	 */
	public Cpentidadadm getAseguradoraPorCodigo(String ceaccodigo) throws ModelException {
		List<Cpentidadadm> resultList = null;
		List parametros = new ArrayList();

		try {
			if (ceaccodigo != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select cpea from " + Cpentidadadm.class.getName() + " cpea  where cpea.ceaccodigo = ? ");
				parametros.add(ceaccodigo);

				resultList = (List<Cpentidadadm>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Entidad Administradora:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Entidad Administradora:" + e.getMessage(), e);
		}

	}

	/**
	 * @param cocncodigo
	 * @return
	 * @throws ModelException
	 */
	public Cpocupacio getOcupacionPorCodigo(Integer cocncodigo) throws ModelException {
		List<Cpocupacio> resultList = null;
		List parametros = new ArrayList();

		try {
			if (cocncodigo != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select cpoc from " + Cpocupacio.class.getName() + " cpoc  where cpoc.cocncodigo = ? ");
				parametros.add(cocncodigo);

				resultList = (List<Cpocupacio>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Ocupacion:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Ocupacion:" + e.getMessage(), e);
		}

	}

	/**
	 * @param hvrcinterno
	 * @return
	 * @throws ModelException
	 */
	public List<Chviolenremi> getRemisionViolencia(String hvrcinterno) throws ModelException {
		List<Chviolenremi> resultList = null;
		List parametros = new ArrayList();

		try {
			if (hvrcinterno != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chvr from " + Chviolenremi.class.getName()
						+ " chvr  where chvr.hvrcinterno = ? and chvr.hvrcestado = 'VG' ");
				parametros.add(hvrcinterno);

				resultList = (List<Chviolenremi>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList;
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Remisiones por violencia:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Remisiones por Violencia:" + e.getMessage(), e);
		}

	}

	/**
	 * @return
	 * @throws ModelException
	 */
	public List getDepartamentos() throws ModelException {
		List resultList = null;
		try {
			resultList = this.getSession()
					.createQuery("SELECT c " + "FROM Cpdepadane AS c " + "ORDER BY c.cddcdescri ").list();
		} catch (HibernateException e) {
			throw new ModelException("Error consultando departamentos:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando departamentos:" + e.getMessage(), e);
		}
		return resultList;
	}

	/**
	 * @param idDepto
	 * @return
	 * @throws ModelException
	 */
	public List getMunicipios(Integer idDepto) throws ModelException {
		List resultList = null;
		try {

			StringBuffer sb = new StringBuffer();
			sb.append(" select c from Cpmunidane as c ");
			sb.append(" where c.id.cmdncoddep = " + idDepto);
			sb.append(" ORDER BY c.cmdcnommun ");
			resultList = this.getHibernateTemplate().find(sb.toString());

		} catch (HibernateException e) {
			throw new ModelException("Error consultando municipios:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando municipios:" + e.getMessage(), e);
		}
		return resultList;
	}

	/**
	 * @return
	 * @throws ModelException
	 */
	public List getOcupaciones() throws ModelException {
		List resultList = null;
		try {
			resultList = this.getSession()
					.createQuery(
							"SELECT c " + "FROM Cpocupacio AS c where c.coccestado = 'VG' " + "ORDER BY c.coccdescri ")
					.list();
		} catch (HibernateException e) {
			throw new ModelException("Error consultando ocupaciones:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando ocupaciones:" + e.getMessage(), e);
		}
		return resultList;
	}

	/**
	 * @param cocncodigo
	 * @return
	 */
	public String getDescripcionOcupacion(Integer cocncodigo) throws ModelException {
		List<String> resultList = null;
		List parametros = new ArrayList();
		try {
			if (cocncodigo != null) {
				StringBuffer sb = new StringBuffer();
				sb.append("select cpoc.coccdescri FROM " + Cpocupacio.class.getName()
						+ " cpoc where cpoc.cocncodigo = ? ");
				parametros.add(cocncodigo);

				resultList = (List<String>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Descripcion Ocupacion:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Descripcion Ocupacion:" + e.getMessage(), e);
		}

	}

	/**
	 * @return
	 * @throws ModelException
	 */
	public List getTipoIdentificacion() throws ModelException {
		List resultList = null;
		try {
			resultList = this.getSession()
					.createQuery("SELECT c " + "FROM Cptipoiden AS c " + "ORDER BY c.cticdescri ").list();
		} catch (HibernateException e) {
			throw new ModelException("Error consultando tipo identificaci�n:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando tipo identificaci�n:" + e.getMessage(), e);
		}
		return resultList;
	}

	/**
	 * @return
	 * @throws ModelException
	 */
	public List getMetodoPlanificacion() throws ModelException {
		List resultList = null;
		try {
			resultList = this.getSession().createQuery("SELECT m " + "FROM Chmetodoplan AS m "
					+ "WHERE m.hmpcestado = 'VG' " + "ORDER BY m.hmpcdescripcio ").list();
		} catch (HibernateException e) {
			throw new ModelException("Error consultando Metodo  de planificacion:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Metodo  de planificacion:" + e.getMessage(), e);
		}
		return resultList;
	}

	/**
	 * @return
	 * @throws ModelException
	 */
	public List<Chexamelabor> getExamenesLaboratorioAll() throws ModelException {
		List resultList = null;
		try {
			resultList = this.getSession().createQuery("SELECT x " + "FROM Chexamelabor AS x ").list();

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Examenes de Laboratorio:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Examenes de Laboratorio:" + e.getMessage(), e);
		}
		return resultList;
	}

	/**
	 * @see ClinicoDaoImp#saveAntecedente(antecedente) Salvar o modificar los
	 *      antecedentes Generales
	 */
	public

			void saveAntecedente(Chantecegene antecedente) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(antecedente);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Antecedentes:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Antecedentes:" + e.getMessage(), e);
		}

	}

	/**
	 * @see ClinicoDaoImp#saveAntecedenteGineco(antecedente) Salvar o modificar los
	 *      antecedentes Ginecologicos
	 */
	public

			void saveAntecedenteGineco(Chantegineco antecedente) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(antecedente);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Antecedentes Ginecologicos:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Antecedentes Ginecologicos :" + e.getMessage(), e);
		}
	}

	/**
	 * @param antecedente
	 * @throws ModelException
	 */
	public void saveAantecedentesMama(Chantecemama antecedente) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(antecedente);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Antecedentes de Mama :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Antecedentes de Mama :" + e.getMessage(), e);
		}
	}

	/**
	 * @see ClinicoDaoImp#saveExamenFisico(examen) Salvar o modificar el Examen
	 *      Fisico
	 */
	public void saveExamenFisico(Chexamfisico examen) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(examen);
		} catch (HibernateException e) {
			throw new ModelException("Error insertando examen:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error insertando examen:" + e.getMessage(), e);
		}
	}

	/**
	 * @see ClinicoDaoImp#saveExamenFisicoAnestesia(examen) Salvar o modificar el
	 *      Examen Fisico
	 */
	public void saveExamenFisicoAnestesia(Chexafisane examen) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(examen);
		} catch (HibernateException e) {
			throw new ModelException("Error insertando examen Fisico Preanestesia:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error insertando examen Fisico Preanestesia:" + e.getMessage(), e);
		}
	}

	/**
	 * @see ClinicoDaoImp#saveFormula(formula) Salvar o modificar la formula Medica
	 */
	public void saveFormula(Chformulamed formula) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(formula);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Formula Medica:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Formula Medica :" + e.getMessage(), e);
		}
	}

	/**
	 * @see ClinicoDaoImp#saveImpresion(impresion) Salvar o modificar la Impresion
	 *      Diagnostica
	 */
	public void saveImpresion(Chimprdiag impresion) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(impresion);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Impresion Diagnostica:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Impresion Diagnostica :" + e.getMessage(), e);
		}
	}

	/**
	 * @see ClinicoDaoImp#saveIncapacidad(incapacidad) Salvar o modificar la
	 *      incapacidad medica
	 */
	public void saveIncapacidad(Chincapacida incapacidad) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(incapacidad);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Incapcidad Medica:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Incapacidad Medica :" + e.getMessage(), e);
		}
	}

	/**
	 * @see ClinicoDaoImp#saveRemision(remision) Salvar o modificar la remision
	 */
	public void saveRemision(Chremision remision) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(remision);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Remision" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Remision :" + e.getMessage(), e);
		}
	}

	/**
	 * @param idMedico
	 * @return
	 * @throws ModelException
	 */
	public List getConsultas(String idMedico) throws ModelException {
		List resultList = null;
		try {

			resultList = this.getSession().createQuery("select c from Cnconsclin as c where c. ").list();
		} catch (HibernateException e) {
			throw new ModelException("Error consultando ciudades:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando ciudades:" + e.getMessage(), e);
		}
		return resultList;
	}

	/**
	 * @param dia
	 * @return
	 * @throws ModelException
	 */
	public List<Cnconsclin> getConsultasDia(final Date dia, final Integer codclinica, final BigDecimal idMedico)
			throws ModelException {
		List<Cnconsclin> pis = (List<Cnconsclin>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {
				String HORA_INICIAL = " 00:00";
				String HORA_FINAL = " 23:59";

				SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
				String fechaI = dateFormat.format(dia) + HORA_INICIAL;
				String fechaF = dateFormat.format(dia) + HORA_FINAL;

				Chprioxmedi wprioaux = null;
				boolean wprior = false;

				// VERIFICAMOS QUE EL USUARIO ATIENDE SOLO CONSULTAS PRIORITARIAS
				StringBuffer sb0 = new StringBuffer();
				sb0.append("SELECT chpm from ");
				sb0.append(Chprioxmedi.class.getName()).append(" chpm ");
				sb0.append("WHERE chpm.id.hpmncodigprofe = ? ");
				sb0.append(" AND chpm.id.hpmncodigclini = ? ");

				String hql1 = sb0.toString();

				Query query0 = session.createQuery(hql1);
				query0.setParameter(0, idMedico);
				query0.setParameter(1, codclinica);

				wprioaux = (Chprioxmedi) query0.uniqueResult();

				if (wprioaux != null) {
					wprior = true;
				}

				StringBuffer sb = new StringBuffer();
				sb.append("SELECT cncl from ");
				sb.append(Cnconsclin.class.getName()).append(" cncl ");
				sb.append(" WHERE cncl.ccocestado = 'VG' AND cncl.ccocetapa IN ('ES','EC')");
				sb.append(
						" AND (cncl.ccodfeccon BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))");
				sb.append(" AND cncl.cconclinic = :codclinica ");
				sb.append(" AND cncl.ccontipdoc not in (30) ");
				sb.append(" AND cncl.ccocservic.csvccodigo not in ('S898001.0','S898001.1','S898001.4')");
				sb.append(" AND cncl.ccocservic.csvntiphis not in (0,10,25,60,68)");
				sb.append(" AND cncl.ccocservic.csvntipcon  in (1,3,4,5,12,98,99) ");
				sb.append(
						" AND cncl.cconnumero not in (select cnpc.id.cpnnconcli from Cnprofxcon cnpc where cnpc.id.cpnnconcli =  cncl.cconnumero and cnpc.cpnnclinic = :codclinica and cnpc.cpncestado!= 'XX'  ) ");
				sb.append(
						" AND cncl.cconnumero not in (select chco.hcolconsuclini from Chconsulta chco where chco.hcolconsuclini =  cncl.cconnumero and chco.hconclinica = :codclinica and chco.hcoeetapa = 'CE') ");
				sb.append(" AND cncl.ccocservic.csvccodigo in  (SELECT cptp.id.ctacservic from ");
				sb.append(Cptarxprof.class.getName()).append(
						" cptp where cptp.id.ctanprofes = :idMedico and cptp.id.ctanclinic  = :codclinica and cptp.ctacestado = :tarxEstado ");
				if (wprior) {
					sb.append(" AND  cptp.ctacpriori  = 'S'  ");
				}
				sb.append(" ) ");

				sb.append(" order by cncl.ccothorcon asc  ");

				String hql = sb.toString();

				Query query = session.createQuery(hql);

				query.setParameter("fechaI", fechaI);
				query.setParameter("fechaF", fechaF);
				query.setParameter("codclinica", codclinica);
				query.setParameter("idMedico", idMedico);
				query.setParameter("codclinica", codclinica);
				query.setParameter("tarxEstado", IConstantes.ESTADO_VIGENTE);

				List<Cnconsclin> pis;
				pis = query.list();

				StringBuffer sb2 = new StringBuffer();
				sb2.append("SELECT cncl from ");
				sb2.append(Cnconsclin.class.getName()).append(" cncl ");
				sb2.append(" WHERE cncl.ccocestado = 'VG' AND cncl.ccocetapa IN ('ES','EC')");
				sb2.append(
						" AND (cncl.ccodfeccon BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))");
				sb2.append(" AND cncl.cconclinic = :codclinica ");
				sb2.append(" AND cncl.ccontipdoc not in (30) ");
				sb2.append(" AND cncl.ccocservic.csvccodigo not in ('S898001.0','S898001.1','S898001.4')");
				sb2.append(" AND cncl.ccocservic.csvntiphis  in (60)");
				sb2.append(" AND cncl.ccocservic.csvntipcon  in (1,3,4,5,12,98,99) ");
				sb2.append(" AND cncl.cconnumdoc  in (select cnco1.cconnumdoc from  ");
				sb2.append(Cnconsclin.class.getName()).append(" cnco1 ");
				sb2.append(" WHERE cnco1.ccocestado = 'VG' AND cnco1.ccocetapa IN ('ES','EC')");
				sb2.append(" AND cnco1.ccocservic.csvntiphis  in (26)");
				sb2.append(
						" AND (cnco1.ccodfeccon BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi')))");
				sb2.append(
						" AND cncl.cconnumero not in (select cnpc.id.cpnnconcli from Cnprofxcon cnpc where cnpc.id.cpnnconcli =  cncl.cconnumero and cnpc.cpnnclinic = :codclinica and cnpc.cpncestado!= 'XX'  ) ");
				sb2.append(
						" AND cncl.cconnumero not in (select chco.hcolconsuclini from Chconsulta chco where chco.hcolconsuclini =  cncl.cconnumero and chco.hconclinica = :codclinica and chco.hcoeetapa = 'CE') ");
				sb2.append(" AND cncl.ccocservic.csvccodigo in  (SELECT cptp.id.ctacservic from ");
				sb2.append(Cptarxprof.class.getName()).append(
						" cptp where cptp.id.ctanprofes = :idMedico and cptp.id.ctanclinic  = :codclinica and cptp.ctacestado = :tarxEstado ");

				if (wprior) {
					sb.append(" AND  cptp.ctacpriori  = 'S'  ");
				}
				sb2.append(" ) ");

				sb2.append(" order by cncl.ccothorcon asc  ");

				String hq2 = sb2.toString();

				Query query2 = session.createQuery(hq2);

				query2.setParameter("fechaI", fechaI);
				query2.setParameter("fechaF", fechaF);
				query2.setParameter("codclinica", codclinica);
				query2.setParameter("idMedico", idMedico);
				query2.setParameter("codclinica", codclinica);
				query2.setParameter("tarxEstado", IConstantes.ESTADO_VIGENTE);

				List<Cnconsclin> pis2;
				pis2 = query2.list();
				for (Cnconsclin pi : pis) {
					Cpservicio servicio = pi.getCcocservic();
					Hibernate.initialize(servicio);
					Cptipodocu tipo = pi.getCcontipdoc();
					Hibernate.initialize(tipo);

				}
				if (pis != null && !pis.isEmpty() && pis2 != null && !pis2.isEmpty()) {
					for (Cnconsclin pi : pis2) {
						Cpservicio servicio = pi.getCcocservic();
						Hibernate.initialize(servicio);
						Cptipodocu tipo = pi.getCcontipdoc();
						Hibernate.initialize(tipo);
					}
					pis.addAll(pis2);
				}

				return pis;
			}
		});
		return pis;
	}

	/**
	 * @param dia
	 * @return
	 * @throws ModelException
	 */
	public List<Cnconsclin> getConsultasDiaLaboratorio(final Date dia, final Integer codclinica,
			final BigDecimal idMedico, final String numeroIdentificacion) throws ModelException {
		List<Cnconsclin> pis = (List<Cnconsclin>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				String HORA_INICIAL = " 00:00";
				String HORA_FINAL = " 23:59";

				SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
				String fechaI = dateFormat.format(dia) + HORA_INICIAL;
				String fechaF = dateFormat.format(dia) + HORA_FINAL;

				if (numeroIdentificacion != null && !numeroIdentificacion.equals("")) {

					Date fechaInicial = null;
					Calendar cal = Calendar.getInstance();
					cal.setTime(dia);
					cal.add(Calendar.MONTH, -3);
					fechaInicial = cal.getTime();
					fechaI = dateFormat.format(fechaInicial) + HORA_INICIAL;
				}

				StringBuffer sb = new StringBuffer();
				sb.append(
						"SELECT DISTINCT cncl.cconclinic,cncl.ccodfeccon,cncl.ccoctipide,cncl.ccoanumide,cncl.ccocprinom,cncl.ccocsegnom,cncl.ccocpriape,cncl.ccocsegape,cncl.cconnumdoc,cncl.cconcontra,cncl.ccolusuario.huslnumero, cncl.ccontipdoc.ctdnnumero  from ");
				sb.append(Cnconsclin.class.getName()).append(" cncl ");
				sb.append(" WHERE cncl.ccocestado = 'VG' AND cncl.ccocetapa IN ('ES','EC')");
				sb.append(
						" AND (cncl.ccodfeccon BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))");
				sb.append(" AND cncl.cconclinic = :codclinica ");
				sb.append(" AND cncl.ccontipdoc not in (30) ");
				if (numeroIdentificacion != null) {
					sb.append(" AND cncl.ccoanumide = :numIden  ");
				}

				sb.append(" AND cncl.ccocservic.csvngrupo = 81  and cncl.ccocservic.csvnsubgru = 4    ");
				sb.append(
						" group by  cncl.cconclinic,cncl.ccodfeccon,cncl.ccoctipide,cncl.ccoanumide,cncl.ccocprinom,cncl.ccocsegnom,cncl.ccocpriape,cncl.ccocsegape,cncl.cconnumdoc,cncl.cconcontra,cncl.ccolusuario.huslnumero, cncl.ccontipdoc.ctdnnumero    ");

				String hql = sb.toString();

				Query query = session.createQuery(hql);

				query.setParameter("fechaI", fechaI);
				query.setParameter("fechaF", fechaF);
				query.setParameter("codclinica", codclinica);

				if (numeroIdentificacion != null && !numeroIdentificacion.equals("")) {
					query.setParameter("numIden", numeroIdentificacion);
				}

				List<Object[]> lstaux;
				lstaux = query.list();
				List<Cnconsclin> pis = new ArrayList();

				if (lstaux != null) {
					for (Object[] ax : lstaux) {
						Chusuario usuarioAux;
						usuarioAux = new Chusuario();
						Cnconsclin consulta = new Cnconsclin();
						Cptipodocu tipoDocu = new Cptipodocu();
						consulta.setCconclinic((Integer) ax[0]);
						consulta.setCconsalesp(0);
						consulta.setCcodfeccon((Date) ax[1]);
						consulta.setCcoctipide((String) ax[2]);
						consulta.setCcoanumide((BigDecimal) ax[3]);
						consulta.setCcocprinom((String) ax[4]);
						consulta.setCcocsegnom((String) ax[5]);
						consulta.setCcocpriape((String) ax[6]);
						consulta.setCcocsegape((String) ax[7]);
						consulta.setCconnumdoc((BigDecimal) ax[8]);
						consulta.setCconcontra((Integer) ax[9]);
						usuarioAux.setHuslnumero((Long) ax[10]);
						consulta.setCcolusuario(usuarioAux);
						tipoDocu.setCtdnnumero((Integer) ax[11]);
						consulta.setCcontipdoc(tipoDocu);
						pis.add(consulta);
					}
				}

				return pis;
			}
		});
		return pis;
	}

	/**
	 * @param dia
	 * @param codclinica
	 * @param idMedico
	 * @return
	 * @throws ModelException
	 */
	public List<Cnconsclin> getMisConsultasDia(final Date dia, final Integer codclinica, final BigDecimal idMedico)
			throws ModelException {
		List<Cnconsclin> pis = (List<Cnconsclin>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {
				String HORA_INICIAL = " 00:00";
				String HORA_FINAL = " 23:59";

				SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
				String fechaI = dateFormat.format(dia) + HORA_INICIAL;
				String fechaF = dateFormat.format(dia) + HORA_FINAL;

				StringBuffer sb = new StringBuffer();
				sb.append("SELECT cncl from ");
				sb.append(Cnconsclin.class.getName()).append(" cncl ");
				sb.append(" WHERE cncl.ccocestado = 'VG' AND cncl.ccocetapa IN ('ES','EC')");
				sb.append(
						" AND (cncl.ccodfeccon BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))");
				sb.append(" AND cncl.ccontipdoc not in (30) ");
				sb.append(" AND cncl.cconclinic = :codclinica ");
				sb.append(" AND cncl.ccocservic.csvccodigo not in ('S898001.0','S898001.1','S898001.4') ");
				sb.append(" AND cncl.ccocservic.csvntiphis not in (0,10,25,60,58,59)");
				sb.append(
						" AND cncl.cconnumero  in (select cnpc.id.cpnnconcli from Cnprofxcon cnpc where cnpc.id.cpnnconcli =  cncl.cconnumero and cnpc.cpnnclinic = :codclinica and cnpc.id.cpnnprofes = :idMedico AND cnpc.cpncestado != 'XX' ) ");
				sb.append(
						" AND cncl.cconnumero not in (select chco.hcolconsuclini from Chconsulta chco where chco.hcolconsuclini =  cncl.cconnumero and chco.hconclinica = :codclinica and chco.hcoeetapa = 'CE') ");
				sb.append(" AND cncl.ccocservic.csvccodigo in  (SELECT cptp.id.ctacservic from ");
				sb.append(Cptarxprof.class.getName()).append(
						" cptp where cptp.id.ctanprofes = :idMedico and cptp.id.ctanclinic  = :codclinica and cptp.ctacestado = :tarxEstado ");
				sb.append(" ) ");
				sb.append(" order by cncl.ccothorcon asc  ");
				String hql = sb.toString();

				Query query = session.createQuery(hql);

				query.setParameter("fechaI", fechaI);
				query.setParameter("fechaF", fechaF);
				query.setParameter("codclinica", codclinica);
				query.setParameter("idMedico", idMedico);
				query.setParameter("codclinica", codclinica);
				query.setParameter("tarxEstado", IConstantes.ESTADO_VIGENTE);

				List<Cnconsclin> pis;
				pis = query.list();

				for (Cnconsclin pi : pis) {
					Cpservicio servicio = pi.getCcocservic();
					Hibernate.initialize(servicio);
					Cptipodocu tipo = pi.getCcontipdoc();
					Hibernate.initialize(tipo);

					Chusuario ccolusuario = pi.getCcolusuario();
					Hibernate.initialize(ccolusuario);

				}

				StringBuffer sb2 = new StringBuffer();
				sb2.append("SELECT cncl from ");
				sb2.append(Cnconsclin.class.getName()).append(" cncl ");
				sb2.append(" WHERE cncl.ccocestado = 'VG' AND cncl.ccocetapa IN ('ES','EC')");
				sb2.append(
						" AND (cncl.ccodfeccon BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))");
				sb2.append(" AND cncl.cconclinic = :codclinica ");
				sb2.append(" AND cncl.ccontipdoc not in (30) ");
				sb2.append(" AND cncl.ccocservic.csvccodigo not in ('S898001.0','S898001.1','S898001.4')");
				sb2.append(" AND cncl.ccocservic.csvntiphis  in (60)");
				sb2.append(" AND cncl.cconnumdoc  in (select cnco1.cconnumdoc from ");
				sb2.append(Cnconsclin.class.getName()).append(" cnco1 ");
				sb2.append(" WHERE cnco1.ccocestado = 'VG' AND cnco1.ccocetapa IN ('ES','EC')");
				sb2.append(" AND cnco1.ccocservic.csvntiphis  in (26)");
				sb2.append(
						" AND (cnco1.ccodfeccon BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi')))");
				sb2.append(
						" AND cncl.cconnumero  in (select cnpc.id.cpnnconcli from Cnprofxcon cnpc where cnpc.id.cpnnconcli =  cncl.cconnumero and cnpc.cpnnclinic = :codclinica and cnpc.cpncestado!= 'XX'  ) ");
				sb2.append(
						" AND cncl.cconnumero not in (select chco.hcolconsuclini from Chconsulta chco where chco.hcolconsuclini =  cncl.cconnumero and chco.hconclinica = :codclinica and chco.hcoeetapa = 'CE') ");
				sb2.append(" AND cncl.ccocservic.csvccodigo in  (SELECT cptp.id.ctacservic from ");
				sb2.append(Cptarxprof.class.getName()).append(
						" cptp where cptp.id.ctanprofes = :idMedico and cptp.id.ctanclinic  = :codclinica and cptp.ctacestado = :tarxEstado ");

				sb2.append(" ) ");

				sb2.append(" order by cncl.ccothorcon asc  ");

				String hq2 = sb2.toString();

				Query query2 = session.createQuery(hq2);

				query2.setParameter("fechaI", fechaI);
				query2.setParameter("fechaF", fechaF);
				query2.setParameter("codclinica", codclinica);
				query2.setParameter("idMedico", idMedico);
				query2.setParameter("codclinica", codclinica);
				query2.setParameter("tarxEstado", IConstantes.ESTADO_VIGENTE);

				List<Cnconsclin> pis2;
				pis2 = query2.list();
				if (pis != null && !pis.isEmpty() && pis2 != null && !pis2.isEmpty()) {
					for (Cnconsclin pi : pis2) {
						Cpservicio servicio = pi.getCcocservic();
						Hibernate.initialize(servicio);
						Cptipodocu tipo = pi.getCcontipdoc();
						Hibernate.initialize(tipo);

						Chusuario ccolusuario = pi.getCcolusuario();
						Hibernate.initialize(ccolusuario);
					}
					pis.addAll(pis2);
				}

				return pis;
			}
		});
		return pis;
	}

	/**
	 * @param dia
	 * @param codclinica
	 * @param idMedico
	 * @return
	 * @throws ModelException
	 */
	public List<Cnconsclin> getConsultasDiaEnfermeria(final Date dia, final Integer codclinica,
			final BigDecimal idMedico, final String numIden) throws ModelException {
		List<Cnconsclin> pis = (List<Cnconsclin>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {
				String HORA_INICIAL = " 00:00";
				String HORA_FINAL = " 23:59";

				SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
				String fechaI = dateFormat.format(dia) + HORA_INICIAL;
				String fechaF = dateFormat.format(dia) + HORA_FINAL;

				if (numIden != null) {

					Date fechaInicial = null;
					Calendar cal = Calendar.getInstance();
					cal.setTime(dia);
					cal.add(Calendar.MONTH, -3);
					fechaInicial = cal.getTime();
					fechaI = dateFormat.format(fechaInicial) + HORA_INICIAL;
				}

				Chprioxmedi wprioaux = null;
				boolean wprior = false;

				// VERIFICAMOS QUE EL USUARIO ATIENDE SOLO CONSULTAS PRIORITARIAS
				StringBuffer sb0 = new StringBuffer();
				sb0.append("SELECT chpm from ");
				sb0.append(Chprioxmedi.class.getName()).append(" chpm ");
				sb0.append("WHERE chpm.id.hpmncodigprofe = ? ");
				sb0.append(" AND chpm.id.hpmncodigclini = ? ");

				String hql1 = sb0.toString();

				Query query0 = session.createQuery(hql1);
				query0.setParameter(0, idMedico);
				query0.setParameter(1, codclinica);

				wprioaux = (Chprioxmedi) query0.uniqueResult();

				if (wprioaux != null) {
					wprior = true;
				}

				StringBuffer sb = new StringBuffer();
				sb.append("SELECT cncl from ");
				sb.append(Cnconsclin.class.getName()).append(" cncl ");
				sb.append(" WHERE cncl.ccocestado = 'VG' AND cncl.ccocetapa IN ('ES','EC')");
				sb.append(
						" AND (cncl.ccodfeccon BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))");
				if (numIden != null && !numIden.equals("")) {
					sb.append(" AND cncl.ccoanumide = :numIden ");
				}
				sb.append(" AND cncl.cconclinic = :codclinica ");
				sb.append(" AND cncl.ccontipdoc not in (30) ");
				// sb.append(" AND cncl.ccocservic.csvngrupo = 61 ");
				// sb.append(" AND cncl.ccocservic.csvnsubgru in (4,5) ");
				// sb.append(" AND cncl.ccocservic.csvccodigo not in
				// ('S898001.0','S898001.1','S898001.4') ");
				sb.append(" AND cncl.ccocservic.csvntipcon  in (1,3,4,5,12,98,99) ");
				sb.append(" AND cncl.ccocservic.csvntiphis  not in (10,34,35,42,44,45,46,60) ");
				sb.append(
						" AND cncl.cconnumero not in (select cnpc.id.cpnnconcli from Cnprofxcon cnpc where cnpc.id.cpnnconcli =  cncl.cconnumero and cnpc.cpnnclinic = :codclinica and cnpc.cpncestado!= 'XX'  ) ");
				sb.append(
						" AND cncl.cconnumero not in (select chco.hcolconsuclini from Chconsulta chco where chco.hcolconsuclini =  cncl.cconnumero and chco.hconclinica = :codclinica and chco.hcoeetapa = 'CE') ");
				sb.append(" AND cncl.ccocservic.csvccodigo in  (SELECT cptp.id.ctacservic from ");
				sb.append(Cptarxprof.class.getName()).append(
						" cptp where cptp.id.ctanprofes = :idMedico and cptp.id.ctanclinic  = :codclinica and cptp.ctacestado = :tarxEstado ");
				if (numIden != null) {
					sb.append(" AND cncl.ccoanumide = :numIden  ");
				}
				sb.append(" ) ");

				sb.append(" order by cncl.ccothorcon asc  ");

				String hql = sb.toString();

				Query query = session.createQuery(hql);
				if (numIden != null && !numIden.equals("")) {
					query.setParameter("numIden", numIden);
				}
				query.setParameter("fechaI", fechaI);
				query.setParameter("fechaF", fechaF);
				query.setParameter("codclinica", codclinica);
				query.setParameter("idMedico", idMedico);
				query.setParameter("codclinica", codclinica);
				query.setParameter("tarxEstado", IConstantes.ESTADO_VIGENTE);

				List<Cnconsclin> pis;
				pis = query.list();

				for (Cnconsclin pi : pis) {
					Cpservicio servicio = pi.getCcocservic();
					Hibernate.initialize(servicio);
					Cptipodocu tipo = pi.getCcontipdoc();
					Hibernate.initialize(tipo);

					Chusuario usuaaux = pi.getCcolusuario();
					Hibernate.initialize(usuaaux);

				}

				return pis;
			}
		});
		return pis;
	}

	/**
	 * @param dia
	 * @return
	 * @throws ModelException
	 */
	public List<Cnconsclin> getConsultasEnConsultorioDia(final Date dia, final Integer codclinica)
			throws ModelException {
		List<Cnconsclin> pis = (List<Cnconsclin>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				String HORA_INICIAL = " 00:00";
				String HORA_FINAL = " 23:59";

				SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
				String fechaI = dateFormat.format(dia) + HORA_INICIAL;
				String fechaF = dateFormat.format(dia) + HORA_FINAL;

				StringBuffer sb = new StringBuffer();
				sb.append("SELECT cncl from ");
				sb.append(Cnconsclin.class.getName()).append(" cncl ");
				sb.append("WHERE cncl.ccocestado = 'VG' AND cncl.ccocetapa IN ('EC')");
				sb.append(
						" AND (cncl.ccodfeccon BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))");
				sb.append(" AND cncl.cconclinic = :codclinica ");
				sb.append(" order by cncl.ccothorcon asc  ");

				String hql = sb.toString();

				Query query = session.createQuery(hql);

				query.setParameter("fechaI", fechaI);
				query.setParameter("fechaF", fechaF);
				query.setParameter("codclinica", codclinica);

				List<Cnconsclin> pis;
				pis = query.list();

				for (Cnconsclin pi : pis) {
					Cpservicio servicio = pi.getCcocservic();
					Hibernate.initialize(servicio);
					Cptipodocu tipo = pi.getCcontipdoc();
					Hibernate.initialize(tipo);

				}

				return pis;
			}
		});
		return pis;
	}

	/**
	 * @param dia
	 * @return
	 * @throws ModelException
	 */
	public List<Cnconsclin> getConsultasVacunacionDia(final Date dia, final Integer codclinica,
			final BigDecimal idMedico) throws ModelException {
		List<Cnconsclin> pis = (List<Cnconsclin>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				String HORA_INICIAL = " 00:00";
				String HORA_FINAL = " 23:59";

				SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
				String fechaI = dateFormat.format(dia) + HORA_INICIAL;
				String fechaF = dateFormat.format(dia) + HORA_FINAL;

				StringBuffer sb = new StringBuffer();
				sb.append("SELECT cncl from ");
				sb.append(Cnconsclin.class.getName()).append(" cncl ");

				sb.append("WHERE cncl.ccocestado = 'VG' AND cncl.ccocetapa IN ('ES','EC')");
				sb.append(
						" AND (cncl.ccodfeccon BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))");
				sb.append(" AND cncl.cconclinic = :codclinica ");
				sb.append(" AND cncl.ccocservic.csvntiphis in(41,23)  ");
				sb.append(" AND cncl.ccocservic.csvccodigo in  (SELECT cptp.id.ctacservic from ");
				sb.append(Cptarxprof.class.getName()).append(
						" cptp where cptp.id.ctanprofes = :idMedico and cptp.id.ctanclinic  = :codclinica and cptp.ctacestado = :tarxEstado ) ");

				sb.append(" order by cncl.ccothorcon asc  ");

				String hql = sb.toString();

				Query query = session.createQuery(hql);

				query.setParameter("fechaI", fechaI);
				query.setParameter("fechaF", fechaF);
				query.setParameter("codclinica", codclinica);
				/*
				 * query.setParameter("wvacunacervix", IConstantes.HISTORIA_CERVIX_VACUNACION);
				 * query.setParameter("wvacuna", IConstantes.HISTORIA_VACUNACION);
				 */
				query.setParameter("idMedico", idMedico);
				query.setParameter("tarxEstado", IConstantes.ESTADO_VIGENTE);

				List<Cnconsclin> pis;
				pis = query.list();

				for (Cnconsclin pi : pis) {
					Cpservicio servicio = pi.getCcocservic();
					Hibernate.initialize(servicio);
					Cptipodocu tipo = pi.getCcontipdoc();
					Hibernate.initialize(tipo);

				}

				return pis;
			}
		});
		return pis;
	}

	/**
	 * @param dia
	 * @return
	 * @throws ModelException
	 */
	public List<Cnconsclin> getConsultasEspermogramaDia(final Date dia, final Integer codclinica,
			final BigDecimal idMedico) throws ModelException {
		List<Cnconsclin> pis = (List<Cnconsclin>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				String HORA_INICIAL = " 00:00";
				String HORA_FINAL = " 23:59";

				SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
				String fechaI = dateFormat.format(dia) + HORA_INICIAL;
				String fechaF = dateFormat.format(dia) + HORA_FINAL;

				StringBuffer sb = new StringBuffer();
				sb.append("SELECT cncl from ");
				sb.append(Cnconsclin.class.getName()).append(" cncl ");

				sb.append("WHERE cncl.ccocestado = 'VG' AND cncl.ccocetapa IN ('ES','EC')");
				sb.append(
						" AND (cncl.ccodfeccon BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))");
				sb.append(" AND cncl.cconclinic = :codclinica ");
				sb.append(" AND cncl.ccocservic.csvntiphis in(42)  ");
				sb.append(" AND cncl.ccocservic.csvccodigo in  (SELECT cptp.id.ctacservic from ");
				sb.append(Cptarxprof.class.getName()).append(
						" cptp where cptp.id.ctanprofes = :idMedico and cptp.id.ctanclinic  = :codclinica and cptp.ctacestado = :tarxEstado ) ");

				sb.append(" order by cncl.ccothorcon asc  ");

				String hql = sb.toString();

				Query query = session.createQuery(hql);

				query.setParameter("fechaI", fechaI);
				query.setParameter("fechaF", fechaF);
				query.setParameter("codclinica", codclinica);
				/*
				 * query.setParameter("wvacunacervix", IConstantes.HISTORIA_CERVIX_VACUNACION);
				 * query.setParameter("wvacuna", IConstantes.HISTORIA_VACUNACION);
				 */
				query.setParameter("idMedico", idMedico);
				query.setParameter("tarxEstado", IConstantes.ESTADO_VIGENTE);

				List<Cnconsclin> pis;
				pis = query.list();

				for (Cnconsclin pi : pis) {
					Cpservicio servicio = pi.getCcocservic();
					Hibernate.initialize(servicio);
					Cptipodocu tipo = pi.getCcontipdoc();
					Hibernate.initialize(tipo);

				}

				return pis;
			}
		});
		return pis;
	}

	/**
	 * @param dia
	 * @return
	 * @throws ModelException
	 */
	public List<Cnconsclin> getConsultasMedicamentoDia(final Date dia, final Integer codclinica,
			final BigDecimal idMedico, final String numeroIden) throws ModelException {
		List<Cnconsclin> pis = (List<Cnconsclin>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				String HORA_INICIAL = " 00:00";
				String HORA_FINAL = " 23:59";

				Calendar fechaInic = Calendar.getInstance();
				fechaInic.set(Calendar.MONTH, -3);

				SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");

				String fechaI = dateFormat.format(dia) + HORA_INICIAL;
				String fechaF = dateFormat.format(dia) + HORA_FINAL;

				if (numeroIden != null) {
					fechaI = dateFormat.format(fechaInic.getTime()) + HORA_INICIAL;
				}

				StringBuffer sb = new StringBuffer();
				sb.append(
						"SELECT DISTINCT cncl.cconclinic,cncl.cconsalesp,cncl.ccodfeccon,cncl.ccoctipide,cncl.ccoanumide,cncl.ccocprinom,cncl.ccocsegnom,cncl.ccocpriape,cncl.ccocsegape,cncl.cconnumdoc,cncl.cconcontra,cncl.ccolusuario.huslnumero, cncl.ccontipdoc.ctdnnumero, cncl.ccocservic.csvntiphis  from ");
				sb.append(Cnconsclin.class.getName()).append(" cncl ");
				sb.append(" WHERE cncl.ccocestado = 'VG' AND cncl.ccocetapa IN ('ES','EC')");
				if (numeroIden != null) {
					sb.append(" AND cncl.ccoanumide = :wnumide ");
				}
				sb.append(
						" AND (cncl.ccodfeccon BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))");
				sb.append(" AND cncl.cconclinic = :codclinica ");
				sb.append(" AND cncl.ccontipdoc not in (30) ");
				sb.append(" AND cncl.ccocservic.csvntiphis in (40, 41)     ");
				sb.append(
						" group by  cncl.cconclinic,cncl.cconsalesp,cncl.ccodfeccon,cncl.ccoctipide,cncl.ccoanumide,cncl.ccocprinom,cncl.ccocsegnom,cncl.ccocpriape,cncl.ccocsegape,cncl.cconnumdoc,cncl.cconcontra,cncl.ccolusuario.huslnumero, cncl.ccontipdoc.ctdnnumero, cncl.ccocservic.csvntiphis      ");
				sb.append(" order by cncl.cconnumdoc asc ");
				String hql = sb.toString();

				Query query = session.createQuery(hql);

				query.setParameter("fechaI", fechaI);
				query.setParameter("fechaF", fechaF);
				query.setParameter("codclinica", codclinica);

				if (numeroIden != null) {
					query.setParameter("wnumide", numeroIden);
				}

				List<Object[]> lstaux;
				lstaux = query.list();
				List<Cnconsclin> pis = new ArrayList();

				if (lstaux != null) {
					for (Object[] ax : lstaux) {
						Chusuario usuarioAux;
						usuarioAux = new Chusuario();
						Cnconsclin consulta = new Cnconsclin();
						Cptipodocu tipoDocu = new Cptipodocu();
						consulta.setCconclinic((Integer) ax[0]);
						consulta.setCconsalesp((Integer) ax[1]);
						consulta.setCcodfeccon((Date) ax[2]);
						consulta.setCcoctipide((String) ax[3]);
						consulta.setCcoanumide((BigDecimal) ax[4]);
						consulta.setCcocprinom((String) ax[5]);
						consulta.setCcocsegnom((String) ax[6]);
						consulta.setCcocpriape((String) ax[7]);
						consulta.setCcocsegape((String) ax[8]);
						consulta.setCconnumdoc((BigDecimal) ax[9]);
						consulta.setCconcontra((Integer) ax[10]);
						usuarioAux.setHuslnumero((Long) ax[11]);
						consulta.setCcolusuario(usuarioAux);
						tipoDocu.setCtdnnumero((Integer) ax[12]);
						consulta.setCcontipdoc(tipoDocu);
						consulta.setTipoHistoria((Integer) ax[13]);

						pis.add(consulta);
					}
				}

				return pis;
			}
		});
		return pis;
	}

	public List<Cnconsclin> getServiciosXFacturaMedicamentoDia(final Cnconsclin consulta) throws ModelException {
		List<Cnconsclin> pis = (List<Cnconsclin>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				StringBuffer sb = new StringBuffer();
				sb.append(" select cncl from  ");
				sb.append(Cnconsclin.class.getName()).append(" cncl ");
				sb.append(
						" where   cncl.ccontipdoc = :tipdoc and cncl.cconnumdoc = :wnumdoc and cncl.cconnumero = :cconnumero ");
				sb.append("  AND cncl.ccocservic.csvntiphis  = :wnumtiphis AND cncl.ccocetapa in ('EC', 'ES') ");
				sb.append("  order by cncl.cconnumero desc  ");

				String hql = sb.toString();

				Query query = session.createQuery(hql);

				query.setParameter("tipdoc", consulta.getCcontipdoc().getCtdnnumero());
				query.setParameter("wnumdoc", consulta.getCconnumdoc());
				query.setParameter("wnumtiphis", consulta.getTipoHistoria());
				query.setParameter("cconnumero", consulta.getCconnumero());

				List<Cnconsclin> pis = new ArrayList<Cnconsclin>();
				pis = query.list();

				for (Cnconsclin pi : pis) {
					Cpservicio servicio = pi.getCcocservic();
					Hibernate.initialize(servicio);
					Cptipodocu tipo = pi.getCcontipdoc();
					Hibernate.initialize(tipo);

				}

				return pis;
			}
		});
		return pis;
	}

	public List<Cnconsclin> getServiciosXFacturaMedicamentoDiaxAdmision(final Cnconsclin consulta)
			throws ModelException {
		List<Cnconsclin> pis = (List<Cnconsclin>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				StringBuffer sb = new StringBuffer();
				sb.append(" select cncl from  ");
				sb.append(Cnconsclin.class.getName()).append(" cncl ");
				sb.append(" where   cncl.ccontipdoc = :tipdoc and cncl.cconnumdoc = :wnumdoc  ");
				sb.append("  AND cncl.ccocservic.csvntiphis  = :wnumtiphis AND cncl.ccocetapa in ('EC', 'ES') ");
				sb.append("  order by cncl.cconnumero desc  ");

				String hql = sb.toString();

				Query query = session.createQuery(hql);

				query.setParameter("tipdoc", consulta.getCcontipdoc().getCtdnnumero());
				query.setParameter("wnumdoc", consulta.getCconnumdoc());
				query.setParameter("wnumtiphis", consulta.getTipoHistoria());

				List<Cnconsclin> pis = new ArrayList<Cnconsclin>();
				pis = query.list();

				for (Cnconsclin pi : pis) {
					Cpservicio servicio = pi.getCcocservic();
					Hibernate.initialize(servicio);
					Cptipodocu tipo = pi.getCcontipdoc();
					Hibernate.initialize(tipo);

				}

				return pis;
			}
		});
		return pis;
	}

	/**
	 * @param dia
	 * @param codclinica
	 * @param idMedico
	 * @param username
	 * @return
	 * @throws ModelException
	 */
	public List<Cnconsclin> getConsultasProceso(final Date dia, final Integer codclinica, final BigDecimal idMedico,
			final String username) throws ModelException {
		List<Cnconsclin> pis = (List<Cnconsclin>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {
				String HORA_INICIAL = " 00:00";
				String HORA_FINAL = " 23:59";

				SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
				String fechaI = dateFormat.format(dia) + HORA_INICIAL;
				String fechaF = dateFormat.format(dia) + HORA_FINAL;

				if (dia != null && codclinica != null && idMedico != null && username != null) {
					StringBuffer sb = new StringBuffer();
					sb.append("SELECT cncl from ");
					sb.append(Cnconsclin.class.getName()).append(" cncl, ");
					sb.append(Chconsulta.class.getName()).append(" chco ");
					sb.append("WHERE cncl.ccocestado = 'VG' AND cncl.ccocetapa='EC'");
					sb.append(" AND  chco.hcolconsuclini = cncl.cconnumero ");
					sb.append(" AND  chco.hcoctiposervi = :tipoServicio ");
					sb.append(" AND  chco.hcocoperador = :username ");
					sb.append(
							" AND (cncl.ccodfeccon BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))");
					sb.append(" AND cncl.cconclinic = :codclinica ");
					sb.append(" AND cncl.ccocservic.csvccodigo in  (SELECT cptp.id.ctacservic from ");
					sb.append(Cptarxprof.class.getName()).append(
							" cptp where cptp.id.ctanprofes = :idMedico and cptp.id.ctanclinic  = :codclinica and cptp.ctacestado = :tarxEstado ) ");

					sb.append(" order by cncl.ccothorcon asc  ");

					String hql = sb.toString();

					Query query = session.createQuery(hql);
					query.setParameter("fechaI", fechaI);
					query.setParameter("fechaF", fechaF);
					query.setParameter("tipoServicio", IConstantes.TIPO_CONSULTA);
					query.setParameter("username", username);
					query.setParameter("codclinica", codclinica);
					query.setParameter("idMedico", idMedico);
					query.setParameter("tarxEstado", IConstantes.ESTADO_VIGENTE);

					List<Cnconsclin> pis;
					pis = query.list();

					for (Cnconsclin pi : pis) {
						Cpservicio servicio = pi.getCcocservic();
						Hibernate.initialize(servicio);
						Cptipodocu tipo = pi.getCcontipdoc();
						Hibernate.initialize(tipo);

					}

					return pis;
				}

				return null;
			}

		});
		return pis;
	}

	/**
	 * @param dia
	 * @param codclinica
	 * @param idMedico
	 * @param username
	 * @return
	 * @throws ModelException
	 */
	public List<Cnconsclin> getConsultasAusentes(final Date dia, final Integer codclinica, final BigDecimal idMedico,
			final String username, final Integer numsala) throws ModelException {
		List<Cnconsclin> pis = (List<Cnconsclin>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				String HORA_INICIAL = " 00:00";
				String HORA_FINAL = " 23:59";

				SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
				String fechaI = dateFormat.format(dia) + HORA_INICIAL;
				String fechaF = dateFormat.format(dia) + HORA_FINAL;

				if (dia != null && codclinica != null && idMedico != null && username != null) {
					StringBuffer sb = new StringBuffer();
					sb.append("SELECT cncl from ");
					sb.append(Cnconsclin.class.getName()).append(" cncl ");
					sb.append("WHERE cncl.ccocestado = 'VG' AND cncl.ccocetapa='EC'");
					sb.append(
							" AND (cncl.ccodfeccon BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))");
					sb.append(" AND cncl.cconclinic = :codclinica ");
					sb.append(" AND cncl.cconsalesp = :numsala ");
					sb.append(" AND  cncl.cconnumero not in (select chco.hcolnumero from ")
							.append(Chconsulta.class.getName());
					sb.append(" chco where chco.hcocoperador = :username AND chco.hcoctiposervi = :tipoServicio )");
					sb.append(" AND cncl.ccocservic.csvccodigo in  (SELECT cptp.id.ctacservic from ");
					sb.append(Cptarxprof.class.getName()).append(
							" cptp where cptp.id.ctanprofes = :idMedico and cptp.id.ctanclinic  = :codclinica AND cptp.ctacestado = :tarxEstado ) ");
					sb.append(" order by cncl.ccothorcon asc  ");

					String hql = sb.toString();
					Query query = session.createQuery(hql);
					query.setParameter("fechaI", fechaI);
					query.setParameter("fechaF", fechaF);
					query.setParameter("codclinica", codclinica);
					query.setParameter("numsala", numsala);

					query.setParameter("username", username);
					query.setParameter("tipoServicio", IConstantes.TIPO_CONSULTA);
					query.setParameter("idMedico", idMedico);
					query.setParameter("tarxEstado", IConstantes.ESTADO_VIGENTE);

					List<Cnconsclin> pis;
					pis = query.list();

					for (Cnconsclin pi : pis) {
						Cpservicio servicio = pi.getCcocservic();
						Hibernate.initialize(servicio);
						Cptipodocu tipo = pi.getCcontipdoc();
						Hibernate.initialize(tipo);

					}

					return pis;
				}

				return null;
			}

		});
		return pis;
	}

	/**
	 * @param dia
	 * @return
	 * @throws ModelException
	 */
	public List<Cnconsclin> getConsultasDiaProfesional(final Date dia, final BigDecimal idMedico,
			final Integer codclinica) throws ModelException {
		List<Cnconsclin> pis = (List<Cnconsclin>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				String HORA_INICIAL = " 00:00";
				String HORA_FINAL = " 23:59";

				SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
				String fechaI = dateFormat.format(dia) + HORA_INICIAL;
				String fechaF = dateFormat.format(dia) + HORA_FINAL;

				StringBuffer sb = new StringBuffer();
				sb.append("SELECT cncl from ");
				sb.append(Cnconsclin.class.getName()).append(" cncl, ");
				sb.append(Cnprofxcon.class.getName()).append(" cnpc ");
				sb.append("WHERE cncl.ccocestado = 'VG' AND cncl.ccocetapa  in ('ES', 'EC')");
				sb.append(
						" AND (cncl.ccodfeccon BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))");
				sb.append(" AND cnpc.id.cpnnprofes = :idMedico ");
				sb.append(" AND cnpc.cpncestado != 'XX' ");
				sb.append(" AND cncl.cconclinic = :codclinica ");
				sb.append(" AND cncl.ccocservic.csvccodigo in  (SELECT cptp.id.ctacservic from ");
				sb.append(Cptarxprof.class.getName()).append(
						" cptp where cptp.id.ctanprofes = :idMedico and cptp.id.ctanclinic  = :codclinica and cptp.ctacestado = :tarxEstado ) ");
				sb.append(" order by cncl.ccothorcon asc  ");
				String hql = sb.toString();

				Query query = session.createQuery(hql);
				query.setParameter("fechaI", fechaI);
				query.setParameter("fechaF", fechaF);
				query.setParameter("idMedico", idMedico);
				query.setParameter("codclinica", codclinica);
				query.setParameter("tarxEstado", IConstantes.ESTADO_VIGENTE);

				List<Cnconsclin> pis;
				pis = query.list();

				for (Cnconsclin pi : pis) {
					Cpservicio servicio = pi.getCcocservic();
					Hibernate.initialize(servicio);

					Cptipodocu tipo = pi.getCcontipdoc();
					Hibernate.initialize(tipo);

				}

				return pis;
			}
		});
		return pis;
	}

	/**
	 * @param dia
	 * @return
	 * @throws ModelException
	 */
	public List<Cnconsclin> getConsultasProfesional(final Date dia, final Integer idMedico, final Integer codclinica,
			final Integer numsala) throws ModelException {
		List<Cnconsclin> pis = (List<Cnconsclin>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				List<Cnconsclin> lstConsulta;
				lstConsulta = new ArrayList<Cnconsclin>();
				Integer numeroConsulta;
				BigDecimal numCon;
				numCon = null;
				numeroConsulta = null;

				String HORA_INICIAL = " 00:00";
				String HORA_FINAL = " 23:59";

				SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
				String fechaI = dateFormat.format(dia) + HORA_INICIAL;
				String fechaF = dateFormat.format(dia) + HORA_FINAL;

				Chprioxmedi wprioaux = null;
				boolean wprior = false;

				// VERIFICAMOS QUE EL USUARIO ATIENDE SOLO CONSULTAS PRIORITARIAS
				StringBuffer sb0 = new StringBuffer();
				sb0.append("SELECT chpm from ");
				sb0.append(Chprioxmedi.class.getName()).append(" chpm ");
				sb0.append("WHERE chpm.id.hpmncodigprofe = ? ");
				sb0.append(" AND chpm.id.hpmncodigclini = ? ");

				String hql1 = sb0.toString();

				Query query0 = session.createQuery(hql1);
				query0.setParameter(0, idMedico);
				query0.setParameter(1, codclinica);

				wprioaux = (Chprioxmedi) query0.uniqueResult();

				if (wprioaux != null) {
					wprior = true;
				}

				StringBuffer sb = new StringBuffer();
				sb.append(" select min(cncl.cconnumero) from ");
				sb.append(" clinico.cnconsclin cncl, clinico.cpservicio cpse ");
				sb.append(
						" where cpse.csvccodigo = cncl.ccocservic and cncl.ccocestado = 'VG' AND cncl.ccocetapa='ES' ");
				sb.append(
						" AND (cncl.ccodfeccon BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))");
				sb.append(" AND cncl.cconclinic = :codclinica ");
				sb.append(" AND cpse.csvccodigo not in ('S898001.0','S898001.1','S898001.4') ");
				sb.append(" AND cncl.cconsalesp = :numsala ");
				sb.append(" AND cpse.csvccodigo in  ( select cptp.ctacservic from ");
				sb.append(" clinico.Cptarxprof cptp, clinico.cpservicio cpse1 ");
				sb.append(
						" where cptp.ctacservic = cpse1.csvccodigo and cptp.ctanprofes = :idMedico and cptp.ctanclinic  = :codclinica and cptp.ctacestado = :tarxEstado ");
				if (wprior) {
					sb.append(" and cptp.ctacpriori  = 'S' ");
				}
				sb.append(" ) ");
				sb.append(
						" and cncl.cconnumero not in (select cnpc.cpnnconcli from clinico.cnprofxcon cnpc where cnpc.cpncestado != 'XX' AND cnpc.cpnnprofes != :idMedico AND (cnpc.cpndfeccon BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi')) )");

				sb.append(" order by cncl.ccothorcon asc  ");
				String hql = sb.toString();

				Query query = session.createQuery(hql);
				query.setParameter("fechaI", fechaI);
				query.setParameter("fechaF", fechaF);
				query.setParameter("codclinica", codclinica);
				query.setParameter("numsala", numsala);
				query.setParameter("idMedico", idMedico);
				query.setParameter("tarxEstado", IConstantes.ESTADO_VIGENTE);

				numCon = (BigDecimal) query.uniqueResult();
				if (numCon != null) {
					numeroConsulta = numCon.intValue();
				}

				if (numeroConsulta != null) {

					StringBuffer sb2 = new StringBuffer();
					sb2.append(" update clinico.Cnconsclin set ccocetapa = 'EC' "
							+ "   where cconnumero = :numeroConsulta ");
					Query query2 = session.createQuery(sb2.toString());
					query2.setParameter("numeroConsulta", numeroConsulta);
					query2.executeUpdate();

					StringBuffer sb1 = new StringBuffer();
					sb1.append("SELECT cncl from ");
					sb1.append(Cnconsclin.class.getName()).append(" cncl ");
					sb1.append("WHERE cncl.cconnumero = ? ");
					sb1.append(" order by cncl.ccothorcon asc  ");
					String hql2 = sb1.toString();

					Query query1 = session.createQuery(hql2);
					query1.setParameter(0, numeroConsulta);

					lstConsulta = query1.list();

					for (Cnconsclin conclin : lstConsulta) {
						Cpservicio servicio = conclin.getCcocservic();
						Hibernate.initialize(servicio);

						Cptipodocu tipo = conclin.getCcontipdoc();
						Hibernate.initialize(tipo);
					}

				}

				return lstConsulta;
			}
		});
		return pis;
	}

	/**
	 * @param dia
	 * @param idMedico
	 * @param codclinica
	 * @param numsala
	 * @return
	 * @throws ModelException
	 */
	public List<Cnconsclin> getConsultasProfesionalBySala(final Date dia, final BigDecimal idMedico,
			final Integer codclinica, final Integer numsala) throws ModelException {
		List<Cnconsclin> pis = (List<Cnconsclin>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {
				String HORA_INICIAL = " 00:00";
				String HORA_FINAL = " 23:59";

				SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
				String fechaI = dateFormat.format(dia) + HORA_INICIAL;
				String fechaF = dateFormat.format(dia) + HORA_FINAL;

				Chprioxmedi wprioaux = null;
				boolean wprior = false;

				// VERIFICAMOS QUE EL USUARIO ATIENDE SOLO CONSULTAS PRIORITARIAS
				StringBuffer sb0 = new StringBuffer();
				sb0.append("SELECT chpm from ");
				sb0.append(Chprioxmedi.class.getName()).append(" chpm ");
				sb0.append("WHERE chpm.id.hpmncodigprofe = ? ");
				sb0.append(" AND chpm.id.hpmncodigclini = ? ");

				String hql1 = sb0.toString();

				Query query0 = session.createQuery(hql1);
				query0.setParameter(0, idMedico);
				query0.setParameter(1, codclinica);

				wprioaux = (Chprioxmedi) query0.uniqueResult();

				if (wprioaux != null) {
					wprior = true;
				}

				StringBuffer sb = new StringBuffer();
				sb.append("SELECT cncl from ");
				sb.append(Cnconsclin.class.getName()).append(" cncl ");
				sb.append("WHERE cncl.ccocestado = 'VG' AND cncl.ccocetapa IN ('ES','EC')");
				sb.append(
						" AND (cncl.ccodfeccon BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))");
				sb.append(" AND cncl.cconclinic = :codclinica ");
				sb.append(" AND cncl.ccocservic.csvccodigo not in ('S898001.0','S898001.1','S898001.4') ");
				sb.append(" AND cncl.cconsalesp = :numsala ");
				sb.append(
						" AND cncl.cconnumero not in (select cnpc.id.cpnnconcli from Cnprofxcon cnpc where cnpc.id.cpnnconcli =  cncl.cconnumero and cnpc.cpnnclinic = :codclinica and cnpc.id.cpnnprofes != :idMedico AND cnpc.cpncestado != 'XX' ) ");
				sb.append(" AND cncl.ccocservic.csvccodigo in  (SELECT cptp.id.ctacservic from ");
				sb.append(Cptarxprof.class.getName()).append(
						" cptp where cptp.id.ctanprofes = :idMedico and cptp.id.ctanclinic  = :codclinica and ctacestado = :tarxEstado  ");
				if (wprior) {
					sb.append(" AND  cptp.ctacpriori  = 'S'  ");
				}
				sb.append(" ) ");

				sb.append(" order by cncl.ccothorcon asc  ");

				String hql = sb.toString();

				Query query = session.createQuery(hql);

				query.setParameter("fechaI", fechaI);
				query.setParameter("fechaF", fechaF);
				query.setParameter("codclinica", codclinica);
				query.setParameter("idMedico", idMedico);
				query.setParameter("codclinica", codclinica);
				query.setParameter("numsala", numsala);
				query.setParameter("tarxEstado", IConstantes.ESTADO_VIGENTE);

				List<Cnconsclin> pis;
				pis = query.list();

				for (Cnconsclin pi : pis) {
					Cpservicio servicio = pi.getCcocservic();
					Hibernate.initialize(servicio);
					Cptipodocu tipo = pi.getCcontipdoc();
					Hibernate.initialize(tipo);

				}

				return pis;
			}
		});
		return pis;
	}

	/**
	 * @param dia
	 * @param codclinica
	 * @return
	 * @throws ModelException
	 */
	public List getCitologiasDia(final Date dia, final Integer codclinica, final String wnumiden)
			throws ModelException {
		List<Cnconsclin> pis = (List<Cnconsclin>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				String HORA_INICIAL = " 00:00";
				String HORA_FINAL = " 23:59";
				String fechaI = "";
				String fechaF = "";
				if (dia != null) {
					SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
					fechaI = dateFormat.format(dia) + HORA_INICIAL;
					fechaF = dateFormat.format(dia) + HORA_FINAL;
					Date fechaInicial = null;
					Calendar cal = Calendar.getInstance();
					cal.setTime(dia);
					cal.add(Calendar.MONTH, -2);
					fechaInicial = cal.getTime();
					fechaI = dateFormat.format(dia) + HORA_INICIAL;
				}

				if (wnumiden != null) {

				}

				StringBuffer sb = new StringBuffer();
				sb.append("SELECT cncl from ");
				sb.append(Cnconsclin.class.getName()).append(" cncl ");
				sb.append("WHERE cncl.ccocestado = 'VG' AND cncl.ccocetapa='ES'");
				if (wnumiden != null && !wnumiden.equals("")) {
					sb.append(" AND cncl.ccoanumide = :numIden ");
				}
				sb.append(" AND cncl.cconclinic = ").append(codclinica);
				sb.append(" AND cncl.ccocservic.csvntiphis in (:wtiphis, :wtiphisbl, :wtiphisvph) ");
				if (dia != null) {
					sb.append(
							" AND (cncl.ccodfeccon BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))");
				}
				sb.append(" order by cncl.ccothorcon asc  ");

				String hql = sb.toString();

				Query query = session.createQuery(hql);
				if (dia != null) {
					query.setParameter("fechaI", fechaI);
					query.setParameter("fechaF", fechaF);
				}
				query.setParameter("wtiphis", IConstantes.HISTORIA_PROCEDIMIENTO_CITOLOGIA_TOMA);
				query.setParameter("wtiphisbl", IConstantes.HISTORIA_PROCEDIMIENTO_CITOLOGIA_TOMA_BASELIQUIDA);
				query.setParameter("wtiphisvph", IConstantes.HISTORIA_PROCEDIMIENTO_VPH_TOMA);
				if (wnumiden != null && !wnumiden.equals("")) {
					query.setParameter("numIden", wnumiden);
				}
				List<Cnconsclin> pis;
				pis = query.list();

				for (Cnconsclin pi : pis) {
					Cpservicio servicio = pi.getCcocservic();
					Hibernate.initialize(servicio);
					Cptipodocu tipo = pi.getCcontipdoc();
					Hibernate.initialize(tipo);

				}

				return pis;
			}
		});
		return pis;
	}

	/**
	 * @param dia
	 * @param codclinica
	 * @return
	 * @throws ModelException
	 */
	public List getVPHDia(final Date dia, final Integer codclinica) throws ModelException {
		List<Cnconsclin> pis = (List<Cnconsclin>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				String HORA_INICIAL = " 00:00";
				String HORA_FINAL = " 23:59";

				SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
				String fechaI = dateFormat.format(dia) + HORA_INICIAL;
				String fechaF = dateFormat.format(dia) + HORA_FINAL;

				StringBuffer sb = new StringBuffer();
				sb.append("SELECT cncl from ");
				sb.append(Cnconsclin.class.getName()).append(" cncl ");
				sb.append("WHERE cncl.ccocestado = 'VG' AND cncl.ccocetapa='ES'");
				sb.append(
						" AND (cncl.ccodfeccon BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))");
				sb.append(" AND cncl.cconclinic = ").append(codclinica);
				sb.append(" AND cncl.ccocservic.csvntiphis = :wtiphis ");
				sb.append(" order by cncl.ccothorcon asc  ");

				String hql = sb.toString();

				Query query = session.createQuery(hql);
				query.setParameter("fechaI", fechaI);
				query.setParameter("fechaF", fechaF);
				query.setParameter("wtiphis", IConstantes.HISTORIA_PROCEDIMIENTO_VPH_TOMA);
				List<Cnconsclin> pis;
				pis = query.list();

				for (Cnconsclin pi : pis) {
					Cpservicio servicio = pi.getCcocservic();
					Hibernate.initialize(servicio);
					Cptipodocu tipo = pi.getCcontipdoc();
					Hibernate.initialize(tipo);

				}

				return pis;
			}
		});
		return pis;
	}

	/**
	 * @param numero
	 * @return
	 * @throws ModelException
	 */
	public List<Cnconsclin> getConsultaClinica(final Long numero) throws ModelException {
		List<Cnconsclin> pis = (List<Cnconsclin>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				StringBuffer sb = new StringBuffer();
				sb.append("SELECT cncl from ");
				sb.append(Cnconsclin.class.getName()).append(" cncl ");
				sb.append("WHERE cncl.cconnumero =  ").append(numero);

				String hql = sb.toString();

				Query query = session.createQuery(hql);
				List<Cnconsclin> pis;
				pis = query.list();

				for (Cnconsclin pi : pis) {
					Cpservicio servicio = pi.getCcocservic();
					Hibernate.initialize(servicio);

					Cptipodocu tipo = pi.getCcontipdoc();
					Hibernate.initialize(tipo);

				}

				return pis;
			}
		});
		return pis;
	}

	/**
	 * Obtener una Consulta.
	 * 
	 * public Chconsulta getConsulta(Long hcolnumero) throws ModelException {
	 * Chconsulta chconsulta = new Chconsulta(); java.util.List resultList = null;
	 * try { StringBuffer sb = new StringBuffer(); sb.append("SELECT
	 * chcon.hcocnombacompa from "); sb.append(Chconsulta.class.getName()).append("
	 * chcon "); sb.append("WHERE chcon.hcolnumero = ").append(hcolnumero);
	 * 
	 * resultList = this.getHibernateTemplate().find(sb.toString(), hcolnumero);
	 * 
	 * 
	 * } catch (HibernateException e) { throw new ModelException("Error consultando
	 * la consul:" + e.getMessage(), e); } catch (Exception e) { throw new
	 * ModelException("Error consultando la consul:" + e.getMessage(), e); } return
	 * chconsulta; }
	 */

	/**
	 * @return
	 * @throws ModelException
	 */
	public List<Cpservicio> getListServicio() throws ModelException {
		List resultList = null;
		try {

			resultList = this.getSession().createQuery("select s from Cpservicio as s where csvcestado = 'VG'")
					.list();
		} catch (HibernateException e) {
			throw new ModelException("Error consultando servicio:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando servicio:" + e.getMessage(), e);
		}
		return resultList;
	}

	/**
	 * @param idUsuario
	 * @return
	 * @throws ModelException
	 */
	public Chusuario getUsuario(Long huslnumero) throws ModelException {
		Chusuario usuario;
		try {
			StringBuffer sb = new StringBuffer();
			sb.append(" select usu from ").append(Chusuario.class.getName()).append(" usu ");
			sb.append(" where usu.huslnumero = ? ");

			List<Chusuario> lstUsuario = (List<Chusuario>) getHibernateTemplate().find(sb.toString(), huslnumero);

			if (!lstUsuario.isEmpty()) {
				return lstUsuario.get(0);
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando servicio:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando servicio:" + e.getMessage(), e);
		}
	}

	/**
	 * @return
	 * @throws ModelException
	 */
	public List<Crdgncie10> getCie10() throws ModelException {
		List<Crdgncie10> resultList;
		resultList = null;
		try {

			resultList = this.getSession().createQuery("select s from Crdgncie10 as s ").list();
		} catch (HibernateException e) {
			throw new ModelException("Error consultando cie10:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando cie10:" + e.getMessage(), e);
		}
		return resultList;
	}

	/**
	 * @param cie10
	 * @return
	 * @throws ModelException
	 */
	public List<Crdgncie10> getCriteriosCie10(Crdgncie10 cie10) throws ModelException {
		List resultList = null;
		List parametros = new ArrayList();
		try {
			StringBuffer sb = new StringBuffer();
			sb.append("SELECT cie FROM " + Crdgncie10.class.getName()
					+ " cie where cie.cdccestado = 'VG' and  cie.cdccdescri like ? ");
			parametros.add("%" + cie10.getCdccdescri().toUpperCase() + "%");

			if (cie10.getCdcccodigo() != null && !cie10.getCdcccodigo().equals("")) {
				sb.append(" and cie.cdcccodigo like ?");
				parametros.add("%" + cie10.getCdcccodigo().toUpperCase() + "%");
			}

			if (cie10.getCdccdescri2() != null && !cie10.getCdccdescri2().equals("")) {
				if (cie10.getCdccopera1() != null && cie10.getCdccopera1().equals("OR")) {
					sb.append(" OR cie.cdccdescri like ? ");
					parametros.add("%" + cie10.getCdccdescri2().toUpperCase() + "%");
				} else {
					sb.append(" and cie.cdccdescri like ? ");
					parametros.add("%" + cie10.getCdccdescri2().toUpperCase() + "%");
				}

			}

			if (cie10.getCdccdescri3() != null && !cie10.getCdccdescri3().equals("")) {
				if (cie10.getCdccopera2() != null && cie10.getCdccopera2().equals("OR")) {
					sb.append(" OR cie.cdccdescri like ? ");
					parametros.add("%" + cie10.getCdccdescri3().toUpperCase() + "%");
				} else {
					sb.append(" and cie.cdccdescri like ? ");
					parametros.add("%" + cie10.getCdccdescri3().toUpperCase() + "%");
				}
			}

			resultList = this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

		} catch (HibernateException e) {
			throw new ModelException("Error consultando CIE10 por criterios:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando CIE10 por criterios:" + e.getMessage(), e);
		}
		return resultList;
	}

	/**
	 * @return
	 * @throws ModelException
	 */
	public List<Crcausaext> getCausaExterna(Integer tipoHistoria) throws ModelException {
		List<Crcausaext> resultList;
		List parametros = new ArrayList();
		resultList = null;
		try {

			StringBuffer sb = new StringBuffer();
			sb.append("select cex from " + Crcausaext.class.getName()).append(" cex ");

			if (tipoHistoria != null && tipoHistoria.equals(IConstantes.HISTORIA_PSICOLOGICA)) {
				sb.append(" where cex.ccancodigo in (?,?,?,?,?) ");
				parametros.add(9);
				parametros.add(10);
				parametros.add(11);
				parametros.add(12);
				parametros.add(15);

			}

			sb.append(" order by cex.ccacdescri  ");

			resultList = (List<Crcausaext>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Causa Externa:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando causa Externa :" + e.getMessage(), e);
		}
		return resultList;
	}

	/**
	 * @return
	 * @throws ModelException
	 */
	public List<Crcausaext> getCausaExternaVG(Integer tipoHistoria) throws ModelException {
		List<Crcausaext> resultList;
		List parametros = new ArrayList();
		resultList = null;
		try {

			StringBuffer sb = new StringBuffer();
			sb.append("select cex from " + Crcausaext.class.getName()).append(" cex ");

			if (tipoHistoria != null && tipoHistoria.equals(IConstantes.HISTORIA_PSICOLOGICA)) {
				sb.append(" where cex.ccancodigo in (?,?,?,?,?) and cex.ccacestado = 'VG' ");
				parametros.add(9);
				parametros.add(10);
				parametros.add(11);
				parametros.add(12);
				parametros.add(15);

			} else {
				sb.append(" where cex.ccacestado = 'VG' ");

			}

			sb.append(" order by cex.ccacdescri  ");

			resultList = (List<Crcausaext>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Causa Externa:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando causa Externa :" + e.getMessage(), e);
		}
		return resultList;
	}

	/**
	 * @return
	 * @throws ModelException
	 */
	public List<Chparameduca> getParametroEduca(String nomColumna) throws ModelException {
		List<Chparameduca> resultList;
		List parametros = new ArrayList();
		resultList = null;
		try {

			StringBuffer sb = new StringBuffer();
			sb.append("select chpe from " + Chparameduca.class.getName()).append(" chpe  ");
			sb.append(" where chpe.hpecestado = 'VG' and chpe.id.hpeccolumna = ? ");

			sb.append(" order by chpe.hpecdescripcion  ");

			parametros.add(nomColumna);

			resultList = (List<Chparameduca>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Causa Externa:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando causa Externa :" + e.getMessage(), e);
		}
		return resultList;
	}

	/**
	 * @param codigo
	 * @return
	 */
	public Crcausaext getCausaExternaPorId(Integer codigo) throws ModelException {
		List<Crcausaext> resultList = null;
		List parametros = new ArrayList();
		try {

			StringBuffer sb = new StringBuffer();
			sb.append(" select crce from " + Crcausaext.class.getName() + " crce  where crce.ccancodigo = ? ");
			parametros.add(codigo);

			resultList = (List<Crcausaext>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			if (!resultList.isEmpty()) {
				return resultList.get(0);
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Causa Externa:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Causa Externa :" + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroConsulta
	 * @return
	 * @throws ModelException
	 */
	public Chrevissiste getRevisionSistemas(Long numeroConsulta) throws ModelException {
		List<Chrevissiste> resultList = null;
		List parametros = new ArrayList();

		try {
			if (numeroConsulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chrs from " + Chrevissiste.class.getName()
						+ " chrs  where chrs.id.hrslconsulta = ? AND chrs.id.hrsctiposervi = ? ");
				parametros.add(numeroConsulta);
				parametros.add(IConstantes.TIPO_CONSULTA);

				resultList = (List<Chrevissiste>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Revision por Sistemas:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Revision por Sistemas:" + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroConsulta
	 * @return
	 * @throws ModelException
	 */
	public String getRevisionSistemasTexto(Long numeroConsulta) throws ModelException {
		Chrevissiste revision = null;
		String revisiste = "";

		try {
			revision = getRevisionSistemas(numeroConsulta);
		} catch (HibernateException e) {
			throw new ModelException("Error consultando Revision por Sistemas:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Revision por Sistemas:" + e.getMessage(), e);
		}

		if (revision != null) {
			if (revision.getHrserefiecabez() == null || revision.getHrserefiecabez().equals("N")) {
				revisiste = "Cabeza : " + formatearCampoRevision(revision.getHrserefiecabez()) + "\n";
			} else {
				revisiste = "Cabeza : " + revision.getHrscrefiecabez() + "\n";
			}

			if (revision.getHrserefieojos() == null || revision.getHrserefieojos().equals("N")) {
				revisiste = revisiste + "Ojos : " + formatearCampoRevision(revision.getHrserefieojos()) + "\n";
			} else {
				revisiste = revisiste + "Ojos : " + revision.getHrscrefieojos() + "\n";
			}

			if (revision.getHrserefieoidos() == null || revision.getHrserefieoidos().equals("N")) {
				revisiste = revisiste + "O�dos : " + formatearCampoRevision(revision.getHrserefieoidos()) + "\n";
			} else {
				revisiste = revisiste + "O�dos : " + revision.getHrscrefieoidos() + "\n";
			}

			if (revision.getHrserefienariz() == null || revision.getHrserefienariz().equals("N")) {
				revisiste = revisiste + "Nariz : " + formatearCampoRevision(revision.getHrserefienariz()) + "\n";
			} else {
				revisiste = revisiste + "Nariz : " + revision.getHrscrefienariz() + "\n";
			}

			if (revision.getHrserefieboca() == null || revision.getHrserefieboca().equals("N")) {
				revisiste = revisiste + "Boca : " + formatearCampoRevision(revision.getHrserefieboca()) + "\n";
			} else {
				revisiste = revisiste + "Boca : " + revision.getHrscrefieboca() + "\n";
			}

			if (revision.getHrserefiegarga() == null || revision.getHrserefiegarga().equals("N")) {
				revisiste = revisiste + "Garganta : " + formatearCampoRevision(revision.getHrserefiegarga()) + "\n";
			} else {
				revisiste = revisiste + "Garganta : " + revision.getHrscrefiegarga() + "\n";
			}

			if (revision.getHrserefiecuell() == null || revision.getHrserefiecuell().equals("N")) {
				revisiste = revisiste + "Cuello : " + formatearCampoRevision(revision.getHrserefiecuell()) + "\n";
			} else {
				revisiste = revisiste + "Cuello : " + revision.getHrscrefiecuell() + "\n";
			}

			if (revision.getHrserefiecardi() == null || revision.getHrserefiecardi().equals("N")) {
				revisiste = revisiste + "Cardiorrespiratorio : " + formatearCampoRevision(revision.getHrserefiecardi())
						+ "\n";
			} else {
				revisiste = revisiste + "Cardiorrespiratorio : " + revision.getHrscrefiecardi() + "\n";
			}

			if (revision.getHrserefiemamas() == null || revision.getHrserefiemamas().equals("N")) {
				revisiste = revisiste + "Mamas : " + formatearCampoRevision(revision.getHrserefiemamas()) + "\n";
			} else {
				revisiste = revisiste + "Mamas : " + revision.getHrscrefiemamas() + "\n";
			}

			if (revision.getHrserefiegastr() == null || revision.getHrserefiegastr().equals("N")) {
				revisiste = revisiste + "Gastrointestinal : " + formatearCampoRevision(revision.getHrserefiegastr())
						+ "\n";
			} else {
				revisiste = revisiste + "Gastrointestinal : " + revision.getHrscrefiegastr() + "\n";
			}

			if (revision.getHrserefiegenit() == null || revision.getHrserefiegenit().equals("N")) {
				revisiste = revisiste + "Genitourinario : " + formatearCampoRevision(revision.getHrserefiegenit())
						+ "\n";
			} else {
				revisiste = revisiste + "Genitourinario : " + revision.getHrscrefiegenit() + "\n";
			}

			if (revision.getHrserefievener() == null || revision.getHrserefievener().equals("N")) {
				revisiste = revisiste + "Ven�reos : " + formatearCampoRevision(revision.getHrserefievener()) + "\n";
			} else {
				revisiste = revisiste + "Ven�reos : " + revision.getHrscrefievener() + "\n";
			}

			if (revision.getHrserefieendoc() == null || revision.getHrserefieendoc().equals("N")) {
				revisiste = revisiste + "Endocrino : " + formatearCampoRevision(revision.getHrserefieendoc()) + "\n";
			} else {
				revisiste = revisiste + "Endocrino : " + revision.getHrscrefieendoc() + "\n";
			}

			if (revision.getHrserefielocom() == null || revision.getHrserefielocom().equals("N")) {
				revisiste = revisiste + "Locomotor : " + formatearCampoRevision(revision.getHrserefielocom()) + "\n";
			} else {
				revisiste = revisiste + "Locomotor : " + revision.getHrscrefielocom() + "\n";
			}

			if (revision.getHrserefieneuro() == null || revision.getHrserefieneuro().equals("N")) {
				revisiste = revisiste + "Neuromuscular y neuropsiqui�trico : "
						+ formatearCampoRevision(revision.getHrserefieneuro()) + "\n";
			} else {
				revisiste = revisiste + "Neuromuscular y neuropsiqui�trico : " + revision.getHrscrefieneuro() + "\n";
			}

			if (revision.getHrserefieneups() == null || revision.getHrserefieneups().equals("N")) {
				revisiste = revisiste + "Neuropsiqui�trico : " + formatearCampoRevision(revision.getHrserefieneups())
						+ "\n";
			} else {
				revisiste = revisiste + "Neuropsiqui�trico : " + revision.getHrscrefieneups() + "\n";
			}

			if (revision.getHrserefieneumu() == null || revision.getHrserefieneumu().equals("N")) {
				revisiste = revisiste + "Neuromuscular : " + formatearCampoRevision(revision.getHrserefieneumu())
						+ "\n";
			} else {
				revisiste = revisiste + "Neuromuscular : " + formatearCampoRevision(revision.getHrserefieneumu())
						+ "\n";
			}

			if (revision.getHrserefiepiel() == null || revision.getHrserefiepiel().equals("N")) {
				revisiste = revisiste + "Piel y anexos : " + formatearCampoRevision(revision.getHrserefiepiel()) + "\n";
			} else {
				revisiste = revisiste + "Piel y anexos : " + revision.getHrserefiepiel() + "\n";
			}

		}
		return revisiste;
	}

	/**
	 * @param pareja
	 * @param
	 * @throws ModelException
	 */
	public void saveDatosFertilidad(final Chfertdato fertdato) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(fertdato);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Datos Fertilidad :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Datos Fertilidad :" + e.getMessage(), e);
		}
	}

	/**
	 * @see ClinicoDaoImp#saveDatosPareja(pareja) Salvar o modificar los Datos de
	 *      ecografia fertilidad
	 */
	public void saveDatosEcografiaFertilidad(Chfertecog ecografia) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(ecografia);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Datos Ecografia Fertilidad : " + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Datos Ecografia Fertilidad : " + e.getMessage(), e);
		}
	}

	/**
	 * @param consclin
	 * @return
	 * @throws ModelException
	 */
	public Chfertdato getDatosFertilidad(Long consclin) throws ModelException {
		List<Chfertdato> resultList = null;
		List parametros = new ArrayList();

		try {
			if (consclin != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chfp from " + Chfertdato.class.getName() + " chfp  where chfp.hfdlconsulta = ?  ");
				parametros.add(consclin);

				resultList = (List<Chfertdato>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Datos Fertilidad:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Datos Fertilidad:" + e.getMessage(), e);
		}

	}

	/**
	 * @param numUsuario
	 * @return
	 * @throws ModelException
	 */
	public Chfertdato getDatosFertilidadUltimaPareja(Long numUsuario, String tipoIden) throws ModelException {
		List<Chfertdato> resultList = null;
		List parametros = new ArrayList();

		try {
			if (numUsuario != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chfp from Chfertdato chfp, Chconsulta chco, Chusuario chus   "
						+ " where chco.hcolnumero = chfp.hfdlconsulta  and chus.huslnumero = chco.hcolusuario "
						+ " and chus.huslnumero = ? and chfp.hfdcpareja = 'S'   order by chco.hcolnumero desc ");
				parametros.add(numUsuario);

				resultList = (List<Chfertdato>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Datos Fertilidad:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Datos Fertilidad:" + e.getMessage(), e);
		}

	}

	/**
	 * @param consclin
	 * @return
	 * @throws ModelException
	 */
	public Chfertecog getDatosEcografia(Long consclin) throws ModelException {
		List<Chfertecog> resultList = null;
		List parametros = new ArrayList();

		try {
			if (consclin != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chfe from " + Chfertecog.class.getName() + " chfe  where chfe.hfelconsulta = ?  ");
				parametros.add(consclin);

				resultList = (List<Chfertecog>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Datos Ecografia:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Datos Ecografia:" + e.getMessage(), e);
		}

	}

	/**
	 * @param consclin
	 * @return
	 * @throws ModelException
	 */
	public Chmotivocon getMotivoConsulta(Cnconsclin consclin) throws ModelException {
		List<Chmotivocon> resultList = null;
		List parametros = new ArrayList();

		try {
			if (consclin != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chmc from " + Chmotivocon.class.getName()
						+ " chmc  where chmc.id.hmclconsulta = ? AND chmc.id.hmcctiposervi = ? ");
				parametros.add(consclin.getCconnumero());
				parametros.add(IConstantes.TIPO_CONSULTA);

				resultList = (List<Chmotivocon>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Motivo de Consulta:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Motivo de Consulta:" + e.getMessage(), e);
		}

	}

	// save de los paraclinicos

	/**
	 * @param paraclinicos
	 * @param numeroConsulta
	 * @throws ModelException
	 */
	public void saveParaclinicosGeneral(final List<Chparacgener> paraclinicos, final Long numeroConsulta)
			throws ModelException {
		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {

					if (numeroConsulta != null) {

						StringBuffer sb = new StringBuffer();

						sb.append(" delete  historia.Chparacgener ");
						sb.append(" where hpglconsulta = :numeroConsulta ");
						sb.append("  ");
						Query query = session.createQuery(sb.toString());
						query.setParameter("numeroConsulta", numeroConsulta);
						query.executeUpdate();

						if (paraclinicos != null && !paraclinicos.isEmpty()) {
							Chparacgener paraclinico;
							ChparacgenerPK idparaclinico;
							int i = 0;
							Iterator it = paraclinicos.iterator();
							while (it.hasNext()) {
								it.next();
								Chparacgener paraclinicoObject = new Chparacgener();
								paraclinico = paraclinicos.get(i);
								paraclinicoObject.setHpgcnombpara(paraclinico.getHpgcnombpara());
								paraclinicoObject.setHpgcoperador(paraclinico.getHpgcoperador());
								paraclinicoObject.setHpgdfecregistr(new Date());

								paraclinicoObject.setHpgtdescripcio(paraclinico.getHpgtdescripcio());
								idparaclinico = new ChparacgenerPK();
								idparaclinico.setHpglconsulta(numeroConsulta);
								idparaclinico.setHpgnconsecuti(new Integer(i + 1));

								paraclinicoObject.setId(idparaclinico);
								i++;
								session.saveOrUpdate(paraclinicoObject);

							}

						}
					}

					return paraclinicos;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		}
	}

	/**
	 * @param otrasOrdenes
	 * @param numeroConsulta
	 * @throws ModelException
	 */
	public void saveOtrasOrdenes(final List<Chcontroorden> otrasOrdenes, final Long numeroConsulta,
			final String usuario, final List<Chcontroorden> ordenesSuspender) throws ModelException {
		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {

					if (numeroConsulta != null) {

						if (ordenesSuspender != null && !ordenesSuspender.isEmpty()) {
							for (Chcontroorden forsup : ordenesSuspender) {
								forsup.setHcocetapa(IConstantes.ETAPA_SUSPENDER);
								forsup.setHcocestado(IConstantes.ESTADO_ANULADO);
								forsup.setHcodfechamodif(new Date());
								session.update(forsup);
							}
						}

						/*
						 * StringBuffer sb = new StringBuffer();
						 * 
						 * sb.append(" delete  historia.Chcontroorden ");
						 * sb.append(" where hpglconsulta = :numeroConsulta "); sb.append("  "); Query
						 * query = session.createQuery(sb.toString());
						 * query.setParameter("numeroConsulta", numeroConsulta); query.executeUpdate();
						 */
						Integer consecutivo = null;
						BigDecimal secuenciaActual = (BigDecimal) session.createQuery(
								"SELECT max(chco.hconconsecutiv) FROM HISTORIA.Chcontroorden chco where chco.hcolnumero = "
										+ numeroConsulta)
								.uniqueResult();

						if (secuenciaActual != null) {
							consecutivo = secuenciaActual.intValue() + 1;
						} else {
							consecutivo = 1;
						}

						if (otrasOrdenes != null && !otrasOrdenes.isEmpty()) {
							Chcontroorden otrasOrdeness;
							int i = 0;
							Iterator it = otrasOrdenes.iterator();
							while (it.hasNext()) {
								it.next();

								Chcontroorden ordenObject = new Chcontroorden();
								otrasOrdeness = otrasOrdenes.get(i);
								ordenObject.getId().setHcolnumero(numeroConsulta);
								ordenObject.getId().setHconconsecutiv(consecutivo);
								ordenObject.setHcocnombreord(otrasOrdeness.getHcocnombreord());
								ordenObject.setHcocordenenvi(otrasOrdeness.getHcocordenenvi());
								ordenObject.setHcodfechaasig(new Date());
								ordenObject.setHcocoperaasig(usuario);
								ordenObject.setHcocestado(IConstantes.ESTADO_VIGENTE);
								ordenObject.setHcocetapa(IConstantes.ETAPA_REGISTRO);
								ordenObject.setHconevoluconse(otrasOrdeness.getHconevoluconse());
								ordenObject.setHcocsistoxige(otrasOrdeness.getHcocnombreord());
								ordenObject.setHcolusuario(otrasOrdeness.getHcolusuario());
								if (otrasOrdeness.getHcocnombreord().equals("OX")) {
									ordenObject.setHcoccantlitros(otrasOrdeness.getHcoccantlitros());
									ordenObject.setHcoccantminutos(
											new Long(otrasOrdeness.getHcoccantminutos().toString()));
									ordenObject.setHcoccduracion(otrasOrdeness.getHcoccduracion());
									ordenObject.setHcoccadminisoxig(otrasOrdeness.getHcoccadminisoxig());
									ordenObject.setHcocdfechadminis(new Date());
									ordenObject.setHcoccadminoxigdesc(otrasOrdeness.getHcoccadminoxigdesc());
									ordenObject.setHcoccestadoadminox(otrasOrdeness.getHcoccestadoadminox());
								}

								consecutivo++;
								i++;
								session.saveOrUpdate(ordenObject);
							}
						}

					}

					return otrasOrdenes;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		}
	}

	/**
	 * @param numeroConsulta
	 * @return
	 * @throws ModelException
	 */
	public List<Chantecegene> getAntecedentes(Long numeroConsulta) throws ModelException {
		List<Chantecegene> resultList = null;
		List parametros = new ArrayList();
		try {
			if (numeroConsulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chag from " + Chantecegene.class.getName()
						+ " chag  where chag.id.hanlconsulta = ? AND chag.id.hanctiposervi = ? ");
				parametros.add(numeroConsulta);
				parametros.add(IConstantes.TIPO_CONSULTA);

				resultList = (List<Chantecegene>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList;
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Antecedentes Generales:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Antecedentes Generales :" + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroConsulta
	 * @return
	 * @throws ModelException
	 */
	public List<Chparaclinic> getParaclinicos(Long numeroConsulta) throws ModelException {
		List<Chparaclinic> resultList = null;
		List parametros = new ArrayList();
		try {
			if (numeroConsulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chpa from " + Chparaclinic.class.getName());
				sb.append(" chpa where chpa.id.hpalconsulta = ? and chpa.id.hpactiposervi = ? ");
				parametros.add(numeroConsulta);
				parametros.add(IConstantes.TIPO_CONSULTA);

				resultList = (List<Chparaclinic>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList;

				}

			}
			return null;
		} catch (HibernateException e) {
			throw new ModelException("" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("" + e.getMessage(), e);
		}
	}

	/**
	 * @param numeroConsulta
	 * @return
	 * @throws ModelException
	 */
	public List<Chparacgener> getParaclinicosGeneral(Long numeroConsulta) throws ModelException {
		List<Chparacgener> resultList = null;
		List parametros = new ArrayList();
		try {
			if (numeroConsulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chpa from " + Chparacgener.class.getName());
				sb.append(" chpa where chpa.id.hpglconsulta = ? ");
				parametros.add(numeroConsulta);

				resultList = (List<Chparacgener>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList;

				}

			}
			return null;
		} catch (HibernateException e) {
			throw new ModelException("Error consultando Paraclinico General" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Paraclinico General" + e.getMessage(), e);
		}
	}

	/**
	 * @param numeroConsulta
	 * @return
	 * @throws ModelException
	 */
	public List<Chcontroorden> getOtrasOrdenes(Long numeroConsulta) throws ModelException {
		List<Chcontroorden> resultList = null;
		List parametros = new ArrayList();
		try {
			if (numeroConsulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chco from " + Chcontroorden.class.getName());
				sb.append(" chco where chco.id.hcolnumero = ? ");
				parametros.add(numeroConsulta);

				resultList = (List<Chcontroorden>) this.getHibernateTemplate().find(sb.toString(),
						parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList;

				}

			}
			return null;
		} catch (HibernateException e) {
			throw new ModelException("Error consultando Otras Ordenes Cirugia " + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Otras Ordenes Cirugia" + e.getMessage(), e);
		}
	}

	/**
	 * @param consclin
	 * @return
	 * @throws ModelException
	 */
	public Chantegineco getAntecedentesGinecologicos(Cnconsclin consclin) throws ModelException {
		List<Chantegineco> resultList = null;
		List parametros = new ArrayList();
		try {

			if (consclin != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chag from " + Chantegineco.class.getName()
						+ " chag  where chag.id.haglconsulta = ? AND chag.id.hagctiposervi = ? ");
				parametros.add(consclin.getCconnumero());
				parametros.add(IConstantes.TIPO_CONSULTA);

				resultList = (List<Chantegineco>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Antecedentes Ginecologico:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Antecedentes Ginecologicos:" + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroUsuario
	 * @return
	 * @throws ModelException
	 */
	public Chidentiriesgo getIdentificacionRiesgos(Long numeroUsuario) throws ModelException {
		List<Chidentiriesgo> resultList = null;
		List parametros = new ArrayList();
		try {

			StringBuffer sb = new StringBuffer();
			sb.append(" select chid from " + Chidentiriesgo.class.getName() + " chid  where chid.hidelconsulta = ?  ");
			parametros.add(numeroUsuario);

			resultList = (List<Chidentiriesgo>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			if (!resultList.isEmpty()) {
				return resultList.get(0);
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando identifiacion de riego :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando identifiacion de riego :" + e.getMessage(), e);
		}

	}

	/**
	 * @param consclin
	 * @return
	 * @throws ModelException
	 */
	public Chviolencia getEncuestaViolencia(Cnconsclin consclin) throws ModelException {
		List<Chviolencia> resultList = null;
		List parametros = new ArrayList();
		try {

			if (consclin != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chvi from " + Chviolencia.class.getName()
						+ " chvi  where chvi.id.hvilconsulta = ? AND chvi.id.hvictiposervi = ? ");
				parametros.add(consclin.getCconnumero());
				parametros.add(IConstantes.TIPO_CONSULTA);

				resultList = (List<Chviolencia>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Encusta de violencia:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Encusta de violencia:" + e.getMessage(), e);
		}

	}

	/**
	 * @param consclin
	 * @return
	 * @throws ModelException
	 */
	public Chexafisane getExamenFisicoAnestesia(Cnconsclin consclin) throws ModelException {
		List<Chexafisane> resultList = null;
		List parametros = new ArrayList();
		try {
			if (consclin != null) {

				StringBuffer sb = new StringBuffer();
				sb.append(" select chef from " + Chexafisane.class.getName()
						+ " chef  where chef.id.healconsulta = ? AND chef.id.heactiposervi = ? ");
				parametros.add(consclin.getCconnumero());
				parametros.add(IConstantes.TIPO_CONSULTA);

				resultList = (List<Chexafisane>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Examen Fisico Preanestesia :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Examen Fisico Preanestesia:" + e.getMessage(), e);
		}

	}

	/**
	 * @param consclin
	 * @return
	 * @throws ModelException
	 */
	public Chvalorprean getValoracionPreanestesia(Cnconsclin consclin) throws ModelException {
		List<Chvalorprean> resultList = null;
		List parametros = new ArrayList();
		try {
			if (consclin != null) {

				StringBuffer sb = new StringBuffer();
				sb.append(" select chvp from " + Chvalorprean.class.getName()
						+ " chvp  where chvp.id.hvplconsulta = ? AND chvp.id.hvpctiposerv = ? ");
				parametros.add(consclin.getCconnumero());
				parametros.add(IConstantes.TIPO_CONSULTA);

				resultList = (List<Chvalorprean>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Valoracion Preanestesia :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Valoracion Preanestesia :" + e.getMessage(), e);
		}

	}

	/**
	 * @return
	 * @throws ModelException
	 */
	public List<Crfinalcon> getFinalidadesConsulta(String tipo) throws ModelException {
		List<Crfinalcon> resultList = null;
		List parametros = new ArrayList<Chimprdiag>();
		if (tipo != null) {
			try {
				StringBuffer sb = new StringBuffer();
				sb.append(" select crfc from " + Crfinalcon.class.getName() + " crfc  where  crfc.id.cfccprocon = ?  ");
				parametros.add(tipo);
				resultList = (List<Crfinalcon>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList;
				}

				return null;

			} catch (HibernateException e) {
				throw new ModelException("Error consultando Finalidad   :" + e.getMessage(), e);
			} catch (Exception e) {
				throw new ModelException("Error consultando Finalidad  :" + e.getMessage(), e);
			}

		}

		return null;

	}

	/**
	 * @return
	 * @throws ModelException
	 */
	public List<Crfinalcon> getFinalidadesConsultaVG(String tipo) throws ModelException {
		List<Crfinalcon> resultList = null;
		List parametros = new ArrayList<Chimprdiag>();
		if (tipo != null) {
			try {
				StringBuffer sb = new StringBuffer();
				sb.append(" select crfc from " + Crfinalcon.class.getName()
						+ " crfc  where  crfc.id.cfccprocon = ? and crfc.cfccestado = 'VG'  ");
				parametros.add(tipo);
				resultList = (List<Crfinalcon>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList;
				}

				return null;

			} catch (HibernateException e) {
				throw new ModelException("Error consultando Finalidad   :" + e.getMessage(), e);
			} catch (Exception e) {
				throw new ModelException("Error consultando Finalidad  :" + e.getMessage(), e);
			}

		}

		return null;

	}

	/**
	 * @return
	 * @throws ModelException
	 */
	public List<Cractoquir> getActoQuirurgico() throws ModelException {
		List<Cractoquir> resultList = null;

		try {
			StringBuffer sb = new StringBuffer();
			sb.append(" select craq from " + Cractoquir.class.getName() + " craq  ");
			resultList = (List<Cractoquir>) this.getHibernateTemplate().find(sb.toString());

			if (!resultList.isEmpty()) {
				return resultList;
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Acto Quirurgico:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Acto Quirurgico:" + e.getMessage(), e);
		}

	}

	/**
	 * @param caqncodigo
	 * @return
	 * @throws ModelException
	 */
	public String getDescripcionActoQuirurgico(Integer caqncodigo) throws ModelException {
		List<Cractoquir> resultList = null;
		List parametros = new ArrayList();

		try {
			StringBuffer sb = new StringBuffer();
			sb.append(" select craq from " + Cractoquir.class.getName() + " craq  where craq.caqncodigo = ? ");

			parametros.add(caqncodigo);
			resultList = (List<Cractoquir>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			if (!resultList.isEmpty()) {
				return resultList.get(0).getCaqcdescri();
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Descripcion Acto Quirurgico:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Descripcion Acto Quirurgico" + e.getMessage(), e);
		}

	}

	/**
	 * @param idFinalidad
	 * @param tipoFinalidad
	 * @return
	 * @throws ModelException
	 */
	public Crfinalcon getFinalidadPorId(Integer idFinalidad, String tipoFinalidad) throws ModelException {
		List<Crfinalcon> resultList = null;
		List parametros = new ArrayList();
		if (idFinalidad != null) {
			try {
				StringBuffer sb = new StringBuffer();
				sb.append(" select crfc from " + Crfinalcon.class.getName()
						+ " crfc  where crfc.id.cfcncodigo = ? and crfc.id.cfccprocon = ? ");
				parametros.add(idFinalidad);
				parametros.add(tipoFinalidad);
				resultList = (List<Crfinalcon>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

				return null;

			} catch (HibernateException e) {
				throw new ModelException("Error consultando Finalidad por Id  :" + e.getMessage(), e);
			} catch (Exception e) {
				throw new ModelException("Error consultando Finalidad por Id  :" + e.getMessage(), e);
			}

		}

		return null;

	}

	/**
	 * @param usuario
	 * @param consulta
	 * @param impresion
	 * @param motivo
	 * @throws ModelException
	 */
	public void closeConsulta(final Chusuario usuario, final Cnconsclin consulta, final Chimprdiag impresion,
			final Chmotivocon motivo, final String userName, final String surveypalLink) throws ModelException {

		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {

					Chconsulta consultaActual = null;
					Cnconsclin consultaAux = null;
					List lstHonorarios = null;
					boolean esConsulta = false;
					int codigoservicio = 0;
					String codcon = "";

					StringBuffer sb = new StringBuffer();
					sb.append(" select chco from Chconsulta"
							+ " chco  where chco.hcolnumero = :numeroCirugia  AND chco.hcoctiposervi = :tipoServicio ");
					Query query = session.createQuery(sb.toString());
					query.setParameter("numeroCirugia", consulta.getCconnumero());
					query.setParameter("tipoServicio", IConstantes.TIPO_CONSULTA);

					consultaActual = (Chconsulta) query.uniqueResult();

					StringBuffer sb1 = new StringBuffer();
					sb1.append(" select cncl from Cnconsclin " + " cncl  where cncl.cconnumero = :numero ");
					Query query1 = session.createQuery(sb1.toString());
					query1.setParameter("numero", consulta.getCconnumero());

					consultaAux = (Cnconsclin) query1.uniqueResult();

					if (consultaActual != null && consultaActual.getHcolnumero() != null) {
						consultaActual.setHcoeetapa(IConstantes.ETAPA_CERRADA);
						consultaActual.setHcocoperador(userName);
						consultaActual.setHcodfeccierre(new Date());
					}

					// if(consulta != null && consulta.getCcontipdoc() != null &&
					// consulta.getCcontipdoc().equals(100)){

					StringBuffer sbAda = new StringBuffer();
					sbAda.append(" update clinico.CFDETAFACTURA ccdf1  set ccdf1.CDFCETAPA = 'AT' ");
					sbAda.append(" where (ccdf1.CDFNCONSFACT, ccdf1.CDFNNUMITEM) in( ");
					sbAda.append(" select ccdf.CDFNCONSFACT, ccdf.CDFNNUMITEM ");
					sbAda.append(" from clinico.CFFACTURA ccfa, clinico.CFDETAFACTURA ccdf ");
					sbAda.append(" where ccfa.CFNCONSFACT = ccdf.CDFNCONSFACT ");
					sbAda.append(" and ccfa.CFNADMISION = :wadmision ");
					sbAda.append(" and ccdf.CDFCSERVICIO = :wservicio ) ");

					Query queryAda = session.createQuery(sbAda.toString());
					queryAda.setParameter("wadmision", consulta.getCconnumdoc());
					queryAda.setParameter("wservicio", consulta.getCcocservic().getCsvccodigo());
					queryAda.executeUpdate();

					// }

					String primeraLetra = "";

					String codservicio = consulta.getCcocservic().getCsvccodigo();

					if (codservicio != null && !codservicio.equals("")) {
						primeraLetra = codservicio.substring(0, 1);

						if (primeraLetra != null && primeraLetra.equals("S")) {
							codservicio = codservicio.substring(1, codservicio.length() - 1);

						}

					}

					StringTokenizer st = new StringTokenizer(codservicio, ".");
					codcon = st.nextToken();

					if (codcon != null) {
						codcon = codcon.substring(0, 4);
					}

					if (codcon != null && !codcon.equals("")) {
						codigoservicio = Integer.parseInt(codcon);

					}

					if ((codigoservicio == 8902 || codigoservicio == 8903 || codigoservicio == 8904)) {
						esConsulta = true;
					}

					// Actualziamos el estado de la consulta actual como CE cerrada
					String link = surveypalLink;
					String linkFinal;
					link = surveypalLink.replaceAll("href=", "");
					linkFinal = link.replaceAll("\"", "");
					consultaActual.setHcocurlsurvey(linkFinal);
					session.update(consultaActual);

					// Agreagamos los RIPS

					if (esConsulta) {
						generarRipsConsultaExterna(session, consulta, userName, usuario, motivo, impresion);
					} else {

						generarRipsConsultaProcedimiento(session, consulta, userName, usuario, impresion, motivo);

					}

					// VERIFICAMOS SI EXISTE MAS DE UN PROFESIONAL ASIGNADO A LA CONSULTA NO
					// CAMBIAMOS LA FECHA DE LA CONSULTA,. NI ACTUALIZAMOS LA FECHA DE LA CONSULTA

					if (consulta != null) {

						StringBuffer sb5 = new StringBuffer();
						sb5.append(" select cnpc from " + Cnprofxcon.class.getName()
								+ " cnpc  where cnpc.id.cpnnconcli = :cpnnconcli AND cnpc.cpncestado != 'XX'  ");
						Query query5 = session.createQuery(sb5.toString());
						query5.setParameter("cpnnconcli", consulta.getCconnumero());

						lstHonorarios = query5.list();

					}

					if (consultaAux != null && lstHonorarios != null && lstHonorarios.size() <= 1) {
						consultaAux.setCcodfeccon(new Date());
						generarHonorariosProfesional(session, consultaAux, consultaActual, userName, null);

					}

					if (consultaAux != null) {
						consultaAux.setCcothorate(new Date());
						consultaAux.setCcocetapa(IConstantes.ETAPA_ATENDIDO);
						consultaAux.setCcocusumod(userName);

						// Cambiamos el estado de la consulta x clinica a atendida
						session.update(consultaAux);
					}
					if (consultaActual.getHconcodagen() != null) {

						StringBuffer sbAgenda = new StringBuffer();
						sbAgenda.append(" select ag from ").append(Agendamiento.class.getName());
						sbAgenda.append(" ag  where  ag.id = :codigoAgenda");

						String hql = sbAgenda.toString();
						Query queryAgenda = session.createQuery(hql);

						queryAgenda.setParameter("codigoAgenda", consultaActual.getHconcodagen());

						Agendamiento agenda = new Agendamiento();

						if (!queryAgenda.list().isEmpty()) {
							agenda = (Agendamiento) queryAgenda.list().get(0);
							if (agenda != null) {
								agenda.setFecha_atencion(new Date());
								session.update(agenda);
							}
						}
					}

					if (consultaActual != null) {
						if (consultaActual.getHconprocasoc() != null) {
							try {
								closeConsultaProcedimientoAsociado(usuario, consultaActual.getHconprocasoc(),
										consultaActual, impresion, userName);
							} catch (ModelException e) {
								e.getMessage();
							}
						}

						if (consultaActual.getHconproasoret() != null) {
							try {
								closeConsultaProcedimientoAsociado(usuario, consultaActual.getHconproasoret(),
										consultaActual, impresion, userName);
							} catch (ModelException e) {
								e.getMessage();
							}

						}
					}

					return consulta;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		}
	}

	/**
	 * @param usuario
	 * @param consulta
	 * @param userName
	 * @throws ModelException
	 */
	public void closeEspermograma(final Chusuario usuario, final Cnconsclin consulta, final String userName)
			throws ModelException {

		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {

					Chconsulta consultaActual = null;
					Cnconsclin consultaAux = null;
					List lstHonorarios = null;
					boolean esConsulta = false;
					int codigoservicio = 0;
					String codcon = "";

					StringBuffer sb = new StringBuffer();
					sb.append(" select chco from Chconsulta"
							+ " chco  where chco.hcolnumero = :numeroCirugia  AND chco.hcoctiposervi = :tipoServicio ");
					Query query = session.createQuery(sb.toString());
					query.setParameter("numeroCirugia", consulta.getCconnumero());
					query.setParameter("tipoServicio", IConstantes.TIPO_CONSULTA);

					consultaActual = (Chconsulta) query.uniqueResult();

					StringBuffer sb1 = new StringBuffer();
					sb1.append(" select cncl from Cnconsclin " + " cncl  where cncl.cconnumero = :numero ");
					Query query1 = session.createQuery(sb1.toString());
					query1.setParameter("numero", consulta.getCconnumero());

					consultaAux = (Cnconsclin) query1.uniqueResult();

					if (consultaActual != null && consultaActual.getHcolnumero() != null) {
						consultaActual.setHcoeetapa(IConstantes.ETAPA_CERRADA);
						consultaActual.setHcocoperador(userName);
						consultaActual.setHcodfeccierre(new Date());
					}
					String primeraLetra = "";

					String codservicio = consulta.getCcocservic().getCsvccodigo();

					if (codservicio != null && !codservicio.equals("")) {
						primeraLetra = codservicio.substring(0, 1);

						if (primeraLetra != null && primeraLetra.equals("S")) {
							codservicio = codservicio.substring(1, codservicio.length() - 1);

						}

					}

					StringTokenizer st = new StringTokenizer(codservicio, ".");
					codcon = st.nextToken();

					if (codcon != null && !codcon.equals("")) {
						codigoservicio = Integer.parseInt(codcon);
					}

					if ((codigoservicio >= 890201 && codigoservicio <= 890503)
							|| (codigoservicio >= 890701 && codigoservicio <= 890704)
							|| (codigoservicio == 893106 || codigoservicio == 893108)) {
						esConsulta = true;
					}

					// Actualziamos el estado de la consulta actual como CE cerrada
					session.update(consultaActual);

					// VERIFICAMOS SI EXISTE MAS DE UN PROFESIONAL ASIGNADO A LA CONSULTA NO
					// CAMBIAMOS LA FECHA DE LA CONSULTA,. NI ACTUALIZAMOS LA FECHA DE LA CONSULTA

					if (consulta != null) {

						StringBuffer sb5 = new StringBuffer();
						sb5.append(" select cnpc from " + Cnprofxcon.class.getName()
								+ " cnpc  where cnpc.id.cpnnconcli = :cpnnconcli AND cnpc.cpncestado != 'XX'  ");
						Query query5 = session.createQuery(sb5.toString());
						query5.setParameter("cpnnconcli", consulta.getCconnumero());

						lstHonorarios = query5.list();

					}

					if (consultaAux != null && lstHonorarios != null && lstHonorarios.size() <= 1) {
						consultaAux.setCcodfeccon(new Date());
						generarHonorariosProfesional(session, consultaAux, consultaActual, userName, null);

					}

					if (consultaAux != null) {
						consultaAux.setCcothorate(new Date());
						consultaAux.setCcocetapa(IConstantes.ETAPA_ATENDIDO);
						consultaAux.setCcocusumod(userName);

						// Cambiamos el estado de la consulta x clinica a atendida
						session.update(consultaAux);
					}

					StringBuffer sbAda = new StringBuffer();
					sbAda.append(" update clinico.CFDETAFACTURA ccdf1  set ccdf1.CDFCETAPA = 'AT' ");
					sbAda.append(" where (ccdf1.CDFNCONSFACT, ccdf1.CDFNNUMITEM) in( ");
					sbAda.append(" select ccdf.CDFNCONSFACT, ccdf.CDFNNUMITEM ");
					sbAda.append(" from clinico.CFFACTURA ccfa, clinico.CFDETAFACTURA ccdf ");
					sbAda.append(" where ccfa.CFNCONSFACT = ccdf.CDFNCONSFACT ");
					sbAda.append(" and ccfa.CFNADMISION = :wadmision ");
					sbAda.append(" and ccdf.CDFCSERVICIO = :wservicio ) ");

					Query queryAda = session.createQuery(sbAda.toString());
					queryAda.setParameter("wadmision", consulta.getCconnumdoc());
					queryAda.setParameter("wservicio", consulta.getCcocservic().getCsvccodigo());
					queryAda.executeUpdate();

					return consulta;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		}
	}

	/**
	 * @param usuario
	 * @param consulta
	 * @param userName
	 * @throws ModelException
	 */
	public void closeEspermogramaFertilidad(final Chusuario usuario, final Cnconsclin consulta, final String userName)
			throws ModelException {

		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {

					Chconsulta consultaActual = null;
					Cnconsclin consultaAux = null;
					List lstHonorarios = null;

					StringBuffer sb = new StringBuffer();
					sb.append(" select chco from Chconsulta"
							+ " chco  where chco.hcolnumero = :numeroConsulta  AND chco.hcoctiposervi = :tipoServicio ");
					Query query = session.createQuery(sb.toString());
					query.setParameter("numeroConsulta", consulta.getCconnumero());
					query.setParameter("tipoServicio", IConstantes.TIPO_CONSULTA);

					consultaActual = (Chconsulta) query.uniqueResult();

					StringBuffer sb1 = new StringBuffer();
					sb1.append(" select cncl from Cnconsclin " + " cncl  where cncl.cconnumero = :numero ");
					Query query1 = session.createQuery(sb1.toString());
					query1.setParameter("numero", consulta.getCconnumero());

					consultaAux = (Cnconsclin) query1.uniqueResult();

					if (consultaActual != null && consultaActual.getHcolnumero() != null) {
						consultaActual.setHcoeetapa(IConstantes.ETAPA_CERRADA);
						consultaActual.setHcocoperador(userName);
						consultaActual.setHcodfeccierre(new Date());
					}

					// Actualizamos el estado de la consulta actual como CE cerrada
					session.update(consultaActual);

					// VERIFICAMOS SI EXISTE MAS DE UN PROFESIONAL ASIGNADO A LA CONSULTA NO
					// CAMBIAMOS LA FECHA DE LA CONSULTA,. NI ACTUALIZAMOS LA FECHA DE LA CONSULTA
					if (consulta != null) {
						StringBuffer sb5 = new StringBuffer();
						sb5.append(" select cnpc from " + Cnprofxcon.class.getName()
								+ " cnpc  where cnpc.id.cpnnconcli = :cpnnconcli AND cnpc.cpncestado != 'XX'  ");
						Query query5 = session.createQuery(sb5.toString());
						query5.setParameter("cpnnconcli", consulta.getCconnumero());
						lstHonorarios = query5.list();

					}

					if (consultaAux != null && lstHonorarios != null && lstHonorarios.size() <= 1) {
						consultaAux.setCcodfeccon(new Date());
						generarHonorariosProfesional(session, consultaAux, consultaActual, userName, null);
					}

					StringBuffer sbAda = new StringBuffer();
					sbAda.append(" update clinico.CFDETAFACTURA ccdf1  set ccdf1.CDFCETAPA = 'AT' ");
					sbAda.append(" where (ccdf1.CDFNCONSFACT, ccdf1.CDFNNUMITEM) in( ");
					sbAda.append(" select ccdf.CDFNCONSFACT, ccdf.CDFNNUMITEM ");
					sbAda.append(" from clinico.CFFACTURA ccfa, clinico.CFDETAFACTURA ccdf ");
					sbAda.append(" where ccfa.CFNCONSFACT = ccdf.CDFNCONSFACT ");
					sbAda.append(" and ccfa.CFNADMISION = :wadmision ");
					sbAda.append(" and ccdf.CDFCSERVICIO = :wservicio ) ");

					Query queryAda = session.createQuery(sbAda.toString());
					queryAda.setParameter("wadmision", consulta.getCconnumdoc());
					queryAda.setParameter("wservicio", consulta.getCcocservic().getCsvccodigo());
					queryAda.executeUpdate();

					if (consultaAux != null) {
						consultaAux.setCcothorate(new Date());
						consultaAux.setCcocetapa(IConstantes.ETAPA_ATENDIDO);
						consultaAux.setCcocusumod(userName);

						// Cambiamos el estado de la consulta x clinica a atendida
						session.update(consultaAux);
					}

					return consulta;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		}
	}

	/**
	 * @param usuario
	 * @param consulta
	 * @param userName
	 * @throws ModelException
	 */
	public void closeVacunacionCervix(final Chusuario usuario, final Cnconsclin consulta, final String userName,
			final List<Chmedicament> listaMedicamentos) throws ModelException {

		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {

					Chconsulta consultaActual = null;

					StringBuffer sb = new StringBuffer();
					sb.append(" select chco from Chconsulta"
							+ " chco  where chco.hcolnumero = :numeroCirugia  AND chco.hcoctiposervi = :tipoServicio ");
					Query query = session.createQuery(sb.toString());
					query.setParameter("numeroCirugia", consulta.getCconnumero());
					query.setParameter("tipoServicio", IConstantes.TIPO_CONSULTA);

					consultaActual = (Chconsulta) query.uniqueResult();

					if (consultaActual != null && consultaActual.getHcolnumero() != null) {
						consultaActual.setHcoeetapa(IConstantes.ETAPA_CERRADA);
						consultaActual.setHcodfeccierre(new Date());
					}

					// Traer por parametro la lista de medicamnetos
					// Consultar Cnconsclin de cada uno de esa

					for (Chmedicament medicament : listaMedicamentos) {
						Cnconsclin consultaAsociada = null;
						StringBuffer sb1 = new StringBuffer();
						sb1.append(" select cncl from Cnconsclin " + " cncl  where cncl.cconnumero = :numero ");
						Query query1 = session.createQuery(sb1.toString());
						query1.setParameter("numero", medicament.getId().getHmelconsuasoci());

						consultaAsociada = (Cnconsclin) query1.uniqueResult();

						StringBuffer sbAda = new StringBuffer();
						sbAda.append(" update clinico.CFDETAFACTURA ccdf1  set ccdf1.CDFCETAPA = 'AT' ");
						sbAda.append(" where (ccdf1.CDFNCONSFACT, ccdf1.CDFNNUMITEM) in( ");
						sbAda.append(" select ccdf.CDFNCONSFACT, ccdf.CDFNNUMITEM ");
						sbAda.append(" from clinico.CFFACTURA ccfa, clinico.CFDETAFACTURA ccdf ");
						sbAda.append(" where ccfa.CFNCONSFACT = ccdf.CDFNCONSFACT ");
						sbAda.append(" and ccfa.CFNADMISION = :wadmision ");
						sbAda.append(" and ccdf.CDFCSERVICIO = :wservicio ) ");

						Query queryAda = session.createQuery(sbAda.toString());
						queryAda.setParameter("wadmision", consultaAsociada.getCconnumdoc());
						queryAda.setParameter("wservicio", consultaAsociada.getCcocservic().getCsvccodigo());
						queryAda.executeUpdate();

						if (consulta != null) {

							StringBuffer sbConcli = new StringBuffer();
							sbConcli.append(
									" update clinico.Cnconsclin   set CCOCETAPA = 'AT', CCOTHORATE = sysdate, CCOCUSUMOD = :usuario  ");
							sbConcli.append(" where CCONNUMERO =  :wnumero  ");

							Query queryConcli = session.createQuery(sbConcli.toString());
							queryConcli.setParameter("wnumero", consultaAsociada.getCconnumero());
							queryConcli.setParameter("usuario", userName);

							queryConcli.executeUpdate();

						}

						// Actualziamos el estado de la consulta actual como CE cerrada
						session.update(consultaActual);

						Chconsulta chconsultaProcedimientoAsociado = new Chconsulta();

						StringBuffer sbc = new StringBuffer();
						sbc.append(" select chco from Chconsulta"
								+ " chco  where chco.hcolnumero = :numeroConsulta  AND chco.hcoctiposervi = :tipoServicio ");

						Query queryc = session.createQuery(sbc.toString());
						queryc.setParameter("numeroConsulta", medicament.getId().getHmelconsuasoci());
						queryc.setParameter("tipoServicio", IConstantes.TIPO_CONSULTA);

						chconsultaProcedimientoAsociado = (Chconsulta) queryc.uniqueResult();

						if (chconsultaProcedimientoAsociado != null) {
							chconsultaProcedimientoAsociado.setHcoeetapa(IConstantes.ETAPA_CERRADA);
							chconsultaProcedimientoAsociado.setHcodfecregistr(consultaActual.getHcodfecregistr());
							chconsultaProcedimientoAsociado.setHcocoperador(consultaActual.getHcocoperador());

							// Cambiamos el estado de la consulta x clinica a atendida
							session.update(chconsultaProcedimientoAsociado);

						} else {
							chconsultaProcedimientoAsociado = new Chconsulta();
							chconsultaProcedimientoAsociado.setHcolnumero(consultaAsociada.getCconnumero().longValue());
							chconsultaProcedimientoAsociado
									.setHcolconsuclini(consultaAsociada.getCconnumero().longValue());
							chconsultaProcedimientoAsociado.setHcocservicio(consultaAsociada.getCcocservic());
							chconsultaProcedimientoAsociado.setHcoeetapa(IConstantes.ETAPA_PROCEDIMIENTO_ASOCIADO);
							chconsultaProcedimientoAsociado.setHcoctiposervi(consultaActual.getHcoctiposervi());
							chconsultaProcedimientoAsociado.setHcocentidadadm(consultaActual.getHcocentidadadm());
							chconsultaProcedimientoAsociado.setHcolusuario(consultaActual.getHcolusuario());
							chconsultaProcedimientoAsociado.setHconfolio(consultaActual.getHconfolio());
							chconsultaProcedimientoAsociado.setHcontipoconsu(consultaActual.getHcontipoconsu());
							chconsultaProcedimientoAsociado.setHcodfeccierre(consultaActual.getHcodfeccierre());
							chconsultaProcedimientoAsociado.setHcodfecinicio(consultaActual.getHcodfecinicio());
							chconsultaProcedimientoAsociado.setHcocnombacompa(consultaActual.getHcocnombacompa());
							chconsultaProcedimientoAsociado.setHcocteleacompa(consultaActual.getHcocteleacompa());
							chconsultaProcedimientoAsociado.setHcocnombrespo(consultaActual.getHcocnombrespo());
							chconsultaProcedimientoAsociado.setHcoctelerespo(consultaActual.getHcoctelerespo());
							chconsultaProcedimientoAsociado.setHcocoperador(consultaActual.getHcocoperador());
							chconsultaProcedimientoAsociado.setHcodfecregistr(consultaActual.getHcodfecregistr());
							chconsultaProcedimientoAsociado.setHconclinica(consultaActual.getHconclinica());
							chconsultaProcedimientoAsociado.setHconcodagen(consultaActual.getHconcodagen());

							// Guardamos Chconsulta del procedimiento asociado
							session.save(chconsultaProcedimientoAsociado);
						}
					}

					return consulta;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		}
	}

	/**
	 * @param usuario
	 * @param consulta
	 * @return
	 * @throws ModelException
	 */
	public Crarcconsu getRipsUsuarioConsulta(Chusuario usuario, Cnconsclin consulta) throws ModelException {
		List parametros;
		List<Crarcconsu> lstRips;

		try {

			parametros = new ArrayList();
			if (usuario != null && consulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select crac from ").append(Crarcconsu.class.getName()).append(" crac ");
				sb.append(" where crac.id.cacnconcli = ? and crac.caclusuario = ?  order by crac.id.cacnconsec desc  ");
				parametros.add(consulta.getCconnumero());
				parametros.add(usuario.getHuslnumero());

				lstRips = (List<Crarcconsu>) getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (lstRips != null && !lstRips.isEmpty()) {
					return lstRips.get(0);
				}

			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error Verificando Consulta Cerrada:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Verificando Consulta Cerrada:" + e.getMessage(), e);
		}

	}

	/**
	 * @param consulta
	 * @throws ModelException
	 */
	public void closeProcedimiento(final Cnconsclin consulta, final String userName) throws ModelException {

		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {
					boolean wexito;
					wexito = true;
					List lstHonorarios = null;
					Chconsulta consultaActual = null;
					StringBuffer sb = new StringBuffer();

					sb.append(" select chco from Chconsulta"
							+ " chco  where chco.hcolnumero = :numeroCirugia  AND chco.hcoctiposervi = :tipoServicio ");
					Query query = session.createQuery(sb.toString());
					query.setParameter("numeroCirugia", consulta.getCconnumero());
					query.setParameter("tipoServicio", IConstantes.TIPO_CONSULTA);

					consultaActual = (Chconsulta) query.uniqueResult();

					if (consultaActual != null && consultaActual.getHcolnumero() != null) {
						consultaActual.setHcoeetapa(IConstantes.ETAPA_CERRADA);
						consultaActual.setHcodfeccierre(new Date());
					} else {
						wexito = false;
					}

					Cnconsclin consultaAux = null;
					StringBuffer sb1 = new StringBuffer();
					sb1.append(" select cncl from Cnconsclin " + " cncl  where cncl.cconnumero = :numero ");
					Query query1 = session.createQuery(sb1.toString());
					query1.setParameter("numero", consulta.getCconnumero());

					consultaAux = (Cnconsclin) query1.uniqueResult();

					if (wexito) {

						// VERIFICAMOS SI EXISTE MAS DE UN PROFESIONAL ASIGNADO A LA CONSULTA NO
						// CAMBIAMOS LA FECHA DE LA CONSULTA,. NI ACTUALIZAMOS LA FECHA DE LA CONSULTA

						if (consulta != null) {

							StringBuffer sb5 = new StringBuffer();
							sb5.append(" select cnpc from " + Cnprofxcon.class.getName()
									+ " cnpc  where cnpc.id.cpnnconcli = :cpnnconcli AND cnpc.cpncestado != 'XX'  ");
							Query query5 = session.createQuery(sb5.toString());
							query5.setParameter("cpnnconcli", consulta.getCconnumero());

							lstHonorarios = query5.list();

						}

						if (consultaAux != null && lstHonorarios != null && lstHonorarios.size() <= 1) {
							consultaAux.setCcodfeccon(new Date());
							generarHonorariosProfesional(session, consultaAux, consultaActual, userName, null);

						}

						StringBuffer sbAda = new StringBuffer();
						sbAda.append(" update clinico.CFDETAFACTURA ccdf1  set ccdf1.CDFCETAPA = 'AT' ");
						sbAda.append(" where (ccdf1.CDFNCONSFACT, ccdf1.CDFNNUMITEM) in( ");
						sbAda.append(" select ccdf.CDFNCONSFACT, ccdf.CDFNNUMITEM ");
						sbAda.append(" from clinico.CFFACTURA ccfa, clinico.CFDETAFACTURA ccdf ");
						sbAda.append(" where ccfa.CFNCONSFACT = ccdf.CDFNCONSFACT ");
						sbAda.append(" and ccfa.CFNADMISION = :wadmision ");
						sbAda.append(" and ccdf.CDFCSERVICIO = :wservicio ) ");

						Query queryAda = session.createQuery(sbAda.toString());
						queryAda.setParameter("wadmision", consulta.getCconnumdoc());
						queryAda.setParameter("wservicio", consulta.getCcocservic().getCsvccodigo());
						queryAda.executeUpdate();

						if (consultaAux != null) {
							consultaAux.setCcothorate(new Date());
							consultaAux.setCcocetapa(IConstantes.ETAPA_ATENDIDO);
							consultaAux.setCcocusumod(userName);
							// Cambiamos el estado de la consulta x clinica a atendida
							session.update(consultaAux);
						}

						// Actualziamos el estado de la consulta actual como CE cerrada
						session.update(consultaActual);

						// Generamos los Rips del procedimiento
						generarRipsProcedimientoConsultorio(session, consulta, userName);

					}

					return consulta;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		}
	}

	/**
	 * @param consulta
	 * @throws ModelException
	 */
	public void closeAnticuerposAntigenoCovid(final Cnconsclin consulta, final String userName) throws ModelException {

		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {
					boolean wexito;
					wexito = true;
					List lstHonorarios = null;
					Chconsulta consultaActual = null;
					StringBuffer sb = new StringBuffer();

					sb.append(" select chco from Chconsulta"
							+ " chco  where chco.hcolnumero = :numeroCirugia  AND chco.hcoctiposervi = :tipoServicio ");
					Query query = session.createQuery(sb.toString());
					query.setParameter("numeroCirugia", consulta.getCconnumero());
					query.setParameter("tipoServicio", IConstantes.TIPO_CONSULTA);

					consultaActual = (Chconsulta) query.uniqueResult();

					if (consultaActual != null && consultaActual.getHcolnumero() != null) {
						consultaActual.setHcoeetapa(IConstantes.ETAPA_CERRADA);
						consultaActual.setHcodfeccierre(new Date());
					} else {
						wexito = false;
					}

					Cnconsclin consultaAux = null;
					StringBuffer sb1 = new StringBuffer();
					sb1.append(" select cncl from Cnconsclin " + " cncl  where cncl.cconnumero = :numero ");
					Query query1 = session.createQuery(sb1.toString());
					query1.setParameter("numero", consulta.getCconnumero());

					consultaAux = (Cnconsclin) query1.uniqueResult();

					if (wexito) {

						// VERIFICAMOS SI EXISTE MAS DE UN PROFESIONAL ASIGNADO A LA CONSULTA NO
						// CAMBIAMOS LA FECHA DE LA CONSULTA,. NI ACTUALIZAMOS LA FECHA DE LA CONSULTA

						if (consulta != null) {

							StringBuffer sb5 = new StringBuffer();
							sb5.append(" select cnpc from " + Cnprofxcon.class.getName()
									+ " cnpc  where cnpc.id.cpnnconcli = :cpnnconcli AND cnpc.cpncestado != 'XX'  ");
							Query query5 = session.createQuery(sb5.toString());
							query5.setParameter("cpnnconcli", consulta.getCconnumero());

							lstHonorarios = query5.list();

						}

						if (consultaAux != null && lstHonorarios != null && lstHonorarios.size() <= 1) {
							consultaAux.setCcodfeccon(new Date());
							generarHonorariosProfesional(session, consultaAux, consultaActual, userName, null);

						}

						StringBuffer sbAda = new StringBuffer();
						sbAda.append(" update clinico.CFDETAFACTURA ccdf1  set ccdf1.CDFCETAPA = 'AT' ");
						sbAda.append(" where (ccdf1.CDFNCONSFACT, ccdf1.CDFNNUMITEM) in( ");
						sbAda.append(" select ccdf.CDFNCONSFACT, ccdf.CDFNNUMITEM ");
						sbAda.append(" from clinico.CFFACTURA ccfa, clinico.CFDETAFACTURA ccdf ");
						sbAda.append(" where ccfa.CFNCONSFACT = ccdf.CDFNCONSFACT ");
						sbAda.append(" and ccfa.CFNADMISION = :wadmision ");
						sbAda.append(" and ccdf.CDFCSERVICIO = :wservicio ) ");

						Query queryAda = session.createQuery(sbAda.toString());
						queryAda.setParameter("wadmision", consulta.getCconnumdoc());
						queryAda.setParameter("wservicio", consulta.getCcocservic().getCsvccodigo());
						queryAda.executeUpdate();

						if (consultaAux != null) {
							consultaAux.setCcothorate(new Date());
							consultaAux.setCcocetapa(IConstantes.ETAPA_ATENDIDO);
							consultaAux.setCcocusumod(userName);
							// Cambiamos el estado de la consulta x clinica a atendida
							session.update(consultaAux);
						}

						// Actualziamos el estado de la consulta actual como CE cerrada
						session.update(consultaActual);

					}

					return consulta;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		}
	}

	/**
	 * @param numeroconsulta
	 * @return
	 * @throws ModelException
	 */
	public boolean verificarConsultaCerrada(Long numeroconsulta) throws ModelException {
		List parametros;
		List<String> lstConsulta;

		try {

			parametros = new ArrayList();
			if (numeroconsulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chco.hcoeetapa from ").append(Chconsulta.class.getName()).append(" chco ");
				sb.append(" where chco.hcolnumero = ? AND chco.hcoctiposervi = ? ");
				parametros.add(numeroconsulta);
				parametros.add(IConstantes.TIPO_CONSULTA);

				lstConsulta = (List<String>) getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (lstConsulta != null && !lstConsulta.isEmpty()) {
					if (lstConsulta.get(0).equals(IConstantes.ETAPA_CERRADA)) {
						return true;
					}
				}

			}

			return false;

		} catch (HibernateException e) {
			throw new ModelException("Error Verificando Consulta Cerrada:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Verificando Consulta Cerrada:" + e.getMessage(), e);
		}

	}

	/**
	 * @param usuario
	 * @return
	 * @throws ModelException
	 */
	public boolean esPrimeraConsulta(Chusuario usuario) throws ModelException {
		List parametros;
		List<Integer> lstConsulta;

		try {

			parametros = new ArrayList();
			if (usuario != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chco.hconfolio from ").append(Chconsulta.class.getName()).append(" chco, ");
				sb.append(Chantecegene.class.getName()).append(" chag ");
				sb.append(
						" where chag.id.hanlconsulta = chco.hcolnumero and chco.hcoeetapa = 'CE' and chag.id.hanlconsulta is not null and chco.hcolusuario.huslnumero = ? AND chco.hcoctiposervi = chag.id.hanctiposervi    ");
				sb.append(" AND chag.id.hanctiposervi = ? ");
				parametros.add(usuario.getHuslnumero());
				parametros.add(IConstantes.TIPO_CONSULTA);

				lstConsulta = (List<Integer>) getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (lstConsulta != null && !lstConsulta.isEmpty()) {
					if (lstConsulta.get(0) != null) {
						return false;
					}
				}

			}

			return true;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando primera consulta:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando primera consulta:" + e.getMessage(), e);
		}

	}

	/**
	 * @param consulta
	 * @return
	 * @throws ModelException
	 */
	public boolean esPrimeraConsultaCovid(Long consulta) throws ModelException {
		List parametros;
		List<Integer> lstConsulta;

		try {

			parametros = new ArrayList();
			if (consulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select c.cecnconsec from ").append(Cfencuecovid.class.getName()).append(" c ");
				sb.append(" where c.ceccaplicaci = ? ");
				parametros.add(consulta);

				lstConsulta = (List<Integer>) getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (lstConsulta != null && !lstConsulta.isEmpty()) {
					if (lstConsulta.get(0) != null) {
						return false;
					}
				}

			}

			return true;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando primera consulta covid:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando primera consulta covid:" + e.getMessage(), e);
		}

	}

	/**
	 * @param antecedente
	 * @throws ModelException
	 */
	public void saveAntecedenteTemp(Chantecetemp antecedente) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(antecedente);
		} catch (HibernateException e) {
			throw new ModelException("Error insertando Antecedente Temporal:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error insertando Antecedente Temporal:" + e.getMessage(), e);
		}
	}

	/**
	 * @param antecedente
	 * @throws ModelException
	 */
	public void saveAntecedentesVasectomia(Chantecvasec antecedente) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(antecedente);
		} catch (HibernateException e) {
			throw new ModelException("Error insertando Antecedente Vasectomia:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error insertando Antecedente Vasectomia:" + e.getMessage(), e);
		}
	}

	/**
	 * @param idConsulta
	 * @return
	 * @throws ModelException
	 */
	public Chantecvasec getAntecedenteVasectomia(Long idConsulta) throws ModelException {
		List<Chantecvasec> resultList = null;
		List parametros = new ArrayList();
		try {
			StringBuffer sb = new StringBuffer();
			sb.append(" select chan from " + Chantecvasec.class.getName() + " chan  where chan.havlconsulta = ?  ");
			parametros.add(idConsulta);

			resultList = (List<Chantecvasec>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			if (!resultList.isEmpty()) {
				return resultList.get(0);
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Antecedente Vasectomia:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Antecedente Vasectomia:" + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroUsuario
	 * @return
	 * @throws ModelException
	 */
	public List<Chconsulta> getCitologiasLectura(final Long numeroUsuario) throws ModelException {
		List<Chconsulta> pis = (List<Chconsulta>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				StringBuffer sb = new StringBuffer();
				sb.append("select chco from ");
				sb.append(Chconsulta.class.getName()).append(" chco ");
				sb.append("WHERE chco.hcoeetapa = 'AB' and chco.hcolusuario.huslnumero =  ").append(numeroUsuario);
				sb.append(" and chco.hcocservicio.csvntiphis = 10 ");
				sb.append("  order by  chco.hcodfecregistr ");

				String hql = sb.toString();

				Query query = session.createQuery(hql);
				List<Chconsulta> pis;
				pis = query.list();

				for (Chconsulta co : pis) {
					Cpservicio servicio = co.getHcocservicio();
					Hibernate.initialize(servicio);

					Chusuario usu = co.getHcolusuario();
					Hibernate.initialize(usu);
				}

				return pis;
			}
		});
		return pis;
	}

	/**
	 * @param consclin
	 * @return
	 * @throws ModelException
	 */
	public List<Chantecetemp> getAntecedentesTemporal(Cnconsclin consclin) throws ModelException {
		List<Chantecetemp> resultList = null;
		List parametros = new ArrayList();

		try {
			if (consclin != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chat from " + Chantecetemp.class.getName()
						+ " chat  where chat.id.hatlconsulta = ? AND chat.id.hatctiposervi = ? ");
				parametros.add(consclin.getCconnumero());
				parametros.add(IConstantes.TIPO_CONSULTA);

				resultList = (List<Chantecetemp>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList;
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Antecedentes Temporales:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Antecedentes Temporales :" + e.getMessage(), e);
		}

	}

	/**
	 * @param diagnostico
	 * @throws ModelException
	 */
	public void saveExamenApoyoDiagnostico(Chexamediagn diagnostico) throws ModelException {
		if (diagnostico != null) {
			diagnostico.setHeddfecregistr(new Date());
		}
		try {
			this.getHibernateTemplate().saveOrUpdate(diagnostico);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Examen de Apoyo Diagnostico:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Examen de Apoyo Diagnostico :" + e.getMessage(), e);
		}
	}

	/**
	 * @param consclin
	 * @return
	 * @throws ModelException
	 */
	public Chexamediagn getExamenApoyoDiagnostico(Cnconsclin consclin) throws ModelException {
		List<Chexamediagn> resultList = null;
		List parametros = new ArrayList();

		try {
			if (consclin != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select ched from " + Chexamediagn.class.getName()
						+ " ched  where ched.id.hedlconsulta = ? AND ched.id.hedctiposervi = ? ");
				parametros.add(consclin.getCconnumero());
				parametros.add(IConstantes.TIPO_CONSULTA);

				resultList = (List<Chexamediagn>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Examen de Apoyo Diagnostico:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Examen de Apoyo Diagnostico :" + e.getMessage(), e);
		}

	}

	/**
	 * @param conducta
	 * @throws ModelException
	 */
	public void saveConducta(Chconducta conducta) throws ModelException {
		if (conducta != null) {
			conducta.setHcndfecregistr(new Date());
		}
		try {
			this.getHibernateTemplate().saveOrUpdate(conducta);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Conducta:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Conducta :" + e.getMessage(), e);
		}
	}

	/**
	 * @param consclin
	 * @return
	 * @throws ModelException
	 */
	public Chconducta getConducta(Cnconsclin consclin) throws ModelException {
		List<Chconducta> resultList = null;
		List parametros = new ArrayList();

		try {
			if (consclin != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chcd from " + Chconducta.class.getName()
						+ " chcd  where chcd.id.hcnlconsulta = ? AND chcd.id.hcnctiposervi = ? ");
				parametros.add(consclin.getCconnumero());
				parametros.add(IConstantes.TIPO_CONSULTA);

				resultList = (List<Chconducta>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Conducta:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Conducta :" + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroCirugia
	 * @param tipoServicio
	 * @param consecutivo
	 * @return
	 * @throws ModelException
	 */
	public Chconducta getConducta(Long numeroCirugia, String tipoServicio, Integer consecutivo) throws ModelException {
		List<Chconducta> resultList = null;
		List parametros = new ArrayList();

		try {
			if (numeroCirugia != null && tipoServicio != null && consecutivo != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chcd from " + Chconducta.class.getName()
						+ " chcd  where chcd.id.hcnlconsulta = ? AND chcd.id.hcnctiposervi = ? AND  chcd.id.hcnnconsecutiv = ? ");
				parametros.add(numeroCirugia);
				parametros.add(tipoServicio);
				parametros.add(consecutivo);

				resultList = (List<Chconducta>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Conducta:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Conducta :" + e.getMessage(), e);
		}

	}

	/**
	 * @param sexo
	 * @return
	 * @throws ModelException
	 */
	public List<Chmetodoplan> getMetodosPlanificacion(String sexo) throws ModelException {
		List<Chmetodoplan> resultList = null;
		List parametros = new ArrayList();

		try {

			if (sexo != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(
						" select chmp from " + Chmetodoplan.class.getName() + " chmp where chmp.hmpcsexoaplic in (?,?) "
								+ " and chmp.hmpcestado = 'VG' order by chmp.hmpcdescripcio ");
				parametros.add(sexo);
				parametros.add(IConstantes.SEXO_AMBOS);

				resultList = (List<Chmetodoplan>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList;
				}
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Metodos de planificacion:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Metodos de planificacion :" + e.getMessage(), e);
		}

	}

	/**
	 * @param consclin
	 * @return
	 * @throws ModelException
	 */
	public Chantecemama getAntecedentesMama(Cnconsclin consclin) throws ModelException {
		List<Chantecemama> resultList = null;
		List parametros = new ArrayList();

		try {
			if (consclin != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select cham from " + Chantecemama.class.getName()
						+ " cham  where cham.id.hamlconsulta = ? AND cham.id.hamctiposervi = ? ");
				parametros.add(consclin.getCconnumero());
				parametros.add(IConstantes.TIPO_CONSULTA);

				resultList = (List<Chantecemama>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Antecedentes de Mama:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Antecedentes de Mama  :" + e.getMessage(), e);
		}

	}

	/**
	 * @param riesgo
	 * @throws ModelException
	 */
	public void saveRiesgoMama(Chriesgomama riesgo) throws ModelException {

		try {
			this.getHibernateTemplate().saveOrUpdate(riesgo);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Riesgo Mama:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Riesgo Mama :" + e.getMessage(), e);
		}
	}

	/**
	 * @param consclin
	 * @return
	 * @throws ModelException
	 */
	public Chriesgomama getRiesgoMama(Cnconsclin consclin) throws ModelException {
		List<Chriesgomama> resultList = null;
		List parametros = new ArrayList();

		try {
			if (consclin != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chrm from " + Chriesgomama.class.getName()
						+ " chrm  where chrm.id.hrmlconsulta = ? AND chrm.id.hrmctiposervi = ? ");
				parametros.add(consclin.getCconnumero());
				parametros.add(IConstantes.TIPO_CONSULTA);

				resultList = (List<Chriesgomama>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Factores de Riesgo de Mama:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Factores de Riesgo de Mama  :" + e.getMessage(), e);
		}

	}

	/**
	 * @param examen
	 * @throws ModelException
	 */
	public void saveExamenFisicoMama(Chexafismama examen) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(examen);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Examen Fisico Mama:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Examen Fisico Mama :" + e.getMessage(), e);
		}
	}

	/**
	 * @param consclin
	 * @return
	 * @throws ModelException
	 */
	public Chexafismama getExamenFisicoMama(Cnconsclin consclin) throws ModelException {
		List<Chexafismama> resultList = null;
		List parametros = new ArrayList();

		try {
			if (consclin != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chem from " + Chexafismama.class.getName()
						+ " chem  where chem.id.hemlconsulta = ? AND chem.id.hemctiposervi = ? ");
				parametros.add(consclin.getCconnumero());
				parametros.add(IConstantes.TIPO_CONSULTA);

				resultList = (List<Chexafismama>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Examen Fisico de Mama:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Examen Fisico de Mama  :" + e.getMessage(), e);
		}

	}

	/**
	 * @param codigo
	 * @return
	 * @throws ModelException
	 */
	public Crdgncie10 getCIE10PorCodigo(String codigo) throws ModelException {
		List<Crdgncie10> resultList = null;
		List parametros = new ArrayList();

		try {

			if (codigo != null && !codigo.equals("")) {

				StringBuffer sb = new StringBuffer();
				sb.append(" select cie from " + Crdgncie10.class.getName()
						+ " cie  where cie.cdccestado = 'VG' and cie.cdcccodigo = ?   ");
				parametros.add(codigo);

				resultList = (List<Crdgncie10>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando descripcion CIE10:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando descripcion CIE10:" + e.getMessage(), e);
		}

	}

	/**
	 * @param codigo
	 * @return
	 * @throws ModelException
	 */
	public Cpservicio getDescripcionCupsCompleto(String codigo) throws ModelException {
		List<Cpservicio> resultList = null;
		List parametros = new ArrayList();

		try {
			if (codigo != null && !codigo.equals("")) {

				StringBuffer sb = new StringBuffer();
				sb.append(" select cups from " + Cpservicio.class.getName() + " cups  where cups.csvccodigo = ? ");
				parametros.add(codigo);

				resultList = (List<Cpservicio>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando descripcion CUPS:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando descripcion CUPS:" + e.getMessage(), e);
		}

	}

	/**
	 * @param codigo
	 * @return
	 * @throws ModelException
	 */
	public String getNombreServicioXCodigo(String codigo) throws ModelException {
		List<String> resultList = null;
		List parametros = new ArrayList();

		try {
			if (codigo != null && !codigo.equals("")) {

				StringBuffer sb = new StringBuffer();
				sb.append(" select cups.csvcnombre from " + Cpservicio.class.getName()
						+ " cups  where cups.csvccodigo = ? ");
				parametros.add(codigo);

				resultList = (List<String>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando descripcion CUPS:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando descripcion CUPS:" + e.getMessage(), e);
		}

	}

	/**
	 * @param codigo
	 * @return
	 * @throws ModelException
	 */
	public Cptipconcl getDescripcionTipoConsulta(Integer codigo) throws ModelException {
		List<Cptipconcl> resultList = null;
		List parametros = new ArrayList();

		try {
			if (codigo != null && !codigo.equals("")) {

				StringBuffer sb = new StringBuffer();
				sb.append(" select cpti from " + Cptipconcl.class.getName() + " cpti  where cpti.ctlncodigo = ? ");
				parametros.add(codigo);

				resultList = (List<Cptipconcl>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando descripcion Tipo consulta:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando descripcion Tipo consulta:" + e.getMessage(), e);
		}

	}

	/**
	 * @param codigo
	 * @return
	 * @throws ModelException
	 */
	public String getDescripcionCups(String codigo) throws ModelException {
		List<Cpservicio> resultList = null;
		List parametros = new ArrayList();

		try {
			if (codigo != null && !codigo.equals("")) {

				StringBuffer sb = new StringBuffer();
				sb.append(" select cups from " + Cpservicio.class.getName() + " cups  where cups.csvccodigo = ? ");
				parametros.add(codigo);

				resultList = (List<Cpservicio>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0).getCsvcnombre();
				}
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando descripcion CUPS:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando descripcion CUPS:" + e.getMessage(), e);
		}

	}

	/**
	 * @param codigo
	 * @return
	 * @throws ModelException
	 */
	public Cpservicio getServicioPorId(String codigo) throws ModelException {
		List<Cpservicio> resultList = null;
		List parametros = new ArrayList();

		try {
			if (codigo != null && !codigo.equals("")) {

				StringBuffer sb = new StringBuffer();
				sb.append(" select cups from " + Cpservicio.class.getName() + " cups  where cups.csvccodigo = ? ");
				parametros.add(codigo);

				resultList = (List<Cpservicio>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando servicio :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando servicio:" + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroConsulta
	 * @return
	 * @throws ModelException
	 */
	public Chincapacida getIncapcidad(Long numeroConsulta) throws ModelException {
		List<Chincapacida> resultList = null;
		List parametros = new ArrayList();

		try {
			if (numeroConsulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chin from " + Chincapacida.class.getName()
						+ " chin  where chin.id.hinlconsulta = ?  ");
				parametros.add(numeroConsulta);

				resultList = (List<Chincapacida>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Incapacidad:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Incapacidad  :" + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroCirugia
	 * @param tipoServicio
	 * @param consecutivo
	 * @return
	 * @throws ModelException
	 */
	public Chincapacida getIncapcidad(Long numeroCirugia, String tipoServicio, Integer consecutivo)
			throws ModelException {
		List<Chincapacida> resultList = null;
		List parametros = new ArrayList();

		try {
			if (numeroCirugia != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(
						" select chin from " + Chincapacida.class.getName() + " chin  where chin.id.hinlconsulta = ? ");
				parametros.add(numeroCirugia);

				resultList = (List<Chincapacida>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Incapacidad:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Incapacidad  :" + e.getMessage(), e);
		}

	}

	/**
	 * @param examen
	 * @throws ModelException
	 */
	public void saveExamenParaclinico(Chexameparac examen) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(examen);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Examen Paraclinico:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Examen Paraclinico :" + e.getMessage(), e);
		}
	}

	/**
	 * @param remision
	 * @throws ModelException
	 */
	public void saveRemisionConsulta(Chremision remision) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(remision);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Remisi�n Consulta:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Remisi�n Consulta :" + e.getMessage(), e);
		}
	}

	/**
	 * @param consclin
	 * @return
	 * @throws ModelException
	 */
	public List<Chexameparac> getExamenesParaclinicos(Cnconsclin consclin) throws ModelException {
		List<Chexameparac> resultList = null;
		List parametros = new ArrayList();

		try {
			if (consclin != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chep from " + Chexameparac.class.getName()
						+ " chep  where chep.id.heplconsulta = ? AND chep.id.hepctiposervi = ? ");
				parametros.add(consclin.getCconnumero());
				parametros.add(IConstantes.TIPO_CONSULTA);

				resultList = (List<Chexameparac>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList;
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Examenes Paraclinicos:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Examenes Paraclinicos:" + e.getMessage(), e);
		}

	}

	/**
	 * @param consclin
	 * @return
	 * @throws ModelException
	 */
	public List<Chremision> getRemisionConsulta(Cnconsclin consclin) throws ModelException {
		List<Chremision> resultList = null;
		List parametros = new ArrayList();

		try {
			if (consclin != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chrc from " + Chremision.class.getName()
						+ " chrc  where chrc.id.hrelconsulta = ? AND chrc.id.hrectiposervi = ? ");
				parametros.add(consclin.getCconnumero());
				parametros.add(IConstantes.TIPO_CONSULTA);

				resultList = (List<Chremision>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList;
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Remisi�n de Consultas:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Remisi�n de Consultas:" + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroCirugia
	 * @param tipoServicio
	 * @param consecutivo
	 * @return
	 * @throws ModelException
	 */
	public List<Chremision> getRemisionConsulta(Long numeroCirugia, String tipoServicio, Integer consecutivo)
			throws ModelException {
		List<Chremision> resultList = null;
		List parametros = new ArrayList();

		try {
			if (numeroCirugia != null && tipoServicio != null && consecutivo != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chrc from " + Chremision.class.getName()
						+ " chrc  where chrc.id.hrelconsulta = ? AND chrc.id.hrectiposervi = ? AND chrc.id.hrenllave = ?  ");
				parametros.add(numeroCirugia);
				parametros.add(tipoServicio);
				parametros.add(consecutivo);

				resultList = (List<Chremision>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList;
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Remisi�n de Consultas:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Remisi�n de Consultas:" + e.getMessage(), e);
		}

	}

	/**
	 * @param numero
	 * @return
	 * @throws ModelException
	 */
	public List<Chremision> getRemisionConsulta(Long numero, String tipoConsulta) throws ModelException {
		List<Chremision> resultList = null;
		List parametros = new ArrayList();

		try {
			if (numero != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chrc from " + Chremision.class.getName()
						+ " chrc  where chrc.id.hrelconsulta = ? AND chrc.id.hrectiposervi = ? ");
				parametros.add(numero);
				parametros.add(tipoConsulta);

				resultList = (List<Chremision>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList;
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Remisi�n de Consultas:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Remisi�n de Consultas:" + e.getMessage(), e);
		}

	}

	/**
	 * @param formula
	 * @throws ModelException
	 */
	public void saveFormulaMedica(Chformulamed formula) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(formula);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Formula Medica:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Formula Medica :" + e.getMessage(), e);
		}
	}

	/**
	 * @param numeroConsulta
	 * @return
	 * @throws ModelException
	 */
	public List<Chformulamed> getListPrescripciones(Long numeroConsulta) throws ModelException {
		List<Chformulamed> resultList = null;
		List parametros = new ArrayList();

		try {
			if (numeroConsulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chfm from " + Chformulamed.class.getName()
						+ " chfm  where chfm.id.hfolconsulta = ?  ");
				parametros.add(numeroConsulta);

				resultList = (List<Chformulamed>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList;
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Lista Prescripciones Medicas:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Lista Prescripciones Medicas  :" + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroCirugia
	 * @param tipoServicio
	 * @param consecutivo
	 * @return
	 * @throws ModelException
	 */
	public List<Chformulamed> getListPrescripciones(Long numeroCirugia, String tipoServicio, Integer consecutivo)
			throws ModelException {
		List<Chformulamed> resultList = null;
		List parametros = new ArrayList();

		try {
			if (numeroCirugia != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chfm from " + Chformulamed.class.getName()
						+ " chfm  where chfm.id.hfolconsulta = ?  ");

				parametros.add(numeroCirugia);
				// parametros.add(consecutivo);

				resultList = (List<Chformulamed>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList;
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Lista Prescripciones Medicas:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Lista Prescripciones Medicas  :" + e.getMessage(), e);
		}

	}

	/**
	 * @param control
	 * @throws ModelException
	 */
	public void saveControl(final Chconsprogra control) throws ModelException {
		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {

					/*
					 * Cpconsec consecutivo = null;
					 * 
					 * StringBuffer sb = new StringBuffer(); sb.append(" select  cpco from " +
					 * Cpconsec.class.getName() + " cpco  where cpco.conncodigo =  :conncodigo ");
					 * Query query = session.createQuery(sb.toString());
					 * query.setParameter("conncodigo", IConstantes.CONSECUTIVO_CONTROL);
					 * consecutivo = (Cpconsec)query.uniqueResult();
					 * 
					 * if (consecutivo != null && consecutivo.getConnnumero() != null) {
					 * control.setHcplnumero(new Long(consecutivo.getConnnumero()));
					 * consecutivo.setConnnumero(consecutivo.getConnnumero() + 1); } else {
					 * control.setHcplnumero(new Long(1)); consecutivo.setConnnumero(2); }
					 */
					session.saveOrUpdate(control);
					// session.update(consecutivo);

					return control;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		}
	}

	/**
	 * @return
	 * @throws ModelException
	 */
	public Cpconsec getConsecutivoControl() throws ModelException {
		List<Cpconsec> resultList = null;
		List parametros = new ArrayList();

		try {

			StringBuffer sb = new StringBuffer();
			sb.append(" select  cpco from " + Cpconsec.class.getName() + " cpco  where cpco.conncodigo = ")
					.append(IConstantes.CONSECUTIVO_CONTROL);

			resultList = (List<Cpconsec>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			if (!resultList.isEmpty()) {
				return resultList.get(0);
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando consecutivo:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando consecutivo  :" + e.getMessage(), e);
		}

	}

	/**
	 * @param consclin
	 * @return
	 * @throws ModelException
	 */
	public Chconsprogra getControl(Cnconsclin consclin) throws ModelException {
		List<Chconsprogra> resultList = null;
		List parametros = new ArrayList();
		try {
			if (consclin != null) {

				StringBuffer sb = new StringBuffer();
				sb.append(" select chcp from " + Chconsprogra.class.getName()
						+ " chcp  where chcp.hcpntipdoc = ? and chcp.hcpnnumdoc = ? ");
				parametros.add(IConstantes.DOCUMENTO_CONSULTA_CLINICA);
				parametros.add(consclin.getCconnumero());

				resultList = (List<Chconsprogra>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Control:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Control  :" + e.getMessage(), e);
		}

	}

	/**
	 * @param orden
	 * @throws ModelException
	 */
	public void saveOrdenCirugia(Chordecirugi orden) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(orden);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Cirug�as y procedimientos:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Cirug�as y procedimientos :" + e.getMessage(), e);
		}
	}

	/**
	 * @param valoracion
	 * @throws ModelException
	 */
	public void saveValoracionAnestesia(Chvalorprean valoracion) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(valoracion);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Valoracion Anestesia:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Valoraci�n Anestesia:" + e.getMessage(), e);
		}
	}

	/**
	 * @param consclin
	 * @return
	 * @throws ModelException
	 */
	public Chordecirugi getOrdenCirugia(Cnconsclin consclin) throws ModelException {
		List<Chordecirugi> resultList = null;
		List parametros = new ArrayList();

		try {
			if (consclin != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select choc from " + Chordecirugi.class.getName()
						+ " choc  where choc.id.hoclconsulta = ?  AND choc.id.hocctiposervi = ? ");
				parametros.add(consclin.getCconnumero());
				parametros.add(IConstantes.TIPO_CONSULTA);

				resultList = (List<Chordecirugi>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Cirug�as y procedimientos:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Cirug�as y procedimientos  :" + e.getMessage(), e);
		}

	}

	/**
	 * @param idMunicipio
	 * @param idDepartamento
	 * @return
	 * @throws ModelException
	 */
	public Cpmunidane getMunicipio(Integer idMunicipio, Integer idDepartamento) throws ModelException {
		List<Cpmunidane> resultList = null;
		List parametros = new ArrayList();

		try {

			StringBuffer sb = new StringBuffer();
			sb.append(" select cpmd from " + Cpmunidane.class.getName()
					+ " cpmd  where cpmd.id.cmdncodmun = ?  and cpmd.id.cmdncoddep = ? ");
			parametros.add(idMunicipio);
			parametros.add(idDepartamento);

			resultList = (List<Cpmunidane>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			if (!resultList.isEmpty()) {
				return resultList.get(0);
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Municipio:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Municipio  :" + e.getMessage(), e);
		}

	}

	/**
	 * @param referencia
	 * @throws ModelException
	 */
	public void saveReferencia(Chreferencia referencia) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(referencia);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando referencia:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando referencia:" + e.getMessage(), e);
		}
	}

	/**
	 * @param numeroConsulta
	 * @return
	 * @throws ModelException
	 */
	public List<Chserviautor> getListServicioss(Long numeroConsulta) throws ModelException {
		List<Chserviautor> resultList = null;
		List parametros = new ArrayList();

		try {
			if (numeroConsulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chse from " + Chserviautor.class.getName()
						+ " chse  where chse.id.hselconsulta = ?  ");
				parametros.add(numeroConsulta);

				resultList = (List<Chserviautor>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList;
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Lista Servicios :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Lista Servicios   :" + e.getMessage(), e);
		}

	}

	/**
	 * @param consclin
	 * @return
	 * @throws ModelException
	 */
	public Chreferencia getReferencia(Cnconsclin consclin) throws ModelException {
		List<Chreferencia> resultList = null;
		List parametros = new ArrayList();

		try {
			if (consclin != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chre from " + Chreferencia.class.getName()
						+ " chre  where chre.id.hrelconsulta = ? AND chre.id.hrectiposervi = ?  ");
				parametros.add(consclin.getCconnumero());
				parametros.add(IConstantes.TIPO_CONSULTA);

				resultList = (List<Chreferencia>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Referencia:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Referencia :" + e.getMessage(), e);
		}

	}

	/**
	 * @param consclin
	 * @return
	 * @throws ModelException
	 */
	public Chautoriserv getAutorizacion(Cnconsclin consclin) throws ModelException {
		List<Chautoriserv> resultList = null;
		List parametros = new ArrayList();

		try {
			if (consclin != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chau from " + Chautoriserv.class.getName()
						+ " chau  where chau.id.haulconsulta = ?   ");
				parametros.add(consclin.getCconnumero());

				resultList = (List<Chautoriserv>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Autorizacion:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Autorizacion :" + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroCirugia
	 * @param tipoServicio
	 * @param consecutivo
	 * @return
	 * @throws ModelException
	 */
	public Chreferencia getReferencia(Long numeroCirugia, String tipoServicio, Integer consecutivo)
			throws ModelException {
		List<Chreferencia> resultList = null;
		List parametros = new ArrayList();

		try {
			if (numeroCirugia != null && tipoServicio != null && consecutivo != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chre from " + Chreferencia.class.getName()
						+ " chre  where chre.id.hrelconsulta = ? AND chre.id.hrectiposervi = ? AND chre.id.hrenconsecutiv = ? ");
				parametros.add(numeroCirugia);
				parametros.add(tipoServicio);
				parametros.add(consecutivo);

				resultList = (List<Chreferencia>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Referencia:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Referencia :" + e.getMessage(), e);
		}

	}

	public Chautoriserv getAutorizacion(Long numeroCirugia) throws ModelException {
		List<Chautoriserv> resultList = null;
		List parametros = new ArrayList();

		try {
			if (numeroCirugia != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(
						" select chau from " + Chautoriserv.class.getName() + " chau  where chau.haulconsulta = ?    ");
				parametros.add(numeroCirugia);

				resultList = (List<Chautoriserv>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Autorizacion:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Autorizacion :" + e.getMessage(), e);
		}

	}

	/**
	 * @param anatomia
	 * @throws ModelException
	 */
	public void saveAnatomiaPatologica(Chanatopatol anatomia) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(anatomia);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Anatomia Patologica:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Anatomia Patologica:" + e.getMessage(), e);
		}
	}

	/**
	 * @param medida
	 * @throws ModelException
	 */
	public void saveMedidaApoyo(Chmedidapoyo medida) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(medida);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Medida Apoyo:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Medida Apoyo:" + e.getMessage(), e);
		}
	}

	/**
	 * @param consclin
	 * @return
	 * @throws ModelException
	 */
	public Chanatopatol getAnatomiaPatologica(Cnconsclin consclin) throws ModelException {
		List<Chanatopatol> resultList = null;
		List parametros = new ArrayList();

		try {
			if (consclin != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chap from " + Chanatopatol.class.getName()
						+ " chap  where chap.id.haplconsulta = ? AND chap.id.hapctiposervi = ? ");
				parametros.add(consclin.getCconnumero());
				parametros.add(IConstantes.TIPO_CONSULTA);

				resultList = (List<Chanatopatol>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Anatomia Patologica:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Anatomia Patologica:" + e.getMessage(), e);
		}

	}

	/**
	 * @param consclin
	 * @return
	 * @throws ModelException
	 */
	public List<Chanatopatol> getListAnatomiaPatologica(Long numConsulta) throws ModelException {
		List<Chanatopatol> resultList = null;
		List parametros = new ArrayList();

		try {
			if (numConsulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(
						" select chap from " + Chanatopatol.class.getName() + " chap  where chap.id.haplconsulta = ? ");
				parametros.add(numConsulta);

				resultList = (List<Chanatopatol>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList;
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Anatomia Patologica:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Anatomia Patologica:" + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroCirugia
	 * @param tipoServicio
	 * @param consecutivo
	 * @return
	 * @throws ModelException
	 */
	public Chanatopatol getAnatomiaPatologica(Long numeroCirugia, String tipoServicio, Integer consecutivo)
			throws ModelException {
		List<Chanatopatol> resultList = null;
		List parametros = new ArrayList();

		try {
			if (numeroCirugia != null && tipoServicio != null && consecutivo != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chap from " + Chanatopatol.class.getName()
						+ " chap  where chap.id.haplconsulta = ? AND chap.id.hapctiposervi = ? AND chap.id.hapnconsecutiv = ? ");
				parametros.add(numeroCirugia);
				parametros.add(tipoServicio);
				parametros.add(consecutivo);

				resultList = (List<Chanatopatol>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Anatomia Patologica:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Anatomia Patologica:" + e.getMessage(), e);
		}

	}

	/**
	 * @param certificado
	 * @throws ModelException
	 */
	public void saveCertificado(Chcertmedico certificado) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(certificado);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Certificado :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Certificado :" + e.getMessage(), e);
		}
	}

	/**
	 * @param consclin
	 * @param tipo
	 * @return
	 * @throws ModelException
	 */
	public Chcertmedico getCertificado(Cnconsclin consclin, String tipo) throws ModelException {
		List<Chcertmedico> resultList = null;
		List parametros = new ArrayList();

		try {
			if (consclin != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chcm from " + Chcertmedico.class.getName()
						+ " chcm  where chcm.id.hcmlconsulta = ? and chcm.id.hcmctipocert = ?  AND chcm.id.hcmctiposervi = ? ");
				parametros.add(consclin.getCconnumero());
				parametros.add(tipo);
				parametros.add(IConstantes.TIPO_CONSULTA);

				resultList = (List<Chcertmedico>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Certificado Medico:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Certificado Medico:" + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroCirugia
	 * @param tipoServicio
	 * @param consecutivo
	 * @param tipo
	 * @return
	 * @throws ModelException
	 */
	public Chcertmedico getCertificado(Long numeroCirugia, String tipoServicio, Integer consecutivo, String tipo)
			throws ModelException {
		List<Chcertmedico> resultList = null;
		List parametros = new ArrayList();

		try {
			if (numeroCirugia != null && tipoServicio != null && consecutivo != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chcm from " + Chcertmedico.class.getName()
						+ " chcm  where chcm.id.hcmlconsulta = ? and chcm.id.hcmctipocert = ?  AND chcm.id.hcmctiposervi = ? AND chcm.id.hcmnconsecutiv = ? ");
				parametros.add(numeroCirugia);
				parametros.add(tipo);
				parametros.add(tipoServicio);
				parametros.add(consecutivo);

				resultList = (List<Chcertmedico>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Certificado Medico:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Certificado Medico:" + e.getMessage(), e);
		}

	}

	/**
	 * @param numero
	 * @param tipo
	 * @return
	 * @throws ModelException
	 */
	public Chcertmedico getCertificado(Long numero, String tipo) throws ModelException {
		List<Chcertmedico> resultList = null;
		List parametros = new ArrayList();

		try {
			if (numero != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chcm from " + Chcertmedico.class.getName()
						+ " chcm  where chcm.id.hcmlconsulta = ? and chcm.id.hcmctipocert = ?  AND chcm.id.hcmctiposervi = ?  ");
				parametros.add(numero);
				parametros.add(tipo);
				parametros.add(IConstantes.TIPO_CONSULTA);

				resultList = (List<Chcertmedico>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Certificado Medico:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Certificado Medico:" + e.getMessage(), e);
		}

	}

	/**
	 * @return
	 * @throws ModelException
	 */
	public List<Chtipoantece> getTipoAntecedente(Integer tipoHistoria) throws ModelException {
		List<Chtipoantece> resultList = null;
		List parametros = new ArrayList();
		try {
			String claseAntecedentes = "";

			if (tipoHistoria != null && tipoHistoria.equals(IConstantes.HISTORIA_PEDIATRIA)) {
				claseAntecedentes = IConstantes.ANTECEDENTES_PEDIATRICOS;
			} else if (tipoHistoria != null && tipoHistoria.equals(IConstantes.HISTORIA_PRENATAL)) {
				claseAntecedentes = IConstantes.ANTECEDENTES_PRENATAL;
			} else {
				claseAntecedentes = IConstantes.ANTECEDENTES_GENERALES;
			}

			StringBuffer sb = new StringBuffer();
			sb.append(" select chta from " + Chtipoantece.class.getName()
					+ " chta  where chta.htacclaseantec = ? OR chta.htacclaseantec = ?  order by  chta.htanorden asc ");
			if (IConstantes.ANTECEDENTES_PRENATAL.equals(claseAntecedentes)) {
				parametros.add(claseAntecedentes);
				parametros.add(IConstantes.ANTECEDENTES_GENERALES);
			} else {
				parametros.add(claseAntecedentes);
				parametros.add(IConstantes.AMBOS_ANTECEDENTES);
			}

			resultList = (List<Chtipoantece>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			if (!resultList.isEmpty()) {
				return resultList;
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando tipos de Antecedentes Generales:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando tipos de Antecedentes Generales :" + e.getMessage(), e);
		}

	}

	/**
	 * @return
	 * @throws ModelException
	 */
	public List<Chtipoantece> getTipoAntecedentePediatricos() throws ModelException {
		List<Chtipoantece> resultList = null;
		List parametros = new ArrayList();
		try {

			StringBuffer sb = new StringBuffer();
			sb.append(" select chta from " + Chtipoantece.class.getName()
					+ " chta  where chta.htacclaseantec = ? OR chta.htacclaseantec = ? order by  chta.htanorden ");
			parametros.add(IConstantes.ANTECEDENTES_PEDIATRICOS);
			parametros.add(IConstantes.AMBOS_ANTECEDENTES);

			resultList = (List<Chtipoantece>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			if (!resultList.isEmpty()) {
				return resultList;
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando tipos de Antecedentes Pediatricos:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando tipos de Antecedentes Pediatricos :" + e.getMessage(), e);
		}

	}

	/**
	 * @param tipoIdentificacion
	 * @param numeroIdentificacion
	 * @return
	 * @throws ModelException
	 */
	public List<Chusuario> getUsuarios(String tipoIdentificacion, Long numeroIdentificacion) throws ModelException {
		List<Chusuario> resultList = null;
		List parametros = new ArrayList();
		try {

			if (tipoIdentificacion != null && numeroIdentificacion != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chus from " + Chusuario.class.getName()
						+ " chus  where chus.husetipoiden = ? and chus.husanumeiden = ? order by  chus.huslnumero ");
				parametros.add(tipoIdentificacion);
				parametros.add(numeroIdentificacion);

				resultList = (List<Chusuario>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList;
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Usuario:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Usuario :" + e.getMessage(), e);
		}

	}

	/**
	 * @param tipoIdentificacion
	 * @param numeroIdentificacion
	 * 
	 * @return
	 * @throws ModelException
	 */
	public List<Chusuario> getUsuariosClienteActivo(String tipoIdentificacion, Long numeroIdentificacion)
			throws ModelException {
		List<Chusuario> resultList = null;
		List parametros = new ArrayList();
		try {

			if (tipoIdentificacion != null && numeroIdentificacion != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chus from " + Chusuario.class.getName()
						+ " chus  where chus.husetipoiden = ? and chus.husanumeiden = ? and huseestado not in ('SM')  order by  chus.huslnumero ");
				parametros.add(tipoIdentificacion);
				parametros.add(numeroIdentificacion);

				resultList = (List<Chusuario>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList;
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Usuario:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Usuario :" + e.getMessage(), e);
		}

	}

	/**
	 * @param tipoIdentificacion
	 * @param numeroIdentificacion
	 * 
	 * @return
	 * @throws ModelException
	 */
	public List<Chusuario> getUsuariosClienteInactivo(String tipoIdentificacion, Long numeroIdentificacion)
			throws ModelException {
		List<Chusuario> resultList = null;
		List parametros = new ArrayList();
		try {

			if (tipoIdentificacion != null && numeroIdentificacion != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chus from " + Chusuario.class.getName()
						+ " chus  where chus.husetipoiden = ? and chus.husanumeiden = ? and huseestado = ? order by  chus.huslnumero ");
				parametros.add(tipoIdentificacion);
				parametros.add(numeroIdentificacion);
				parametros.add(IConstantes.ESTADO_SIN_MOVIMIENTO);

				resultList = (List<Chusuario>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList;
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Usuario:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Usuario :" + e.getMessage(), e);
		}

	}

	/**
	 * @param usuario
	 * @return
	 * @throws ModelException
	 */
	public List<Chusuario> getUsuarios(Chusuario usuario) throws ModelException {
		List<Chusuario> resultList = null;
		List parametros = new ArrayList();
		try {

			if (usuario != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chus from " + Chusuario.class.getName() + " chus  where  chus.huseestado != ? ");
				parametros.add(IConstantes.ESTADO_INACTIVO);

				if (usuario.getHusetipoiden() != null && !usuario.getHusetipoiden().equals("")) {
					sb.append(" AND chus.husetipoiden = ? ");
					parametros.add(usuario.getHusetipoiden());

				}

				if (usuario.getHusanumeiden() != null && !usuario.getHusanumeiden().equals("")) {
					sb.append(" and chus.husanumeiden = ?  ");
					parametros.add(usuario.getHusanumeiden());
				}

				if (usuario.getHuscprimernomb() != null && !usuario.getHuscprimernomb().equals("")) {
					sb.append(" and chus.huscprimernomb = ?  ");
					parametros.add(usuario.getHuscprimernomb().toUpperCase());
				}

				if (usuario.getHuscsegundnomb() != null && !usuario.getHuscsegundnomb().equals("")) {
					sb.append(" and chus.huscsegundnomb = ?  ");
					parametros.add(usuario.getHuscsegundnomb().toUpperCase());
				}

				if (usuario.getHuscprimerapel() != null && !usuario.getHuscprimerapel().equals("")) {
					sb.append(" and chus.huscprimerapel = ?  ");
					parametros.add(usuario.getHuscprimerapel().toUpperCase());
				}

				if (usuario.getHuscsegundapel() != null && !usuario.getHuscsegundapel().equals("")) {
					sb.append(" and chus.huscsegundapel = ?  ");
					parametros.add(usuario.getHuscsegundapel().toUpperCase());
				}

				sb.append(" order by chus.huslnumero ");

				resultList = (List<Chusuario>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			}

			if (!resultList.isEmpty()) {
				return resultList;
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Usuario:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Usuario :" + e.getMessage(), e);
		}

	}

	/**
	 * @param usuario
	 * @return
	 * @throws ModelException
	 */
	public List<Cncitologi> getUsuariosCitologia(final Chusuario usuario) throws ModelException {
		List<Cncitologi> pis = (List<Cncitologi>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				StringBuffer sb = new StringBuffer();
				sb.append(" select cnci from " + Cncitologi.class.getName() + " cnci  where   cnci.ccilusuario!= 0 ");

				if (usuario.getHusetipoiden() != null && !usuario.getHusetipoiden().equals("")) {
					sb.append(" AND cnci.ccilusuario.husetipoiden =  ").append("'" + usuario.getHusetipoiden() + "'");

				}

				if (usuario.getHusanumeiden() != null && !usuario.getHusanumeiden().equals("")) {
					sb.append(" and cnci.ccilusuario.husanumeiden = ").append(usuario.getHusanumeiden());

				}

				if (usuario.getHuscprimernomb() != null && !usuario.getHuscprimernomb().equals("")) {
					sb.append(" and cnci.ccilusuario.huscprimernomb like   ")
							.append("'%" + usuario.getHuscprimernomb().toUpperCase() + "%'");
				}

				if (usuario.getHuscsegundnomb() != null && !usuario.getHuscsegundnomb().equals("")) {
					sb.append(" and cnci.ccilusuario.huscsegundnomb like   ")
							.append("'%" + usuario.getHuscsegundnomb().toUpperCase() + "%'");
				}

				if (usuario.getHuscprimerapel() != null && !usuario.getHuscprimerapel().equals("")) {
					sb.append(" and cnci.ccilusuario.huscprimerapel like   ")
							.append("'%" + usuario.getHuscprimerapel().toUpperCase() + "%'");
				}

				if (usuario.getHuscsegundapel() != null && !usuario.getHuscsegundapel().equals("")) {
					sb.append(" and cnci.ccilusuario.huscsegundapel like   ")
							.append("'%" + usuario.getHuscsegundapel().toUpperCase() + "%'");
				}

				sb.append(" order by cnci.ccidfecreg desc ");

				String hql = sb.toString();

				Query query = session.createQuery(hql);
				List<Cncitologi> pis;
				pis = query.list();

				for (Cncitologi co : pis) {
					Chusuario usu = co.getCcilusuario();
					Hibernate.initialize(usu);
				}

				return pis;
			}
		});
		return pis;
	}

	/**
	 * @param usuario
	 * @return
	 * @throws ModelException
	 */
	public List<Cnconsclin> getUsuariosProgramarCirugia(final Chusuario usuario) throws ModelException {

		List<Cnconsclin> pis = (List<Cnconsclin>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				StringBuffer sb = new StringBuffer();
				sb.append(" select cncl from " + Cnconsclin.class.getName()
						+ " cncl  where  cncl.ccocestado != 'XX' AND cncl.ccocetapa = 'ES' ");

				if (usuario.getHusetipoiden() != null && !usuario.getHusetipoiden().equals("")) {
					sb.append(" AND cncl.ccoctipide =  ").append("'" + usuario.getHusetipoiden() + "'");

				}

				if (usuario.getHusanumeiden() != null && !usuario.getHusanumeiden().equals("")) {
					sb.append(" and cncl.ccoanumide = ").append(usuario.getHusanumeiden());

				}

				if (usuario.getHuscprimernomb() != null && !usuario.getHuscprimernomb().equals("")) {
					sb.append(" and cncl.ccocprinom = ?  ")
							.append("'" + usuario.getHuscprimernomb().toUpperCase() + "'");
				}

				if (usuario.getHuscsegundnomb() != null && !usuario.getHuscsegundnomb().equals("")) {
					sb.append(" and cncl.ccocsegnom = ?  ")
							.append("'" + usuario.getHuscsegundnomb().toUpperCase() + "'");
				}

				if (usuario.getHuscprimerapel() != null && !usuario.getHuscprimerapel().equals("")) {
					sb.append(" and cncl.ccocpriape = ?  ")
							.append("'" + usuario.getHuscprimerapel().toUpperCase() + "'");
				}

				if (usuario.getHuscsegundapel() != null && !usuario.getHuscsegundapel().equals("")) {
					sb.append(" and cncl.ccocsegape = ?  ")
							.append("'" + usuario.getHuscsegundapel().toUpperCase() + "'");
				}

				sb.append(" order by cncl.cconnumero desc ");

				String hql = sb.toString();

				Query query = session.createQuery(hql);
				List<Cnconsclin> pis;
				pis = query.list();

				for (Cnconsclin co : pis) {
					Cpservicio servicio = co.getCcocservic();
					Hibernate.initialize(servicio);

				}

				return pis;
			}
		});
		return pis;
	}

	/**
	 * @param usuario
	 * @return
	 * @throws ModelException
	 */
	public List<Cnconsclin> getCirugiasPorUsuario(final Chusuario usuario) throws ModelException {
		List<Cnconsclin> pis = (List<Cnconsclin>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				if (usuario != null) {
					StringBuffer sb = new StringBuffer();
					sb.append(" select cncl from " + Cnconsclin.class.getName()
							+ " cncl  where cncl.ccolusuario.huslnumero =   ").append(usuario.getHuslnumero());
					sb.append(" and cncl.ccocestado = 'VG' ");
					sb.append(
							" and ((cncl.ccocservic.csvngrupo in (61,62,63,64,65) and cncl.ccocservic.csvnsubgru between 5 and 14 ) ");
					sb.append(" or (cncl.ccocservic.csvngrupo = 69 and cncl.ccocservic.csvnsubgru = 3 )) ");
					sb.append(" order by cncl.cconnumero desc ");

					String hql = sb.toString();

					Query query = session.createQuery(hql);
					List<Cnconsclin> pis;
					pis = query.list();

					for (Cnconsclin co : pis) {
						Cpservicio servicio = co.getCcocservic();
						Hibernate.initialize(servicio);

					}

					return pis;

				}

				return null;
			}
		});
		return pis;
	}

	public List<Cnconsclin> getBuscadorFacturas(final Chusuario usuario, final Date fechaInicial, final Date fechaFinal)
			throws ModelException {
		List<Cnconsclin> pis = (List<Cnconsclin>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				if (usuario != null && usuario.getHuslnumero() != null) {
					StringBuffer sb = new StringBuffer();
					sb.append(" select  cncl from ");
					sb.append(Cnconsclin.class.getName()).append("  cncl ");
					sb.append(" where cncl.ccocetapa = 'ES' ");
					sb.append(" and cncl.ccocestado  = 'VG'  ");
					sb.append(
							" and cncl.cconnumero  not in (select chdc.hdclconsuasoci from Chdetacirpro chdc where chdc.hdclusuario = :ccolusuario and chdc.hdccestado != 'XX')  ");
					sb.append(" and cncl.ccolusuario.huslnumero  = :ccolusuario  ");
					sb.append(" and cncl.ccocservic.csvntipcon in (2,3,7,11)   ");

					if (fechaInicial != null) {
						sb.append(" and cncl.ccodfecreg >= :fechaInicial  ");
					}

					if (fechaFinal != null) {
						sb.append(" and cncl.ccodfecreg <= :fechaFinal  ");
					}

					String hql = sb.toString();

					Query query = session.createQuery(hql);
					query.setParameter("ccolusuario", usuario.getHuslnumero());
					if (fechaInicial != null) {
						query.setParameter("fechaInicial", fechaInicial);
					}

					if (fechaFinal != null) {
						query.setParameter("fechaFinal", fechaFinal);
					}

					List<Cnconsclin> pis;
					pis = query.list();

					for (Cnconsclin co : pis) {
						Cpservicio servicio = co.getCcocservic();
						Hibernate.initialize(servicio);

						Cptipodocu tipoDoc = co.getCcontipdoc();
						Hibernate.initialize(tipoDoc);

					}

					return pis;
				}
				return null;
			}
		});
		return pis;
	}

	/**
	 * @param usuario
	 * @return
	 * @throws ModelException
	 */
	public List<Chcirugprogr> getCirugiasProgramadas(final Chusuario usuario) throws ModelException {
		List<Chcirugprogr> pis = (List<Chcirugprogr>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				StringBuffer sb = new StringBuffer();
				sb.append("select chcp from ");
				sb.append(Chcirugprogr.class.getName()).append(" chcp ");
				sb.append("WHERE chcp.hcpcestado =  ").append("'" + IConstantes.ESTADO_VIGENTE + "'");
				sb.append("  and chcp.hcpcetapa = ").append("'" + IConstantes.ETAPA_ESPERA + "'");

				if (usuario.getHusetipoiden() != null && !usuario.getHusetipoiden().equals("")) {
					sb.append(" AND chcp.hcplusuario.husetipoiden =  ").append("'" + usuario.getHusetipoiden() + "'");

				}

				if (usuario.getHusanumeiden() != null && !usuario.getHusanumeiden().equals("")) {
					sb.append(" and chcp.hcplusuario.husanumeiden =   ").append(usuario.getHusanumeiden());
				}

				if (usuario.getHuscprimernomb() != null && !usuario.getHuscprimernomb().equals("")) {
					sb.append(" and chcp.hcplusuario.huscprimernomb like   ")
							.append("'%" + usuario.getHuscprimernomb().toUpperCase() + "%'");
				}

				if (usuario.getHuscsegundnomb() != null && !usuario.getHuscsegundnomb().equals("")) {
					sb.append(" and chcp.hcplusuario.huscsegundnomb like   ")
							.append("'%" + usuario.getHuscsegundnomb().toUpperCase() + "%'");

				}

				if (usuario.getHuscprimerapel() != null && !usuario.getHuscprimerapel().equals("")) {
					sb.append(" and chcp.hcplusuario.huscprimerapel like   ")
							.append("'%" + usuario.getHuscprimerapel().toUpperCase() + "%'");
				}

				if (usuario.getHuscsegundapel() != null && !usuario.getHuscsegundapel().equals("")) {
					sb.append(" and chcp.hcplusuario.huscsegundapel like   ")
							.append("'%" + usuario.getHuscsegundapel().toUpperCase() + "%'");
				}

				String hql = sb.toString();

				Query query = session.createQuery(hql);
				List<Chcirugprogr> pis;
				pis = query.list();

				for (Chcirugprogr co : pis) {
					Chusuario usuario = co.getHcplusuario();
					Hibernate.initialize(usuario);

				}

				return pis;
			}
		});
		return pis;
	}

	/**
	 * @param factura
	 * @return
	 * @throws ModelException
	 */
	public Chcirugprogr getProgramarCirugia(Ccfactvent factura) throws ModelException {
		List<Chcirugprogr> resultList = null;
		List parametros = new ArrayList();
		try {
			if (factura != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chcp from " + Chcirugprogr.class.getName()
						+ " chcp  where chcp.hcpntipodocume = ?  and chcp.hcpnnumerodocu = ? ");
				parametros.add(factura.getCfvntipdoc());
				parametros.add(factura.getCfvnnumero());

				resultList = (List<Chcirugprogr>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Programacion de Cirugia:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Programaci�n de Cirugia:" + e.getMessage(), e);
		}

	}

	/**
	 * @param numero
	 * @return
	 * @throws ModelException
	 */
	public Chcirugprogr getProgramarCirugia(Long numero) throws ModelException {
		List<Chcirugprogr> resultList = null;
		List parametros = new ArrayList();
		try {
			if (numero != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chcp from " + Chcirugprogr.class.getName() + " chcp  where chcp.hcplnumero = ?  ");
				parametros.add(numero);

				resultList = (List<Chcirugprogr>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Programacion de Cirugia:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Programaci�n de Cirugia:" + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroUsuario
	 * @return
	 * @throws ModelException
	 */
	public List<Chconsulta> getFoliosUsuario(final Long numeroUsuario) throws ModelException {
		List<Chconsulta> pis = (List<Chconsulta>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				StringBuffer sb = new StringBuffer();
				sb.append("select chco from ");
				sb.append(Chconsulta.class.getName()).append(" chco ");
				sb.append("WHERE chco.hcolusuario.huslnumero =  ").append(numeroUsuario);
				sb.append(" AND chco.hcoeetapa = 'CE' ");
				sb.append(" AND chco.hcocservicio.csvntiphis  not in (:wtiphistoma, :wtiphislectura,57,58,59) ");
				sb.append("  order by  chco.hcodfecregistr desc ");

				String hql = sb.toString();

				Query query = session.createQuery(hql);
				query.setParameter("wtiphistoma", IConstantes.HISTORIA_PROCEDIMIENTO_CITOLOGIA_TOMA);
				query.setParameter("wtiphislectura", IConstantes.HISTORIA_PROCEDIMIENTO_CITOLOGIA_LECTURA);

				List<Chconsulta> pis;
				pis = query.list();

				for (Chconsulta co : pis) {
					Cpservicio servicio = co.getHcocservicio();
					Hibernate.initialize(servicio);

					Chusuario usu = co.getHcolusuario();
					Hibernate.initialize(usu);

					Cptipodocu tip = co.getHcontipdoc();
					Hibernate.initialize(tip);

				}

				return pis;
			}
		});
		return pis;
	}

	public List<Chconsulta> getFoliosUsuarioNotaAclaratoria(final Long numeroUsuario, final String userName)
			throws ModelException {
		List<Chconsulta> pis = (List<Chconsulta>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				String HORA_INICIAL = " 00:00";
				String HORA_FINAL = " 23:59";
				String fechaI = null;
				String fechaF = null;

				int diferenciaEnDias = 1;
				Date fechaActual = Calendar.getInstance().getTime();
				long tiempoActual = fechaActual.getTime();
				long unDia = diferenciaEnDias * 24 * 60 * 60 * 1000;
				Date fechaAyer = new Date(tiempoActual - unDia);

				Date fechaFinal = new Date();
				Date fechaHoy = new Date();

				Calendar fechaActiva = Calendar.getInstance();
				fechaActiva.set(Calendar.YEAR, 2020);
				fechaActiva.set(Calendar.MONTH, Calendar.NOVEMBER);
				fechaActiva.set(Calendar.DAY_OF_MONTH, 30);

				if (fechaAyer != null && fechaFinal != null) {
					SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");

					fechaI = dateFormat.format(fechaAyer) + HORA_INICIAL;

					fechaF = dateFormat.format(fechaFinal) + HORA_FINAL;

				}

				StringBuffer sb = new StringBuffer();
				sb.append("select chco from ");
				sb.append(Chconsulta.class.getName()).append(" chco ");
				sb.append("WHERE chco.hcolusuario.huslnumero = :numeroUsuario ");
				sb.append(" AND chco.hcoeetapa = 'CE' ");
				sb.append(" AND chco.hcocservicio.csvntiphis  not in (:wtiphistoma, :wtiphislectura, :wtiphiscero ) ");
				if (fechaHoy.after(fechaActiva.getTime())) {
					sb.append(
							" AND ((chco.hcodfeccierre BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi')) OR chco.hcolnumero in (select chan.hannnumerconsu from Chautornota chan where chan.hancaceptsolic = 'S' and TO_DATE(sysdate, 'dd/MM/yyyy') between TO_DATE(chan.handfechainici, 'dd/MM/yyyy') and TO_DATE(chan.handfechafinal,'dd/MM/yyyy')))");
				}

				sb.append(" order by  chco.hcodfecregistr desc ");

				String hql = sb.toString();

				Query query = session.createQuery(hql);
				query.setParameter("numeroUsuario", numeroUsuario);
				query.setParameter("wtiphistoma", IConstantes.HISTORIA_PROCEDIMIENTO_CITOLOGIA_TOMA);
				query.setParameter("wtiphislectura", IConstantes.HISTORIA_PROCEDIMIENTO_CITOLOGIA_LECTURA);

				query.setParameter("wtiphiscero", IConstantes.HISTORIA_TODAS);
				if (fechaHoy.after(fechaActiva.getTime())) {
					query.setParameter("fechaI", fechaI);
					query.setParameter("fechaF", fechaF);
				}
				List<Chconsulta> pis;
				pis = query.list();

				for (Chconsulta co : pis) {
					Cpservicio servicio = co.getHcocservicio();
					Hibernate.initialize(servicio);

					Chusuario usu = co.getHcolusuario();
					Hibernate.initialize(usu);

				}

				return pis;
			}
		});
		return pis;
	}

	public List<Chconsulta> getFoliosUsuarioEvolucion(final Long numeroUsuario) throws ModelException {
		List<Chconsulta> pis = (List<Chconsulta>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				StringBuffer sb = new StringBuffer();
				sb.append("select chco from ");
				sb.append(Chconsulta.class.getName()).append(" chco ");
				sb.append("WHERE chco.hcolusuario.huslnumero = :numeroUsuario ");
				sb.append(" AND chco.hcoeetapa = 'CE' ");
				sb.append(" AND chco.hcocservicio.csvntiphis  not in (:wtiphistoma, :wtiphislectura , :wtiphiscero ) ");
				sb.append(" order by  chco.hcodfecregistr desc ");

				String hql = sb.toString();

				Query query = session.createQuery(hql);
				query.setParameter("numeroUsuario", numeroUsuario);
				query.setParameter("wtiphistoma", IConstantes.HISTORIA_PROCEDIMIENTO_CITOLOGIA_TOMA);
				query.setParameter("wtiphislectura", IConstantes.HISTORIA_PROCEDIMIENTO_CITOLOGIA_LECTURA);
				query.setParameter("wtiphiscero", IConstantes.HISTORIA_TODAS);
				List<Chconsulta> pis;
				pis = query.list();

				for (Chconsulta co : pis) {
					Cpservicio servicio = co.getHcocservicio();
					Hibernate.initialize(servicio);

					Chusuario usu = co.getHcolusuario();
					Hibernate.initialize(usu);

				}

				return pis;
			}
		});
		return pis;
	}

	/**
	 * @param numeroUsuario
	 * @return
	 * @throws ModelException
	 */
	public List<Chconsulta> getFoliosUsuarioExamenesClinicos(final Long numeroUsuario) throws ModelException {
		List<Chconsulta> pis = (List<Chconsulta>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				String HORA_INICIAL = " 00:00";
				String HORA_FINAL = " 23:59";
				String fechaI = null;
				String fechaF = null;

				int diferenciaEnDias = 7;
				Date fechaActual = Calendar.getInstance().getTime();
				long tiempoActual = fechaActual.getTime();
				long unDia = diferenciaEnDias * 24 * 60 * 60 * 1000;
				Date fechaAyer = new Date(tiempoActual - unDia);

				Date fechaFinal = new Date();

				if (fechaAyer != null && fechaFinal != null) {
					SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");

					fechaI = dateFormat.format(fechaAyer) + HORA_INICIAL;

					fechaF = dateFormat.format(fechaFinal) + HORA_FINAL;

				}

				StringBuffer sb = new StringBuffer();
				sb.append("select chco from ");
				sb.append(Chconsulta.class.getName()).append(" chco ");
				sb.append("WHERE chco.hcolusuario.huslnumero = :numeroUsuario ");
				sb.append(" AND chco.hcoeetapa = 'CE' ");
				sb.append(" AND  chco.hcocservicio.csvntiphis not in (:wtiphistoma, :wtiphislectura, :wtiphiscero )  ");
				sb.append(
						" AND (chco.hcodfeccierre BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))");
				sb.append(" order by  chco.hcodfecregistr desc ");

				String hql = sb.toString();

				Query query = session.createQuery(hql);
				query.setParameter("numeroUsuario", numeroUsuario);
				query.setParameter("fechaI", fechaI);
				query.setParameter("fechaF", fechaF);
				query.setParameter("wtiphistoma", IConstantes.HISTORIA_PROCEDIMIENTO_CITOLOGIA_TOMA);
				query.setParameter("wtiphislectura", IConstantes.HISTORIA_PROCEDIMIENTO_CITOLOGIA_LECTURA);
				query.setParameter("wtiphiscero", IConstantes.HISTORIA_TODAS);

				List<Chconsulta> pis;
				pis = query.list();

				for (Chconsulta co : pis) {
					Cpservicio servicio = co.getHcocservicio();
					Hibernate.initialize(servicio);

					Chusuario usu = co.getHcolusuario();
					Hibernate.initialize(usu);

				}

				return pis;
			}
		});
		return pis;
	}

	/**
	 * @param numeroUsuario
	 * @return
	 * @throws ModelException
	 */
	public List<Chconsulta> getFoliosUsuarioIncompleto(final Long numeroUsuario) throws ModelException {
		List<Chconsulta> pis = (List<Chconsulta>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				StringBuffer sb = new StringBuffer();
				sb.append("select chco from ");
				sb.append(Chconsulta.class.getName()).append(" chco ");
				sb.append("WHERE chco.hcolusuario.huslnumero =  ").append(numeroUsuario);
				sb.append(" AND chco.hcoeetapa = 'AB' ");
				sb.append(
						" AND  chco.hcocservicio.csvntiphis  not in (:wtiphistoma, :wtiphislectura, :wtiphiscero )  ");
				sb.append("  order by  chco.hcodfecregistr desc ");

				String hql = sb.toString();

				Query query = session.createQuery(hql);
				query.setParameter("wtiphistoma", IConstantes.HISTORIA_PROCEDIMIENTO_CITOLOGIA_TOMA);
				query.setParameter("wtiphislectura", IConstantes.HISTORIA_PROCEDIMIENTO_CITOLOGIA_LECTURA);
				query.setParameter("wtiphiscero", IConstantes.HISTORIA_TODAS);
				List<Chconsulta> pis;
				pis = query.list();

				for (Chconsulta co : pis) {
					Cpservicio servicio = co.getHcocservicio();
					Hibernate.initialize(servicio);

					Chusuario usu = co.getHcolusuario();
					Hibernate.initialize(usu);

					Cptipodocu tip = co.getHcontipdoc();
					Hibernate.initialize(tip);

				}

				return pis;
			}
		});
		return pis;
	}

	/**
	 * @param numeroUsuario
	 * @return
	 * @throws ModelException
	 */
	public List<Chconsulta> getFoliosUsuarioTipoHistoria(final Long numeroUsuario, final Integer tipoHistoria)
			throws ModelException {
		List<Chconsulta> pis = (List<Chconsulta>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				StringBuffer sb = new StringBuffer();
				sb.append("select chco from ");
				sb.append(Chconsulta.class.getName()).append(" chco ");
				sb.append("WHERE chco.hcoeetapa = 'CE' and chco.hcolusuario.huslnumero =  ").append(numeroUsuario);
				sb.append(" and chco.hcocservicio.csvntiphis =   ").append(tipoHistoria);
				sb.append("  order by  chco.hcodfecregistr desc ");

				String hql = sb.toString();

				Query query = session.createQuery(hql);
				List<Chconsulta> pis;
				pis = query.list();

				for (Chconsulta co : pis) {
					Cpservicio servicio = co.getHcocservicio();
					Hibernate.initialize(servicio);

					Chusuario usu = co.getHcolusuario();
					Hibernate.initialize(usu);

				}

				return pis;
			}
		});
		return pis;
	}

	/**
	 * @param numeroUsuario
	 * @param listTipoHistoria
	 * @return
	 */
	public List<Chconsulta> getFoliosUsuarioTipoHistoria(final Long numeroUsuario, final List listTipoHistoria) {
		List<Chconsulta> pis = (List<Chconsulta>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				String tipoHistoria = "";

				if (listTipoHistoria != null && !listTipoHistoria.isEmpty()) {
					Iterator it = listTipoHistoria.iterator();
					while (it.hasNext()) {
						tipoHistoria = tipoHistoria + it.next() + ",";
					}

					if (tipoHistoria != null && !tipoHistoria.equals("")) {
						tipoHistoria = tipoHistoria.substring(0, tipoHistoria.length() - 1);
						tipoHistoria = "(" + tipoHistoria + ")";
					}
				}

				StringBuffer sb = new StringBuffer();
				sb.append("select chco from ");
				sb.append(Chconsulta.class.getName()).append(" chco ");
				sb.append("WHERE chco.hcoeetapa = 'CE' and chco.hcolusuario.huslnumero =  ").append(numeroUsuario);
				sb.append(" and chco.hcocservicio.csvntiphis in ").append(tipoHistoria);
				sb.append("  order by  chco.hcodfecregistr desc ");

				String hql = sb.toString();

				Query query = session.createQuery(hql);
				List<Chconsulta> pis;
				pis = query.list();

				for (Chconsulta co : pis) {
					Cpservicio servicio = co.getHcocservicio();
					Hibernate.initialize(servicio);

					Chusuario usu = co.getHcolusuario();
					Hibernate.initialize(usu);

				}

				return pis;
			}
		});
		return pis;
	}

	/**
	 * @param numeroUsuario
	 * @param fechaInicial
	 * @param fechaFinal
	 * @return
	 * @throws ModelException
	 */
	public List<Chconsulta> getFoliosUsuarioPorFecha(final Long numeroUsuario, final Date fechaInicial,
			final Date fechaFinal) throws ModelException {
		List<Chconsulta> pis = (List<Chconsulta>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				StringBuffer sb = new StringBuffer();
				sb.append("select  chco from ");
				sb.append(Chconsulta.class.getName()).append(" chco ");
				sb.append("WHERE chco.hcolusuario.huslnumero =  ").append(numeroUsuario);
				sb.append("  order by  chco.hcodfecregistr desc ");

				String hql = sb.toString();

				Query query = session.createQuery(hql);
				List<Chconsulta> pis;
				pis = query.list();

				for (Chconsulta co : pis) {

					Chusuario usu = co.getHcolusuario();
					Hibernate.initialize(usu);

					Set motivo = co.getChmotivocons();
					Hibernate.initialize(motivo);

					Set impresion = co.getChimprdiags();
					Hibernate.initialize(impresion);

					Set riesgo = co.getChriesgomamas();
					Hibernate.initialize(riesgo);

					Set antegineco = co.getChanteginecos();
					Hibernate.initialize(antegineco);

					Set examendiag = co.getChexamediagns();
					Hibernate.initialize(examendiag);

					Set conducta = co.getChconductas();
					Hibernate.initialize(conducta);

					Set referencia = co.getChreferencias();
					Hibernate.initialize(referencia);

					Set exafismama = co.getChexafismamas();
					Hibernate.initialize(exafismama);

					Set examen = co.getChexamfisicos();
					Hibernate.initialize(examen);

					Set anatomia = co.getChanatopatols();
					Hibernate.initialize(anatomia);

					Set incapacidad = co.getChincapacidas();
					Hibernate.initialize(incapacidad);

					Set violencia = co.getChviolencias();
					Hibernate.initialize(violencia);

					Set identiriesgo = co.getChidentiriesgo();
					Hibernate.initialize(identiriesgo);

					Set orden = co.getChordecirugis();
					Hibernate.initialize(orden);

					Set antecemama = co.getChantecemamas();
					Hibernate.initialize(antecemama);

					Set paraclinicos = co.getChexameparacs();
					Hibernate.initialize(paraclinicos);

					Set notaMedicad = co.getChnotamedicas();
					Hibernate.initialize(notaMedicad);

					Set antecedentes = co.getChantecegenes();
					Hibernate.initialize(antecedentes);

					Set formulaMedicaq = co.getChformulameds();
					Hibernate.initialize(formulaMedicaq);

					Set formulaMedcaCi = co.getChformulahos();
					Hibernate.initialize(formulaMedcaCi);

					Set examenPediatria = co.getChpediexamens();
					Hibernate.initialize(examenPediatria);

					Set imagenes = co.getChexameimages();
					Hibernate.initialize(imagenes);

					Set certificado = co.getChcertmedicos();
					Hibernate.initialize(certificado);

					Set laboratorios = co.getChexamelabors();
					Hibernate.initialize(laboratorios);

					Set electrofisiologicos = co.getChexameelects();
					Hibernate.initialize(electrofisiologicos);

					Set reserva = co.getChresersangrs();
					Hibernate.initialize(reserva);

					Set hospitalizacion = co.getChremihospits();
					Hibernate.initialize(hospitalizacion);

					Cpservicio servicio = co.getHcocservicio();
					Hibernate.initialize(servicio);

					/* Consulta Psicologica */
					Set chantecpsico = co.getChantecpsico();
					Hibernate.initialize(chantecpsico);

					Set chevalugener = co.getChevalugener();
					Hibernate.initialize(chevalugener);

					Set chpladetrat = co.getChpladetrat();
					Hibernate.initialize(chpladetrat);

					/* Vacunacion Cervix */
					Set chcervaaplic = co.getChcervaaplic();
					Hibernate.initialize(chcervaaplic);

					/* Medicamentos */
					Set chmedicament = co.getChmedicament();
					Hibernate.initialize(chmedicament);

					Set chvacunacion = co.getChvacunacion();
					Hibernate.initialize(chvacunacion);

					Set chevoluconsu = co.getChevoluconsu();
					Hibernate.initialize(chevoluconsu);

					// Esterilizacion Femenina
					Set chcuestester = co.getChcuestester();
					Hibernate.initialize(chcuestester);

					// Esterilizacion Masculina
					Set chestermascu = co.getChestermascu();
					Hibernate.initialize(chestermascu);

					// CONTROL

					Set chcontrolcon = co.getChcontrolcon();
					Hibernate.initialize(chcontrolcon);

					// PROCEDIMIENTOS EN CONSULTORIO
					Set chproceconsu = co.getChproceconsu();
					Hibernate.initialize(chproceconsu);

					// INTERRUPCION

					Set chestadpsico = co.getChestadpsico();
					Hibernate.initialize(chestadpsico);

					Set chremisilve = co.getChremisilve();
					Hibernate.initialize(chremisilve);

					// APLICACION Y RETIRO PF

					Set chdispoaplic = co.getChdispoaplic();
					Hibernate.initialize(chdispoaplic);

					// Antecedentes Prenatales
					Set chantecprena = co.getChantecprena();
					Hibernate.initialize(chantecprena);

					Set chanteceobst = co.getChanteceobst();
					Hibernate.initialize(chanteceobst);

					Set chgestacion = co.getChgestacion();
					Hibernate.initialize(chgestacion);

					Set chcontrolpre = co.getChcontrolpre();
					Hibernate.initialize(chcontrolpre);

					Set chtamizalapr = co.getChtamizalapr();
					Hibernate.initialize(chtamizalapr);

					// Informe Ecografia
					Set chinfomamogr = co.getChinfomamogrs();
					Hibernate.initialize(chinfomamogr);

					// Remisi�n
					Set chremision = co.getChremisions();
					Hibernate.initialize(chremision);

					// Cervix

					Set chcancecervi = co.getChcancecervi();
					Hibernate.initialize(chcancecervi);

					Set chcuestplanis = co.getChcuestplanis();
					Hibernate.initialize(chcuestplanis);

					Set chvalorprean = co.getChvalorprean();
					Hibernate.initialize(chvalorprean);

					Set chcuestanest = co.getChcuestanest();
					Hibernate.initialize(chcuestanest);

					Set chexafisane = co.getChexafisane();
					Hibernate.initialize(chexafisane);

					Set chresulparac = co.getChresulparac();
					Hibernate.initialize(chresulparac);

					// Registra Examenes clinicos

					Set chregisexame = co.getChregisexame();
					Hibernate.initialize(chregisexame);

					// Revision por sistemas

					Set chrevissiste = co.getChrevissiste();
					Hibernate.initialize(chrevissiste);

					Set chantecvasec = co.getChantecvasec();
					Hibernate.initialize(chantecvasec);
				}

				return pis;
			}
		});
		return pis;
	}

	/**
	 * @param idUsuario
	 * @return
	 * @throws ModelException
	 */
	public Chusuario getUsuarioPorPk(Long idUsuario) throws ModelException {
		Chusuario usuario;
		try {
			StringBuffer sb = new StringBuffer();
			sb.append(" select usu from ").append(Chusuario.class.getName()).append(" usu ");
			sb.append(" where usu.huslnumero = ? ");

			List<Chusuario> lstUsuario = (List<Chusuario>) getHibernateTemplate().find(sb.toString(), idUsuario);

			if (!lstUsuario.isEmpty()) {
				return lstUsuario.get(0);
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Usuario por pk:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Usuario:" + e.getMessage(), e);
		}

	}

	/**
	 * @param idConsulta
	 * @return
	 * @throws ModelException
	 */
	public Chmotivocon getMotivoConsulta(Long idConsulta) throws ModelException {
		List<Chmotivocon> resultList = null;
		List parametros = new ArrayList();
		try {
			StringBuffer sb = new StringBuffer();
			sb.append(" select chmc from " + Chmotivocon.class.getName()
					+ " chmc  where chmc.id.hmclconsulta = ? AND chmc.id.hmcctiposervi = ? ");
			parametros.add(idConsulta);
			parametros.add(IConstantes.TIPO_CONSULTA);

			resultList = (List<Chmotivocon>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			if (!resultList.isEmpty()) {
				return resultList.get(0);
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Motivo de Consulta:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Motivo de Consulta:" + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroConsulta
	 * @return
	 * @throws ModelException
	 */
	public List<Chantecegene> getAntecedentesGenerales(Long numeroConsulta) throws ModelException {
		List<Chantecegene> resultList = null;
		List parametros = new ArrayList();

		try {
			if (numeroConsulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chag from " + Chantecegene.class.getName()
						+ " chag  where chag.id.hanlconsulta = ? AND chag.id.hanctiposervi = ? ");
				parametros.add(numeroConsulta);
				parametros.add(IConstantes.TIPO_CONSULTA);

				resultList = (List<Chantecegene>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList;
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Antecedentes Generales:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Antecedentes Generales :" + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroConsulta
	 * @return
	 * @throws ModelException
	 */
	public String getAntecedentesGeneralesTexto(Long numeroConsulta) throws ModelException {
		String antegeneral = "";
		List<Chantecegene> lstAntegeneral = null;

		try {
			lstAntegeneral = getAntecedentesGenerales(numeroConsulta);
		} catch (HibernateException e) {
			throw new ModelException("Error consultando Antecedentes Generales:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Antecedentes Generales :" + e.getMessage(), e);
		}

		if (lstAntegeneral != null && !lstAntegeneral.isEmpty()) {
			Iterator it = lstAntegeneral.iterator();

			int i = 0;
			String alergicos = "ANTECEDENTES ALERGICOS: ";
			String familiares = "ANTECEDENTES FAMILIARES: ";
			String its = "ANTECEDENTES ITS: ";
			String patologicos = "ANTECEDENTES PATOLOGICOS: ";
			String quirurgicos = "ANTECEDENTES QUIRURGICOS: ";
			String toxicos = "ANTECEDENTES TOXICOS: ";
			String transfucionales = "ANTECEDENTES TRANSFUNCIONALES: ";
			String traumaticos = "ANTECEDENTES TRAUMATICOS: ";
			String farmacologicos = "ANTECEDENTES FARMACOLOGICOS: ";
			while (it.hasNext()) {
				Chantecegene antecedente = (Chantecegene) it.next();
				i++;
				if (antecedente != null) {
					if (antecedente.getHanntipoante().equals(IConstantes.CODIGO_ANTECEDENTE_ALERGICOS)) {
						alergicos = alergicos + antecedente.getHantdescripcio() + " \n";
					} else if (antecedente.getHanntipoante().equals(IConstantes.CODIGO_ANTECEDENTE_FAMILIARES)) {
						familiares = familiares + antecedente.getHantdescripcio() + " \n";
					} else if (antecedente.getHanntipoante().equals(IConstantes.CODIGO_ANTECEDENTE_ITS)) {
						its = its + antecedente.getHantdescripcio() + " \n";
					} else if (antecedente.getHanntipoante().equals(IConstantes.CODIGO_ANTECEDENTE_PATOLOGICOS)) {
						patologicos = patologicos + antecedente.getHantdescripcio() + " \n";
					} else if (antecedente.getHanntipoante().equals(IConstantes.CODIGO_ANTECEDENTE_QUIRURGICOS)) {
						quirurgicos = quirurgicos + antecedente.getHantdescripcio() + " \n";
					} else if (antecedente.getHanntipoante().equals(IConstantes.CODIGO_ANTECEDENTE_TOXICOS)) {
						toxicos = toxicos + antecedente.getHantdescripcio() + " \n";
					} else if (antecedente.getHanntipoante().equals(IConstantes.CODIGO_ANTECEDENTE_TRASNFUSIONALES)) {
						transfucionales = transfucionales + antecedente.getHantdescripcio() + " \n";
					} else if (antecedente.getHanntipoante().equals(IConstantes.CODIGO_ANTECEDENTE_TRAUMATICOS)) {
						traumaticos = traumaticos + antecedente.getHantdescripcio() + " \n";
					} else if (antecedente.getHanntipoante().equals(IConstantes.CODIGO_ANTECEDENTE_FARMACOLOGICO)) {
						farmacologicos = farmacologicos + antecedente.getHantdescripcio() + " \n";
					}
				}
			}
			antegeneral = alergicos + familiares + its + patologicos + quirurgicos + toxicos + transfucionales
					+ traumaticos + farmacologicos;

		}
		return antegeneral;
	}

	/**
	 * @param numeroUsuario
	 * @return
	 * @throws ModelException
	 */
	public Chantegineco getAntecedentesGinecologicos(Long numeroUsuario) throws ModelException {
		List<Chantegineco> resultList = null;
		List parametros = new ArrayList();
		try {

			StringBuffer sb = new StringBuffer();
			sb.append(" select chag from " + Chantegineco.class.getName()
					+ " chag  where chag.id.haglconsulta = ? AND chag.id.hagctiposervi = ? ");
			parametros.add(numeroUsuario);
			parametros.add(IConstantes.TIPO_CONSULTA);

			resultList = (List<Chantegineco>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			if (!resultList.isEmpty()) {
				return resultList.get(0);
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Antecedentes Ginecologico:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Antecedentes Ginecologicos:" + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroUsuario
	 * @return
	 * @throws ModelException
	 */
	public List<Chantecegene> getAntecedentesUsuario(Long numeroUsuario) throws ModelException {
		List<Chantecegene> resultList = null;
		List parametros = new ArrayList();

		try {

			StringBuffer sb = new StringBuffer();
			sb.append(" select chag from " + Chantecegene.class.getName()).append(" chag, ");
			sb.append(Chconsulta.class.getName()).append(" chco ");
			sb.append(
					"  where chco.hcolusuario.huslnumero = ? AND chco.hcolnumero = chag.id.hanlconsulta and chag.hanntipoante <> ? and chag.hanntipoante <> ?  ");
			sb.append(
					" and chco.hcoeetapa = ?  and chag.hantdescripcio not in ('Niega','No refiere','Niega Niega')  order by chag.hanntipoante, chag.id.hanlconsulta ");
			parametros.add(numeroUsuario);
			parametros.add(IConstantes.CODIGO_ANTECEDENTE_NIEGA);
			parametros.add(IConstantes.CODIGO_ANTECEDENTE_NUEVOS_ANTECEDENTES);
			parametros.add(IConstantes.ETAPA_CERRADA);

			resultList = (List<Chantecegene>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			if (!resultList.isEmpty()) {
				return resultList;
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Antecedentes Generales por Usuario:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Antecedentes Generales por Usuario:" + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroUsuario
	 * @return
	 * @throws ModelException
	 */
	public List<Chantecegene> getAntecedentesUsuarioAnterioresXFecha(Long numeroUsuario, Date fechaRegistro)
			throws ModelException {
		List<Chantecegene> resultList = null;
		List parametros = new ArrayList();

		try {

			Calendar fecha = Calendar.getInstance();
			fecha.setTime(fechaRegistro);
			fecha.add(Calendar.DAY_OF_YEAR, 1);

			StringBuffer sb = new StringBuffer();
			sb.append(" select chag from " + Chantecegene.class.getName()).append(" chag, ");
			sb.append(Chconsulta.class.getName()).append(" chco ");
			sb.append(
					"  where chco.hcolusuario.huslnumero = ? AND chco.hcolnumero = chag.id.hanlconsulta and chag.hanntipoante <> ? and chag.hanntipoante <> ? ");
			// sb.append(" and chag.handfecregistr <= ? ");
			sb.append(
					"  and chag.hantdescripcio not in ('Niega','No refiere','Niega Niega')  order by chag.hanntipoante, chag.id.hanlconsulta ");
			parametros.add(numeroUsuario);
			parametros.add(IConstantes.CODIGO_ANTECEDENTE_NUEVOS_ANTECEDENTES);
			parametros.add(IConstantes.CODIGO_ANTECEDENTE_NIEGA);

			// parametros.add(fecha.getTime());

			resultList = (List<Chantecegene>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			if (!resultList.isEmpty()) {
				return resultList;
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Antecedentes Generales por Usuario:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Antecedentes Generales por Usuario:" + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroConsulta
	 * @return
	 * @throws ModelException
	 */
	public List<Chantecegene> getAntecedentesUsuarioActualConsulta(Long numeroConsulta) throws ModelException {
		List<Chantecegene> resultList = null;
		List parametros = new ArrayList();

		try {

			StringBuffer sb = new StringBuffer();
			sb.append(" select chag from " + Chantecegene.class.getName()).append(" chag, ");
			sb.append(Chconsulta.class.getName()).append(" chco ");
			sb.append(
					"  where chco.hcolnumero = ? AND chco.hcolnumero = chag.id.hanlconsulta and chag.hanntipoante = ? ");
			// sb.append(" and chag.handfecregistr <= ? ");
			sb.append(
					"  and chag.hantdescripcio not in ('Niega','No refiere','Niega Niega')  order by chag.hanntipoante, chag.id.hanlconsulta ");
			parametros.add(numeroConsulta);
			parametros.add(IConstantes.CODIGO_ANTECEDENTE_NIEGA);
			// parametros.add(fecha.getTime());

			resultList = (List<Chantecegene>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			if (!resultList.isEmpty()) {
				return resultList;
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Antecedentes Generales por Usuario:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Antecedentes Generales por Usuario:" + e.getMessage(), e);
		}

	}

	// Historico de paraclinicos del paciente(Usuario)
	// CARLOS ANDRES VARGAS ROA

	/**
	 * @param numeroUsuario
	 * @return
	 * @throws ModelException
	 */
	public

			List<Chparaclinic> getParaclinicosUsuario(Long numeroUsuario) throws ModelException {
		List<Chparaclinic> resultlist = null;
		List parametros = new ArrayList();

		try {
			StringBuffer sb = new StringBuffer();
			sb.append(" select chpa from " + Chparaclinic.class.getName()).append(" chpa,");
			sb.append(Chconsulta.class.getName()).append(" chco ");
			sb.append(" where chco.hcolusuario = ? AND chco.hcolnumero = chpa.id.hpalconsulta ");
			sb.append(" and chco.hcoeetapa = ? order by chpa.id.hpalconsulta ");
			parametros.add(numeroUsuario);
			parametros.add(IConstantes.ETAPA_CERRADA);

			resultlist = (List<Chparaclinic>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			if (!resultlist.isEmpty()) {
				return resultlist;
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Paraclinicos por Usuario:Hibernate" + e.getMessage(), e);

		} catch (Exception e) {
			throw new ModelException("Error consultando Paraclinicos por Usuario:Aplicacion" + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroConsulta
	 * @return
	 * @throws ModelException
	 */
	public Chexamfisico getExamenFisico(Long numeroConsulta, Integer consecutivo) throws ModelException {
		List<Chexamfisico> resultList = null;
		List parametros = new ArrayList();

		try {

			if (numeroConsulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chef from " + Chexamfisico.class.getName()
						+ " chef  where chef.id.heflconsulta = ? AND chef.id.hefnconsecutiv = ? ");
				parametros.add(numeroConsulta);
				parametros.add(consecutivo);

				resultList = (List<Chexamfisico>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Examen Fisico :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Examen Fisico :" + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroConsulta
	 * @return
	 * @throws ModelException
	 */
	public Chviolencia getEncuestaViolencia(Long numeroConsulta) throws ModelException {
		List<Chviolencia> resultList = null;
		List parametros = new ArrayList();

		try {
			if (numeroConsulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chvi from " + Chviolencia.class.getName()
						+ " chvi  where chvi.id.hvilconsulta = ? AND chvi.id.hvictiposervi = ? ");
				parametros.add(numeroConsulta);
				parametros.add(IConstantes.TIPO_CONSULTA);
				resultList = (List<Chviolencia>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Encusta de violencia:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Encusta de violencia:" + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroConsulta
	 * @return
	 * @throws ModelException
	 */
	public Chimprdiag getImresionDiagnostica(Long numeroConsulta, Integer consecutivo) throws ModelException {
		List<Chimprdiag> resultList = null;
		List parametros = new ArrayList<Chimprdiag>();

		try {
			if (numeroConsulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chid from " + Chimprdiag.class.getName()
						+ " chid  where chid.id.hidlconsulta = ? AND  chid.id.hidnconsecutiv = ? ");
				parametros.add(numeroConsulta);
				parametros.add(consecutivo);

				resultList = (List<Chimprdiag>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Impresion Diagnostica :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Impresion Diagnostica : " + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroConsulta
	 * @return
	 * @throws ModelException
	 */
	public Chconducta getConducta(Long numeroConsulta) throws ModelException {
		List<Chconducta> resultList = null;
		List parametros = new ArrayList<Chconducta>();

		try {

			if (numeroConsulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chco from " + Chconducta.class.getName()
						+ " chco  where chco.id.hcnlconsulta = ? AND chco.id.hcnctiposervi = ? ");
				parametros.add(numeroConsulta);
				parametros.add(IConstantes.TIPO_CONSULTA);

				resultList = (List<Chconducta>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Conducta :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Conducta : " + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroConsulta
	 * @return
	 * @throws ModelException
	 */
	public List<Chexameparac> getExamenesParaclinicos(Long numeroConsulta) throws ModelException {
		List<Chexameparac> resultList = null;
		List parametros = new ArrayList<Chexameparac>();

		try {
			if (numeroConsulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chep from " + Chexameparac.class.getName()
						+ " chep  where chep.id.heplconsulta = ? AND chep.id.hepctiposervi = ? ");
				parametros.add(numeroConsulta);
				parametros.add(IConstantes.TIPO_CONSULTA);

				resultList = (List<Chexameparac>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList;
				}
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Examenes Paraclinicos :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Examenes Paraclinicos : " + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroConsulta
	 * @return
	 * @throws ModelException
	 */
	public List<Chformulamed> getPrescripcionMedica(Long numeroConsulta) throws ModelException {
		List<Chformulamed> resultList = null;
		List parametros = new ArrayList<Chformulamed>();

		try {
			if (numeroConsulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chfm from " + Chformulamed.class.getName()
						+ " chfm  where chfm.id.hfolconsulta = ?  ");
				parametros.add(numeroConsulta);

				resultList = (List<Chformulamed>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList;
				}
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Incapacidad :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Incapcidad : " + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroConsulta
	 * @return
	 * @throws ModelException
	 */
	public Chincapacida getIncapacidad(Long numeroConsulta) throws ModelException {
		List<Chincapacida> resultList = null;
		List parametros = new ArrayList<Chincapacida>();

		try {
			if (numeroConsulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chin from " + Chincapacida.class.getName()
						+ " chin  where chin.id.hinlconsulta = ? AND chin.id.hinctiposervi = ?");
				parametros.add(numeroConsulta);
				parametros.add(IConstantes.TIPO_CONSULTA);

				resultList = (List<Chincapacida>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Impresion Diagnostica :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Impresion Diagnostica : " + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroConsulta
	 * @return
	 * @throws ModelException
	 */
	public Chconsprogra getControl(Long numeroConsulta) throws ModelException {
		List<Chconsprogra> resultList = null;

		List parametros = new ArrayList<Chconsprogra>();

		try {
			if (numeroConsulta != null) {

				StringBuffer sb = new StringBuffer();
				sb.append(" select chcp from " + Chconsprogra.class.getName()
						+ " chcp  where chcp.hcpntipdoc = ? and chcp.hcpnnumdoc = ? ");
				parametros.add(IConstantes.DOCUMENTO_CONSULTA_CLINICA);
				parametros.add(numeroConsulta);

				resultList = (List<Chconsprogra>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Consulta Programada:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Consulta Programada : " + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroConsulta
	 * @return
	 * @throws ModelException
	 */
	public Chordecirugi getOrdenCirugia(Long numeroConsulta) throws ModelException {
		List<Chordecirugi> resultList = null;
		List parametros = new ArrayList<Chordecirugi>();

		try {
			if (numeroConsulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select choc from " + Chordecirugi.class.getName()
						+ " choc  where choc.id.hoclconsulta = ? AND choc.id.hocctiposervi = ? ");
				parametros.add(numeroConsulta);
				parametros.add(IConstantes.TIPO_CONSULTA);

				resultList = (List<Chordecirugi>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Cirug�as y procedimientos :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Cirug�as y procedimientos : " + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroCirugia
	 * @param tipoServicio
	 * @param consecutivo
	 * @return
	 * @throws ModelException
	 */
	public Chordecirugi getOrdenCirugia(Long numeroCirugia, String tipoServicio, Integer consecutivo)
			throws ModelException {
		List<Chordecirugi> resultList = null;
		List parametros = new ArrayList<Chordecirugi>();

		try {
			if (numeroCirugia != null && tipoServicio != null && consecutivo != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select choc from " + Chordecirugi.class.getName()
						+ " choc  where choc.id.hoclconsulta = ? AND choc.id.hocctiposervi = ?  AND choc.id.hocnconsecutiv = ? ");
				parametros.add(numeroCirugia);
				parametros.add(tipoServicio);
				parametros.add(consecutivo);

				resultList = (List<Chordecirugi>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Cirug�as y procedimientos :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Cirug�as y procedimientos : " + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroCirugia
	 * 
	 * @param consecutivo
	 * @return
	 * @throws ModelException
	 */
	public Chcontroorden getOtrasOrdenCirugia(Long numeroCirugia,

			Integer consecutivo) throws ModelException {
		List<Chcontroorden> resultList = null;
		List parametros = new ArrayList<Chcontroorden>();

		try {
			if (numeroCirugia != null && consecutivo != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chco from " + Chcontroorden.class.getName()
						+ " chco  where chco.id.hcolnumero = ? AND chco.id.hconconsecutiv = ? ");
				parametros.add(numeroCirugia);
				parametros.add(consecutivo);

				resultList = (List<Chcontroorden>) this.getHibernateTemplate().find(sb.toString(),
						parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Cirug�as y procedimientos :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Cirug�as y procedimientos : " + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroConsulta
	 * @return
	 * @throws ModelException
	 */
	public Chreferencia getReferencia(Long numeroConsulta) throws ModelException {
		List<Chreferencia> resultList = null;
		List parametros = new ArrayList<Chreferencia>();

		try {
			if (numeroConsulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chre from " + Chreferencia.class.getName()
						+ " chre  where chre.id.hrelconsulta = ? AND chre.id.hrectiposervi = ? ");
				parametros.add(numeroConsulta);
				parametros.add(IConstantes.TIPO_CONSULTA);

				resultList = (List<Chreferencia>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando referencia :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando referencia : " + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroConsulta
	 * @return
	 * @throws ModelException
	 */
	public Chanatopatol getAnatomiaPatologica(Long numeroConsulta) throws ModelException {
		List<Chanatopatol> resultList = null;
		List parametros = new ArrayList<Chanatopatol>();

		try {
			if (numeroConsulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chap from " + Chanatopatol.class.getName()
						+ " chap  where chap.id.haplconsulta = ? AND chap.id.hapctiposervi = ? ");
				parametros.add(numeroConsulta);
				parametros.add(IConstantes.TIPO_CONSULTA);

				resultList = (List<Chanatopatol>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Anatomia Patologica :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Anatomia Patologica : " + e.getMessage(), e);
		}

	}

	/**
	 * @param lstTiposAntecedentes
	 * @param numeroUsuario
	 * @return
	 * @throws ModelException
	 */
	public List<Chantecegene> getAntecedentesPorTipo(List lstTiposAntecedentes, Long numeroUsuario)
			throws ModelException {
		List<Chantecegene> resultList = null;
		List parametros = new ArrayList();

		try {

			StringBuffer sb = new StringBuffer();
			sb.append(" select chag from " + Chantecegene.class.getName() + " chag ," + Chconsulta.class.getName()
					+ " chco ," + Chusuario.class.getName() + " chus "
					+ " where chco.hcolnumero = chag.id.hanlconsulta and chco.hcolusuario.huslnumero = chus.huslnumero and chus.huslnumero = ? AND chco.hcoctiposervi = chag.id.hanctiposervi  AND chco.hcoctiposervi = ? order by chco.hcolnumero  ");
			parametros.add(numeroUsuario);
			parametros.add(IConstantes.TIPO_CONSULTA);

			resultList = (List<Chantecegene>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			if (!resultList.isEmpty()) {
				return resultList;
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Antecedentes Generales:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Antecedentes Generales :" + e.getMessage(), e);
		}

	}

	/**
	 * @param evolucion
	 * @throws ModelException
	 */
	public void saveEvolucionConsulta(final Chevoluconsu evolucion) throws ModelException {

		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {
					Integer consecutivo = null;
					if (evolucion != null && evolucion.getId() != null) {
						if (evolucion.getId().getHecnconsecuti() == null) {
							StringBuffer sb1 = new StringBuffer();
							sb1.append(" select max(chec.id.hecnconsecuti) from " + Chevoluconsu.class.getName()
									+ " chec  where chec.id.heclconsulta = :heclconsulta   ");
							Query query1 = session.createQuery(sb1.toString());
							query1.setParameter("heclconsulta", evolucion.getId().getHeclconsulta());

							Integer secuenciaActual = (Integer) query1.uniqueResult();

							if (secuenciaActual != null) {
								consecutivo = secuenciaActual.intValue() + 1;
							} else {
								consecutivo = 1;
							}
							if (consecutivo != null) {
								evolucion.getId().setHecnconsecuti(consecutivo);
							}

						}

						session.saveOrUpdate(evolucion);
					}

					return evolucion;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		}
	}

	/**
	 * @param nota
	 * @throws ModelException
	 */
	public

			void saveNotaMedica(final Chnotamedica nota) throws ModelException {

		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {
					Integer consecutivo = null;
					if (nota != null && nota.getId() != null) {
						if (nota.getId().getHnmnconsecuti() == null) {
							StringBuffer sb1 = new StringBuffer();
							sb1.append(" select max(chnm.id.hnmnconsecuti) from " + Chnotamedica.class.getName()
									+ " chnm  where chnm.id.hnmlconsulta = :hnmlconsulta   ");
							Query query1 = session.createQuery(sb1.toString());
							query1.setParameter("hnmlconsulta", nota.getId().getHnmlconsulta());

							Integer secuenciaActual = (Integer) query1.uniqueResult();

							if (secuenciaActual != null) {
								consecutivo = secuenciaActual.intValue() + 1;
							} else {
								consecutivo = 1;
							}
							if (consecutivo != null) {
								nota.getId().setHnmnconsecuti(consecutivo);
							}

						}

						session.saveOrUpdate(nota);
					}

					return nota;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		}
	}

	/**
	 * @param examen
	 * @throws ModelException
	 */
	public void saveRegistrarExamenLaboratorio(final Chregisexame examen) throws ModelException {

		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {
					Integer consecutivo = null;
					if (examen != null && examen.getId() != null) {
						if (examen.getId().getHrenconsecuti() == null) {
							StringBuffer sb1 = new StringBuffer();
							sb1.append(" select max(chre.id.hrenconsecuti) from " + Chregisexame.class.getName()
									+ " chre  where chre.id.hrelconsulta = :hrelconsulta   ");
							Query query1 = session.createQuery(sb1.toString());
							query1.setParameter("hrelconsulta", examen.getId().getHrelconsulta());

							Integer secuenciaActual = (Integer) query1.uniqueResult();

							if (secuenciaActual != null) {
								consecutivo = secuenciaActual.intValue() + 1;
							} else {
								consecutivo = 1;
							}
							if (consecutivo != null) {
								examen.getId().setHrenconsecuti(consecutivo);
							}

						}

						session.saveOrUpdate(examen);
					}

					return examen;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		}
	}

	/**
	 * @param consulta
	 * @return
	 * @throws ModelException
	 */
	public Integer getConsecutivoNotaMedica(Chconsulta consulta) throws ModelException {
		List<Chnotamedica> resultList = null;
		List parametros = new ArrayList();

		try {
			if (consulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chnm from " + Chnotamedica.class.getName()
						+ " chnm  where chnm.id.hnmlconsulta = ?  order by chnm.id.hnmnconsecuti desc ");
				parametros.add(consulta.getHcolnumero());

				resultList = (List<Chnotamedica>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0).getId().getHnmnconsecuti();
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Nota Medica:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Nota Medica  :" + e.getMessage(), e);
		}

	}

	/**
	 * @return
	 * @throws ModelException
	 */
	public List<Chplanantemp> getPlantillaAnticioncepcion() throws ModelException {
		List<Chplanantemp> resultList = null;

		try {

			StringBuffer sb = new StringBuffer();
			sb.append(" select chpt from " + Chplanantemp.class.getName() + "  chpt order by  chpt.hptnorden ");

			resultList = (List<Chplanantemp>) this.getHibernateTemplate().find(sb.toString());

			if (!resultList.isEmpty()) {
				return resultList;
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando planilla Anticoncepci�n:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando planilla Anticoncepci�n:" + e.getMessage(), e);
		}

	}

	/**
	 * @param cuestionario
	 * @throws ModelException
	 */
	public void saveCuestionarioPlanificacion(Chcuestplani cuestionario) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(cuestionario);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Cuestionario Planificacion:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Cuestionario Planificacion:" + e.getMessage(), e);
		}
	}

	/**
	 * @param numeroConsulta
	 * @return
	 * @throws ModelException
	 */
	public Chcuestplani getCuestionarioPlanificacion(Long numeroConsulta) throws ModelException {
		List<Chcuestplani> resultList = null;
		List parametros = new ArrayList();

		try {
			if (numeroConsulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chcp from " + Chcuestplani.class.getName()
						+ " chcp  where chcp.id.hcplconsulta = ? AND chcp.id.hcpctiposervi = ? ");
				parametros.add(numeroConsulta);
				parametros.add(IConstantes.TIPO_CONSULTA);

				resultList = (List<Chcuestplani>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Cuestionario de Planificaci�n Temporal:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Cuestionario de Planificaci�n Temporal:" + e.getMessage(), e);
		}

	}

	/**
	 * @param antecedente
	 * @throws ModelException
	 */
	public void saveAntecedentesPrenatal(Chantecprena antecedente) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(antecedente);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Antecedentes:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Antecedentes:" + e.getMessage(), e);
		}

	}

	/**
	 * @param antecedente
	 * @throws ModelException
	 */
	public void saveAntecedentesFamiliar(Chantecfamil antecedente) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(antecedente);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Antecedentes Familiares:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Antecedentes Familiares:" + e.getMessage(), e);
		}

	}

	/**
	 * @param consclin
	 * @return
	 * @throws ModelException
	 */
	public Chantecprena getAntecedentesPrenatales(Cnconsclin consclin) throws ModelException {
		List<Chantecprena> resultList = null;
		List parametros = new ArrayList();
		try {

			if (consclin != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chap from " + Chantecprena.class.getName()
						+ " chap  where chap.id.haplconsulta = ? AND chap.id.hapctiposervi  = ? ");
				parametros.add(consclin.getCconnumero());
				parametros.add(IConstantes.TIPO_CONSULTA);

				resultList = (List<Chantecprena>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Antecedentes Ginecologico:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Antecedentes Ginecologicos:" + e.getMessage(), e);
		}

	}

	/**
	 * @param consclin
	 * @return
	 * @throws ModelException
	 */
	public Chantecfamil getAntecedentesFamiliares(Cnconsclin consclin) throws ModelException {
		List<Chantecfamil> resultList = null;
		List parametros = new ArrayList();
		try {

			if (consclin != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chaf from " + Chantecfamil.class.getName()
						+ " chaf  where chaf.id.haflconsulta = ? AND chaf.id.hafctiposervi  = ? ");
				parametros.add(consclin.getCconnumero());
				parametros.add(IConstantes.TIPO_CONSULTA);

				resultList = (List<Chantecfamil>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Antecedentes Familiares:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Antecedentes Familiares:" + e.getMessage(), e);
		}

	}

	/**
	 * @param tamizaje
	 * @throws ModelException
	 */
	public void saveTamizajeLaboratoriosPrenatal(Chtamizalapr tamizaje) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(tamizaje);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Tamizaje Laboratorios Prenatal:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Tamizaje Laboratorios Prenatal:" + e.getMessage(), e);
		}

	}

	public Chtamizalapr getTamizajeLaboratorioPrenatal(Cnconsclin consclin) throws ModelException {
		List<Chtamizalapr> resultList = null;
		List parametros = new ArrayList();
		try {

			if (consclin != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chtl from " + Chtamizalapr.class.getName()
						+ " chtl  where chtl.id.htllconsulta = ? AND chtl.id.htlctiposervi = ? ");
				parametros.add(consclin.getCconnumero());
				parametros.add(IConstantes.TIPO_CONSULTA);

				resultList = (List<Chtamizalapr>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Tamizaje Laboratorios Prenatal:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Tamizaje Laboratorios Prenatal:" + e.getMessage(), e);
		}

	}

	/**
	 * @param fechaInicial
	 * @param fechaFinal
	 * @param usuario
	 * @return
	 * @throws ModelException
	 */
	public List<Chconsulta> getResumenHistoria(final Date fechaInicial, final Date fechaFinal, final Long usuario)
			throws ModelException {
		List<Chconsulta> pis = (List<Chconsulta>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				String HORA_INICIAL = " 00:00";
				String HORA_FINAL = " 23:59";
				String fechaI = null;
				String fechaF = null;
				if (fechaInicial != null && fechaFinal != null) {
					SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");

					fechaI = dateFormat.format(fechaInicial) + HORA_INICIAL;
					fechaF = dateFormat.format(fechaFinal) + HORA_FINAL;
				}

				StringBuffer sb = new StringBuffer();
				sb.append("SELECT c from ");
				sb.append(Chconsulta.class.getName()).append(" c ");
				sb.append("WHERE c.hcoeetapa = 'CE' and c.hcolusuario.huslnumero =  ").append(usuario);
				if (fechaInicial != null && fechaFinal != null) {
					sb.append(
							" AND (c.hcodfecregistr BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))");
				}
				sb.append(" order by c.hcodfecregistr asc ");

				String hql = sb.toString();

				Query query = session.createQuery(hql);
				if (fechaInicial != null && fechaFinal != null) {
					query.setParameter("fechaI", fechaI);
					query.setParameter("fechaF", fechaF);
				}
				List<Chconsulta> pis;
				pis = query.list();

				for (Chconsulta co : pis) {

					Chusuario usu = co.getHcolusuario();
					Hibernate.initialize(usu);

					Set motivo = co.getChmotivocons();
					Hibernate.initialize(motivo);

					Set impresion = co.getChimprdiags();
					Hibernate.initialize(impresion);

					Set riesgo = co.getChriesgomamas();
					Hibernate.initialize(riesgo);

					Set antegineco = co.getChanteginecos();
					Hibernate.initialize(antegineco);

					Set examendiag = co.getChexamediagns();
					Hibernate.initialize(examendiag);

					Set conducta = co.getChconductas();
					Hibernate.initialize(conducta);

					Set referencia = co.getChreferencias();
					Hibernate.initialize(referencia);

					Set exafismama = co.getChexafismamas();
					Hibernate.initialize(exafismama);

					Set examen = co.getChexamfisicos();
					Hibernate.initialize(examen);

					Set anatomia = co.getChanatopatols();
					Hibernate.initialize(anatomia);

					Set incapacidad = co.getChincapacidas();
					Hibernate.initialize(incapacidad);

					Set violencia = co.getChviolencias();
					Hibernate.initialize(violencia);

					Set identiriesgo = co.getChidentiriesgo();
					Hibernate.initialize(identiriesgo);

					Set orden = co.getChordecirugis();
					Hibernate.initialize(orden);

					Set antecemama = co.getChantecemamas();
					Hibernate.initialize(antecemama);

					Set paraclinicos = co.getChexameparacs();
					Hibernate.initialize(paraclinicos);

					Set notaMedicad = co.getChnotamedicas();
					Hibernate.initialize(notaMedicad);

					Set antecedentes = co.getChantecegenes();
					Hibernate.initialize(antecedentes);

					Set formulaMedicaq = co.getChformulameds();
					Hibernate.initialize(formulaMedicaq);

					Set examenPediatria = co.getChpediexamens();
					Hibernate.initialize(examenPediatria);

					Set imagenes = co.getChexameimages();
					Hibernate.initialize(imagenes);

					Set certificado = co.getChcertmedicos();
					Hibernate.initialize(certificado);

					Set laboratorios = co.getChexamelabors();
					Hibernate.initialize(laboratorios);

					Set electrofisiologicos = co.getChexameelects();
					Hibernate.initialize(electrofisiologicos);

					Set reserva = co.getChresersangrs();
					Hibernate.initialize(reserva);

					Set hospitalizacion = co.getChremihospits();
					Hibernate.initialize(hospitalizacion);

					Cpservicio servicio = co.getHcocservicio();
					Hibernate.initialize(servicio);

					/* Consulta Psicologica */
					Set chantecpsico = co.getChantecpsico();
					Hibernate.initialize(chantecpsico);

					Set chevalugener = co.getChevalugener();
					Hibernate.initialize(chevalugener);

					Set chpladetrat = co.getChpladetrat();
					Hibernate.initialize(chpladetrat);

					/* Vacunacion Cervix */
					Set chcervaaplic = co.getChcervaaplic();
					Hibernate.initialize(chcervaaplic);

					/* Medicamentos */
					Set chmedicament = co.getChmedicament();
					Hibernate.initialize(chmedicament);

					Set chvacunacion = co.getChvacunacion();
					Hibernate.initialize(chvacunacion);

					Set chevoluconsu = co.getChevoluconsu();
					Hibernate.initialize(chevoluconsu);

					// Esterilizacion Femenina
					Set chcuestester = co.getChcuestester();
					Hibernate.initialize(chcuestester);

					// Esterilizacion Masculina
					Set chestermascu = co.getChestermascu();
					Hibernate.initialize(chestermascu);

					// CONTROL
					Set chcontrolcon = co.getChcontrolcon();
					Hibernate.initialize(chcontrolcon);

					// PROCEDIMIENTOS EN CONSULTORIO
					Set chproceconsu = co.getChproceconsu();
					Hibernate.initialize(chproceconsu);

					// INTERRUPCION

					Set chestadpsico = co.getChestadpsico();
					Hibernate.initialize(chestadpsico);

					Set chremisilve = co.getChremisilve();
					Hibernate.initialize(chremisilve);

					Set chdispoaplic = co.getChdispoaplic();
					Hibernate.initialize(chdispoaplic);

					// Antecedentes Prenatales
					Set chantecprena = co.getChantecprena();
					Hibernate.initialize(chantecprena);

					Set chanteceobst = co.getChanteceobst();
					Hibernate.initialize(chanteceobst);

					Set chgestacion = co.getChgestacion();
					Hibernate.initialize(chgestacion);

					Set chcontrolpre = co.getChcontrolpre();
					Hibernate.initialize(chcontrolpre);

					Set chtamizalapr = co.getChtamizalapr();
					Hibernate.initialize(chtamizalapr);

					// Informe Ecografia
					Set chinfomamogr = co.getChinfomamogrs();
					Hibernate.initialize(chinfomamogr);

					Set chremision = co.getChremisions();
					Hibernate.initialize(chremision);
					// Cervix
					Set chcancecervi = co.getChcancecervi();
					Hibernate.initialize(chcancecervi);

					Set chcuestplanis = co.getChcuestplanis();
					Hibernate.initialize(chcuestplanis);

					Set chvalorprean = co.getChvalorprean();
					Hibernate.initialize(chvalorprean);

					Set chcuestanest = co.getChcuestanest();
					Hibernate.initialize(chcuestanest);

					Set chexafisane = co.getChexafisane();
					Hibernate.initialize(chexafisane);

					Set chresulparac = co.getChresulparac();
					Hibernate.initialize(chresulparac);

					// Registra Examenes clinicos

					Set chregisexame = co.getChregisexame();
					Hibernate.initialize(chregisexame);

					// Revision por sistemas

					Set chrevissiste = co.getChrevissiste();
					Hibernate.initialize(chrevissiste);

					Set chcontrvasec = co.getChcontrvasec();
					Hibernate.initialize(chcontrvasec);

					Set chantecvasec = co.getChantecvasec();
					Hibernate.initialize(chantecvasec);

					Set chespervasec = co.getChespervasec();
					Hibernate.initialize(chespervasec);

					// Colposcopia
					Set chantecolpo = co.getChantecolpo();
					Hibernate.initialize(chantecolpo);
					Set chcolposcopia = co.getChcolposcopia();
					Hibernate.initialize(chcolposcopia);

					// Valoracion Biopsicosocial
					Set chvalorabiopsi = co.getChvalorabiopsi();
					Hibernate.initialize(chvalorabiopsi);

					// Asesoria IVE
					Set chasesoriaive = co.getChasesoriaive();
					Hibernate.initialize(chasesoriaive);

					// Antecedentes Detallado
					Set chantecdetal = co.getChantecdetal();
					Hibernate.initialize(chantecdetal);

					// Antecedentes Psicologia
					Set chpsicoantec = co.getChpsicoantec();
					Hibernate.initialize(chpsicoantec);

					// Registro Complementario Enfemeria

					Set chregcomenf = co.getChregcomenf();
					Hibernate.initialize(chregcomenf);

					// Registro Informe Psicologico
					Set chinfopsico = co.getChinfopsico();
					Hibernate.initialize(chinfopsico);

					// Registro Escala de valoracion de Caidas
					Set chescvalcai = co.getChescvalcai();
					Hibernate.initialize(chescvalcai);

					// Registro Ecografia fertilidad
					Set chfertecog = co.getChfertecog();
					Hibernate.initialize(chfertecog);

					// Registro Datos fertilidad
					Set chfertdato = co.getChfertdato();
					Hibernate.initialize(chfertdato);

					// Referencia Paciente
					Set chrefepaci = co.getChrefepaci();
					Hibernate.initialize(chrefepaci);

					// Referencia Primeros Auxilios Psicologicos
					Set chpapsicologico = co.getChpapsicologico();
					Hibernate.initialize(chpapsicologico);

					// Referencia Covid Anticuerpos
					Set chpruecovidanticu = co.getChpruecovidanticu();
					Hibernate.initialize(chpruecovidanticu);

					// Referencia Covid Antigenos
					Set chpruecovidantige = co.getChpruecovidantige();
					Hibernate.initialize(chpruecovidantige);

					// Consentimiento Informado
					Set chconinfxcon = co.getChconinfxcon();
					Hibernate.initialize(chconinfxcon);

				}

				return pis;
			}
		});
		return pis;
	}

	/**
	 * @param numeroConsulta
	 * @param tipoServicio
	 * @return
	 * @throws ModelException
	 */
	public Chconsulta getConsultaCompleta(final Long numeroConsulta, final String tipoServicio) throws ModelException {
		Chconsulta pis = (Chconsulta) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				StringBuffer sb = new StringBuffer();
				sb.append("SELECT c from ");
				sb.append(Chconsulta.class.getName()).append(" c ");
				sb.append("WHERE  c.hcolnumero = :hcolnumero  ");
				if (tipoServicio != null && !tipoServicio.trim().equals("")) {
					sb.append(" and  c.hcoctiposervi = :hcoctiposervi ");
				}
				String hql = sb.toString();
				Query query = session.createQuery(hql);
				query.setParameter("hcolnumero", numeroConsulta);
				if (tipoServicio != null && !tipoServicio.trim().equals("")) {
					query.setParameter("hcoctiposervi", tipoServicio);
				}
				Chconsulta co;
				co = (Chconsulta) query.uniqueResult();

				if (co != null) {

					Chusuario usu = co.getHcolusuario();
					Hibernate.initialize(usu);

					Set motivo = co.getChmotivocons();
					Hibernate.initialize(motivo);

					Set impresion = co.getChimprdiags();
					Hibernate.initialize(impresion);

					Set riesgo = co.getChriesgomamas();
					Hibernate.initialize(riesgo);

					Set antegineco = co.getChanteginecos();
					Hibernate.initialize(antegineco);

					Set examendiag = co.getChexamediagns();
					Hibernate.initialize(examendiag);

					Set conducta = co.getChconductas();
					Hibernate.initialize(conducta);

					Set referencia = co.getChreferencias();
					Hibernate.initialize(referencia);

					Set exafismama = co.getChexafismamas();
					Hibernate.initialize(exafismama);

					Set examen = co.getChexamfisicos();
					Hibernate.initialize(examen);

					Set anatomia = co.getChanatopatols();
					Hibernate.initialize(anatomia);

					Set incapacidad = co.getChincapacidas();
					Hibernate.initialize(incapacidad);

					Set violencia = co.getChviolencias();
					Hibernate.initialize(violencia);

					Set identiriesgo = co.getChidentiriesgo();
					Hibernate.initialize(identiriesgo);

					Set orden = co.getChordecirugis();
					Hibernate.initialize(orden);

					Set antecemama = co.getChantecemamas();
					Hibernate.initialize(antecemama);

					Set paraclinicos = co.getChexameparacs();
					Hibernate.initialize(paraclinicos);

					Set notaMedicad = co.getChnotamedicas();
					Hibernate.initialize(notaMedicad);

					Set antecedentes = co.getChantecegenes();
					Hibernate.initialize(antecedentes);

					Set formulaMedicaq = co.getChformulameds();
					Hibernate.initialize(formulaMedicaq);

					Set examenPediatria = co.getChpediexamens();
					Hibernate.initialize(examenPediatria);

					Set imagenes = co.getChexameimages();
					Hibernate.initialize(imagenes);

					Set certificado = co.getChcertmedicos();
					Hibernate.initialize(certificado);

					Set laboratorios = co.getChexamelabors();
					Hibernate.initialize(laboratorios);

					Set electrofisiologicos = co.getChexameelects();
					Hibernate.initialize(electrofisiologicos);

					Set reserva = co.getChresersangrs();
					Hibernate.initialize(reserva);

					Set hospitalizacion = co.getChremihospits();
					Hibernate.initialize(hospitalizacion);

					Cpservicio servicio = co.getHcocservicio();
					Hibernate.initialize(servicio);

					/* CIRUGIA */

					/* Consulta Psicologica */
					Set chantecpsico = co.getChantecpsico();
					Hibernate.initialize(chantecpsico);

					Set chevalugener = co.getChevalugener();
					Hibernate.initialize(chevalugener);

					Set chpladetrat = co.getChpladetrat();
					Hibernate.initialize(chpladetrat);

					/* Vacunacion Cervix */
					Set chcervaaplic = co.getChcervaaplic();
					Hibernate.initialize(chcervaaplic);

					/* Medicamentos */
					Set chmedicament = co.getChmedicament();
					Hibernate.initialize(chmedicament);

					Set chvacunacion = co.getChvacunacion();
					Hibernate.initialize(chvacunacion);

					Set chevoluconsu = co.getChevoluconsu();
					Hibernate.initialize(chevoluconsu);

					// Esterilizacion Femenina
					Set chcuestester = co.getChcuestester();
					Hibernate.initialize(chcuestester);

					// Esterilizacion Masculina
					Set chestermascu = co.getChestermascu();
					Hibernate.initialize(chestermascu);

					// CONTROL
					Set chcontrolcon = co.getChcontrolcon();
					Hibernate.initialize(chcontrolcon);

					// PROCEDIMIENTOS EN CONSULTORIO
					Set chproceconsu = co.getChproceconsu();
					Hibernate.initialize(chproceconsu);

					// INTERRUPCION

					Set chestadpsico = co.getChestadpsico();
					Hibernate.initialize(chestadpsico);

					Set chremisilve = co.getChremisilve();
					Hibernate.initialize(chremisilve);

					Set chdispoaplic = co.getChdispoaplic();
					Hibernate.initialize(chdispoaplic);

					// Antecedentes Prenatales
					Set chantecprena = co.getChantecprena();
					Hibernate.initialize(chantecprena);

					Set chanteceobst = co.getChanteceobst();
					Hibernate.initialize(chanteceobst);

					Set chgestacion = co.getChgestacion();
					Hibernate.initialize(chgestacion);

					Set chcontrolpre = co.getChcontrolpre();
					Hibernate.initialize(chcontrolpre);

					Set chtamizalapr = co.getChtamizalapr();
					Hibernate.initialize(chtamizalapr);

					// Informe Ecografia
					Set chinfomamogr = co.getChinfomamogrs();
					Hibernate.initialize(chinfomamogr);

					Set chremision = co.getChremisions();
					Hibernate.initialize(chremision);
					// Cervix
					Set chcancecervi = co.getChcancecervi();
					Hibernate.initialize(chcancecervi);

					Set chcuestplanis = co.getChcuestplanis();
					Hibernate.initialize(chcuestplanis);

					Set chvalorprean = co.getChvalorprean();
					Hibernate.initialize(chvalorprean);

					Set chcuestanest = co.getChcuestanest();
					Hibernate.initialize(chcuestanest);

					Set chexafisane = co.getChexafisane();
					Hibernate.initialize(chexafisane);

					Set chresulparac = co.getChresulparac();
					Hibernate.initialize(chresulparac);

					// Registra Examenes clinicos

					Set chregisexame = co.getChregisexame();
					Hibernate.initialize(chregisexame);

					// Revision por sistemas

					Set chrevissiste = co.getChrevissiste();
					Hibernate.initialize(chrevissiste);

					Set chcontrvasec = co.getChcontrvasec();
					Hibernate.initialize(chcontrvasec);

					Set chantecvasec = co.getChantecvasec();
					Hibernate.initialize(chantecvasec);

					Set chespervasec = co.getChespervasec();
					Hibernate.initialize(chespervasec);

					// Colposcopia
					Set chantecolpo = co.getChantecolpo();
					Hibernate.initialize(chantecolpo);
					Set chcolposcopia = co.getChcolposcopia();
					Hibernate.initialize(chcolposcopia);

					// Valoracion Biopsicosocial
					Set chvalorabiopsi = co.getChvalorabiopsi();
					Hibernate.initialize(chvalorabiopsi);

					// Asesoria IVE
					Set chasesoriaive = co.getChasesoriaive();
					Hibernate.initialize(chasesoriaive);

					// Antecedentes Detallado
					Set chantecdetal = co.getChantecdetal();
					Hibernate.initialize(chantecdetal);

					// Antecedentes Psicologia
					Set chpsicoantec = co.getChpsicoantec();
					Hibernate.initialize(chpsicoantec);

					// Registro Complementario Enfemeria

					Set chregcomenf = co.getChregcomenf();
					Hibernate.initialize(chregcomenf);

					// Registro Informe Psicologico
					Set chinfopsico = co.getChinfopsico();
					Hibernate.initialize(chinfopsico);

					// Registro Escala de valoracion de Caidas
					Set chescvalcai = co.getChescvalcai();
					Hibernate.initialize(chescvalcai);

					// Registro Ecografia fertilidad
					Set chfertecog = co.getChfertecog();
					Hibernate.initialize(chfertecog);

					// Registro Datos fertilidad
					Set chfertdato = co.getChfertdato();
					Hibernate.initialize(chfertdato);

					// Referencia Paciente
					Set chrefepaci = co.getChrefepaci();
					Hibernate.initialize(chrefepaci);

					// Referencia Primeros Auxilios Psicologicos
					Set chpapsicologico = co.getChpapsicologico();
					Hibernate.initialize(chpapsicologico);

					// Referencia Covid Anticuerpos
					Set chpruecovidanticu = co.getChpruecovidanticu();
					Hibernate.initialize(chpruecovidanticu);

					// Referencia Covid Antigenos
					Set chpruecovidantige = co.getChpruecovidantige();
					Hibernate.initialize(chpruecovidantige);

					// platitalla de consntimiento informado
					Set chconinfxcon = co.getChconinfxcon();
					Hibernate.initialize(chconinfxcon);
				}
				return co;
			}
		});
		return pis;
	}

	/**
	 * @param numeroCirugia
	 * @return
	 * @throws ModelException
	 */
	public List<Chconsulta> getResumenEnfermeriaCirugiaActual(final Long numeroCirugia) throws ModelException {
		List<Chconsulta> pis = (List<Chconsulta>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				if (numeroCirugia != null) {
					StringBuffer sb = new StringBuffer();
					sb.append("SELECT c from ");
					sb.append(Chconsulta.class.getName()).append(" c ");
					sb.append("WHERE c.hcolnumero = :hcolnumero AND c.hcoctiposervi = :hcoctiposervi  ");

					sb.append(" order by c.hcodfecregistr asc ");

					String hql = sb.toString();

					Query query = session.createQuery(hql);
					query.setParameter("hcolnumero", numeroCirugia);
					query.setParameter("hcoctiposervi", IConstantes.TIPO_HOSPITALIZACION);
					List<Chconsulta> pis;
					pis = query.list();

					for (Chconsulta co : pis) {

						Chusuario usu = co.getHcolusuario();
						Hibernate.initialize(usu);

					}

					return pis;
				}
				return null;
			}
		});
		return pis;
	}

	/**
	 * @param examen
	 * @throws ModelException
	 */
	public void saveExamenPediatria(Chpediexamen examen) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(examen);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Examen Fisico Pediatria :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Examen Fisico Pediatria :" + e.getMessage(), e);
		}
	}

	/**
	 * @param consclin
	 * @return
	 * @throws ModelException
	 */
	public Chpediexamen getExamenPediatria(Cnconsclin consclin) throws ModelException {
		List<Chpediexamen> resultList = null;
		List parametros = new ArrayList();

		try {
			if (consclin != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chpe from " + Chpediexamen.class.getName()
						+ " chpe  where chpe.id.hpelconsulta = ? AND chpe.id.hpectiposervi = ? ");
				parametros.add(consclin.getCconnumero());
				parametros.add(IConstantes.TIPO_CONSULTA);

				resultList = (List<Chpediexamen>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Examen Fisico Pediatria:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Examen Fisico Pediatria:" + e.getMessage(), e);
		}

	}

	/**
	 * @param consclin
	 * @return
	 * @throws ModelException
	 */
	public BigDecimal getNumeroFactura(Long cconnumero) throws ModelException {
		List<BigDecimal> resultList = null;
		List parametros = new ArrayList();

		try {
			if (cconnumero != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select cnco.cconnumdoc from " + Cnconsclin.class.getName()
						+ " cnco  where cnco.cconnumero = ?  ");
				parametros.add(cconnumero);

				resultList = (List<BigDecimal>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Numero Factura:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Numero Factura:" + e.getMessage(), e);
		}

	}

	/**
	 * @param codMetodo
	 * @return
	 * @throws ModelException
	 */
	public String getDescripcionMetodo(String codMetodo) throws ModelException {
		List<Chmetodoplan> resultList = null;
		List parametros = new ArrayList();

		try {
			if (codMetodo != null && !codMetodo.equals("")) {

				StringBuffer sb = new StringBuffer();
				sb.append(" select chmp from " + Chmetodoplan.class.getName() + " chmp  where chmp.hmpccodigo =  ? ");
				parametros.add(codMetodo);
				resultList = (List<Chmetodoplan>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty() && resultList.get(0) != null) {
					return resultList.get(0).getHmpcdescripcio();
				}
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Metodos de planificacion:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Metodos de planificacion :" + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroUsuario
	 * @return
	 * @throws ModelException
	 */
	public Cpentidadadm getDescripcionEntidad(Long numeroUsuario) throws ModelException {
		List<Cpentidadadm> resultList = null;
		List parametros = new ArrayList();

		try {
			if (numeroUsuario != null) {

				StringBuffer sb = new StringBuffer();
				sb.append(" select cpea from " + Cpentidadadm.class.getName()
						+ " cpea, Chusuario chus  where chus.huscentidadadm = cpea.ceaccodigo ");
				sb.append(" and chus.huslnumero = ? ");
				parametros.add(numeroUsuario);
				resultList = (List<Cpentidadadm>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty() && resultList.get(0) != null) {
					return resultList.get(0);
				}
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Descripcion Entidad Administradora:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Descripcion Entidad Administradora:" + e.getMessage(), e);
		}

	}

	/**
	 * @param codigo
	 * @return
	 * @throws ModelException
	 */
	public String getDescripcionEntidadByCodigo(String codigo) throws ModelException {
		List<String> resultList = null;
		List parametros = new ArrayList();

		try {
			if (codigo != null) {

				StringBuffer sb = new StringBuffer();
				sb.append(" select cpea.ceacnombre from " + Cpentidadadm.class.getName() + " cpea ");
				sb.append(" where cpea.ceaccodigo = ? ");
				parametros.add(codigo);
				resultList = (List<String>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty() && resultList.get(0) != null) {
					return resultList.get(0);
				}
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Descripcion Entidad Administradora:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Descripcion Entidad Administradora:" + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroConsulta
	 * @return
	 * @throws ModelException
	 */
	public Chantecemama getAntecedentesMama(Long numeroConsulta) throws ModelException {
		List<Chantecemama> resultList = null;
		List parametros = new ArrayList();

		try {
			if (numeroConsulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select cham from " + Chantecemama.class.getName()
						+ " cham  where cham.id.hamlconsulta = ?  AND cham.id.hamctiposervi = ? ");
				parametros.add(numeroConsulta);
				parametros.add(IConstantes.TIPO_CONSULTA);

				resultList = (List<Chantecemama>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Antecedentes de Mama:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Antecedentes de Mama  :" + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroConsulta
	 * @return
	 * @throws ModelException
	 */
	public Chriesgomama getRiesgoMama(Long numeroConsulta) throws ModelException {
		List<Chriesgomama> resultList = null;
		List parametros = new ArrayList();

		try {
			if (numeroConsulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chrm from " + Chriesgomama.class.getName()
						+ " chrm  where chrm.id.hrmlconsulta = ? AND chrm.id.hrmctiposervi = ? ");
				parametros.add(numeroConsulta);
				parametros.add(IConstantes.TIPO_CONSULTA);

				resultList = (List<Chriesgomama>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Factores de Riesgo de Mama:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Factores de Riesgo de Mama  :" + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroConsulta
	 * @return
	 * @throws ModelException
	 */
	public Chexafismama getExamenFisicoMama(Long numeroConsulta) throws ModelException {
		List<Chexafismama> resultList = null;
		List parametros = new ArrayList();

		try {
			if (numeroConsulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chem from " + Chexafismama.class.getName()
						+ " chem  where chem.id.hemlconsulta = ? AND chem.id.hemctiposervi = ? ");
				parametros.add(numeroConsulta);
				parametros.add(IConstantes.TIPO_CONSULTA);

				resultList = (List<Chexafismama>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Examen Fisico de Mama:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Examen Fisico de Mama  :" + e.getMessage(), e);
		}

	}

	/**
	 * @param
	 * @return
	 * @throws ModelException
	 */
	public boolean esPoliciaNacional(Integer cconnumero) throws ModelException {
		List parametros;
		List lstConsulta;
		this.getHibernateTemplate().getSessionFactory();
		SessionFactory sessionFactory = this.getHibernateTemplate().getSessionFactory();
		Session session = sessionFactory.openSession();
		Transaction tx = session.beginTransaction();

		try {

			parametros = new ArrayList();
			if (cconnumero != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select cnco.cconcontra from clinico.Cnconsclin cnco, clinico.Cpcontrato cpco   ");
				sb.append(
						" where cpco.ccnnnumero = cnco.cconcontra and cpco.ccnanit = '830041314' and cnco.cconnumero  = ? ");

				Query query = session.createQuery(sb.toString());
				query.setParameter(0, cconnumero);

				lstConsulta = query.list();

				if (lstConsulta != null && !lstConsulta.isEmpty()) {
					session.close();
					return true;
				}

			}
			session.close();
			return false;

		} catch (HibernateException e) {
			throw new ModelException("Error Verificando Contrato Policia Nacional:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Verificando Contrato Policia Nacional:" + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroConsulta
	 * @return
	 * @throws ModelException
	 */
	public Chpediexamen getExamenPediatria(Long numeroConsulta) throws ModelException {
		List<Chpediexamen> resultList = null;
		List parametros = new ArrayList();

		try {
			if (numeroConsulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chpe from " + Chpediexamen.class.getName()
						+ " chpe  where chpe.id.hpelconsulta = ? AND  chpe.id.hpectiposervi = ? ");
				parametros.add(numeroConsulta);
				parametros.add(IConstantes.TIPO_CONSULTA);

				resultList = (List<Chpediexamen>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Examen Fisico Pediatria:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Examen Fisico Pediatria:" + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroConsulta
	 * @return
	 * @throws ModelException
	 */
	public Chexamediagn getExamenApoyoDiagnostico(Long numeroConsulta) throws ModelException {
		List<Chexamediagn> resultList = null;
		List parametros = new ArrayList();

		try {
			if (numeroConsulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select ched from " + Chexamediagn.class.getName()
						+ " ched  where ched.id.hedlconsulta = ? AND ched.id.hedctiposervi = ?  ");
				parametros.add(numeroConsulta);
				parametros.add(IConstantes.TIPO_CONSULTA);

				resultList = (List<Chexamediagn>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Examen de Apoyo Diagnostico:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Examen de Apoyo Diagnostico :" + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroConsulta
	 * @return
	 * @throws ModelException
	 */
	public List<Chnotamedica> getListNotasMedicas(Long numeroConsulta) throws ModelException {
		List<Chnotamedica> resultList = null;
		List parametros = new ArrayList();

		try {
			if (numeroConsulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chnm from " + Chnotamedica.class.getName()
						+ " chnm  where chnm.id.hnmlconsulta = ?  AND chnm.id.hnmctiposervi = ? ");
				parametros.add(numeroConsulta);
				parametros.add(IConstantes.TIPO_CONSULTA);

				resultList = (List<Chnotamedica>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList;
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Lista de las Notas Medicas:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Lista de las Notas Medicas  :" + e.getMessage(), e);
		}

	}

	/**
	 * @param tipoHistoria
	 * @return
	 * @throws ModelException
	 */
	public List<Chactividad> getActividad(Integer tipoHistoria) throws ModelException {
		List<Chactividad> resultList = null;
		List parametros = new ArrayList();
		try {
			if (tipoHistoria != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chac from " + Chactividad.class.getName()
						+ " chac  where chac.hacntipohistor = ? or chac.hacntipohistor = ?  ");
				parametros.add(IConstantes.HISTORIA_TODAS);
				parametros.add(tipoHistoria);

				resultList = (List<Chactividad>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList;
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Actividades:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Actividades :" + e.getMessage(), e);
		}

	}

	/**
	 * @param idActividad
	 * @return
	 * @throws ModelException
	 */
	public Chactividad getActividadPorId(Integer idActividad) throws ModelException {
		List<Chactividad> resultList = null;
		List parametros = new ArrayList();
		try {
			if (idActividad != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chac from " + Chactividad.class.getName() + " chac  where chac.hacncodigo = ?  ");
				parametros.add(idActividad);

				resultList = (List<Chactividad>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Actividad:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Actividad :" + e.getMessage(), e);
		}

	}

	/**
	 * @return
	 * @throws ModelException
	 */
	public List<Chtipointerc> getTiposInterconsulta() throws ModelException {
		List resultList = null;
		try {
			resultList = this.getSession()
					.createQuery("SELECT c " + "FROM Chtipointerc AS c  where c.hticestado = 'VG' ").list();
		} catch (HibernateException e) {
			throw new ModelException("Error consultando Tipo Interconsulta:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Tipo Interconsulta:" + e.getMessage(), e);
		}
		return resultList;
	}

	/**
	 * @param cie10
	 * @param sexo
	 * @param unidadEdad
	 * @param edad
	 * @param esPrincipal
	 * @return
	 */
	public List getVerificacionCie10(Crdgncie10 cie10, String sexo, String unidadEdad, Integer edad,
			String esPrincipal) {
		String wddiagno = null;
		boolean wok_funcion = true;
		String wddgsexo = "";
		Integer wedad = null;
		Double wnliminf = null;
		Double wnlimsup = null;
		String wliminf1 = "";
		String wliminf2 = "";
		String wdliminf = "";
		String wlimsup1 = "";
		String wlimsup2 = "";
		String wdlimsup = "";
		List lstreturn;
		lstreturn = new ArrayList();

		if (!cie10.getCdccsexo().equals("A") && !sexo.equals(cie10.getCdccsexo())) {
			wok_funcion = false;
			if (cie10.getCdccsexo().equals("F")) {
				wddgsexo = "FEMENINO";
			} else {
				wddgsexo = "MASCULINO";
			}
			wddiagno = ("Error. Aplica para sexo " + wddgsexo + ".");

		}

		if (wok_funcion) {
			if (!(cie10.getCdccliminf().equals("0")) && !(cie10.getCdcclimsup().equals("0"))) {
				if (unidadEdad.equals("1")) {
					wedad = (400 + edad.intValue());
				} else if (unidadEdad.equals("2")) {
					wedad = (300 + edad.intValue());
				} else if (unidadEdad.equals("3")) {
					wedad = (200 + edad);
				} else {
					wedad = (new Integer(0 + edad.intValue()));
				}
				wnliminf = strToVal(cie10.getCdccliminf());
				wnlimsup = (strToVal(cie10.getCdcclimsup()));
				if (!(cie10.getCdccliminf().equals("0")) && !(cie10.getCdcclimsup().equals("0"))) {
					if (wnliminf.floatValue() != Integer.parseInt("0") && wedad.intValue() < wnliminf.intValue()) {
						wok_funcion = false;
						wliminf1 = (substr(cie10.getCdccliminf(), 1, 1));
						wliminf2 = (substr(cie10.getCdccliminf(), 2, 3));
						if (wliminf1.equals("1")) {
							wdliminf = (wliminf2 + " HORAS.");
						} else if (wliminf1.equals("2")) {
							wdliminf = (wliminf2 + " DIAS.");
						} else if (wliminf1.equals("3")) {
							wdliminf = (wliminf2 + " MESES.");
						} else if (wliminf1.equals("4")) {
							wdliminf = (wliminf2 + " ANOS.");
						} else {
							wdliminf = (wliminf2 + " " + wliminf1 + ".");
						}
						wddiagno = ("Error. La edad minima es " + wdliminf);
					}

					if (wnlimsup.intValue() != 599 && wnlimsup.intValue() < wedad.intValue()) {

						wok_funcion = false;
						wlimsup1 = (substr(cie10.getCdcclimsup(), 1, 1));
						wlimsup2 = (substr(cie10.getCdcclimsup(), 2, 3));
						if (wlimsup1.equals("1")) {
							wdlimsup = (wlimsup2 + " HORAS.");
						} else if (wlimsup1.equals("2")) {
							wdlimsup = (wlimsup2 + " DIAS.");
						} else if (wlimsup1.equals("3")) {
							wdlimsup = (wlimsup2 + " MESES.");
						} else if (wlimsup1.equals("4")) {
							wdlimsup = (wlimsup2 + " ANOS.");
						} else {
							wdlimsup = (wlimsup2 + " " + wlimsup1 + ".");
						}
						wddiagno = ("Error. La edad maxima es " + wdlimsup);
					}
				}
			}
		}

		if (wok_funcion) {
			if (esPrincipal.equals("S") && cie10.getCdccsimbol().equals("#")) {
				wok_funcion = false;
				wddiagno = ("Error. Diagnostico relacionado(#) y no principal(+).");
			}
			if (esPrincipal.equals("N") && cie10.getCdccsimbol().equals("+")) {
				wok_funcion = false;
				wddiagno = "Error. Diagnostico principal(+) y no relacionado(#).";
			}

		}

		if (wok_funcion) {
			if (cie10.getCdccnotobl() != null && !cie10.getCdccnotobl().equals("N")) {
				wddiagno = "Diagnostico de Notificacion Obligatoria ";
			}
		}
		lstreturn.add(wok_funcion);
		lstreturn.add(wddiagno);

		return lstreturn;
	}

	/**
	 * @param control
	 * @throws ModelException
	 */
	public void saveControlConsulta(Chcontrolcon control) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(control);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Control Consulta:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Control Consulta:" + e.getMessage(), e);
		}
	}

	/**
	 * @param control
	 * @throws ModelException
	 */
	public void saveControlConsultaCompleta(final Chcontrolcon control, final Chimprdiag impresion,
			final Chmotivocon motivo) throws ModelException {
		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {

					if (control != null) {
						session.saveOrUpdate(control);
					}

					if (impresion != null) {
						session.saveOrUpdate(impresion);
					}

					if (motivo != null) {
						motivo.setHmcdfecregistr(new Date());
						session.saveOrUpdate(motivo);
					}

					return control;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		}
	}

	/**
	 * @param control
	 * @throws ModelException
	 */
	public void saveControlIlveConsulta(final Chcontrolcon control,

			final Chmotivocon motivo) throws ModelException {
		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {

					if (control != null) {
						session.saveOrUpdate(control);
					}

					if (motivo != null) {
						motivo.setHmcdfecregistr(new Date());
						session.saveOrUpdate(motivo);
					}

					return control;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		}
	}

	/**
	 * @param impresion
	 * @throws ModelException
	 */
	public void saveImpresionIlveConsulta(final Chimprdiag impresion) throws ModelException {
		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {

					if (impresion != null) {
						session.saveOrUpdate(impresion);
					}

					return impresion;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		}
	}

	/**
	 * @param consclin
	 * @return
	 * @throws ModelException
	 */
	public Chcontrolcon getControlConsulta(Cnconsclin consclin) throws ModelException {
		List<Chcontrolcon> resultList = null;
		List parametros = new ArrayList();

		try {
			if (consclin != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chcc from " + Chcontrolcon.class.getName()
						+ " chcc  where chcc.id.hcclconsulta = ? AND chcc.id.hccctiposervi = ? ");
				parametros.add(consclin.getCconnumero());
				parametros.add(IConstantes.TIPO_CONSULTA);

				resultList = (List<Chcontrolcon>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Control Consulta:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Control Consulta:" + e.getMessage(), e);
		}

	}

	/**
	 * @param numero
	 * @return
	 * @throws ModelException
	 */
	public Chcontrolcon getControlConsulta(Long numero) throws ModelException {
		List<Chcontrolcon> resultList = null;
		List parametros = new ArrayList();

		try {
			if (numero != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chcc from " + Chcontrolcon.class.getName()
						+ " chcc  where chcc.id.hcclconsulta = ? AND chcc.id.hccctiposervi= ? ");
				parametros.add(numero);
				parametros.add(IConstantes.TIPO_CONSULTA);

				resultList = (List<Chcontrolcon>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Control Consulta:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Control Consulta:" + e.getMessage(), e);
		}

	}

	/**
	 * @param numero
	 * @return
	 * @throws ModelException
	 */
	public Chcontrvasec getControlVasectomia(Long numero, Integer consecutivo) throws ModelException {
		List<Chcontrvasec> resultList = null;
		List parametros = new ArrayList();

		try {
			if (numero != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chcv from " + Chcontrvasec.class.getName()
						+ " chcv  where chcv.hcvlconsulta = ?  and chcv.hcvnconsecutiv = ? ");
				parametros.add(numero);
				parametros.add(consecutivo);

				resultList = (List<Chcontrvasec>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Control Vasectomia:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Control Vasectomia:" + e.getMessage(), e);
		}
	}

	/**
	 * @param nota
	 * @throws ModelException
	 */
	public void saveControlVasectomia(final Chusuario usuario, final Cnconsclin consulta, final Chcontrvasec vasectomia,
			final String usureg) throws ModelException {

		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {

					Integer consecutivo = null;

					String ESTADO_ABIERTO = "CE";
					Chconsulta consultaUsuario = null;
					Chcontrvasec controlVasec = new Chcontrvasec();
					controlVasec.setId(vasectomia.getId());
					controlVasec.setHcvcdescripcio(vasectomia.getHcvcdescripcio());
					controlVasec.setHcvcoperador(vasectomia.getHcvcoperador());
					controlVasec.setHcvctiposervi(vasectomia.getHcvctiposervi());
					controlVasec.setHcvdfecregistr(vasectomia.getHcvdfecregistr());
					controlVasec.setVersion(vasectomia.getVersion());
					if (usuario != null) {
						usuario.setHusdultimacons(new Date());
					}

					StringBuffer sb = new StringBuffer();
					sb.append(" select chco from Chconsulta"
							+ " chco  where chco.hcolnumero = :numeroConsulta  AND chco.hcoctiposervi = :tipoServicio ");
					Query query = session.createQuery(sb.toString());
					query.setParameter("numeroConsulta", consulta.getCconnumero());
					query.setParameter("tipoServicio", IConstantes.TIPO_CONSULTA);

					consultaUsuario = (Chconsulta) query.uniqueResult();

					if (consultaUsuario == null) {
						consultaUsuario = new Chconsulta();
						consultaUsuario.setHcodfecinicio(new Date());
					}

					if (controlVasec != null && usuario != null) {
						consultaUsuario.setHcocentidadadm(usuario.getHuscentidadadm());
						consultaUsuario.setHcocnombacompa(usuario.getHuscnomacompana());
						consultaUsuario.setHcocnombrespo(usuario.getHuscnomresponsa());
						consultaUsuario.setHcocoperador(usureg);
						consultaUsuario.setHcocservicio(consulta.getCcocservic());
						consultaUsuario.setHcocteleacompa(usuario.getHusctelacompana());
						consultaUsuario.setHcoctelerespo(usuario.getHusctelresponsa());
						consultaUsuario.setHcodfecregistr(new Date());
						consultaUsuario.setHcoeetapa(ESTADO_ABIERTO);
						consultaUsuario.setHconfolio(usuario.getHusnfolioactua());
						consultaUsuario.setHcontipoconsu(consulta.getCcontconcl());
						consultaUsuario.setHconnumdoc(consulta.getCconnumdoc());
						consultaUsuario.setHcontipdoc(consulta.getCcontipdoc());
						consultaUsuario.setHcolusuario(usuario);
						consultaUsuario.setHconclinica(consulta.getCconclinic());
						consultaUsuario.setHcoctiposervi(IConstantes.TIPO_CONSULTA);

						if (consulta.getCconnumero() != null) {
							consultaUsuario.setHcolconsuclini(new Long(consulta.getCconnumero()));
							consultaUsuario.setHcolnumero(new Long(consulta.getCconnumero()));
						}
					}

					if (controlVasec != null && controlVasec.getId() != null) {
						if (controlVasec.getId().getHcvnconsecutiv() == null) {
							StringBuffer sb1 = new StringBuffer();
							sb1.append(" select max(chcv.id.hcvnconsecutiv) from " + Chcontrvasec.class.getName()
									+ " chcv  where chcv.id.hcvlconsulta = :hcvlconsulta   ");
							Query query1 = session.createQuery(sb1.toString());
							query1.setParameter("hcvlconsulta", controlVasec.getId().getHcvlconsulta());

							Integer secuenciaActual = (Integer) query1.uniqueResult();

							if (secuenciaActual != null) {
								consecutivo = secuenciaActual.intValue() + 1;
							} else {
								consecutivo = 1;
							}
							if (consecutivo != null) {
								controlVasec.getId().setHcvnconsecutiv(consecutivo);
							}

						}

						session.saveOrUpdate(consultaUsuario);
						session.saveOrUpdate(controlVasec);
					}

					return controlVasec;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		}
	}

	/**
	 * @param antecedente
	 * @throws ModelException
	 */
	public void saveAntecedenteObstetrico(Chanteceobst antecedente) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(antecedente);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Antecedente Obstetrico:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Antecedente Obstetrico:" + e.getMessage(), e);
		}
	}

	/**
	 * @param numeroConsulta
	 * @return
	 * @throws ModelException
	 */
	public Chanteceobst getAntecedenteObstetrico(Long numeroConsulta) throws ModelException {
		List<Chanteceobst> resultList = null;
		List parametros = new ArrayList();

		try {
			if (numeroConsulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chao from " + Chanteceobst.class.getName()
						+ " chao  where chao.id.haolconsulta = ? AND chao.id.haoctiposervi = ? ");
				parametros.add(numeroConsulta);
				parametros.add(IConstantes.TIPO_CONSULTA);

				resultList = (List<Chanteceobst>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Antecedentes Obstetricos:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Antecedentes Obstetricos:" + e.getMessage(), e);
		}

	}

	/**
	 * @param gestacion
	 * @throws ModelException
	 */
	public void saveGestacionActual(Chgestacion gestacion) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(gestacion);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Gestaci�n Actual:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Gestaci�n Actual:" + e.getMessage(), e);
		}
	}

	/**
	 * @param consclin
	 * @return
	 * @throws ModelException
	 */
	public Chgestacion getGestacionActual(Cnconsclin consclin) throws ModelException {
		List<Chgestacion> resultList = null;
		List parametros = new ArrayList();

		try {
			if (consclin != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chga from " + Chgestacion.class.getName()
						+ " chga  where chga.id.hgelconsulta = ? AND chga.id.hgectiposervi = ? ");
				parametros.add(consclin.getCconnumero());
				parametros.add(IConstantes.TIPO_CONSULTA);

				resultList = (List<Chgestacion>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Gestaci�n Actual:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Gestaci�n Actual:" + e.getMessage(), e);
		}

	}

	/**
	 * @param prenatal
	 * @throws ModelException
	 */
	public void saveControlPrenatal(Chcontrolpre prenatal) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(prenatal);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Control Prenatal:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Control Prenatal:" + e.getMessage(), e);
		}
	}

	/**
	 * @param consclin
	 * @return
	 * @throws ModelException
	 */
	public Chcontrolpre getControlPrenatal(Cnconsclin consclin) throws ModelException {
		List<Chcontrolpre> resultList = null;
		List parametros = new ArrayList();

		try {
			if (consclin != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chcp from " + Chcontrolpre.class.getName()
						+ " chcp  where chcp.id.hcplconsulta = ? AND chcp.id.hcpctiposervi = ?  ");
				parametros.add(consclin.getCconnumero());
				parametros.add(IConstantes.TIPO_CONSULTA);

				resultList = (List<Chcontrolpre>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Control Prenatal:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Control Prenatal:" + e.getMessage(), e);
		}

	}

	/**
	 * @param numero
	 * @return
	 * @throws ModelException
	 */
	public Chcontrolpre getControlPrenatal(Long numero) throws ModelException {
		List<Chcontrolpre> resultList = null;
		List parametros = new ArrayList();

		try {
			if (numero != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chcp from " + Chcontrolpre.class.getName()
						+ " chcp  where chcp.id.hcplconsulta = ? AND chcp.id.hcpctiposervi = ?  ");
				parametros.add(numero);
				parametros.add(IConstantes.TIPO_CONSULTA);

				resultList = (List<Chcontrolpre>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Control Prenatal:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Control Prenatal:" + e.getMessage(), e);
		}

	}

	/**
	 * @param usuario
	 * @return
	 * @throws ModelException
	 */
	public Long getConsultaPrenatalPrincipal(Long usuario) throws ModelException {
		List<Chconsulta> resultList = null;
		List parametros = new ArrayList();
		try {
			if (usuario != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chco from ");
				sb.append(Chconsulta.class.getName());
				sb.append(" chco  where chco.hcolusuario.huslnumero =  ? ");
				sb.append(" and chco.hcocservicio =  ? ");
				sb.append(" and chco.hcoeetapa = ? ");
				sb.append(" and chco.hcodfeccierre = (select max(c.hcodfeccierre) from Chconsulta c  where  ");
				sb.append(" c.hcolusuario.huslnumero = ? ");
				sb.append(" and c.hcocservicio = ? ");
				sb.append(" and c.hcoeetapa = ?  ) ");

				parametros.add(usuario);
				parametros.add(IConstantes.SERVICIO_PRENATAL);
				parametros.add(IConstantes.ETAPA_CERRADA);
				parametros.add(usuario);
				parametros.add(IConstantes.SERVICIO_PRENATAL);
				parametros.add(IConstantes.ETAPA_CERRADA);

				resultList = (List<Chconsulta>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0).getHcolnumero();
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Id Consulta Principal:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Id Consulta Principal :" + e.getMessage(), e);
		}

	}

	/**
	 * @param usuario
	 * @return
	 * @throws ModelException
	 */
	public Chgestacion getGestacionControlPrenatal(Long usuario) throws ModelException {

		Long idConsultaPrincipal = null;
		if (usuario != null) {
			idConsultaPrincipal = getConsultaPrenatalPrincipal(usuario);
		}

		List<Chgestacion> resultList = null;
		List parametros = new ArrayList();
		try {
			if (idConsultaPrincipal != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chge from ");
				sb.append(Chgestacion.class.getName());
				sb.append(
						" chge, Chconsulta chco  where chge.id.hgectiposervi = chco.hcoctiposervi AND chge.id.hgectiposervi = ?  AND chco.hcolnumero = chge.id.hgelconsulta and chco.hcoeetapa = 'CE'  and  chge.hgelconsulprin =  ? ");
				sb.append(
						" and chge.hgedfecregistr = (select max(c.hgedfecregistr) from Chgestacion c, Chconsulta con   where con.hcolnumero = c.id.hgelconsulta and con.hcoeetapa = ? ");
				sb.append(" and c.hgelconsulprin = ? )");
				parametros.add(IConstantes.TIPO_CONSULTA);
				parametros.add(idConsultaPrincipal);
				parametros.add(IConstantes.ETAPA_CERRADA);
				parametros.add(idConsultaPrincipal);

				resultList = (List<Chgestacion>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Consulta Actual:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Consulta Actual:" + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroHistoria
	 * @return
	 * @throws ModelException
	 */
	public Date getFechaUltimoPeriodo(Long numeroHistoria) throws ModelException {
		List<Chantegineco> resultList = null;
		List parametros = new ArrayList();
		try {

			if (numeroHistoria != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chag from " + Chantegineco.class.getName()
						+ " chag  where chag.id.haglconsulta = ? AND chag.id.hagctiposervi = ? ");
				parametros.add(numeroHistoria);
				parametros.add(IConstantes.TIPO_CONSULTA);

				resultList = (List<Chantegineco>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {

					return resultList.get(0).getHagdfur();
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Fecha del Ultimo Periodo:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Fecha del Ultimo Periodo:" + e.getMessage(), e);
		}

	}

	/**
	 * @return
	 * @throws ModelException
	 */
	public List<Chcontrolpre> getExamenFisicoControlPrenatal(Long numeroHistoria) throws ModelException {
		List<Chcontrolpre> resultList = null;
		List parametros = new ArrayList();

		try {
			if (numeroHistoria != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chcp from " + Chcontrolpre.class.getName()
						+ " chcp, Chconsulta chco  where chco.hcolnumero = chcp.id.hcplconsulta "
						+ "and chco.hcoeetapa = ? and   chcp.hcplconsulprin = ? order by  chcp.hcpdfecharegis");
				parametros.add(IConstantes.ETAPA_CERRADA);
				parametros.add(numeroHistoria);

				resultList = (List<Chcontrolpre>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList;
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Control Prenatal:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Control Prenatal:" + e.getMessage(), e);
		}

	}

	/**
	 * @return
	 * @throws ModelException
	 */
	public List<Chtamizalapr> getTamizajesLaboratorioPrenatal(Long numeroHistoria) throws ModelException {
		List<Chtamizalapr> resultList = null;
		List parametros = new ArrayList();

		try {
			if (numeroHistoria != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chtl from " + Chtamizalapr.class.getName()
						+ " chtl, Chconsulta chco  where chco.hcolnumero = chtl.id.htllconsulta "
						+ "and chco.hcoeetapa = ? and   chtl.htllconsulprin = ? order by  chtl.htldfecharegis");
				parametros.add(IConstantes.ETAPA_CERRADA);
				parametros.add(numeroHistoria);

				resultList = (List<Chtamizalapr>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList;
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Tamizaje Laboratorios Prenatal:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Tamizaje Laboratorios Prenatal:" + e.getMessage(), e);
		}

	}

	/**
	 * @return
	 * @throws ModelException
	 */
	public List<Cpservicio> getExamenesLaboratorio(Cpservicio servicio) throws ModelException {
		List<Cpservicio> resultList = null;
		List parametros = new ArrayList();
		try {

			StringBuffer sb = new StringBuffer();
			sb.append(" select cpse from " + Cpservicio.class.getName()
					+ " cpse  where cpse.csvngrupo = 81  AND cpse.csvccups = 'S' "
					+ " and cpse.csvnsubgru = 4  and cpse.csvcestado in ('VG','XX')  ");

			if (servicio != null) {

				if (servicio.getCsvcnombre() != null && !servicio.getCsvcnombre().equals("")) {
					sb.append(" and cpse.csvcnombre like ? ");
					parametros.add("%" + servicio.getCsvcnombre().toUpperCase() + "%");
				}

				if (servicio.getCsvcnombre2() != null && !servicio.getCsvcnombre2().equals("")) {

					if (servicio.getCsvcopera1() != null && servicio.getCsvcopera1().equals("OR")) {

						sb.append(" OR cpse.csvcnombre like ? ");
						parametros.add("%" + servicio.getCsvcnombre2().toUpperCase() + "%");
					} else {

						sb.append(" and cpse.csvcnombre like ? ");
						parametros.add("%" + servicio.getCsvcnombre2().toUpperCase() + "%");
					}

				}

				if (servicio.getCsvcnombre3() != null && !servicio.getCsvcnombre3().equals("")) {

					if (servicio.getCsvcopera2() != null && servicio.getCsvcopera2().equals("OR")) {

						sb.append(" OR cpse.csvcnombre like ? ");
						parametros.add("%" + servicio.getCsvcnombre3().toUpperCase() + "%");
					} else {

						sb.append(" and cpse.csvcnombre like ? ");
						parametros.add("%" + servicio.getCsvcnombre3().toUpperCase() + "%");
					}

				}

			}

			sb.append(" order by  cpse.csvcnombre");
			resultList = (List<Cpservicio>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			if (!resultList.isEmpty()) {
				return resultList;
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Examenes Laboratorio:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Examenes Laboratorio:" + e.getMessage(), e);
		}

	}

	/**
	 * @param servicio
	 * @return
	 * @throws ModelException
	 */
	public List<Cpservicio> getExamenesLaboratorioPorCriterios(Cpservicio servicio, Long admision)
			throws ModelException {
		List<Cpservicio> resultListServicios = null;
		List resultList = null;
		List parametros = new ArrayList();
		try {

			if (servicio != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select cpse.*,(case when cfda.cdacservic is null then 'No' else 'Si' end) SERVICIOPAQUETE"
						+ " from  clinico.cpservicio cpse left join  "
						+ " clinico.cfdetaadmision cfda on cfda.cdacservic = cpse.csvccodigo and cfda.cdannumadm = :admision  "
						+ " where cpse.csvngrupo = 81  and cpse.csvccups = 'S'  "
						+ " and cpse.csvnsubgru in (4,6)  and cpse.csvcestado in ('VG','XX') ");

				if (servicio != null) {

					if (servicio.getCsvccodigo() != null && !servicio.getCsvccodigo().equals("")) {
						sb.append(" and cpse.csvccodigo like :csvccodigo ");
					}

					if (servicio.getCsvcnombre() != null && !servicio.getCsvcnombre().equals("")) {
						sb.append(" and cpse.csvcnombre like :csvcnombre ");
					}

					if (servicio.getCsvcnombre2() != null && !servicio.getCsvcnombre2().equals("")) {

						if (servicio.getCsvcopera1() != null && servicio.getCsvcopera1().equals("OR")) {

							sb.append(" OR cpse.csvcnombre like :csvcnombre2 ");
						} else {
							sb.append(" and cpse.csvcnombre like :csvcnombres2 ");
						}

					}

					if (servicio.getCsvcnombre3() != null && !servicio.getCsvcnombre3().equals("")) {

						if (servicio.getCsvcopera2() != null && servicio.getCsvcopera2().equals("OR")) {

							sb.append(" OR cpse.csvcnombre like :csvcnombre3 ");
						} else {

							sb.append(" and cpse.csvcnombre like :csvcnombres3 ");
						}

					}

				}

				sb.append("order by SERVICIOPAQUETE desc");

				Query sqlquery = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
						.createQuery(sb.toString());

				if (servicio.getCsvccodigo() != null && !servicio.getCsvccodigo().equals("")) {
					sqlquery.setParameter("csvccodigo", "%" + servicio.getCsvccodigo().toUpperCase() + "%");
				}

				if (servicio.getCsvcnombre() != null && !servicio.getCsvcnombre().equals("")) {
					sqlquery.setParameter("csvcnombre", "%" + servicio.getCsvcnombre().toUpperCase() + "%");
				}

				if (servicio.getCsvcnombre2() != null && !servicio.getCsvcnombre2().equals("")) {

					if (servicio.getCsvcopera1() != null && servicio.getCsvcopera1().equals("OR")) {

						sqlquery.setParameter("csvcnombre2", "%" + servicio.getCsvcnombre2().toUpperCase() + "%");
					} else {

						sqlquery.setParameter("csvcnombres2", "%" + servicio.getCsvcnombre2().toUpperCase() + "%");
					}

				}

				if (servicio.getCsvcnombre3() != null && !servicio.getCsvcnombre3().equals("")) {

					if (servicio.getCsvcopera2() != null && servicio.getCsvcopera2().equals("OR")) {
						sqlquery.setParameter("csvcnombre3", "%" + servicio.getCsvcnombre3().toUpperCase() + "%");
					} else {
						sqlquery.setParameter("csvcnombres3", "%" + servicio.getCsvcnombre3().toUpperCase() + "%");
					}

				}

				if (admision != null) {
					sqlquery.setParameter("admision", admision);
				}
				resultList = sqlquery.list();

				if (!resultList.isEmpty()) {

					return resultList;
				}
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Examenes Laboratorio:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Examenes Laboratorio:" + e.getMessage(), e);
		}

	}

	/**
	 * @param servicio
	 * @return
	 * @throws ModelException
	 */
	public List<Cpservicio> getCirugiasPorCriterios(Cpservicio servicio) throws ModelException {
		List<Cpservicio> resultList = null;
		List parametros = new ArrayList();
		try {

			if (servicio != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select cpse from " + Cpservicio.class.getName()
						+ " cpse  where cpse.csvntipcon in (2,3,7,11,12)   and cpse.csvcestado = 'VG' ");
				if (servicio.getCsvccodigo() != null && !servicio.getCsvccodigo().equals("")) {
					sb.append(" and cpse.csvccodigo like ? ");
					parametros.add("%" + servicio.getCsvccodigo().toUpperCase() + "%");
				}

				if (servicio.getCsvcnombre() != null && !servicio.getCsvcnombre().equals("")) {
					sb.append(" and cpse.csvcnombre like ? ");
					parametros.add("%" + servicio.getCsvcnombre().toUpperCase() + "%");
				}

				if (servicio.getCsvcnombre2() != null && !servicio.getCsvcnombre2().equals("")) {

					if (servicio.getCsvcopera1() != null && servicio.getCsvcopera1().equals("OR")) {

						sb.append(" OR cpse.csvcnombre like ? ");
						parametros.add("%" + servicio.getCsvcnombre2().toUpperCase() + "%");
					} else {

						sb.append(" and cpse.csvcnombre like ? ");
						parametros.add("%" + servicio.getCsvcnombre2().toUpperCase() + "%");
					}

				}

				if (servicio.getCsvcnombre3() != null && !servicio.getCsvcnombre3().equals("")) {

					if (servicio.getCsvcopera2() != null && servicio.getCsvcopera2().equals("OR")) {

						sb.append(" OR cpse.csvcnombre like ? ");
						parametros.add("%" + servicio.getCsvcnombre3().toUpperCase() + "%");
					} else {

						sb.append(" and cpse.csvcnombre like ? ");
						parametros.add("%" + servicio.getCsvcnombre3().toUpperCase() + "%");
					}

				}

				resultList = (List<Cpservicio>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList;
				}
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Cirugias:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Cirugias:" + e.getMessage(), e);
		}

	}

	/**
	 * @param contrato
	 * @return
	 * @throws ModelException
	 */
	public Cpcontrato getContratoPornumero(Integer contrato) throws ModelException {
		List<Cpcontrato> resultList = null;
		List parametros = new ArrayList();
		try {

			if (contrato != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select cpco from " + Cpcontrato.class.getName() + " cpco  where cpco.id.ccnnnumero = ?  ");
				parametros.add(contrato);

				resultList = (List<Cpcontrato>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return (Cpcontrato) resultList.get(0);
				}
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Contratos:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Contratos:" + e.getMessage(), e);
		}

	}

	/**
	 * @param contrato
	 * @return
	 * @throws ModelException
	 */
	public List<Cpcontrato> getContratoPorCriterios(Cpcontrato contrato) throws ModelException {
		List<Cpcontrato> resultList = null;
		List parametros = new ArrayList();
		try {

			if (contrato != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select cpco from " + Cpcontrato.class.getName()
						+ " cpco  where (cpco.id.ccnnclinic = ? OR cpco.id.ccnnclinic = 9)  ");
				parametros.add(contrato.getId().getCcnnclinic());

				if (contrato.getId().getCcnnnumero() != null) {
					sb.append(" and cpco.id.ccnnnumero = ? ");
					parametros.add(contrato.getId().getCcnnnumero());
				}

				resultList = (List<Cpcontrato>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList;
				}
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Contratos:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Contratos:" + e.getMessage(), e);
		}

	}

	/**
	 * @param medicamento
	 * @return
	 * @throws ModelException
	 */
	public List<Chvademecum> getVademecumHistorias(Chvademecum medicamento) throws ModelException {
		List<Chvademecum> resultList = null;
		List parametros = new ArrayList();
		try {
			StringBuffer sb = new StringBuffer();
			sb.append(" select chvd from " + Chvademecum.class.getName()
					+ " chvd where  upper(chvd.hvdcprincactiv) like upper(?) ");
			sb.append(" order by  chvd.hvdccodigcomer desc ");

			parametros.add("%" + medicamento.getHvdcprincactiv() + "%");

			if (medicamento != null) {

				if (medicamento.getHvdcprincactiv2() != null && !medicamento.getHvdcprincactiv2().equals("")) {

					if (medicamento.getHvdcopera1() != null && medicamento.getHvdcopera1().equals("OR")) {

						sb.append(" OR upper(chvd.hvdcprincactiv) like upper(?) ");
						parametros.add("%" + medicamento.getHvdcopera2() + "%");
					} else {

						sb.append(" and upper(chvd.hvdcprincactiv) like upper(?) ");
						parametros.add("%" + medicamento.getHvdcopera2() + "%");
					}

				}

				if (medicamento.getHvdcprincactiv3() != null && !medicamento.getHvdcprincactiv3().equals("")) {

					if (medicamento.getHvdcopera2() != null && medicamento.getHvdcopera2().equals("OR")) {

						sb.append(" OR upper(chvd.hvdcprincactiv) like upper(?) ");
						parametros.add("%" + medicamento.getHvdcprincactiv3() + "%");
					} else {

						sb.append(" and upper(chvd.hvdcprincactiv)  like upper(?)  ");
						parametros.add("%" + medicamento.getHvdcprincactiv3() + "%");
					}

				}

			}

			resultList = (List<Chvademecum>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			if (!resultList.isEmpty()) {
				return resultList;
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando M�dicamentos:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando M�dicamentos:" + e.getMessage(), e);
		}

	}

	public List<Chvademecum> getVademecum(Chvademecum medicamento) throws ModelException {
		List<Chvademecum> resultList = null;
		List parametros = new ArrayList();
		try {
			StringBuffer sb = new StringBuffer();
			sb.append(" select chvd from " + Chvademecum.class.getName() + " chvd, " + Chvademprof.class.getName()
					+ " chvp where  upper(chvd.hvdcprincactiv) like upper(?) "
					+ "and chvd.hvdccodigatc = chvp.hvpccodigatc and chvp.hvpccodisap is not null");
			sb.append(" order by  chvd.hvdccodigcomer desc ");

			parametros.add("%" + medicamento.getHvdcprincactiv() + "%");

			if (medicamento != null) {

				if (medicamento.getHvdcprincactiv2() != null && !medicamento.getHvdcprincactiv2().equals("")) {

					if (medicamento.getHvdcopera1() != null && medicamento.getHvdcopera1().equals("OR")) {

						sb.append(" OR upper(chvd.hvdcprincactiv) like upper(?) ");
						parametros.add("%" + medicamento.getHvdcopera2() + "%");
					} else {

						sb.append(" and upper(chvd.hvdcprincactiv) like upper(?) ");
						parametros.add("%" + medicamento.getHvdcopera2() + "%");
					}

				}

				if (medicamento.getHvdcprincactiv3() != null && !medicamento.getHvdcprincactiv3().equals("")) {

					if (medicamento.getHvdcopera2() != null && medicamento.getHvdcopera2().equals("OR")) {

						sb.append(" OR upper(chvd.hvdcprincactiv) like upper(?) ");
						parametros.add("%" + medicamento.getHvdcprincactiv3() + "%");
					} else {

						sb.append(" and upper(chvd.hvdcprincactiv)  like upper(?)  ");
						parametros.add("%" + medicamento.getHvdcprincactiv3() + "%");
					}

				}

			}

			resultList = (List<Chvademecum>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			if (!resultList.isEmpty()) {
				return resultList;
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando M�dicamentos:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando M�dicamentos:" + e.getMessage(), e);
		}

	}

	public List<Chvademprof> getVademProf(Chvademprof medicamento) throws ModelException {
		List<Chvademprof> resultList = null;
		List parametros = new ArrayList();
		try {
			StringBuffer sb = new StringBuffer();
			sb.append(" select chvp from " + Chvademprof.class.getName()
					+ " chvp where  upper(chvp.hvpcprincactiv) like upper(?) " + " and chvp.hvpccodisap is not null");

			parametros.add("%" + medicamento.getHvpcprincactiv() + "%");

			if (medicamento != null) {

				if (medicamento.getHvpcprincactiv2() != null && !medicamento.getHvpcprincactiv2().equals("")) {

					if (medicamento.getHvpcopera1() != null && medicamento.getHvpcopera1().equals("OR")) {

						sb.append(" OR upper(chvp.hvpcprincactiv) like upper(?) ");
						parametros.add("%" + medicamento.getHvpcopera2() + "%");
					} else {

						sb.append(" and upper(chvp.hvpcprincactiv) like upper(?) ");
						parametros.add("%" + medicamento.getHvpcopera2() + "%");
					}

				}

				if (medicamento.getHvpcprincactiv3() != null && !medicamento.getHvpcprincactiv3().equals("")) {

					if (medicamento.getHvpcopera2() != null && medicamento.getHvpcopera2().equals("OR")) {

						sb.append(" OR upper(chvp.hvpcprincactiv) like upper(?) ");
						parametros.add("%" + medicamento.getHvpcprincactiv3() + "%");
					} else {

						sb.append(" and upper(chvp.hvpcprincactiv)  like upper(?)  ");
						parametros.add("%" + medicamento.getHvpcprincactiv3() + "%");
					}

				}

			}

			resultList = (List<Chvademprof>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			if (!resultList.isEmpty()) {
				return resultList;
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando M�dicamentos:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando M�dicamentos:" + e.getMessage(), e);
		}

	}

	/**
	 * @param servicio
	 * @return
	 * @throws ModelException
	 */
	public List<Cpservicio> getServicioSap(Cpservicio servicio) throws ModelException {
		List<Cpservicio> resultList = null;
		List parametros = new ArrayList();

		try {
			StringBuffer sb = new StringBuffer();
			sb.append(" select cpse from " + Cpservicio.class.getName()
					+ " cpse where cpse.csvcswpaqu = 'N' and  upper(cpse.csvccodigo) like upper(?) and cpse.csvcestado = 'VG' ");

			parametros.add("%" + servicio.getCsvccodigo() + "%");

			if (servicio.getCsvcnombre() != null && servicio.getCsvcnombre() != ("")) {
				sb.append(" and upper(cpse.csvcnombre)  like upper(?)  ");
				parametros.add("%" + servicio.getCsvcnombre() + "%");
			}
			sb.append(" order by cpse.csvccodcups desc");

			resultList = (List<Cpservicio>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			if (!resultList.isEmpty()) {
				return resultList;
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Servicios:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Servicios:" + e.getMessage(), e);
		}

	}

	// codigo y nombre de los municipios

	/**
	 * @param municipio
	 * @return
	 * @throws ModelException
	 */
	public Cpmunidane getMunicipiosSap(Integer departamento, Integer municipio) throws ModelException {
		List<Cpmunidane> resultList = null;
		List parametros = new ArrayList();

		try {
			StringBuffer sb = new StringBuffer();
			sb.append(" select cpmd from " + Cpmunidane.class.getName()
					+ " cpmd where cpmd.id.cmdncodmun =  ? and cpmd.id.cmdncoddep = ? ");

			parametros.add(municipio);
			parametros.add(departamento);

			resultList = (List<Cpmunidane>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			if (!resultList.isEmpty()) {
				return resultList.get(0);
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Servicios:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Servicios:" + e.getMessage(), e);
		}

	}

	/**
	 * @param codigo
	 * @return
	 * @throws ModelException
	 */
	public List<Cpservicio> getServicioSapCodigo(String codigo) throws ModelException {
		List<Cpservicio> resultList = null;
		List parametros = new ArrayList();

		try {

			if (codigo != null && !codigo.equals("")) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select cpse from " + Cpservicio.class.getName()
						+ " cpse where (cpse.csvccodigo) like (?) and cpse.csvcestado = 'VG' ");

				parametros.add(codigo);

				resultList = (List<Cpservicio>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList;
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Servicios:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Servicios:" + e.getMessage(), e);
		}

	}

	public Cpservicio getDescripcionServicioSapXCodigo(final Cpservicio servicio) throws ModelException {
		Cpservicio pis = (Cpservicio) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				if (servicio.getCsvccodigo() != null && !servicio.getCsvccodigo().equals("")) {

					StringBuffer sb = new StringBuffer();
					sb.append(" select cpse from ");
					sb.append(Cpservicio.class.getName()).append(" cpse ");
					sb.append("  where cpse.csvccodigo = :codigo and cpse.csvcestado = 'VG' ");

					String hql = sb.toString();

					Query query = session.createQuery(hql);
					query.setParameter("codigo", servicio.getCsvccodigo().toUpperCase());
					Cpservicio pis;
					pis = (Cpservicio) query.uniqueResult();

					return pis;
				} else {
					return null;
				}

			}

		});
		return pis;

	}

	/**
	 * @param eps
	 * @return
	 * @throws ModelException
	 */
	public List<Cpentidadadm> getEntidadEps(Cpentidadadm eps) throws ModelException {
		List<Cpentidadadm> resultList = null;
		List parametros = new ArrayList();

		try {
			StringBuffer sb = new StringBuffer();
			sb.append(" select cpea from " + Cpentidadadm.class.getName()
					+ " cpea where upper(cpea.ceacnombre) like upper(?) ");

			parametros.add("%" + eps.getCeacnombre() + "%");

			if (eps.getCeaccodigo() != null && eps.getCeaccodigo() != ("")) {
				sb.append(" and upper(cpea.ceaccodigo)  like upper(?)  ");
				parametros.add("%" + eps.getCeaccodigo() + "%");
			}

			resultList = (List<Cpentidadadm>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			if (!resultList.isEmpty()) {
				return resultList;
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Servicios:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Servicios:" + e.getMessage(), e);
		}

	}

	/**
	 * @param codigoAdm
	 * @return
	 * @throws ModelException
	 */
	public Cpentidadadm getEntidadEpsxCodigo(String codigoAdm) throws ModelException {
		List<Cpentidadadm> resultList = null;
		List parametros = new ArrayList();

		try {

			if (codigoAdm != null && !codigoAdm.equals("")) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select cpen from " + Cpentidadadm.class.getName()
						+ " cpen where upper(cpen.ceaccodigo) = upper(?) ");

				parametros.add(codigoAdm);

				resultList = (List<Cpentidadadm>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Entidad Administradora:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Entidad Administradora:" + e.getMessage(), e);
		}

	}

	/**
	 * @param ocupacion
	 * @return
	 * @throws ModelException
	 */
	public List<Cpocupacio> getOcupacion(Cpocupacio ocupacion) throws ModelException {
		List<Cpocupacio> resultList = null;
		List parametros = new ArrayList();

		try {
			StringBuffer sb = new StringBuffer();
			sb.append(" select cpoc from " + Cpocupacio.class.getName()
					+ " cpoc where upper(cpoc.coccdescri) like upper(?) ");
			parametros.add("%" + ocupacion.getCoccdescri() + "%");

			if (ocupacion.getCocncodigo() != null) {
				sb.append(" and upper(cpoc.cocncodigo)  = ?  ");
				parametros.add(ocupacion.getCocncodigo());
			}

			resultList = (List<Cpocupacio>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			if (!resultList.isEmpty()) {
				return resultList;
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Servicios:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Servicios:" + e.getMessage(), e);
		}

	}

	/**
	 * @param medicamento
	 * @return
	 * @throws ModelException
	 */
	public List<Crmedicame> getVademecumClinico(Crmedicame medicamento) throws ModelException {
		List<Crmedicame> resultList = null;
		List parametros = new ArrayList();
		try {
			StringBuffer sb = new StringBuffer();
			sb.append(" select crme from " + Crmedicame.class.getName()
					+ " crme where  upper(crme.cmecdescri) like upper(?) ");

			parametros.add("%" + medicamento.getCmecdescri() + "%");

			if (medicamento != null) {

				if (medicamento.getCmecdescri2() != null && !medicamento.getCmecdescri2().equals("")) {

					if (medicamento.getCmecopera1() != null && medicamento.getCmecopera1().equals("OR")) {

						sb.append(" OR upper(crme.cmecdescri) like upper(?) ");
						parametros.add("%" + medicamento.getCmecdescri2() + "%");
					} else {

						sb.append(" and upper(crme.cmecdescri) like upper(?) ");
						parametros.add("%" + medicamento.getCmecdescri2() + "%");
					}

				}

				if (medicamento.getCmecdescri3() != null && !medicamento.getCmecdescri3().equals("")) {

					if (medicamento.getCmecopera2() != null && medicamento.getCmecopera2().equals("OR")) {

						sb.append(" OR upper(crme.cmecdescri) like upper(?) ");
						parametros.add("%" + medicamento.getCmecdescri3() + "%");
					} else {

						sb.append(" and upper(crme.cmecdescri)  like upper(?)  ");
						parametros.add("%" + medicamento.getCmecdescri3() + "%");
					}

				}

			}

			resultList = (List<Crmedicame>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			if (!resultList.isEmpty()) {
				return resultList;
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando M�dicamentos:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando M�dicamentos:" + e.getMessage(), e);
		}

	}

	/**
	 * @return
	 * @throws ModelException
	 */
	public List<Cpservicio> getExamenesImagenes(Cpservicio servicio) throws ModelException {
		List<Cpservicio> resultList = null;
		List parametros = new ArrayList();
		try {

			StringBuffer sb = new StringBuffer();
			sb.append(" select cpse from " + Cpservicio.class.getName() + " cpse  where cpse.csvngrupo = 81  ");
			sb.append(" and cpse.csvnsubgru in (2,5,7)  and cpse.csvcestado in ('VG','XX')  ");
			sb.append(" and cpse.csvccups = 'S' ");

			if (servicio != null) {

				if (servicio.getCsvccodigo() != null && !servicio.getCsvccodigo().equals("")) {
					sb.append(" and cpse.csvccodigo like ? ");
					parametros.add("%" + servicio.getCsvccodigo().toUpperCase() + "%");
				}

				if (servicio.getCsvcnombre() != null && !servicio.getCsvcnombre().equals("")) {
					sb.append(" and cpse.csvcnombre like ? ");
					parametros.add("%" + servicio.getCsvcnombre().toUpperCase() + "%");
				}

				if (servicio.getCsvcnombre2() != null && !servicio.getCsvcnombre2().equals("")) {

					if (servicio.getCsvcopera1() != null && servicio.getCsvcopera1().equals("OR")) {

						sb.append(" OR cpse.csvcnombre like ? ");
						parametros.add("%" + servicio.getCsvcnombre2().toUpperCase() + "%");
					} else {

						sb.append(" and cpse.csvcnombre like ? ");
						parametros.add("%" + servicio.getCsvcnombre2().toUpperCase() + "%");
					}

				}

				if (servicio.getCsvcnombre3() != null && !servicio.getCsvcnombre3().equals("")) {

					if (servicio.getCsvcopera2() != null && servicio.getCsvcopera2().equals("OR")) {

						sb.append(" OR cpse.csvcnombre like ? ");
						parametros.add("%" + servicio.getCsvcnombre3().toUpperCase() + "%");
					} else {

						sb.append(" and cpse.csvcnombre like ? ");
						parametros.add("%" + servicio.getCsvcnombre3().toUpperCase() + "%");
					}

				}
			}
			sb.append(" order by  cpse.csvcnombre");

			resultList = (List<Cpservicio>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			if (!resultList.isEmpty()) {
				return resultList;
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Examenes de Imagenes:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Examenes de Imagenes:" + e.getMessage(), e);
		}

	}

	/**
	 * @return
	 * @throws ModelException
	 */
	public List<Cpservicio> getServiciosSalud(Cpservicio servicio) throws ModelException {
		List<Cpservicio> resultList = null;
		List parametros = new ArrayList();
		try {

			StringBuffer sb = new StringBuffer();
			sb.append(" select cpse from " + Cpservicio.class.getName()
					+ " cpse  where  cpse.csvcestado in ('VG','XX')  ");

			if (servicio != null) {

				if (servicio.getCsvccodigo() != null && !servicio.getCsvccodigo().equals("")) {
					sb.append(" and cpse.csvccodigo like ? ");
					parametros.add("%" + servicio.getCsvccodigo().toUpperCase() + "%");
				}

				if (servicio.getCsvcnombre() != null && !servicio.getCsvcnombre().equals("")) {
					sb.append(" and cpse.csvcnombre like ? ");
					parametros.add("%" + servicio.getCsvcnombre().toUpperCase() + "%");
				}

				if (servicio.getCsvcnombre2() != null && !servicio.getCsvcnombre2().equals("")) {

					if (servicio.getCsvcopera1() != null && servicio.getCsvcopera1().equals("OR")) {

						sb.append(" OR cpse.csvcnombre like ? ");
						parametros.add("%" + servicio.getCsvcnombre2().toUpperCase() + "%");
					} else {

						sb.append(" and cpse.csvcnombre like ? ");
						parametros.add("%" + servicio.getCsvcnombre2().toUpperCase() + "%");
					}

				}

				if (servicio.getCsvcnombre3() != null && !servicio.getCsvcnombre3().equals("")) {

					if (servicio.getCsvcopera2() != null && servicio.getCsvcopera2().equals("OR")) {

						sb.append(" OR cpse.csvcnombre like ? ");
						parametros.add("%" + servicio.getCsvcnombre3().toUpperCase() + "%");
					} else {

						sb.append(" and cpse.csvcnombre like ? ");
						parametros.add("%" + servicio.getCsvcnombre3().toUpperCase() + "%");
					}

				}
			}
			sb.append(" order by  cpse.csvcnombre");

			resultList = (List<Cpservicio>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			if (!resultList.isEmpty()) {
				return resultList;
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Examenes de Imagenes:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Examenes de Imagenes:" + e.getMessage(), e);
		}

	}

	/**
	 * @param examen
	 * @throws ModelException
	 */
	public void saveExamenImagenes(Chexameimage examen) throws ModelException {
		try {
			if (examen != null) {
				this.getHibernateTemplate().saveOrUpdate(examen);
			}

		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Examen Imagenes:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Examen Imagenes :" + e.getMessage(), e);
		}
	}

	/**
	 * @param examen
	 * @throws ModelException
	 */
	public void saveExamenElectrofisiologicos(Chexameelect examen) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(examen);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Examenes Electrofisiologicos:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Examenes Electrofisiologicos :" + e.getMessage(), e);
		}
	}

	/**
	 * @param examen
	 * @throws ModelException
	 */
	public void saveExamenLaboratorio(Chexamelabor examen) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(examen);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Examen de Laboratorio:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Examen de Laboratorio :" + e.getMessage(), e);
		}
	}


	/**
	 * @param consclin
	 * @return
	 * @throws ModelException
	 */
	public List<Chexameimage> getExamenesImagenesConsulta(final Cnconsclin consclin) throws ModelException {
		List<Chexameimage> pis = (List<Chexameimage>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				if (consclin != null) {
					StringBuffer sb = new StringBuffer();
					sb.append(" select chei  from " + Chexameimage.class.getName()
							+ " chei  where chei.id.heilconsulta =  ").append(consclin.getCconnumero());
					sb.append(" and chei.id.heictiposervi  = ").append("'" + IConstantes.TIPO_CONSULTA + "'");

					String hql = sb.toString();

					Query query = session.createQuery(hql);
					List<Chexameimage> pis;
					pis = query.list();

					for (Chexameimage co : pis) {
						Cpservicio servicio = co.getCpservicio();
						Hibernate.initialize(servicio);

					}

					return pis;
				} else {
					return null;
				}

			}

		});
		return pis;

	}

	/**
	 * @param consclin
	 * @return
	 * @throws ModelException
	 */
	public List<Chexameelect> getExamenesElectrofisiologicosConsulta(final Cnconsclin consclin) throws ModelException {
		List<Chexameelect> pis = (List<Chexameelect>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				if (consclin != null) {
					StringBuffer sb = new StringBuffer();
					sb.append(" select chee from " + Chexameelect.class.getName()
							+ " chee  where chee.id.heelconsulta =  ").append(consclin.getCconnumero());
					sb.append(" AND chee.id.heectiposervi =   ").append("'" + IConstantes.TIPO_CONSULTA + "'");

					String hql = sb.toString();

					Query query = session.createQuery(hql);
					List<Chexameelect> pis;
					pis = query.list();

					for (Chexameelect co : pis) {
						Cpservicio servicio = co.getCpservicio();
						Hibernate.initialize(servicio);

					}

					return pis;
				} else {
					return null;
				}

			}

		});
		return pis;

	}

	/**
	 * @param consclin
	 * @return
	 * @throws ModelException
	 */
	public List<Chexamelabor> getExamenesLaboratoriosConsulta(final Cnconsclin consclin) throws ModelException {
		List<Chexamelabor> pis = (List<Chexamelabor>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				if (consclin != null) {
					StringBuffer sb = new StringBuffer();
					sb.append(" select chel from " + Chexamelabor.class.getName()
							+ " chel  where chel.id.hellconsulta =  ").append(consclin.getCconnumero());
					sb.append(" AND chel.id.helctiposervi = ").append("'" + IConstantes.TIPO_CONSULTA + "'");

					String hql = sb.toString();

					Query query = session.createQuery(hql);
					List<Chexamelabor> pis;
					pis = query.list();

					for (Chexamelabor co : pis) {
						Cpservicio servicio = co.getCpservicio();
						Hibernate.initialize(servicio);

					}

					return pis;
				} else {
					return null;
				}

			}

		});
		return pis;

	}

	/**
	 * @param numeroCirugia
	 * @param tipoServicio
	 * @param consecutivo
	 * @return
	 * @throws ModelException
	 */
	public List<Chexamelabor> getExamenesLaboratorios(final Long numeroCirugia, final String tipoServicio,
			final Integer consecutivo) throws ModelException {
		List<Chexamelabor> pis = (List<Chexamelabor>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				if (numeroCirugia != null && tipoServicio != null && consecutivo != null) {
					StringBuffer sb = new StringBuffer();
					sb.append(" select chel from " + Chexamelabor.class.getName()
							+ " chel  where chel.id.hellconsulta =  ").append(numeroCirugia);
					sb.append(" AND chel.id.helctiposervi = ").append("'" + tipoServicio + "'");
					sb.append(" AND  chel.id.helnllave =  ").append(consecutivo);

					String hql = sb.toString();

					Query query = session.createQuery(hql);
					List<Chexamelabor> pis;
					pis = query.list();

					for (Chexamelabor co : pis) {
						Cpservicio servicio = co.getCpservicio();
						Hibernate.initialize(servicio);

					}

					return pis;
				} else {
					return null;
				}

			}

		});
		return pis;

	}

	/**
	 * @param numero
	 * @return
	 * @throws ModelException
	 */
	public List<Chexameimage> getExamenesImagenesConsulta(final Long numero) throws ModelException {
		List<Chexameimage> pis = (List<Chexameimage>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				if (numero != null) {
					StringBuffer sb = new StringBuffer();
					sb.append(" select chei  from " + Chexameimage.class.getName()
							+ " chei  where chei.id.heilconsulta =  ").append(numero);
					sb.append(" and chei.id.heictiposervi = ").append("'" + IConstantes.TIPO_CONSULTA + "'");

					String hql = sb.toString();

					Query query = session.createQuery(hql);
					List<Chexameimage> pis;
					pis = query.list();

					for (Chexameimage co : pis) {
						Cpservicio servicio = co.getCpservicio();
						Hibernate.initialize(servicio);

					}

					return pis;
				} else {
					return null;
				}

			}

		});
		return pis;

	}

	/**
	 * @param numeroCirugia
	 * @param tipoServicio
	 * @param consecutivo
	 * @return
	 * @throws ModelException
	 */
	public List<Chexameimage> getExamenesImagenes(final Long numeroCirugia, final String tipoServicio,
			final Integer consecutivo) throws ModelException {
		List<Chexameimage> pis = (List<Chexameimage>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				if (numeroCirugia != null && tipoServicio != null && consecutivo != null) {
					StringBuffer sb = new StringBuffer();
					sb.append(" select chei  from " + Chexameimage.class.getName()
							+ " chei  where chei.id.heilconsulta =  ").append(numeroCirugia);
					sb.append(" and chei.id.heictiposervi = ").append("'" + tipoServicio + "'");
					sb.append(" AND  chei.id.heinllave =  ").append(consecutivo);

					String hql = sb.toString();

					Query query = session.createQuery(hql);
					List<Chexameimage> pis;
					pis = query.list();

					for (Chexameimage co : pis) {
						Cpservicio servicio = co.getCpservicio();
						Hibernate.initialize(servicio);

					}

					return pis;
				} else {
					return null;
				}

			}

		});
		return pis;

	}

	/**
	 * @param numero
	 * @return
	 * @throws ModelException
	 */
	public List<Chexameelect> getExamenesElectrofisiologicosConsulta(final Long numero) throws ModelException {
		List<Chexameelect> pis = (List<Chexameelect>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				if (numero != null) {
					StringBuffer sb = new StringBuffer();
					sb.append(" select chee from " + Chexameelect.class.getName()
							+ " chee  where chee.id.heelconsulta =  ").append(numero);
					sb.append(" AND chee.id.heectiposervi = ").append("'" + IConstantes.TIPO_CONSULTA + "'");

					String hql = sb.toString();

					Query query = session.createQuery(hql);
					List<Chexameelect> pis;
					pis = query.list();

					for (Chexameelect co : pis) {
						Cpservicio servicio = co.getCpservicio();
						Hibernate.initialize(servicio);

					}

					return pis;
				} else {
					return null;
				}

			}

		});
		return pis;

	}

	/**
	 * @param numeroCirugia
	 * @param tipoServicio
	 * @param consecutivo
	 * @return
	 * @throws ModelException
	 */
	public List<Chexameelect> getExamenesElectrofisiologicos(final Long numeroCirugia, final String tipoServicio,
			final Integer consecutivo) throws ModelException {
		List<Chexameelect> pis = (List<Chexameelect>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				if (numeroCirugia != null && tipoServicio != null && consecutivo != null) {
					StringBuffer sb = new StringBuffer();
					sb.append(" select chee from " + Chexameelect.class.getName()
							+ " chee  where chee.id.heelconsulta =  ").append(numeroCirugia);
					sb.append(" AND chee.id.heectiposervi = ").append("'" + tipoServicio + "'");

					sb.append(" AND  chee.id.heenllave =  ").append(consecutivo);

					String hql = sb.toString();

					Query query = session.createQuery(hql);
					List<Chexameelect> pis;
					pis = query.list();

					for (Chexameelect co : pis) {
						Cpservicio servicio = co.getCpservicio();
						Hibernate.initialize(servicio);

					}

					return pis;
				} else {
					return null;
				}

			}

		});
		return pis;

	}

	/**
	 * @param numero
	 * @return
	 * @throws ModelException
	 */
	public List<Chexamelabor> getExamenesLaboratoriosConsulta(final Long numero) throws ModelException {
		List<Chexamelabor> pis = (List<Chexamelabor>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				if (numero != null) {
					StringBuffer sb = new StringBuffer();
					sb.append(" select chel from " + Chexamelabor.class.getName()
							+ " chel  where chel.id.hellconsulta =  ").append(numero);
					sb.append(" AND chel.id.helctiposervi =  ").append("'" + IConstantes.TIPO_CONSULTA + "'");

					String hql = sb.toString();

					Query query = session.createQuery(hql);
					List<Chexamelabor> pis;
					pis = query.list();

					for (Chexamelabor co : pis) {
						Cpservicio servicio = co.getCpservicio();
						Hibernate.initialize(servicio);

					}

					return pis;
				} else {
					return null;
				}

			}

		});
		return pis;

	}

	/**
	 * @return
	 * @throws ModelException
	 */
	public List<Cpservicio> getExamenesElectrofisiologicos(Cpservicio servicio) throws ModelException {
		List<Cpservicio> resultList = null;
		List parametros = new ArrayList();
		try {

			StringBuffer sb = new StringBuffer();
			sb.append(" select cpse from " + Cpservicio.class.getName()
					+ " cpse  where (cpse.csvccodigo like '891%' OR cpse.csvccodigo like 'S891%' OR cpse.csvccodigo like '892%' OR cpse.csvccodigo like 'S892%' OR cpse.csvccodigo like '893%' OR cpse.csvccodigo like 'S893%'");
			sb.append(" OR cpse.csvccodigo like '894%' ");
			sb.append(" OR cpse.csvccodigo like 'S894%' ");
			sb.append(" OR cpse.csvccodigo like '895%' ");
			sb.append(" OR cpse.csvccodigo like 'S895%' ");
			sb.append(" OR cpse.csvccodigo like '896%' ");
			sb.append(" OR cpse.csvccodigo like 'S896%' ");
			sb.append(" OR cpse.csvccodigo like '897%' ");
			sb.append(" OR cpse.csvccodigo like 'S897%' ");
			sb.append(" OR cpse.csvccodigo like '950%' ");
			sb.append(" OR cpse.csvccodigo like 'S950%' ");
			sb.append(" OR cpse.csvccodigo like '952%' ");
			sb.append(" OR cpse.csvccodigo like 'S952%' ");
			sb.append(" OR cpse.csvccodigo like '954%'  ");
			sb.append(" OR cpse.csvccodigo like 'S954%' ) ");
			sb.append(" AND cpse.csvccups  = 'S' ");

			if (servicio != null) {

				if (servicio.getCsvccodigo() != null && !servicio.getCsvccodigo().equals("")) {
					sb.append(" and cpse.csvccodigo like ? ");
					parametros.add("%" + servicio.getCsvccodigo().toUpperCase() + "%");
				}

				if (servicio.getCsvcnombre() != null && !servicio.getCsvcnombre().equals("")) {
					sb.append(" and cpse.csvcnombre like ? ");
					parametros.add("%" + servicio.getCsvcnombre().toUpperCase() + "%");
				}

				if (servicio.getCsvcnombre2() != null && !servicio.getCsvcnombre2().equals("")) {

					if (servicio.getCsvcopera1() != null && servicio.getCsvcopera1().equals("OR")) {

						sb.append(" OR cpse.csvcnombre like ? ");
						parametros.add("%" + servicio.getCsvcnombre2().toUpperCase() + "%");
					} else {

						sb.append(" and cpse.csvcnombre like ? ");
						parametros.add("%" + servicio.getCsvcnombre2().toUpperCase() + "%");
					}

				}

				if (servicio.getCsvcnombre3() != null && !servicio.getCsvcnombre3().equals("")) {

					if (servicio.getCsvcopera2() != null && servicio.getCsvcopera2().equals("OR")) {

						sb.append(" OR cpse.csvcnombre like ? ");
						parametros.add("%" + servicio.getCsvcnombre3().toUpperCase() + "%");
					} else {

						sb.append(" and cpse.csvcnombre like ? ");
						parametros.add("%" + servicio.getCsvcnombre3().toUpperCase() + "%");
					}

				}
			}
			sb.append(" order by  cpse.csvcnombre");

			resultList = (List<Cpservicio>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			if (!resultList.isEmpty()) {
				return resultList;
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Examenes Electrofisiologicos:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Examenes Electrofisiologicos:" + e.getMessage(), e);
		}

	}

	/**
	 * @param cdictabla
	 * @param cdiccampo
	 * @return
	 * @throws ModelException
	 */
	public List<Cndesccito> getListaDescripcionesCitologia(String cdictabla, String cdiccampo) throws ModelException {
		List<Cndesccito> resultList = null;
		List parametros = new ArrayList();
		try {

			StringBuffer sb = new StringBuffer();
			sb.append(" select cnde from " + Cndesccito.class.getName()
					+ " cnde  where cnde.id.cdictabla = ? and cnde.id.cdiccampo = ? and cnde.cdicestado = ? ");
			parametros.add(cdictabla);
			parametros.add(cdiccampo);
			parametros.add(IConstantes.ESTADO_VIGENTE);

			resultList = (List<Cndesccito>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			if (!resultList.isEmpty()) {
				return resultList;
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Descripciones Citologia:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Descripciones Citologia:" + e.getMessage(), e);
		}

	}

	/**
	 * @param cdictabla
	 * @param cdiccampo
	 * @param cdicvalor
	 * @return
	 * @throws ModelException
	 */
	public Cndesccito getDescripcionesCitologia(String cdictabla, String cdiccampo, String cdicvalor)
			throws ModelException {
		List<Cndesccito> resultList = null;
		List parametros = new ArrayList();
		try {

			StringBuffer sb = new StringBuffer();
			sb.append(" select cnde from " + Cndesccito.class.getName()
					+ " cnde where cnde.id.cdictabla = ? and cnde.id.cdiccampo = ? and cnde.cdicvalor = ? and cnde.cdicestado = ? ");
			parametros.add(cdictabla);
			parametros.add(cdiccampo);
			parametros.add(cdicvalor);
			parametros.add(IConstantes.ESTADO_VIGENTE);

			resultList = (List<Cndesccito>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			if (!resultList.isEmpty()) {
				return resultList.get(0);
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Descripcion Citologia:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Descripcion Citologia:" + e.getMessage(), e);
		}

	}

	/**
	 * @param antecedente
	 * @throws ModelException
	 */
	public void saveAntecedentesColposcopia(Chantecolpo antecedente) throws ModelException {

		try {
			if (antecedente != null) {
				this.getHibernateTemplate().saveOrUpdate(antecedente);
			}

		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Antecedente Colposcopia:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Antecedente Colposcopia :" + e.getMessage(), e);
		}
	}

	/**
	 * @param consclin
	 * @return
	 * @throws ModelException
	 */
	public Chantecolpo getAntecedentesColposcopia(Long consclin) throws ModelException {
		List<Chantecolpo> resultList = null;
		List parametros = new ArrayList();
		try {

			if (consclin != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chac from " + Chantecolpo.class.getName()
						+ " chac  where chac.id.haclconsulta = ? AND chac.id.hacctiposervi = ?  ");
				parametros.add(consclin);
				parametros.add(IConstantes.TIPO_CONSULTA);

				resultList = (List<Chantecolpo>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Antecedentes Colposcopia:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Antecedentes Colposcopia" + e.getMessage(), e);
		}

	}

	/**
	 * @param reserva
	 * @throws ModelException
	 */
	public void saveReservaSangre(Chresersangr reserva) throws ModelException {

		try {
			if (reserva != null) {
				this.getHibernateTemplate().saveOrUpdate(reserva);
			}

		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Reserva de Sangre:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Reserva de Sangre:" + e.getMessage(), e);
		}
	}

	/**
	 * @param consclin
	 * @return
	 * @throws ModelException
	 */
	public Chresersangr getReservaSangre(Cnconsclin consclin) throws ModelException {
		List<Chresersangr> resultList = null;
		List parametros = new ArrayList();
		try {

			if (consclin != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chrs from " + Chresersangr.class.getName()
						+ " chrs  where chrs.id.hrslconsulta = ? AND chrs.id.hrsctiposervi = ? ");
				parametros.add(consclin.getCconnumero());
				parametros.add(IConstantes.TIPO_CONSULTA);

				resultList = (List<Chresersangr>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Reserva de Sangre:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Reserva de Sangre" + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroCirugia
	 * @param tipoServicio
	 * @param consecutivo
	 * @return
	 * @throws ModelException
	 */
	public Chresersangr getReservaSangre(Long numeroCirugia, String tipoServicio, Integer consecutivo)
			throws ModelException {
		List<Chresersangr> resultList = null;
		List parametros = new ArrayList();
		try {

			if (numeroCirugia != null && tipoServicio != null && consecutivo != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chrs from " + Chresersangr.class.getName()
						+ " chrs  where chrs.id.hrslconsulta = ? AND chrs.id.hrsctiposervi = ? AND chrs.id.hrscconsecutiv = ?  ");
				parametros.add(numeroCirugia);
				parametros.add(tipoServicio);
				parametros.add(consecutivo);

				resultList = (List<Chresersangr>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Reserva de Sangre:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Reserva de Sangre" + e.getMessage(), e);
		}

	}

	/**
	 * @param numero
	 * @return
	 * @throws ModelException
	 */
	public Chresersangr getReservaSangre(Long numero) throws ModelException {
		List<Chresersangr> resultList = null;
		List parametros = new ArrayList();
		try {

			if (numero != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chrs from " + Chresersangr.class.getName()
						+ " chrs  where chrs.id.hrslconsulta = ? AND chrs.id.hrsctiposervi = ? ");
				parametros.add(numero);
				parametros.add(IConstantes.TIPO_CONSULTA);

				resultList = (List<Chresersangr>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Reserva de Sangre:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Reserva de Sangre" + e.getMessage(), e);
		}

	}

	/**
	 * @param curcusuari
	 * @param cpfnclinic
	 * @return
	 * @throws ModelException
	 */
	public Cpprofesio getProfesionalPorUsuario(String curcusuari, Integer cpfnclinic) throws ModelException {
		List<Cpprofesio> resultList = null;
		List parametros = new ArrayList();
		try {

			if (curcusuari != null && cpfnclinic != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select cppr from " + Cpprofesio.class.getName()
						+ " cppr  where cppr.id.cpfnclinic = ? and cppr.id.cpfncodigo = (select cppu.curnprofes from Cpusuario cppu where cppu.curcusuari = ? ) ");
				parametros.add(cpfnclinic);
				parametros.add(curcusuari);

				resultList = (List<Cpprofesio>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Profesional por codigo:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Profesional por codigo" + e.getMessage(), e);
		}

	}

	/*
	 * public String getProfesionalPorUsuario(String curcusuari, Integer cpfnclinic)
	 * throws ModelException { List<Cpprofesio> resultList = null; List parametros =
	 * new ArrayList(); try {
	 * 
	 * if (curcusuari != null && cpfnclinic != null) { StringBuffer sb = new
	 * StringBuffer(); sb.append(" select cppr from " + Cpprofesio.class.getName() +
	 * " cppr  where cppr.id.cpfnclinic = ? and cppr.id.cpfncodigo = (select cppu.curnprofes from Cpusuario cppu where cppu.curcusuari = ? ) "
	 * ); parametros.add(cpfnclinic); parametros.add(curcusuari);
	 * 
	 * 
	 * resultList = this.getHibernateTemplate().find(sb.toString(),
	 * parametros.toArray());
	 * 
	 * if (!resultList.isEmpty()) { return resultList.get(0); }
	 * 
	 * }
	 * 
	 * return null;
	 * 
	 * } catch (HibernateException e) { throw new
	 * ModelException("Error consultando Profesional por codigo:" + e.getMessage(),
	 * e); } catch (Exception e) { throw new
	 * ModelException("Error consultando Profesional por codigo" + e.getMessage(),
	 * e); }
	 * 
	 * }
	 */

	/**
	 * @param wcodmed
	 * @param wcodclin
	 * @return
	 * @throws ModelException
	 */
	public Cpprofesio getProfesionalPorCodigo(BigDecimal wcodmed, Integer wcodclin) throws ModelException {
		List<Cpprofesio> resultList = null;
		List parametros = new ArrayList();
		try {

			if (wcodmed != null && wcodclin != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select cppr from " + Cpprofesio.class.getName()
						+ " cppr  where cppr.id.cpfnclinic = ? and cppr.id.cpfncodigo = ?  ");
				parametros.add(wcodclin);
				parametros.add(wcodmed);

				resultList = (List<Cpprofesio>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Profesional por codigo:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Profesional por codigo" + e.getMessage(), e);
		}

	}

	/**
	 * @param informe
	 * @throws ModelException
	 */
	public void saveInformeMamografia(Chinfomamogr informe) throws ModelException {
		try {
			if (informe != null) {
				this.getHibernateTemplate().saveOrUpdate(informe);
			}

		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Informe Mamografia:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Informe Mamografia:" + e.getMessage(), e);
		}
	}

	/**
	 * @param consclin
	 * @param tipoInforme
	 * @return
	 * @throws ModelException
	 */
	public Chinfomamogr getInformeMamografia(Cnconsclin consclin, String tipoInforme) throws ModelException {
		List<Chinfomamogr> resultList = null;
		List parametros = new ArrayList();
		try {

			if (consclin != null && tipoInforme != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chim from " + Chinfomamogr.class.getName()
						+ " chim  where chim.id.himlconsulta = ? and chim.id.himctipoinform = ? AND chim.id.himctiposervi = ? ");
				parametros.add(consclin.getCconnumero());
				parametros.add(tipoInforme);
				parametros.add(IConstantes.TIPO_CONSULTA);

				resultList = (List<Chinfomamogr>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Informe Mamografia:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Informe Mamografia" + e.getMessage(), e);
		}

	}

	/**
	 * @param codclin
	 * @return
	 * @throws ModelException
	 */
	public List<Cpprofesio> getListaProfesionalesClinica(Integer codclin) throws ModelException {
		List<Cpprofesio> resultList = null;
		List parametros = new ArrayList();

		try {
			if (codclin != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select cppr from " + Cpprofesio.class.getName()).append(" cppr ");
				sb.append(" where  cppr.id.cpfnclinic = ? and cppr.cpfcestado = ? ");
				sb.append(" order by cppr.cpfcnombre ");
				parametros.add(codclin);
				parametros.add(IConstantes.ESTADO_VIGENTE);

				resultList = (List<Cpprofesio>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList;
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Lista de Profesionales por clinica:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Lista de Profesionales por clinica:" + e.getMessage(), e);
		}

	}

	/**
	 * @param codclin
	 * @return
	 * @throws ModelException
	 */
	public List<Cpprofesio> getListaEspecialistasClinica(Integer codclin) throws ModelException {
		List<Cpprofesio> resultList = null;
		List parametros = new ArrayList();

		try {
			if (codclin != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select cppr from " + Cpprofesio.class.getName()).append(" cppr ");
				sb.append(" where  cppr.id.cpfnclinic = ? and cppr.cpfcestado = ? ");
				sb.append(" and  cppr.cpfntippro = ? ");
				sb.append(" order by cppr.cpfcnombre ");
				parametros.add(codclin);
				parametros.add(IConstantes.ESTADO_VIGENTE);
				parametros.add(IConstantes.TIPO_MEDICO_ESPECIALISTA);

				resultList = (List<Cpprofesio>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList;
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Lista de Profesionales por clinica:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Lista de Profesionales por clinica:" + e.getMessage(), e);
		}

	}

	public List<Cpprofesio> getListaAnestesiologoClinica(Integer codclin) throws ModelException {
		List<Cpprofesio> resultList = null;
		List parametros = new ArrayList();

		try {
			if (codclin != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select cppr from Cpprofesio cppr ");
				sb.append(" where  ");
				sb.append("  cppr.cpfntipoespe = 6 and cppr.id.cpfnclinic = ? ");
				sb.append(" and cppr.cpfcestado = 'VG' ");
				sb.append(" order by cppr.cpfcnombre ");
				parametros.add(codclin);

				resultList = (List<Cpprofesio>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList;
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Lista de Profesionales por clinica:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Lista de Profesionales por clinica:" + e.getMessage(), e);
		}

	}

	public List<Cpprofesio> getListaMedicoXEspecialidad(Integer codclin, Integer codEspecialidad)
			throws ModelException {
		List<Cpprofesio> resultList = null;
		List parametros = new ArrayList();

		try {
			if (codclin != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select cppr from Cpprofesio cppr ");
				sb.append(" where cppr.id.cpfnclinic = ?  ");
				if (codEspecialidad == 9999) {
					sb.append(" and cppr.cpfcestado = 'VG' and cppr.cpfntippro = ? ");
				} else {
					sb.append(" and cppr.cpfcestado = 'VG' and cppr.cpfntipoespe = ? ");
				}
				sb.append(" order by cppr.cpfcnombre ");
				parametros.add(codclin);
				if (codEspecialidad == 9999) {
					codEspecialidad = 4;
					parametros.add(codEspecialidad);
				} else {

					parametros.add(codEspecialidad);
				}

				resultList = (List<Cpprofesio>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList;
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Lista de Profesionales por clinica:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Lista de Profesionales por clinica:" + e.getMessage(), e);
		}

	}

	public List<Cpprofesio> getProfesionalXCodigoII(String codprof, Integer codclin) throws ModelException {
		List<Cpprofesio> resultList = null;
		List parametros = new ArrayList();

		try {

			StringBuffer sb = new StringBuffer();

			if (codclin != null) {

				sb.append(" select cppr from " + Cpprofesio.class.getName()
						+ " cppr  where  cppr.id.cpfnclinic = ? and cppr.id.cpfncodigo = ? ");
				parametros.add(codclin);
				parametros.add(codprof);

			} else {

				sb.append(" select cppr from " + Cpprofesio.class.getName() + " cppr  where  cppr.id.cpfncodigo = ? ");
				parametros.add(codprof);

			}

			resultList = (List<Cpprofesio>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			if (!resultList.isEmpty()) {
				return resultList;
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Profesionales por Codigo:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Profesionales por Codigo:" + e.getMessage(), e);
		}

	}

	public Cpprofesio getProfesionalXCodigo(String codprof, Integer codclin) throws ModelException {
		List<Cpprofesio> resultList = null;
		List parametros = new ArrayList();

		try {

			StringBuffer sb = new StringBuffer();

			if (codclin != null) {

				sb.append(" select cppr from " + Cpprofesio.class.getName()
						+ " cppr  where  cppr.id.cpfnclinic = ? and cppr.id.cpfncodigo = ? ");
				parametros.add(codclin);
				parametros.add(codprof);

			} else {

				sb.append(" select cppr from " + Cpprofesio.class.getName() + " cppr  where  cppr.id.cpfncodigo = ? ");
				parametros.add(codprof);

			}

			resultList = (List<Cpprofesio>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			if (!resultList.isEmpty()) {
				return resultList.get(0);
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Profesionales por Codigo:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Profesionales por Codigo:" + e.getMessage(), e);
		}

	}

	/**
	 * @param codprof
	 * @param codclin
	 * @return
	 * @throws ModelException
	 */
	public Cpprofesio getEspecialistaXCodigo(String codprof, Integer codclin) throws ModelException {
		List<Cpprofesio> resultList = null;
		List parametros = new ArrayList();

		try {

			StringBuffer sb = new StringBuffer();

			if (codclin != null) {

				sb.append(" select cppr from " + Cpprofesio.class.getName());
				sb.append(" cppr  where  cppr.id.cpfnclinic = ? and cppr.id.cpfncodigo = ? ");

				parametros.add(codclin);
				parametros.add(codprof);

			} else {

				sb.append(
						" select cppr from " + Cpprofesio.class.getName() + " cppr  where  cppr.id.cpfncodigo = ?    ");
				parametros.add(codprof);

			}

			resultList = (List<Cpprofesio>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			if (!resultList.isEmpty()) {
				return resultList.get(0);
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Profesionales por Codigo:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Profesionales por Codigo:" + e.getMessage(), e);
		}

	}

	/**
	 * @param idConsulta
	 * @return
	 * @throws ModelException
	 */
	public Cnconsclin getConsultaClinicaPorId(String idConsulta) throws ModelException {
		List<Cnconsclin> resultList = null;
		List parametros = new ArrayList();

		try {
			if (idConsulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select cncl from " + Cnconsclin.class.getName() + " cncl  where  cncl.cconnumero =  ? ");
				parametros.add(idConsulta);

				resultList = (List<Cnconsclin>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					for (Cnconsclin co : resultList) {
						Cpservicio servicio = co.getCcocservic();
						Hibernate.initialize(servicio);

						Cptipodocu tipodoc = co.getCcontipdoc();
						Hibernate.initialize(tipodoc);

						Chusuario usu = co.getCcolusuario();
						Hibernate.initialize(usu);

					}
					return resultList.get(0);
				}
			}
			return null;
		} catch (HibernateException e) {
			throw new ModelException("Error consultando Consulta clinica por Id:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Consulta clinica por Id:" + e.getMessage(), e);
		}

	}

	/**
	 * @param idConsulta
	 * @return
	 * @throws ModelException
	 */
	public Integer getContratoXConsultaClinica(Long idConsulta) throws ModelException {
		List<Integer> resultList = null;
		List parametros = new ArrayList();

		try {
			if (idConsulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select cncl.cconcontra from " + Cnconsclin.class.getName()
						+ " cncl  where  cncl.cconnumero =  ? ");
				parametros.add(idConsulta);

				resultList = (List<Integer>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Consulta clinica por Id:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Consulta clinica por Id:" + e.getMessage(), e);
		}

	}

	/**
	 * Converts a text to float value.
	 * 
	 * @param text the text.
	 * @return the float corresponding.
	 */
	public static final double strToVal(final String text) {
		if (text == null) {
			return 0;
		}
		String vText = text;
		if (vText.equals(".") || vText.equals(".00") || vText.equals("")) {
			return 0;
		}
		if (vText.startsWith("-.")) {
			vText = StringUtils.replace(vText, "-.", "-0.");
		} else if (vText.startsWith(".")) {
			vText = StringUtils.replace(vText, ".", "0.");
		}
		try {
			double vFloat = Double.parseDouble(vText);
			return vFloat;
		} catch (NumberFormatException e) {
			return 0;
		}

	}

	/**
	 * @param numero
	 * @return
	 * @throws ModelException
	 */
	public List<Chcontroliqu> getLstIngresoLiquidos(Long numero) throws ModelException {
		List<Chcontroliqu> resultList = null;
		List parametros = new ArrayList();

		try {
			if (numero != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chcl from " + Chcontroliqu.class.getName()
						+ " chcl  where chcl.id.hcllnumero = ? AND  chcl.id.hclctiposervi = ? ");
				parametros.add(numero);
				parametros.add(IConstantes.TIPO_HOSPITALIZACION);

				resultList = (List<Chcontroliqu>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList;
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Control de Liquidos:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Control de Liquidos:" + e.getMessage(), e);
		}

	}

	/**
	 * @param numero
	 * @return
	 * @throws ModelException
	 */
	public List<Chcontroliqu> getLstLiquidosAdministrados(Long numero) throws ModelException {
		List<Chcontroliqu> resultList = null;
		List parametros = new ArrayList();

		try {
			if (numero != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chcl from " + Chcontroliqu.class.getName()
						+ " chcl  where chcl.id.hcllnumero = ? AND  chcl.id.hclctiposervi = ? AND chcl.hclcetapa in (?,?,?)  ");
				sb.append(" order by  chcl.hcldfechactivi desc ");
				parametros.add(numero);
				parametros.add(IConstantes.TIPO_HOSPITALIZACION);
				parametros.add(IConstantes.ETAPA_ATENDIDO);
				parametros.add(IConstantes.ETAPA_SUSPENDER);
				parametros.add(IConstantes.ETAPA_ADMINISTRADO);

				resultList = (List<Chcontroliqu>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList;
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Control de Liquidos:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Control de Liquidos:" + e.getMessage(), e);
		}

	}

	/**
	 * @param numero
	 * @return
	 * @throws ModelException
	 */
	public List<Chcontroliqu> getLstLiquidosAdministradosAnestesia(Long numero) throws ModelException {
		List<Chcontroliqu> resultList = null;
		List parametros = new ArrayList();

		try {
			if (numero != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chcl from " + Chcontroliqu.class.getName()
						+ " chcl  where chcl.id.hcllnumero = ? AND  chcl.id.hclctiposervi = ? AND chcl.hclcetapa in (?,?,?)  ");
				sb.append(" order by  chcl.hcldfechactivi desc ");
				parametros.add(numero);
				parametros.add(IConstantes.TIPO_HOSPITALIZACION);
				parametros.add(IConstantes.ETAPA_ADMINISTRADO);
				parametros.add(IConstantes.ETAPA_SUSPENDER);
				parametros.add(IConstantes.ETAPA_ATENDIDO);

				resultList = (List<Chcontroliqu>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList;
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Control de Liquidos:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Control de Liquidos:" + e.getMessage(), e);
		}

	}

	/**
	 * @param numero
	 * @return
	 * @throws ModelException
	 */
	public List<Chcontroliqu> getLstLiquidosAdministradoParcial(Long numero) throws ModelException {
		List<Chcontroliqu> resultList = null;
		List parametros = new ArrayList();

		try {
			if (numero != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chcl from " + Chcontroliqu.class.getName()
						+ " chcl  where chcl.id.hcllnumero = ? AND  chcl.id.hclctiposervi = ? AND chcl.hclcetapa in (?,?)  ");
				sb.append(" order by  chcl.hcldfechactivi desc ");
				parametros.add(numero);
				parametros.add(IConstantes.TIPO_HOSPITALIZACION);
				parametros.add(IConstantes.ETAPA_VIGENTE);
				parametros.add(IConstantes.ETAPA_INICIADO_LIQUIDO);

				resultList = (List<Chcontroliqu>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList;
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Control de Liquidos:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Control de Liquidos:" + e.getMessage(), e);
		}

	}

	/**
	 * @param numero
	 * @return
	 * @throws ModelException
	 */
	public List<Chcontroliqu> getLstLiquidosAdministradoParcialAnestesiaIni(Long numero) throws ModelException {
		List<Chcontroliqu> resultList = null;
		List parametros = new ArrayList();

		try {

			if (numero != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chcl from " + Chcontroliqu.class.getName()
						+ " chcl  where chcl.id.hcllnumero = ? AND  chcl.id.hclctiposervi = ? AND chcl.hclcetapa in (?,?)  ");
				sb.append(" order by  chcl.hcldfechactivi desc ");
				parametros.add(numero);
				parametros.add(IConstantes.TIPO_HOSPITALIZACION);
				parametros.add(IConstantes.ETAPA_INICIADO_LIQUIDO);
				parametros.add(IConstantes.ETAPA_VIGENTE);

				resultList = (List<Chcontroliqu>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList;
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Control de Liquidos:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Control de Liquidos:" + e.getMessage(), e);
		}

	}

	/**
	 * @param numero
	 * @return
	 * @throws ModelException
	 */
	public List<Chcontroliqu> getLstLiquidosAdministradoEliminados(Long numero) throws ModelException {
		List<Chcontroliqu> resultList = null;
		List parametros = new ArrayList();

		try {
			if (numero != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chcl from " + Chcontroliqu.class.getName()
						+ " chcl  where chcl.id.hcllnumero = ? AND  chcl.id.hclctiposervi = ? AND chcl.hclcetapa = ?  ");
				sb.append(" order by  chcl.hcldfechactivi desc ");
				parametros.add(numero);
				parametros.add(IConstantes.TIPO_HOSPITALIZACION);
				parametros.add(IConstantes.ETAPA_DELETE);

				resultList = (List<Chcontroliqu>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList;
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Control de Liquidos:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Control de Liquidos:" + e.getMessage(), e);
		}

	}

	/**
	 * @param liquidos
	 * @throws ModelException
	 */
	public void deleteLiquidos(Chcontroliqu liquidos) throws ModelException {
		try {
			this.getHibernateTemplate().delete(liquidos);
		} catch (HibernateException e) {
			throw new ModelException("Error Eliminando Liquidos:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Eliminando Liquidos:" + e.getMessage(), e);
		}
	}

	/**
	 * @param liquidos
	 * @throws ModelException
	 */
	public void deleteLstLiquidos(final List<Chcontroliqu> liquidos) throws ModelException {
		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {

					Iterator it = liquidos.iterator();
					while (it.hasNext()) {
						Chcontroliqu liquido;
						liquido = (Chcontroliqu) it.next();
						session.delete(liquido);
					}

					return liquidos;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		}
	}

	/**
	 * @param liquido
	 * @throws ModelException
	 */
	public void updateLiquidoAdministrado(Chcontroliqu liquido) throws ModelException {
		try {
			this.getHibernateTemplate().update(liquido);
		} catch (HibernateException e) {
			throw new ModelException("Error Actualizando Liquido:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Actualizando Liquido:" + e.getMessage(), e);
		}
	}

	/**
	 * @param usuario
	 * @return
	 * @throws ModelException
	 */
	public List<Chcirugprogr> getListaCirugiasProgramadas(final Chusuario usuario, final Date dia,
			final Integer codclinica) throws ModelException {

		List<Chcirugprogr> pis = (List<Chcirugprogr>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
				String fechaI = dateFormat.format(dia.getTime()) + HORA_INICIAL;
				String fechaF = dateFormat.format(dia.getTime()) + HORA_FINAL;

				StringBuffer sb = new StringBuffer();
				sb.append("SELECT chcp from ");
				sb.append(Chcirugprogr.class.getName()).append(" chcp ");
				sb.append("WHERE chcp.hcpcestado =  :estado  ");
				sb.append(
						" AND (chcp.hcpdfechacirug BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))");
				sb.append(" AND chcp.hcpnclinica = :codclinica ");
				sb.append(" AND chcp.hcpcetapa = :etapa ");

				if (usuario != null && usuario.getHusanumeiden() != null) {
					sb.append(" AND chcp.hcplusuario.husanumeiden = :numeroIdentificacion ");
				}
				if (usuario != null && usuario.getHusetipoiden() != null && !usuario.getHusetipoiden().equals("")) {
					sb.append(" AND chcp.hcplusuario.husetipoiden = :tipoDocumento ");

				}
				if (usuario != null && usuario.getHuscprimernomb() != null && !usuario.getHuscprimernomb().equals("")) {
					sb.append(" AND chcp.hcplusuario.huscprimernomb = :primeroNombre ");

				}
				if (usuario != null && usuario.getHuscsegundnomb() != null && !usuario.getHuscsegundnomb().equals("")) {
					sb.append(" AND chcp.hcplusuario.huscsegundnomb = :segundoNombre ");

				}
				if (usuario != null && usuario.getHuscprimerapel() != null && !usuario.getHuscprimerapel().equals("")) {
					sb.append(" AND chcp.hcplusuario.huscprimerapel = :primerApellido ");

				}
				if (usuario != null && usuario.getHuscsegundapel() != null && !usuario.getHuscsegundapel().equals("")) {
					sb.append(" AND chcp.hcplusuario.huscsegundapel = :segundoApellido ");

				}

				String hql = sb.toString();

				Query query = session.createQuery(hql);
				query.setParameter("estado", IConstantes.ESTADO_VIGENTE);
				query.setParameter("fechaI", fechaI);
				query.setParameter("fechaF", fechaF);
				query.setParameter("codclinica", codclinica);
				query.setParameter("etapa", IConstantes.ETAPA_ESPERA);

				if (usuario != null && usuario.getHusanumeiden() != null) {
					query.setParameter("numeroIdentificacion", usuario.getHusanumeiden());
				}
				if (usuario != null && usuario.getHusetipoiden() != null && !usuario.getHusetipoiden().equals("")) {
					query.setParameter("tipoDocumento", usuario.getHusetipoiden());
				}
				if (usuario != null && usuario.getHuscprimernomb() != null && !usuario.getHuscprimernomb().equals("")) {
					query.setParameter("primeroNombre", usuario.getHuscprimernomb());
				}
				if (usuario != null && usuario.getHuscsegundnomb() != null && !usuario.getHuscsegundnomb().equals("")) {
					query.setParameter("segundoNombre", usuario.getHuscsegundnomb());
				}
				if (usuario != null && usuario.getHuscprimerapel() != null && !usuario.getHuscprimerapel().equals("")) {
					query.setParameter("primerApellido", usuario.getHuscprimerapel());
				}
				if (usuario != null && usuario.getHuscsegundapel() != null && !usuario.getHuscsegundapel().equals("")) {
					query.setParameter("segundoApellido", usuario.getHuscsegundapel());
				}

				List<Chcirugprogr> pis;
				pis = query.list();

				for (Chcirugprogr cp : pis) {
					Chusuario usuario = cp.getHcplusuario();
					Hibernate.initialize(usuario);

					Set chdetacirpros = cp.getChdetacirpros();
					Hibernate.initialize(chdetacirpros);
				}

				return pis;
			}
		});
		return pis;
	}

	/**
	 * @param dia
	 * @param codclinica
	 * @return La lista de consulta que ya se le realizo el ingreso y se pueden
	 *         hacer registros Medicos
	 * @throws ModelException
	 */
	public List getListaCirugiasRegistroMedico(final Date dia, final Integer codclinica) throws ModelException {
		List<Chingresoenf> pis = (List<Chingresoenf>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				StringBuffer sb = new StringBuffer();
				sb.append("SELECT chie from ");
				sb.append(Chingresoenf.class.getName()).append(" chie ");
				sb.append("");

				String hql = sb.toString();

				Query query = session.createQuery(hql);
				List<Chingresoenf> pis;
				pis = query.list();

				for (Chingresoenf ie : pis) {
					Chusuario usuario = ie.getHielusuario();
					Hibernate.initialize(usuario);

				}

				return pis;
			}
		});
		return pis;
	}

	/**
	 * @param ingreso
	 * @throws ModelException
	 */
	public void saveIngresoEnfermeria(final Chingresoenf ingreso, final Chcirugprogr cirugia) throws ModelException {
		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {

					session.saveOrUpdate(ingreso);
					Chcirugprogr cirugiaAux = null;

					if (cirugia != null && cirugia.getHcplnumero() != null) {

						StringBuffer sb1 = new StringBuffer();
						sb1.append(" select chcp from  " + Chcirugprogr.class.getName()
								+ " chcp  where chcp.hcplnumero = :hcplnumero ");
						Query query1 = session.createQuery(sb1.toString());
						query1.setParameter("hcplnumero", cirugia.getHcplnumero());
						cirugiaAux = (Chcirugprogr) query1.uniqueResult();

						if (cirugiaAux != null) {
							cirugiaAux.setHcpnsalainterv(cirugia.getHcpnsalainterv());
							session.saveOrUpdate(cirugiaAux);
						}

					}

					return ingreso;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		}
	}

	/**
	 * @param ingreso
	 * @throws ModelException
	 */
	public void saveIngresoMedico(final Chingresomed ingreso) throws ModelException {
		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {

					session.saveOrUpdate(ingreso);
					return ingreso;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		}
	}

	/**
	 * @param hielnumero
	 * @throws ModelException
	 */
	public Chingresoenf getIngresoEnfermeria(Long hielnumero) throws ModelException {
		List<Chingresoenf> resultList = null;
		List parametros = new ArrayList<Chformulamed>();

		try {

			if (hielnumero != null) {

				StringBuffer sb = new StringBuffer();
				sb.append(" select chie from " + Chingresoenf.class.getName()
						+ " chie  where chie.id.hielnumero = ? AND chie.id.hiectiposervi = ? ");
				parametros.add(hielnumero);
				parametros.add(IConstantes.TIPO_HOSPITALIZACION);

				resultList = (List<Chingresoenf>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Ingreso de Enfermeria:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Ingreso de Enfermeria: " + e.getMessage(), e);
		}

	}

	/**
	 * @param himlnumero
	 * @return
	 * @throws ModelException
	 */
	public Chingresomed getIngresoMedico(Long himlnumero) throws ModelException {
		List<Chingresomed> resultList = null;
		List parametros = new ArrayList<Chingresomed>();
		try {
			if (himlnumero != null) {

				StringBuffer sb = new StringBuffer();
				sb.append(" select chim from " + Chingresomed.class.getName()
						+ " chim  where chim.id.himlnumero = ? AND chim.id.himctiposervi = ? ");
				parametros.add(himlnumero);
				parametros.add(IConstantes.TIPO_HOSPITALIZACION);
				resultList = (List<Chingresomed>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Ingreso Medico:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Ingreso Medico: " + e.getMessage(), e);
		}

	}

	/**
	 * @param numero
	 * @return
	 * @throws ModelException
	 */
	public Integer getConsecutivoLiquidos(Long numero) throws ModelException {
		List<Integer> resultList = null;
		List parametros = new ArrayList<Integer>();
		Integer consecutivo = null;

		try {

			StringBuffer sb = new StringBuffer();
			sb.append(" select max(chcl.id.hclnconsecutiv) from " + Chcontroliqu.class.getName()
					+ " chcl  where chcl.id.hcllnumero = ? AND chcl.id.hclctiposervi = ? ");
			parametros.add(numero);
			parametros.add(IConstantes.TIPO_HOSPITALIZACION);

			resultList = (List<Integer>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			if (!resultList.isEmpty()) {
				consecutivo = resultList.get(0);
				if (consecutivo != null) {
					consecutivo++;
				} else {
					consecutivo = 1;
				}

			} else {
				consecutivo = 1;
			}

			return consecutivo;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando consecutivo Control de Liquidos:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando consecutivo Control de Liquidos: " + e.getMessage(), e);
		}

	}

	/**
	 * @param canalizacion
	 * @throws ModelException
	 */
	public void saveCanalizacion(Chcanalivena canalizacion) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(canalizacion);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Canalizacion Vena:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Canalizacion Vena:" + e.getMessage(), e);
		}
	}

	/**
	 * @param nota
	 * @return
	 * @throws ModelException
	 */
	public List<Chcanalivena> getIngresoCanalizacion(Chnotaenferm nota) throws ModelException {
		List<Chcanalivena> resultList = null;
		List parametros = new ArrayList<Chcanalivena>();

		try {
			if (nota != null && nota.getId() != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chcv from " + Chcanalivena.class.getName() + " chcv  where chcv.id.hcvlnumero = ? "
						+ "AND   chcv.id.hcvctiposervi = ? and chcv.id.hcvnllave  = ? order by chcv.id.hcvlconsecutiv ");
				parametros.add(nota.getId().getHnelnumero());
				parametros.add(nota.getId().getHnectiposervi());
				parametros.add(nota.getId().getHnelconsecutiv());

				resultList = (List<Chcanalivena>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList;
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Canalizacion Vena:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Canalizacion Vena: " + e.getMessage(), e);
		}

	}

	/**
	 * @param numero
	 * @return
	 * @throws ModelException
	 */
	public Integer getConsecutivoCanalizacion(Long numero) throws ModelException {
		List<Integer> resultList;
		List parametros;
		resultList = null;
		parametros = new ArrayList<Integer>();
		Integer consec;
		consec = null;
		try {
			StringBuffer sb = new StringBuffer();
			sb.append("select max(chcv.id.hcvlconsecutiv) from " + Chcanalivena.class.getName()
					+ " chcv where chcv.id.hcvlnumero = ? AND chcv.id.hcvctiposervi = ?  ");
			// getHibernateTemplate().getSessionFactory().getCurrentSession().lock(new
			// Chcanalivena(),LockMode.UPGRADE_NOWAIT );
			parametros.add(numero);
			parametros.add(IConstantes.TIPO_HOSPITALIZACION);
			resultList = (List<Integer>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			if (!resultList.isEmpty()) {
				consec = resultList.get(0);
				if (consec != null) {
					consec++;
				} else {
					consec = 1;
				}

			} else {
				consec = 1;
			}
			return consec;

		} catch (HibernateException e) {
			throw new ModelException("Error Obteniendo Consecutivo canalizacion vena:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Obteniendo Consecutivo canalizacion vena:" + e.getMessage(), e);
		}

	}

	/**
	 * @param numero
	 * @return
	 * @throws ModelException
	 */
	public Integer getConsecutivoNotaEnfermeria(Long numero) throws ModelException {
		List<Integer> resultList;
		List parametros;
		resultList = null;
		parametros = new ArrayList<Integer>();
		Integer consec;
		consec = null;
		try {
			StringBuffer sb = new StringBuffer();
			sb.append("select max(chne.id.hnelconsecutiv) from " + Chnotaenferm.class.getName()
					+ " chne where chne.id.hnelnumero = ? AND  chne.id.hnectiposervi = ? ");
			parametros.add(numero);
			parametros.add(IConstantes.TIPO_HOSPITALIZACION);
			resultList = (List<Integer>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());
			if (!resultList.isEmpty()) {
				consec = resultList.get(0);
				if (consec != null) {
					consec++;
				} else {
					consec = 1;
				}

			} else {
				consec = 1;
			}
			return consec;

		} catch (HibernateException e) {
			throw new ModelException("Error Obteniendo Consecutivo Nota Enfermeria:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Obteniendo Consecutivo Nota Enfermeria:" + e.getMessage(), e);
		}

	}

	/**
	 * @param nota
	 * @throws ModelException
	 */
	public void saveNotaEnfermeria(final Chnotaenferm nota) throws ModelException {
		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {

					if (nota != null && nota.getId() != null && nota.getId().getHnelconsecutiv() == null) {
						Integer consecutivo = null;
						StringBuffer sb = new StringBuffer();
						sb.append(" select max(chne.id.hnelconsecutiv) from  ");
						sb.append(" from Chnotaenferm chne ");
						sb.append(
								" where chne.id.hnelnumero = :hnelnumero AND  chne.id.hnectiposervi = :hnectiposervi   ");

						Query query = session.createQuery(sb.toString());
						query.setParameter("hnelnumero", nota.getId().getHnelnumero());
						query.setParameter("hnectiposervi", nota.getId().getHnectiposervi());

						Integer secuenciaActual = (Integer) query.uniqueResult();

						if (secuenciaActual != null) {
							consecutivo = secuenciaActual.intValue() + 1;
						} else {
							consecutivo = 1;
						}

						nota.getId().setHnelconsecutiv(consecutivo);
					}

					session.saveOrUpdate(nota);
					return nota;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		}
	}

	/**
	 * @param remision
	 * @throws ModelException
	 */
	public void saveRemisionHospitalizacion(Chremihospit remision) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(remision);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Remision Hospitalizacion:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Remision Hospitalizacion:" + e.getMessage(), e);
		}
	}

	/**
	 * @return
	 * @throws ModelException
	 */
	public Chremihospit getRemisionHospitalizacion(Cnconsclin consclin) throws ModelException {
		List<Chremihospit> resultList = null;
		List parametros = new ArrayList();

		try {
			if (consclin != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chrh from " + Chremihospit.class.getName()
						+ " chrh  where chrh.id.hrhlconsulta = ? AND chrh.id.hrhctiposervi = ? ");
				parametros.add(consclin.getCconnumero());
				parametros.add(IConstantes.TIPO_CONSULTA);

				resultList = (List<Chremihospit>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Remision Hospitalizacion:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Remision Hospitalizacion::" + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroCirugia
	 * @param tipoServicio
	 * @param consecutivo
	 * @return
	 * @throws ModelException
	 */
	public Chremihospit getRemisionHospitalizacion(Long numeroCirugia, String tipoServicio, Integer consecutivo)
			throws ModelException {
		List<Chremihospit> resultList = null;
		List parametros = new ArrayList();

		try {
			if (numeroCirugia != null && tipoServicio != null && consecutivo != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chrh from " + Chremihospit.class.getName()
						+ " chrh  where chrh.id.hrhlconsulta = ? AND chrh.id.hrhctiposervi = ? AND  chrh.id.hrhnconsecutiv = ? ");
				parametros.add(numeroCirugia);
				parametros.add(tipoServicio);
				parametros.add(consecutivo);

				resultList = (List<Chremihospit>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Remision Hospitalizacion:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Remision Hospitalizacion::" + e.getMessage(), e);
		}

	}

	/**
	 * @param numero
	 * @return
	 * @throws ModelException
	 */
	public Chremihospit getRemisionHospitalizacion(Long numero) throws ModelException {
		List<Chremihospit> resultList = null;
		List parametros = new ArrayList();

		try {
			if (numero != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chrh from " + Chremihospit.class.getName()
						+ " chrh  where chrh.id.hrhlconsulta = ? AND chrh.id.hrhctiposervi = ? ");
				parametros.add(numero);
				parametros.add(IConstantes.TIPO_CONSULTA);

				resultList = (List<Chremihospit>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Remision Hospitalizacion:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Remision Hospitalizacion::" + e.getMessage(), e);
		}

	}

	/**
	 * @param consulta
	 * @return
	 * @throws ModelException
	 */
	public Ccfactserv getFacturaSevicio(Cnconsclin consulta) throws ModelException {

		List<Ccfactserv> resultList = null;
		List parametros = new ArrayList();

		try {
			if (consulta != null && consulta.getCcontipdoc() != null) {
				if (consulta.getCcontipdoc().getCtdnnumero().equals(IConstantes.CDOC_FACTURA)) {
					StringBuffer sb = new StringBuffer();
					sb.append(" select ccfs from " + Ccfactserv.class.getName() + " ccfs  where ccfs.cfsnnumfac = ? ");
					parametros.add(consulta.getCconnumdoc());
					resultList = (List<Ccfactserv>) this.getHibernateTemplate().find(sb.toString(),
							parametros.toArray());

					if (!resultList.isEmpty()) {
						return resultList.get(0);
					}
				}

			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Factura de Servicio" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Factura de Servicio:" + e.getMessage(), e);
		}

	}

	/**
	 * @param factura
	 * @param servicio
	 * @return
	 * @throws ModelException
	 */
	public Ccdetafact getDetalleFacturaSevicio(Ccfactserv factura, Cpservicio servicio) throws ModelException {

		List<Ccdetafact> resultList = null;
		List parametros = new ArrayList();

		try {
			if (factura != null && servicio != null) {

				StringBuffer sb = new StringBuffer();
				sb.append(" select ccdf from " + Ccdetafact.class.getName()
						+ " ccdf  where ccdf.id.cdfnnumero = ? AND ccdf.cdfcservic = ? ");
				parametros.add(factura.getCfsnnumero());
				parametros.add(servicio.getCsvccodigo());
				resultList = (List<Ccdetafact>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Detalle Factura de Servicio" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Detalle Factura de Servicio:" + e.getMessage(), e);
		}

	}

	/**
	 * @param consulta
	 * @throws ModelException
	 */
	public void generarRipsConsulta(final Cnconsclin consulta, final Chimprdiag impresion, final Chmotivocon motivo,
			final String userName) throws ModelException {
		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {

					String autorizacion = "";
					Ccfactserv factura = null;
					BigDecimal wvalcuota;
					wvalcuota = new BigDecimal(0);

					BigDecimal wvalneto = new BigDecimal(0);

					if (consulta != null && consulta.getCcontipdoc() != null) {
						if (consulta.getCcontipdoc().getCtdnnumero().equals(IConstantes.CDOC_FACTURA)) {
							StringBuffer sb1 = new StringBuffer();
							sb1.append("select ccfs from Ccfactserv" + " ccfs  where ccfs.cfsnnumfac = :numerofac ");
							Query query1 = session.createQuery(sb1.toString());
							query1.setParameter("numerofac", consulta.getCconnumdoc());

							factura = (Ccfactserv) query1.uniqueResult();
						}

					}

					Ccdetafact detalle = null;
					List<Ccdetafact> lstDetalle;

					if (factura != null && consulta.getCcocservic() != null) {

						StringBuffer sb2 = new StringBuffer();
						sb2.append(" select ccdf from " + Ccdetafact.class.getName()
								+ " ccdf  where ccdf.id.cdfnnumero = :cdfnnumero AND ccdf.cdfcservic = :cdfcservic ");
						Query query2 = session.createQuery(sb2.toString());
						query2.setParameter("cdfnnumero", factura.getCfsnnumero());
						query2.setParameter("cdfcservic", consulta.getCcocservic().getCsvccodigo());

						lstDetalle = (List<Ccdetafact>) query2.list();

						if (lstDetalle != null && !lstDetalle.isEmpty()) {
							detalle = lstDetalle.get(0);
						}

					}

					if (factura != null) {
						autorizacion = factura.getCfscnumrem();
					}

					if (detalle != null && detalle.getCdfavalser() != null && detalle.getCdfavalent() != null) {
						wvalcuota = detalle.getCdfavalser().subtract(detalle.getCdfavalent());

						wvalneto = consulta.getCcoavalser().subtract(wvalcuota);
					}

					if (consulta != null && consulta.getCcontipdoc() != null
							&& consulta.getCcontipdoc().getCtdnnumero().equals(IConstantes.CDOC_ADMISION)) {
						Cfadmision admision = null;
						Cfdetaadmision detadmi = null;
						List<Cfdetaadmision> lstDetadm;
						StringBuffer sb1 = new StringBuffer();
						sb1.append("select cfad from Cfadmision " + " cfad  where cfad.cannumero = :numdoc ");
						Query query1 = session.createQuery(sb1.toString());
						query1.setParameter("numdoc", consulta.getCconnumdoc());
						admision = (Cfadmision) query1.uniqueResult();

						if (admision != null && consulta.getCcocservic() != null) {
							StringBuffer sb2 = new StringBuffer();
							sb2.append(" select cfde from " + Cfdetaadmision.class.getName()
									+ " cfde  where cfde.id.cdannumadm = :cdannumadm AND cfde.cdacservic = :cdacservic ");
							Query query2 = session.createQuery(sb2.toString());
							query2.setParameter("cdannumadm", admision.getCannumero());
							query2.setParameter("cdacservic", consulta.getCcocservic().getCsvccodigo());
							lstDetadm = (List<Cfdetaadmision>) query2.list();

							if (lstDetadm != null && !lstDetadm.isEmpty()) {
								detadmi = lstDetadm.get(0);
							}

							if (detadmi != null && detadmi.getCdacpaquet() != null
									&& !detadmi.getCdacpaquet().equals("0")) {
								StringBuffer sb10 = new StringBuffer();
								sb10.append("select cppa.cpecserpri from " + Cppaquserv.class.getName() + " cppa  "
										+ "where cppa.id.cpecpaquet = :wpaquet AND cppa.id.cpecservic = :wservic "
										+ "AND cppa.cpecestado = 'VG' ");
								Query query10 = session.createQuery(sb10.toString());
								query10.setParameter("wpaquet", detadmi.getCdacpaquet());
								query10.setParameter("wservic", consulta.getCcocservic().getCsvccodigo());
								List<String> principal = (List<String>) query10.list();
								if (principal != null && !principal.isEmpty() && "S".equals(principal.get(0))) {
									StringBuffer sb20 = new StringBuffer();
									sb20.append(" select cfde from " + Cfdetaadmision.class.getName()
											+ " cfde  where cfde.id.cdannumadm = :cdannumadm AND cfde.cdacservic = :wpaquete ");
									Query query20 = session.createQuery(sb20.toString());
									query20.setParameter("cdannumadm", admision.getCannumero());
									query20.setParameter("wpaquete", detadmi.getCdacpaquet());
									lstDetadm = (List<Cfdetaadmision>) query20.list();

									if (lstDetadm != null && !lstDetadm.isEmpty()) {
										detadmi = lstDetadm.get(0);
									}
								}
							}

							if (admision != null) {
								autorizacion = admision.getCacnumrem();
								if (autorizacion != null && autorizacion.length() > 15) {
									autorizacion = autorizacion.substring(0, 14);
								}
							}

							if (detadmi != null && detadmi.getCdanvalser() != null && detadmi.getCdanvalent() != null) {
								wvalneto = new BigDecimal(detadmi.getCdanvalser());
								wvalcuota = wvalneto.subtract(new BigDecimal(detadmi.getCdanvalent()));
							}
						}
					}

					Crarcconsu rips = new Crarcconsu();
					CrarcconsuId id;
					String codcon = "";
					rips = new Crarcconsu();
					id = new CrarcconsuId();
					rips.setCacdfeccon(consulta.getCcodfecreg());
					rips.setCacctipide(consulta.getCcoctipide());
					rips.setCacanumide(consulta.getCcoanumide());

					rips.setCacnconcep(IConstantes.CONCEPTO_RIPS_CONSULTA_EXTERNA);

					if (consulta.getCcocservic().getCsvccodcups() != null
							&& consulta.getCcocservic().getCsvccodcups().equals("0")) {
						StringTokenizer st = new StringTokenizer(consulta.getCcocservic().getCsvccodigo(), ".");
						codcon = st.nextToken();
					} else {
						codcon = consulta.getCcocservic().getCsvccodcups();
					}
					id.setCacnconcli(consulta.getCconnumero());
					id.setCacnconsec(0);
					rips.setId(id);
					rips.setCacccodcon(codcon);
					rips.setCacnfincon(motivo.getHmcnfinalidad());
					rips.setCacncauext(motivo.getHmcncausaexte());
					rips.setCaccdiagpr(impresion.getHidcdiagprin());
					rips.setCaccdiagr1(impresion.getHidcdiagrela1());
					rips.setCaccdiagr2(impresion.getHidcdiagrela2());
					rips.setCaccdiagr3(impresion.getHidcdiagrela3());
					rips.setCacntipdia(impresion.getHidntipodiagn());
					if (wvalcuota.intValue() != 0) {
						rips.setCacavalcon(wvalneto.subtract(wvalcuota));
					} else {
						rips.setCacavalcon(consulta.getCcoavalser());
					}
					rips.setCaccautori(autorizacion);
					rips.setCacavalcuo(wvalcuota);
					rips.setCacavalnet(wvalneto);
					rips.setCacdfecreg(new Date());
					rips.setCaccusuari(userName);
					rips.setCaclusuario(new BigDecimal(consulta.getCcolusuario().getHuslnumero().doubleValue()));
					rips.setCacnclinic(consulta.getCconclinic());

					session.saveOrUpdate(rips);

					return consulta;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		}
	}

	/**
	 * @param consclin
	 * @param profesional
	 * @return
	 * @throws ModelException
	 */
	public Cnprofxcon getHonorarioConsulta(Cnconsclin consclin, Cpprofesio profesional) throws ModelException {
		List<Cnprofxcon> resultList = null;
		List parametros = new ArrayList();

		try {
			if (consclin != null && profesional != null) {

				StringBuffer sb = new StringBuffer();
				sb.append(" select cnpc from " + Cnprofxcon.class.getName()
						+ " cnpc  where cnpc.id.cpnnconcli = ? AND cnpc.id.cpnnprofes = ? AND cnpc.cpncestado != 'XX' ");
				parametros.add(consclin.getCconnumero());
				parametros.add(profesional.getId().getCpfncodigo());
				resultList = (List<Cnprofxcon>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Honorarios Consulta" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Honorarios Consulta:" + e.getMessage(), e);
		}

	}

	/**
	 * @param profesional
	 * @return
	 * @throws ModelException
	 */
	public String getTipoContratoProfesional(Cpprofesio profesional, Cnconsclin consclin) throws ModelException {
		List<Cptipocont> resultList = null;
		List<String> resultList2 = null;
		List parametros = new ArrayList();
		Cptipocont tipocon;

		tipocon = null;
		boolean wok_funcion;
		wok_funcion = true;
		String wsumcuo;
		wsumcuo = null;

		try {

			if (profesional != null) {

				StringBuffer sb = new StringBuffer();
				sb.append(" select cpti  from " + Cpprofesio.class.getName()).append(" cppr, ");
				sb.append(Cptipocont.class.getName()).append(" cpti ");
				sb.append(" where cpti.ctcnnumero = cppr.cpfntipcon ");
				sb.append(" AND cppr.id.cpfnclinic = ? ");
				sb.append(" AND cppr.id.cpfncodigo = ? ");

				parametros.add(profesional.getId().getCpfnclinic());
				parametros.add(profesional.getId().getCpfncodigo());
				resultList = (List<Cptipocont>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					tipocon = resultList.get(0);
				} else {
					wok_funcion = false;
				}

				if (wok_funcion) {
					if (tipocon.getCtccpagnom() != null && tipocon.getCtccpagnom().equals("N")) {
						return ("D");
					}
					if (tipocon.getCtccdestaj() != null && tipocon.getCtccdestaj().equals("N")) {
						return ("N");
					}
					if (tipocon.getCtccconnom() != null && tipocon.getCtccconnom().equals("N")) {
						return ("D");
					}

					List parametros2 = new ArrayList();

					StringBuffer sb1 = new StringBuffer();
					sb1.append("select cpti.ctlcsumcuo  from " + Cpservicio.class.getName()).append(" cpse, ");
					sb1.append(Cptipconcl.class.getName()).append(" cpti ");
					sb1.append(" where  cpti.ctlncodigo = cpse.csvntipcon ");
					sb1.append(" AND  cpse.csvccodigo = ? ");

					parametros2.add(consclin.getCcocservic().getCsvccodigo());
					resultList2 = (List<String>) this.getHibernateTemplate().find(sb1.toString(), parametros2.toArray());

					if (!resultList2.isEmpty()) {
						wsumcuo = resultList2.get(0);
					}

					if (wsumcuo == null) {
						wok_funcion = false;
					} else {
						if (wsumcuo != null && wsumcuo.equals("S")) {
							return ("N");
						} else {
							return ("D");
						}
					}
				}

			}
			return ("O");

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Tipo de Contrato Profesional" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Tipo de Contrato Profesional:" + e.getMessage(), e);
		}

	}

	/**
	 * @param hvicremitidoa
	 * @return
	 * @throws ModelException
	 */
	public String getTipoRemisionViolencia(String hvicremitidoa) throws ModelException {
		List<Chviolenremi> resultList = null;
		List parametros = new ArrayList();
		try {
			if (hvicremitidoa != null) {

				StringBuffer sb = new StringBuffer();
				sb.append(" select chvr from " + Chviolenremi.class.getName() + " chvr  where chvr.hvrccodigo = ? ");
				parametros.add(hvicremitidoa);

				resultList = (List<Chviolenremi>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0).getHvrcinterno();
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Tipo Remision Violencia" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Tipo Remision Violencia:" + e.getMessage(), e);
		}
	}

	/**
	 * @param hvicremitidoa
	 * @return
	 */
	public String getDescripcionRemisionViolencia(String hvicremitidoa) throws ModelException {
		List<String> resultList = null;
		List parametros = new ArrayList();

		try {
			if (hvicremitidoa != null) {

				StringBuffer sb = new StringBuffer();
				sb.append(" select chvr.hvrcdescripcio from " + Chviolenremi.class.getName()
						+ " chvr  where chvr.hvrccodigo = ? ");
				parametros.add(hvicremitidoa);

				resultList = (List<String>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Descripcion Remisi�n Violencia" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Descripcion Remisi�n Violencia:" + e.getMessage(), e);
		}

	}

	/**
	 * @param numero
	 * @return
	 */
	public Long getExisteConsulta(Integer numero) throws ModelException {
		List<Long> resultList = null;
		List parametros = new ArrayList();

		try {
			if (numero != null) {

				StringBuffer sb = new StringBuffer();
				sb.append(" select chco.hcolnumero from " + Chconsulta.class.getName()
						+ " chco  where chco.hcolnumero = ? AND chco.hcoctiposervi = ?");
				parametros.add(numero);
				parametros.add(IConstantes.TIPO_CONSULTA);

				resultList = (List<Long>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando consulta" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando consulta:" + e.getMessage(), e);
		}

	}

	/**
	 * @param evolucion
	 * @throws ModelException
	 */
	public void saveEvolucion(final Chevolucion evolucion) throws ModelException {
		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {

					Integer consecutivo = null;

					if (evolucion.getId() == null || evolucion.getId().getHevnconsecutiv() == null) {

						BigDecimal secuenciaActual = (BigDecimal) session.createQuery(
								"SELECT max(chev.hevnconsecutiv) FROM HISTORIA.Chevolucion chev where chev.hevlnumero = "
										+ evolucion.getId().getHevlnumero())
								.uniqueResult();

						if (secuenciaActual != null) {
							consecutivo = secuenciaActual.intValue() + 1;
						} else {
							consecutivo = 2;
						}
						if (consecutivo != null) {
							evolucion.getId().setHevnconsecutiv(consecutivo);
						}

					}

					session.saveOrUpdate(evolucion);

					return evolucion;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		}
	}

	/**
	 * @param otraOrden
	 * @throws ModelException
	 */
	public void saveOtraOrden(final Chcontroorden otraOrden) throws ModelException {
		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {

					Integer consecutivo = null;

					if (otraOrden.getId() == null || otraOrden.getId().getHconconsecutiv() == null) {

						BigDecimal secuenciaActual = (BigDecimal) session.createQuery(
								"SELECT max(chco.hconconsecutiv) FROM HISTORIA.Chcontroorden chco where chco.hcolnumero = "
										+ otraOrden.getId().getHcolnumero())
								.uniqueResult();

						if (secuenciaActual != null) {
							consecutivo = secuenciaActual.intValue() + 1;
						} else {
							consecutivo = 2;
						}
						if (consecutivo != null) {
							otraOrden.getId().setHconconsecutiv(consecutivo);
						}

					}

					session.saveOrUpdate(otraOrden);

					return otraOrden;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		}
	}

	/**
	 * @param numeroCirugia
	 * @param consecutivo
	 * @throws ModelException
	 */
	public void closeEvolucionMedica(final Long numeroCirugia, final Integer consecutivo) throws ModelException {
		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {

					StringBuffer sb2 = new StringBuffer();
					sb2.append(" update  historia.chevolucion set hevcestado = 'VG' "
							+ "    where hevlnumero = :numeroCirugia and hevnconsecutiv = :consecutivo ");
					Query query2 = session.createQuery(sb2.toString());
					query2.setParameter("numeroCirugia", numeroCirugia);
					query2.setParameter("consecutivo", consecutivo);
					query2.executeUpdate();

					return numeroCirugia;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		}
	}

	/**
	 * @param numeroConsulta
	 * @param consecutivo
	 * @return
	 * @throws ModelException
	 */
	public List<Chevolucion> getEvolucion(Long numeroConsulta, Integer consecutivo) throws ModelException {
		List<Chevolucion> resultList = null;
		List parametros = new ArrayList();

		try {
			if (numeroConsulta != null && consecutivo != null) {

				StringBuffer sb = new StringBuffer();
				sb.append(" select chev from " + Chevolucion.class.getName()
						+ " chev  where chev.id.hevlnumero = ?  and chev.id.hevnconsecutiv  = ? ");
				parametros.add(numeroConsulta);
				parametros.add(consecutivo);

				resultList = (List<Chevolucion>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList;
				}

			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Evolucion" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Evolucion:" + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroConsulta
	 * @param userName
	 * @return
	 * @throws ModelException
	 */
	public Chevolucion getEvolucionSinCerrar(Long numeroConsulta, String userName) throws ModelException {
		List<Chevolucion> resultList = null;
		List parametros = new ArrayList();

		try {
			if (numeroConsulta != null && userName != null) {

				StringBuffer sb = new StringBuffer();
				sb.append(" select chev from " + Chevolucion.class.getName()
						+ " chev  where chev.id.hevlnumero = ?  and chev.hevcestado  = 'RG' and upper(chev.hevcoperador) = upper(?)  ");
				parametros.add(numeroConsulta);
				parametros.add(userName);

				resultList = (List<Chevolucion>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Evolucion Sin Cerrar" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Evolucion Sin Cerrar:" + e.getMessage(), e);
		}

	}

	/**
	 * @return
	 * @throws ModelException
	 */
	public List<Chpreguanest> getPreguntasAnestesia() throws ModelException {
		List<Chpreguanest> resultList = null;
		try {
			StringBuffer sb = new StringBuffer();
			sb.append(" select chpa from " + Chpreguanest.class.getName() + " chpa order by chpa.hpancodigo  ");

			resultList = (List<Chpreguanest>) this.getHibernateTemplate().find(sb.toString());

			if (!resultList.isEmpty()) {
				return resultList;
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Preguntas Anestesia" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Preguntas Anestesia" + e.getMessage(), e);
		}

	}

	/**
	 * @param hpancodigo
	 * @throws ModelException
	 */
	public String getDescripcionCuestionarioAnestesia(Integer hpancodigo) throws ModelException {
		List<String> resultList = null;
		List parametros = new ArrayList();
		try {
			StringBuffer sb = new StringBuffer();
			sb.append(" select chpa.hpacdescripcio from " + Chpreguanest.class.getName()
					+ " chpa  where chpa.hpancodigo = ? ");
			parametros.add(hpancodigo);

			resultList = (List<String>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			if (!resultList.isEmpty()) {
				return resultList.get(0);
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Descripcion Cuestionario Anestesia:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Descripcion Cuestionario Anestesia:" + e.getMessage(), e);
		}

	}

	/**
	 * @param idConsulta
	 * @throws ModelException
	 */
	public List<Chcuestanest> getCuestionarioPreanestesia(Long idConsulta) throws ModelException {
		List<Chcuestanest> resultList = null;
		List parametros = new ArrayList();
		try {
			StringBuffer sb = new StringBuffer();
			sb.append(" select chca from " + Chcuestanest.class.getName()
					+ " chca  where chca.id.hcalconsulta = ? AND chca.id.hcactiposerv = ? ");
			parametros.add(idConsulta);
			parametros.add(IConstantes.TIPO_CONSULTA);

			resultList = (List<Chcuestanest>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			if (!resultList.isEmpty()) {
				return resultList;
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Cuestionario Preanestesia:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Cuestionario Preanestesia:" + e.getMessage(), e);
		}

	}

	/**
	 * @param resultados
	 * @throws ModelException
	 */
	public void saveResultadosParaclinicos(Chresulparac resultados) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(resultados);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Resultados Paraclinicos:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Resultados Paraclinicos:" + e.getMessage(), e);
		}
	}

	/**
	 * @param idConsulta
	 * @return
	 * @throws ModelException
	 */
	public Chresulparac getResultadosParaclinicos(Long idConsulta) throws ModelException {
		List<Chresulparac> resultList = null;
		List parametros = new ArrayList();
		try {
			StringBuffer sb = new StringBuffer();
			sb.append(" select chrp from " + Chresulparac.class.getName()
					+ " chrp  where chrp.id.hrplconsulta = ? AND chrp.id.hrpctiposervi = ? ");
			parametros.add(idConsulta);
			parametros.add(IConstantes.TIPO_CONSULTA);

			resultList = (List<Chresulparac>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			if (!resultList.isEmpty()) {
				return resultList.get(0);
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Cuestionario Preanestesia:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Cuestionario Preanestesia:" + e.getMessage(), e);
		}

	}

	/**
	 * @param formula
	 * @param control
	 * @throws ModelException
	 */
	public void saveControlMedicamento(final Chformulahos formula, final Chcontrmedic control) throws ModelException {
		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {

					Integer consecutivo = null;
					StringBuffer sb = new StringBuffer();
					sb.append(" SELECT max(chcm.hcmnnumerdosis) ");
					sb.append(" FROM historia.chcontrmedic chcm ");
					sb.append(" where chcm.hcmlconsulta =  ").append(control.getId().getHcmlconsulta());
					sb.append(" and  chcm.hcmnconsecut =  ").append(control.getId().getHcmnconsecut());
					sb.append(" and  chcm.hcmnevoluconse =  ").append(control.getId().getHcmnevoluconse());
					BigDecimal secuenciaActual = (BigDecimal) session.createQuery(sb.toString()).uniqueResult();

					if (secuenciaActual != null) {
						consecutivo = secuenciaActual.intValue() + 1;
					} else {
						consecutivo = 1;
					}

					control.getId().setHcmnnumerdosis(consecutivo);

					if (formula != null && control != null) {
						session.save(control);
						session.update(formula);

					}

					return formula;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		}
	}

	public void saveControlMedicamentoNota(final Chformulahos formula, final Chcontrmedic control,
			final Chnotaenferm nota) throws ModelException {
		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {

					if (nota != null && nota.getId() != null && nota.getId().getHnelconsecutiv() == null) {
						Integer wconsec = null;
						StringBuffer sb = new StringBuffer();
						sb.append(" select max(chne.id.hnelconsecutiv) from  ");
						sb.append(" from Chnotaenferm chne ");
						sb.append(
								" where chne.id.hnelnumero = :hnelnumero AND  chne.id.hnectiposervi = :hnectiposervi   ");

						Query query = session.createQuery(sb.toString());
						query.setParameter("hnelnumero", nota.getId().getHnelnumero());
						query.setParameter("hnectiposervi", nota.getId().getHnectiposervi());

						Integer secuenciaActual = (Integer) query.uniqueResult();

						if (secuenciaActual != null) {
							wconsec = secuenciaActual.intValue() + 1;
						} else {
							wconsec = 1;
						}

						nota.getId().setHnelconsecutiv(wconsec);
						session.saveOrUpdate(nota);
					}

					Integer consecutivo = null;
					StringBuffer sb = new StringBuffer();
					sb.append(" SELECT max(chcm.hcmnnumerdosis) ");
					sb.append(" FROM historia.chcontrmedic chcm ");
					sb.append(" where chcm.hcmlconsulta =  ").append(control.getId().getHcmlconsulta());
					sb.append(" and  chcm.hcmnconsecut =  ").append(control.getId().getHcmnconsecut());
					sb.append(" and  chcm.hcmnevoluconse =  ").append(control.getId().getHcmnevoluconse());
					BigDecimal secuenciaActual = (BigDecimal) session.createQuery(sb.toString()).uniqueResult();

					if (secuenciaActual != null) {
						consecutivo = secuenciaActual.intValue() + 1;
					} else {
						consecutivo = 1;
					}

					control.getId().setHcmnnumerdosis(consecutivo);

					if (formula != null && control != null) {
						session.save(control);
						session.update(formula);

					}

					return formula;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		}
	}

	/**
	 * @param numeroCirugia
	 * @return
	 * @throws ModelException
	 */
	public String getEtapaActualNotaEnfermeria(Long numeroCirugia) throws ModelException {
		List<Chnotaenferm> resultList = null;
		List parametros = new ArrayList();

		try {
			if (numeroCirugia != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chne from " + Chnotaenferm.class.getName()
						+ " chne  where chne.id.hnelnumero  = ?  order by chne.id.hnelconsecutiv desc  ");
				parametros.add(numeroCirugia);

				resultList = (List<Chnotaenferm>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());
			}
			if (resultList != null && !resultList.isEmpty()) {
				return resultList.get(0).getHnecetapa();
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Formula Liquidos:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Formula Liquidos:" + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroCirugia
	 * @param tipoServicio
	 * @param consecutivo
	 * @return
	 * @throws ModelException
	 */
	public List<Chformulaliq> getLstFormulaLiquidos(Long numeroCirugia, String tipoServicio, Integer consecutivo)
			throws ModelException {
		List<Chformulaliq> resultList = null;
		List parametros = new ArrayList();
		try {
			if (numeroCirugia != null && tipoServicio != null && consecutivo != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chfl from " + Chformulaliq.class.getName()
						+ " chfl  where chfl.id.hfllconsulta = ?  AND chfl.id.hflnllave = ? ");
				parametros.add(numeroCirugia);
				parametros.add(consecutivo);

				resultList = (List<Chformulaliq>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());
			}
			if (resultList != null && !resultList.isEmpty()) {
				return resultList;
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Formula Liquidos:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Formula Liquidos:" + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroCirugia
	 * @param tipoServicio
	 * @param consecutivo
	 * @return
	 * @throws ModelException
	 */
	public Chmedidapoyo getMedidasApoyo(Long numeroCirugia, String tipoServicio, Integer consecutivo)
			throws ModelException {
		List<Chmedidapoyo> resultList = null;
		List parametros = new ArrayList();
		try {

			if (numeroCirugia != null && tipoServicio != null && consecutivo != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chma from " + Chmedidapoyo.class.getName()
						+ " chma  where chma.id.hmalconsulta = ? AND chma.id.hmactiposervi = ? AND chma.id.hmanconsecutiv = ? ");
				parametros.add(numeroCirugia);
				parametros.add(tipoServicio);
				parametros.add(consecutivo);

				resultList = (List<Chmedidapoyo>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			}

			if (resultList != null && !resultList.isEmpty()) {
				return resultList.get(0);
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Medidas de Apoyo:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Medidad de Apoyo:" + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroCirugia
	 * @param tipoServicio
	 * @param consecutivo
	 * @return
	 * @throws ModelException
	 */
	public List<Chformulahos> getLstFormulaHospitalizacion(Long numeroCirugia, String tipoServicio, Integer consecutivo)
			throws ModelException {
		List<Chformulahos> resultList = null;
		List parametros = new ArrayList();
		try {
			if (numeroCirugia != null && tipoServicio != null && consecutivo != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chfh from " + Chformulahos.class.getName()
						+ " chfh  where chfh.id.hfhlconsulta = ?  AND chfh.id.hfhnevoluconse = ? ");
				parametros.add(numeroCirugia);
				parametros.add(consecutivo);

				resultList = (List<Chformulahos>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			}

			if (resultList != null && !resultList.isEmpty()) {
				return resultList;
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Formula Hospitalziacion:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Formula Hospitalizacion:" + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroCirugia
	 * @param consecutivo
	 * @return
	 * @throws ModelException
	 */
	public List<Chcontroorden> getLstOtrasOrdenes(Long numeroCirugia,

			Integer consecutivo) throws ModelException {
		List<Chcontroorden> resultList = null;
		List parametros = new ArrayList();
		try {
			if (numeroCirugia != null && consecutivo != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chco from " + Chcontroorden.class.getName()
						+ " chco  where chco.id.hcolnumero = ?  AND chco.id.hconconsecutiv = ? ");
				parametros.add(numeroCirugia);
				parametros.add(consecutivo);

				resultList = (List<Chcontroorden>) this.getHibernateTemplate().find(sb.toString(),
						parametros.toArray());

			}

			if (resultList != null && !resultList.isEmpty()) {
				return resultList;
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Ordenes :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Ordenes :" + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroCirugia
	 * @param tipoServicio
	 * @param consecutivo
	 * @return
	 * @throws ModelException
	 */
	public List<Chformulaesp> getLstMedicamentosEspeciales(Long numeroCirugia, String tipoServicio, Integer consecutivo)
			throws ModelException {
		List<Chformulaesp> resultList = null;
		List parametros = new ArrayList<Chformulaesp>();

		try {
			if (numeroCirugia != null && tipoServicio != null && consecutivo != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chfe from " + Chformulaesp.class.getName()
						+ " chfe  where chfe.id.hfelconsulta = ? AND chfe.id.hfectiposerv = ? AND chfe.id.hfenllave = ? ");
				parametros.add(numeroCirugia);
				parametros.add(tipoServicio);
				parametros.add(consecutivo);

				resultList = (List<Chformulaesp>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());
			}

			if (resultList != null && !resultList.isEmpty()) {
				return resultList;
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Formula Medicamentos Especiales :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Formula Medicamentos Especiales: " + e.getMessage(), e);
		}

	}

	/**
	 * @param usuario
	 * @return
	 * @throws ModelException
	 */
	public List<Chcirugprogr> getCirugiaProgramadaEpicrisis(final Chusuario usuario) throws ModelException {
		List<Chcirugprogr> pis = (List<Chcirugprogr>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				StringBuffer sb = new StringBuffer();
				sb.append("SELECT chcp from ");
				sb.append(Chcirugprogr.class.getName()).append(" chcp, ");
				sb.append(Chingresoenf.class.getName()).append(" chie ");
				sb.append(
						"WHERE  chcp.hcplnumero = chie.id.hielnumero AND chie.hiecetapa = 'CE' AND  chcp.hcpcestado in ('VG') ");

				if (usuario != null) {

					if (usuario.getHuscprimerapel() != null && !usuario.getHuscprimerapel().equals("")) {
						sb.append(" AND chcp.hcplusuario.huscprimerapel = ")
								.append("'" + usuario.getHuscprimerapel().toUpperCase() + "'");
					}
					if (usuario.getHuscprimernomb() != null && !usuario.getHuscprimernomb().equals("")) {
						sb.append(" AND chcp.hcplusuario.huscprimernomb = ")
								.append("'" + usuario.getHuscprimernomb().toUpperCase() + "'");
					}

					if (usuario.getHuscsegundapel() != null && !usuario.getHuscsegundapel().equals("")) {
						sb.append(" AND chcp.hcplusuario.huscsegundapel = ")
								.append("'" + usuario.getHuscsegundapel().toUpperCase() + "'");
					}
					if (usuario.getHuscsegundnomb() != null && !usuario.getHuscsegundnomb().equals("")) {
						sb.append(" AND  chcp.hcplusuario.huscsegundnomb =  ")
								.append("'" + usuario.getHuscsegundnomb().toUpperCase() + "'");
					}
					if (usuario.getHusanumeiden() != null) {
						sb.append(" AND chcp.hcplusuario.husanumeiden = ").append(usuario.getHusanumeiden());
					}

					if (usuario.getHusetipoiden() != null && !usuario.getHusetipoiden().equals("")) {
						sb.append(" AND chcp.hcplusuario.husetipoiden = ")
								.append("'" + usuario.getHusetipoiden().toUpperCase() + "'");
					}
				}

				String hql = sb.toString();

				Query query = session.createQuery(hql);
				List<Chcirugprogr> pis;
				pis = query.list();

				for (Chcirugprogr ie : pis) {
					Chusuario usuario = ie.getHcplusuario();
					Hibernate.initialize(usuario);

				}

				return pis;
			}
		});
		return pis;
	}

	/**
	 * @param anestesia
	 * @throws ModelException
	 */
	public void saveEncabezadoRegistroAnestesia(Chanestesia anestesia) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(anestesia);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Encabezado Registro Anestesia:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Encabezado Registro Anestesia:" + e.getMessage(), e);
		}
	}

	/**
	 * @param hanlnumero
	 * @return
	 * @throws ModelException
	 */
	public Chanestesia getEncabezadoRegistroAnestesia(Long hanlnumero) throws ModelException {
		List<Chanestesia> resultList = null;
		List parametros = new ArrayList<Chanestesia>();

		try {
			if (hanlnumero != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chan from " + Chanestesia.class.getName() + " chan  where chan.hanlnumero = ?  ");
				parametros.add(hanlnumero);

				resultList = (List<Chanestesia>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());
			}

			if (resultList != null && !resultList.isEmpty()) {
				return resultList.get(0);
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Encabezado Anestesia :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Encabezado Anestesia : " + e.getMessage(), e);
		}

	}

	/**
	 * @param monitoria
	 * @throws ModelException
	 */
	public void saveMonitorAnestesia(Chmonitoria monitoria) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(monitoria);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Monitores Anestesia:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Monitores Anestesia:" + e.getMessage(), e);
		}
	}

	/**
	 * @param hmolnumero
	 * @return
	 * @throws ModelException
	 */
	public Chmonitoria getMonitoriaAnestesia(Long hmolnumero) throws ModelException {
		List<Chmonitoria> resultList = null;
		List parametros = new ArrayList<Chmonitoria>();

		try {
			if (hmolnumero != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chma from " + Chmonitoria.class.getName()
						+ " chma  where chma.id.hmolnumero = ? AND chma.id.hmoctiposervi = ?  ");
				parametros.add(hmolnumero);
				parametros.add(IConstantes.TIPO_HOSPITALIZACION);

				resultList = (List<Chmonitoria>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());
			}

			if (resultList != null && !resultList.isEmpty()) {
				return resultList.get(0);
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Monitoria Anestesia :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Monitoria Anestesia : " + e.getMessage(), e);
		}

	}

	/**
	 * @param tecnica
	 * @throws ModelException
	 */
	public void saveTecnicaAnestesia(Chtecnianest tecnica) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(tecnica);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Tecnica Anestesia:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Tecnica Anestesia:" + e.getMessage(), e);
		}
	}

	/**
	 * @param htalnumero
	 * @return
	 * @throws ModelException
	 */
	public Chtecnianest getTecnicaAnestesia(Long htalnumero) throws ModelException {
		List<Chtecnianest> resultList = null;
		List parametros = new ArrayList<Chtecnianest>();

		try {
			if (htalnumero != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chta from " + Chtecnianest.class.getName()
						+ " chta  where chta.id.htalnumero = ? AND chta.id.htactiposervi = ?  ");
				parametros.add(htalnumero);
				parametros.add(IConstantes.TIPO_HOSPITALIZACION);

				resultList = (List<Chtecnianest>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());
			}

			if (resultList != null && !resultList.isEmpty()) {
				return resultList.get(0);
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando T�cnica Anestesia :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando T�cnica Anestesia : " + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroUsuario
	 * @return
	 * @throws ModelException
	 */
	public Chexamfisico getUltimoExamenFisicoUsuario(Long numeroUsuario) throws ModelException {
		List<Chexamfisico> resultList = null;
		List parametros = new ArrayList();
		try {
			if (numeroUsuario != null) {

				StringBuffer sb = new StringBuffer();
				sb.append(" select chef from ").append(Chexamfisico.class.getName()).append(" chef, ");
				sb.append(Chconsulta.class.getName()).append(" chco ");
				sb.append(" where chef.id.heflconsulta = chco.hcolnumero ");
				sb.append(" and  chco.hcoeetapa = 'CE' ");
				sb.append(" and  chco.hcolusuario.huslnumero = ?  ");
				sb.append(" and  chef.hefdfecregistr =  ").append(" (select max(chef1.hefdfecregistr)");
				sb.append(" from ").append(Chexamfisico.class.getName()).append(" chef1, ");
				sb.append(Chconsulta.class.getName()).append(" chco1 ");
				sb.append(" where chef1.id.heflconsulta = chco1.hcolnumero ");
				sb.append(" and chco1.hcoeetapa = 'CE'  and chco1.hcolusuario.huslnumero = ? ) ");
				parametros.add(numeroUsuario);
				parametros.add(numeroUsuario);

				resultList = (List<Chexamfisico>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Ultimo Examen Fisico Usuario :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Ultimo Examen Fisico Usuario :" + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroUsuario
	 * @return
	 * @throws ModelException
	 */
	public Chimprdiag getUltimoImpresionDiagnosticaUsuario(Long numeroUsuario) throws ModelException {
		List<Chimprdiag> resultList = null;
		List parametros = new ArrayList();
		try {
			if (numeroUsuario != null) {

				StringBuffer sb = new StringBuffer();
				sb.append(" select chid from ").append(Chimprdiag.class.getName()).append(" chid, ");
				sb.append(Chconsulta.class.getName()).append(" chco ");
				sb.append(" where chid.id.hidlconsulta = chco.hcolnumero ");
				sb.append(" and  chco.hcoeetapa = 'CE' ");
				sb.append(" and  chco.hcolusuario.huslnumero = ?  ");
				sb.append(" order by chid.hiddfecregistr DESC ");
				parametros.add(numeroUsuario);

				resultList = (List<Chimprdiag>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Ultimo Impresion Diagnostica Usuario :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Ultimo Impresion Diagnostica Usuario :" + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroConsulta
	 * @return
	 * @throws ModelException
	 */
	public Chevolucion getUltimaEvolucionConsulta(Long numeroConsulta) throws ModelException {
		List<Chevolucion> resultList = null;
		List parametros = new ArrayList();
		try {
			if (numeroConsulta != null) {

				StringBuffer sb = new StringBuffer();
				sb.append(" select chev from ").append(Chevolucion.class.getName()).append(" chev ");
				sb.append(" where chev.id.hevlnumero = ? ");
				sb.append(" and  chev.hevcestado = 'VG' ");
				sb.append(" order by chev.hevdfecregistr DESC ");
				parametros.add(numeroConsulta);

				resultList = (List<Chevolucion>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Ultima Evolucion Consulta :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Ultima Evolucion Consulta :" + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroConsulta
	 * @return
	 * @throws ModelException
	 */
	public Chconducta getUltimaConductaConsulta(Long numeroConsulta) throws ModelException {
		List<Chconducta> resultList = null;
		List parametros = new ArrayList();
		try {
			if (numeroConsulta != null) {

				StringBuffer sb = new StringBuffer();
				sb.append(" select chco from ").append(Chconducta.class.getName()).append(" chco ");
				sb.append(" where chco.id.hcnlconsulta = ? ");
				sb.append(" order by chco.hcndfecregistr DESC ");
				parametros.add(numeroConsulta);

				resultList = (List<Chconducta>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Ultima Conducta Consulta :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Ultima Conducta Consulta :" + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroUsuario
	 * @return
	 * @throws ModelException
	 */
	public Chconsulta getUltimaConsultaExternaUsuario(Long numeroUsuario) throws ModelException {
		List<Chconsulta> resultList = null;

		List parametros = new ArrayList();
		try {
			if (numeroUsuario != null) {

				StringBuffer sb = new StringBuffer();
				sb.append(" select chco from ").append(Chconsulta.class.getName()).append(" chco ");
				sb.append(" where chco.hcolusuario = ? and chco.hcocservicio.csvntipcon = 1 ");

				sb.append(
						" and chco.hcoctiposervi = 'C' and  chco.hcoeetapa = 'CE' and chco.hcocservicio.csvntiphis not in (5,17) ");
				sb.append(" order by chco.hcodfecregistr DESC ");
				parametros.add(numeroUsuario);
				// parametros.add(listaServicios);

				resultList = (List<Chconsulta>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Ultima Consulta Externa :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Ultima Consulta Externa :" + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroUsuario
	 * @return
	 * @throws ModelException
	 */
	public Chantegineco getUltimoAntecedentesGinecologicos(Long numeroUsuario) throws ModelException {
		List<Chantegineco> resultList = null;
		List parametros = new ArrayList();
		try {
			if (numeroUsuario != null) {

				StringBuffer sb = new StringBuffer();
				sb.append(" select chag from ").append(Chantegineco.class.getName()).append(" chag, ");
				sb.append(Chconsulta.class.getName()).append(" chco ");
				sb.append(" where chag.id.haglconsulta = chco.hcolnumero ");
				sb.append(" and  chco.hcoeetapa = 'CE' ");
				sb.append(" and  chco.hcolusuario.huslnumero = ?  ");
				sb.append(" and  chag.hagdfecregistr =  ").append(" (select max(chag1.hagdfecregistr)");
				sb.append(" from ").append(Chantegineco.class.getName()).append(" chag1, ");
				sb.append(Chconsulta.class.getName()).append(" chco1 ");
				sb.append(" where chag1.id.haglconsulta = chco1.hcolnumero ");
				sb.append(" and chco1.hcolusuario.huslnumero = ? ) ");
				parametros.add(numeroUsuario);
				parametros.add(numeroUsuario);

				resultList = (List<Chantegineco>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Ultimo Examen Fisico Usuario :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Ultimo Examen Fisico Usuario :" + e.getMessage(), e);
		}

	}

	/**
	 * @param medida
	 * @throws ModelException
	 */
	public void saveMedidaProfilactica(Chposicanest medida) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(medida);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Medida Profilactica:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Medida Profilactica:" + e.getMessage(), e);
		}
	}

	/**
	 * @param hpalnumero
	 * @return
	 * @throws ModelException
	 */
	public Chposicanest getMedidaProfilactica(Long hpalnumero) throws ModelException {
		List<Chposicanest> resultList = null;
		List parametros = new ArrayList<Chposicanest>();

		try {
			if (hpalnumero != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chpa from " + Chposicanest.class.getName()
						+ " chpa  where chpa.id.hpalnumero = ? AND chpa.id.hpactiposervi = ?  ");
				parametros.add(hpalnumero);
				parametros.add(IConstantes.TIPO_HOSPITALIZACION);

				resultList = (List<Chposicanest>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());
			}

			if (resultList != null && !resultList.isEmpty()) {
				return resultList.get(0);
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Medida Profilactica :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando T�cnica Profilactica : " + e.getMessage(), e);
		}

	}

	/**
	 * @param viaaerea
	 * @throws ModelException
	 */
	public void saveControlViaAerea(Chventiaerea viaaerea) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(viaaerea);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Control Via Aerea:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Control Via Aerea:" + e.getMessage(), e);
		}
	}

	/**
	 * @param hvalnumero
	 * @return
	 * @throws ModelException
	 */
	public Chventiaerea getControlViaAerea(Long hvalnumero) throws ModelException {
		List<Chventiaerea> resultList = null;
		List parametros = new ArrayList<Chventiaerea>();

		try {
			if (hvalnumero != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chva from " + Chventiaerea.class.getName()
						+ " chva  where chva.id.hvalnumero = ? AND chva.id.hvactiposervi = ?  ");
				parametros.add(hvalnumero);
				parametros.add(IConstantes.TIPO_HOSPITALIZACION);

				resultList = (List<Chventiaerea>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());
			}

			if (resultList != null && !resultList.isEmpty()) {
				return resultList.get(0);
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Control Via Aerea:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Control Via Aerea: " + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroCirugia
	 * @param tipoServicio
	 * @return
	 * @throws ModelException
	 */
	public List<Chcontmedane> getMedicamentosAnestesia(Long numeroCirugia, String tipoServicio) throws ModelException {
		List<Chcontmedane> resultList = null;
		List parametros = new ArrayList<Chcontmedane>();

		try {

			StringBuffer sb = new StringBuffer();
			sb.append(" select chma from " + Chcontmedane.class.getName()
					+ " chma  where chma.id.hmalconsulta = ? AND chma.id.hmactiposerv = ?  ");
			parametros.add(numeroCirugia);
			parametros.add(tipoServicio);

			resultList = (List<Chcontmedane>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			if (!resultList.isEmpty()) {
				return resultList;
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Medicamentos Anestesia:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Medicamentos Anestesia: " + e.getMessage(), e);
		}

	}

	/**
	 * @param consclin
	 * @throws ModelException
	 */
	public Crripsserv getParametrosRipsXClinica(Cnconsclin consclin) throws ModelException {
		List parametros;
		List<Crripsserv> lstRips;

		try {
			parametros = new ArrayList();
			if (consclin != null && consclin.getCcocservic() != null) {
				StringBuffer sb1 = new StringBuffer();
				sb1.append(" select crri from ").append(Crripsserv.class.getName()).append(" crri ");
				sb1.append(" WHERE crri.id.crscservic = ? AND crri.crscestado= 'VG'  ");
				parametros.add(consclin.getCcocservic().getCsvccodigo());

				lstRips = (List<Crripsserv>) getHibernateTemplate().find(sb1.toString(), parametros.toArray());

				if (lstRips != null && !lstRips.isEmpty()) {
					return lstRips.get(0);
				} else {
					List<Crripxclin> lstRipsCl;
					parametros = new ArrayList();

					StringBuffer sb = new StringBuffer();
					sb.append(" select crri from ").append(Crripxclin.class.getName()).append(" crri ");
					sb.append(" WHERE crri.id.crinclinic = ? AND crri.id.cricservic = ?  ");
					parametros.add(consclin.getCconclinic());
					parametros.add(consclin.getCcocservic().getCsvccodigo());

					lstRipsCl = (List<Crripxclin>) getHibernateTemplate().find(sb.toString(), parametros.toArray());

					if (lstRipsCl != null && !lstRipsCl.isEmpty()) {
						Crripsserv ripsNac = new Crripsserv(new CrripsservId());
						ripsNac.getId().setCrsngrupo(lstRipsCl.get(0).getId().getCringrupo());
						ripsNac.getId().setCrsnsubgru(lstRipsCl.get(0).getId().getCrinsubgru());
						ripsNac.getId().setCrscservic(lstRipsCl.get(0).getId().getCricservic());
						ripsNac.setCrscconpro(lstRipsCl.get(0).getCricconpro());
						ripsNac.setCrsnconcep(lstRipsCl.get(0).getCrinconcep());
						ripsNac.setCrsnfinali(lstRipsCl.get(0).getCrinfinali());
						ripsNac.setCrsnambito(lstRipsCl.get(0).getCrinambito());
						ripsNac.setCrsncauext(lstRipsCl.get(0).getCrincauext());
						ripsNac.setCrscperate(lstRipsCl.get(0).getCricperate());
						ripsNac.setCrscdiagpr(lstRipsCl.get(0).getCricdiagpr());
						ripsNac.setCrscdiagre(lstRipsCl.get(0).getCricdiagre());
						ripsNac.setCrsntipdia(lstRipsCl.get(0).getCrintipdia());
						ripsNac.setCrsnrealiz(lstRipsCl.get(0).getCrinrealiz());

						return ripsNac;
					}
				}
			}
			return null;
		} catch (HibernateException e) {
			throw new ModelException("Error Consultando RIPS X Clinica :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Consultando RIPS X Clinica :" + e.getMessage(), e);
		}
	}

	/**
	 * @param consulta
	 * @return
	 * @throws ModelException
	 */
	public Crarcproce getRipsCitologia(Cnconsclin consulta) throws ModelException {
		List<Crarcproce> resultList = null;
		List parametros = new ArrayList();
		try {
			StringBuffer sb = new StringBuffer();
			sb.append(" select crap from " + Crarcproce.class.getName() + " crap  where crap.id.capnconcli = ? ");
			parametros.add(consulta.getCconnumero());
			resultList = (List<Crarcproce>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			if (!resultList.isEmpty()) {
				return resultList.get(0);
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Rips:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Rips:" + e.getMessage(), e);
		}

	}

	/**
	 * Returns the substring for the text specified.
	 * 
	 * @param text     the text to cut.
	 * @param startsub the start index.
	 * @param endsub   the end index.
	 * @return the sub string.
	 */
	public static final String substr(final String text, final int startsub, final int endsub) {
		int idxInf = startsub;
		int idxSup = endsub;
		if (idxInf - 1 < 0 || idxInf > text.length()) {
			return "";
		}
		if (idxSup > text.length()) {
			idxSup = text.length();
		}
		return text.substring(idxInf - 1, idxSup);
	}

	/**
	 * @param idConsulta
	 * @throws ModelException
	 */
	public List<Chcuestester> getCuestionarioEsterilizacion(Long idConsulta) throws ModelException {
		List<Chcuestester> resultList = null;
		List parametros = new ArrayList();
		try {
			StringBuffer sb = new StringBuffer();
			sb.append(" SELECT chce FROM " + Chcuestester.class.getName()
					+ " chce  WHERE chce.comp_id.hcelconsulta = ? AND chce.comp_id.hcectiposerv = ? ");
			parametros.add(idConsulta);
			parametros.add(IConstantes.TIPO_CONSULTA);

			resultList = (List<Chcuestester>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			if (!resultList.isEmpty()) {
				return resultList;
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Cuestionario Esterilizaci�n:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Cuestionario Esterilizaci�n:" + e.getMessage(), e);
		}

	}

	/**
	 * @param chcuestester
	 */
	public void saveCuestionarioEsterilizacion(Chcuestester chcuestester) throws ModelException {

		try {
			this.getHibernateTemplate().saveOrUpdate(chcuestester);
		} catch (HibernateException e) {
			throw new ModelException("Error insertando cuestionario de esterilizacion femenina:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error insertando cuestionario de esterilizacion femenina:" + e.getMessage(), e);
		}

	}

	// FIXME INICIO SEGUIMINETO CITOLOGIAS

	/**
	 * Obtener Lista de Citologias para lectura.
	 */
	public List getCitologiaLectura(Date fechaInicial, Date fechafinal, int codCentro, String tipoLectura,
			List<Integer> listaTipoHistoria) throws ModelException {

		List resultList = null;
		String tiposHistoria = getStringFromIntegerList(listaTipoHistoria);

		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		String fechaI = dateFormat.format(fechaInicial.getTime()) + HORA_INICIAL;
		String fechaF = dateFormat.format(fechafinal.getTime()) + HORA_FINAL;

		try {
			StringBuffer sb = new StringBuffer();

			sb.append(" SELECT cnci.ccinconsec, cnci.ccidfecreg, cnci.ccidfeccit, cnci.ccictipide, cnci.ccianumide,");
			sb.append("  cnci.ccicprinom, cnci.ccicsegnom, cnci.ccicpriape, cnci.ccicsegape, cnci.ccinnumero,");
			sb.append("  cnct.ctmcusureg, ccinconsec, ccinclinic, ccictipide, ccianumide, ");
			sb.append("  ccicprinom, ccicsegnom, ccicpriape, ccicsegape, ccinedad, ");
			sb.append("  ccictipafi, ccicasegur, ccidfeccit, ccinnumdoc, ccintipdoc, ");
			sb.append("  ccinnumdoc, ctmctomada, ctmcnomtom, ctmcesquem, ctmdultmen, ");
			sb.append("  ctmdultpar, ctmngestac, ctmnpartos, ctmnaborto, ctmcembara, ");
			sb.append("  ctmnedarel, ctmcmetpla,ctmcotrmet,ctmntiemet,ctmdultcit,");
			sb.append("  ctmcultres,ctmcotrhal,ctmcpningu,ctmcpcaute,ctmdpcaute,");
			sb.append("  ctmcphiste,ctmdphiste,ctmcpconiz, ctmdpconiz,ctmcpradio,");
			sb.append("  ctmdpradio,ctmcpbiops,ctmdpbiops,ctmcpcriot,ctmdpcriot, ");
			sb.append("  ctmcpata,ctmdpata,ctmcpotro,ctmdpotro,ctmcpdotro, ");
			sb.append("  ctmcpvapor,ctmdpvapor,ctmcphormo,ctmdphormo,ctmcaspcue, ");
			sb.append("  ctmcobstom,ctmccomvph,ctmclactan, ctmnnumero,ccilconcli, cont.ccncdescri ");
			sb.append(
					" FROM clinico.Cncitologi cnci, clinico.Cncitotoma cnct,clinico.cnconsclin cnco, clinico.Cpservicio cpse, clinico.Cfadmision ad, clinico.Cpcontrato cont ");
			sb.append(
					" WHERE cnci.ccinconsec = cnct.ctmnconsec and cnco.cconnumero = cnci.ccilconcli  AND cpse.csvccodigo = cnco.ccocservic ");
			sb.append(
					"  AND ad.cannumero =  cnci.ccinnumdoc AND cont.ccnnnumero= ad.cancontra AND cont.ccnnclinic= cnci.ccinclinic ");
			sb.append(
					" AND (cnci.ccidfecreg BETWEEN TO_DATE(?,'dd/MM/yyyy hh24:mi') AND TO_DATE(?,'dd/MM/yyyy hh24:mi'))  AND cnci.ccinclinic = ? ");
			sb.append(" AND cpse.csvntiphis in (" + tiposHistoria + ") ");
			sb.append(
					" AND cnci.ccinconsec NOT IN ( SELECT chde.hdencitologia FROM historia.Chdetaentcito chde) ORDER BY cnci.ccinconsec DESC");

			Query sqlquery = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
					.createQuery(sb.toString());
			sqlquery.setParameter(0, fechaI);
			sqlquery.setParameter(1, fechaF);
			sqlquery.setParameter(2, codCentro);
			resultList = sqlquery.list();

		} catch (HibernateException e) {
			throw new ModelException("Error consultando citologias:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando citologias:" + e.getMessage(), e);
		}

		return resultList;
	}

	/**
	 * Obtener Lista de Citologias para Generar archivo laboratorio.
	 * 
	 * public List getCitologiaGenerar(Date fechaInicial, Date fechafinal, Integer
	 * codCentro) throws ModelException {
	 * 
	 * List resultList = null;
	 * 
	 * SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy"); String
	 * fechaI = dateFormat.format(fechaInicial.getTime()) + HORA_INICIAL; String
	 * fechaF = dateFormat.format(fechafinal.getTime()) + HORA_FINAL;
	 * 
	 * try { StringBuffer sb = new StringBuffer();
	 * 
	 * sb.append("SELECT cnci.ccinconsec, cnci.ccinclinic, cnci.ccidfecreg,
	 * cnci.ccidfeccit, cnci.ccictipide, cnci.ccianumide, cnci.ccicprinom,
	 * cnci.ccicsegnom, cnci.ccicpriape, cnci.ccicsegape,
	 * cnci.ccinnumero,cnct.ctmcusureg, ccinedad, ccictipafi, ccicasegur,
	 * ccinnumdoc, ccintipdoc, ctmctomada, ctmcnomtom, ctmcesquem, ctmdultmen,
	 * ctmdultpar, ctmngestac, ctmnpartos, ctmcembara, ctmnedarel, ctmcmetpla,
	 * ctmcotrmet, ctmntiemet, ctmdultcit,
	 * ctmcultres,ctmcotrhal,ctmcpningu,ctmcpcaute,ctmdpcaute,ctmcphiste,ctmdphiste,ctmcpconiz,ctmdpconiz,ctmcpradio,ctmdpradio,ctmcpbiops,ctmdpbiops,ctmcpcriot,ctmdpcriot,ctmcpata,ctmdpata,ctmcpotro,ctmdpotro,ctmcpdotro,ctmcpvapor,ctmdpvapor,ctmcphormo,ctmdphormo,ctmcaspcue,ctmcobstom,ctmccomvph,ctmclactan");
	 * sb.append(" FROM clinico.Cncitologi cnci, clinico.Cncitotoma cnct ");
	 * 
	 * sb.append(" WHERE cnci.ccinconsec = cnct.ctmnconsec "); sb.append(" AND
	 * (cnci.ccidfecreg BETWEEN TO_DATE(?,'dd/MM/yyyy hh24:mi') AND
	 * TO_DATE(?,'dd/MM/yyyy hh24:mi')) AND cnci.ccinclinic = ? ");
	 * 
	 * sb.append(" AND cnci.ccinconsec NOT IN ( SELECT chde.hdencitologia FROM
	 * historia.Chdetaentcito chde WHERE chde.hdencitologia = cnci.ccinconsec )
	 * ORDER BY cnci.ccinconsec DESC");
	 * 
	 * Query sqlquery =
	 * this.getHibernateTemplate().getSessionFactory().getCurrentSession().createQuery(sb.toString());
	 * 
	 * sqlquery.setParameter("wclinic", codCentro); resultList = sqlquery.list();
	 * 
	 * 
	 * } catch (HibernateException e) { throw new ModelException("Error consultando
	 * citologias:" + e.getMessage(), e); } catch (Exception e) { throw new
	 * ModelException("Error consultando citologias:" + e.getMessage(), e); }
	 * 
	 * return resultList; }
	 */

	/**
	 * Obtener Lista de Profesionales para Lectura.
	 */
	public Cpprofesio getProfesionalesLectura(int codCentro, BigDecimal codProf) throws ModelException {

		List<Chproflect> resultList = null;
		Cpprofesio prof = new Cpprofesio();

		try {

			if (codProf == null) {

				StringBuffer sb = new StringBuffer();
				sb.append("SELECT chpl FROM " + Chproflect.class.getName()
						+ "  chpl WHERE chpl.hplcestado = 'VG' AND chpl.comp_id.hplnclinlect = ? ");
				resultList = (List<Chproflect>) this.getHibernateTemplate().find(sb.toString(), codCentro);

				if (resultList.isEmpty()) {

					StringBuffer sb1 = new StringBuffer();
					sb1.append("SELECT chpl FROM " + Chproflect.class.getName()
							+ "  chpl WHERE chpl.hplcestado = 'VG' AND chpl.comp_id.hplnclinlect = 0 ");
					resultList = (List<Chproflect>) this.getHibernateTemplate().find(sb1.toString());

				}

			} else {

				StringBuffer sb3 = new StringBuffer();
				sb3.append("SELECT chpl FROM " + Chproflect.class.getName()
						+ "  chpl WHERE chpl.hplcestado = 'VG' AND chpl.comp_id.hplncodprofes != ? ");
				resultList = (List<Chproflect>) this.getHibernateTemplate().find(sb3.toString(), codProf);

			}

			if (!resultList.isEmpty()) {

				BigDecimal codprofes = (resultList.get(0)).getComp_id().getHplncodprofes();

				StringBuffer sb2 = new StringBuffer();
				sb2.append("SELECT cppr FROM " + Cpprofesio.class.getName() + "  cppr WHERE cppr.id.cpfncodigo = ? ");
				prof = (Cpprofesio) (this.getHibernateTemplate().find(sb2.toString(), codprofes)).get(0);

			}

		} catch (HibernateException e) {
			throw new ModelException("Error consultando lista de profesionales para lectura:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando lista de profesionales para lectura:" + e.getMessage(), e);
		}
		return prof;
	}

	/**
	 * @see ClinicoDaoImp#saveListaEntregaCitologia(entregacitol) Salvar o modificar
	 *      listado de citologias a entregar
	 */
	public BigDecimal saveListaEntregaCitologia(Chentregacitol entregacitol) throws ModelException {
		this.getHibernateTemplate().getSessionFactory();
		SessionFactory sessionFactory = this.getHibernateTemplate().getSessionFactory();
		Session session = sessionFactory.openSession();
		Transaction tx = session.beginTransaction();

		BigDecimal secuenciaActual = new BigDecimal(0);

		try {

			if (entregacitol.getHeclidentificador() == null) {
				session.saveOrUpdate(entregacitol);
				StringBuffer sb = new StringBuffer();
				sb.append("SELECT HISTORIA.SEC_CHENTREGACITOL.CURRVAL FROM DUAL");
				String hql = sb.toString();
				Query query = session.createQuery(hql);
				secuenciaActual = (BigDecimal) query.uniqueResult();
			} else {
				StringBuffer sb = new StringBuffer();
				sb.append("DELETE FROM historia.chdetaentcito chde WHERE chde.hdelidentregacitol = :id");
				Query query = session.createQuery(sb.toString());
				query.setLong("id", entregacitol.getHeclidentificador());
				int rowCount = query.executeUpdate();
				session.saveOrUpdate(entregacitol);
				secuenciaActual = (BigDecimal.valueOf(entregacitol.getHeclidentificador()));
			}
			for (Chdetaentcito chdetaentcito : (Set<Chdetaentcito>) entregacitol.getChdetaentcitos()) {
				chdetaentcito.getComp_id().setHdelidentregacitol(new Long(secuenciaActual.longValue()));
				session.saveOrUpdate(chdetaentcito);
			}

		} catch (HibernateException e) {
			tx.rollback();
			throw new ModelException("Error Registrando Listado de Entrega:" + e.getMessage(), e);
		} catch (Exception e) {
			tx.rollback();
			throw new ModelException("Error Registrando Listado de Entrega:" + e.getMessage(), e);
		} finally {
			try {
				tx.commit();
			} catch (Exception e) {
				throw new ModelException("Error confirmando Transaccion" + e.getMessage(), e);
			} finally {
				session.close();
			}
		}

		return secuenciaActual;
	}

	/**
	 * Obtener Listado de Citologias para registro de resultados.
	 */
	public List getListadoCitologias(Integer idListado, String tipoLectura) throws ModelException {

		List resultList = null;
		List parametros = new ArrayList();
		try {

			StringBuffer sb = new StringBuffer();
			sb.append("SELECT cnde FROM " + Chdetaentcito.class.getName()
					+ "   cnde WHERE  cnde.comp_id.hdelidentregacitol = ?  AND cnde.hdecetapa = ?  ORDER BY cnde.comp_id.hdelidentregacitol DESC");
			parametros.add(idListado);
			if (tipoLectura.equalsIgnoreCase(IConstantes.PRIMERA_LECTURA)) {
				parametros.add(IConstantes.CITOLOGIA_ENV_LECTURA_UNO);
			} else if (tipoLectura.equalsIgnoreCase(IConstantes.SEGUNDA_LECTURA)) {
				parametros.add(IConstantes.CITOLOGIA_ENV_LECTURA_DOS);
			} else if (tipoLectura.equalsIgnoreCase(IConstantes.PRIMERA_LECTURA_MOD)) {
				parametros.add(IConstantes.CITOLOGIA_REG_LECTURA_UNO);
			} else if (tipoLectura.equalsIgnoreCase(IConstantes.SEGUNDA_LECTURA_MOD)) {
				parametros.add(IConstantes.CITOLOGIA_REG_LECTURA_DOS);
			} else {
				sb = new StringBuffer();
				sb.append("SELECT cnde FROM " + Chdetaentcito.class.getName()
						+ "   cnde WHERE  cnde.comp_id.hdelidentregacitol = ?  ORDER BY cnde.comp_id.hdelidentregacitol DESC");
			}

			resultList = this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			if (!resultList.isEmpty()) {

				for (Chdetaentcito detalleEntrega : (List<Chdetaentcito>) resultList) {

					StringBuffer sb1 = new StringBuffer();
					sb1.append(
							"SELECT cnci FROM " + Cncitologi.class.getName() + "   cnci WHERE  cnci.ccinconsec = ? ");
					detalleEntrega.setCncitologi((Cncitologi) this.getHibernateTemplate()
							.find(sb1.toString(), detalleEntrega.getComp_id().getHdencitologia()).get(0));

				}

			}

		} catch (HibernateException e) {
			throw new ModelException("Error consultando listado de citologias :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando listado de citologias:" + e.getMessage(), e);
		}

		return resultList;
	}

	/**
	 * Obtener Lista de Citologias para segunda lectura.
	 */
	public List getCitologiaLecturaDos(Integer idListado) throws ModelException {

		List resultList_total = new ArrayList();

		List resultList_pos = null;
		List resultList_neg = null;

		List parametros_pos = new ArrayList();
		List parametros_neg = new ArrayList();

		try {

			StringBuffer sba = new StringBuffer();
			sba.append("SELECT chec FROM " + Chentregacitol.class.getName()
					+ " chec WHERE chec.heclidentificador = ? AND chec.hecnlablectura2 IS NULL");

			if (!this.getHibernateTemplate().find(sba.toString(), idListado).isEmpty()) {

				// Se selecciona el 100% de los resultados de primera lectura positivos
				StringBuffer sb = new StringBuffer();
				sb.append("SELECT cnde FROM " + Chdetaentcito.class.getName()
						+ "   cnde WHERE  cnde.comp_id.hdelidentregacitol = ? "
						+ " AND cnde.hdecetapa = ?  AND cnde.hdecresultado = ? ");

				parametros_pos.add(idListado);
				parametros_pos.add(IConstantes.CITOLOGIA_REG_LECTURA_UNO);
				parametros_pos.add(IConstantes.POSITIVO);

				resultList_pos = this.getHibernateTemplate().find(sb.toString(), parametros_pos.toArray());

				if (!resultList_pos.isEmpty()) {
					resultList_total.addAll(resultList_pos);
				}

				// Se selecciona el 10% de los resultados de primera lectura negativos
				StringBuffer sb_neg = new StringBuffer();
				sb_neg.append("SELECT cnde FROM " + Chdetaentcito.class.getName()
						+ "   cnde WHERE  cnde.comp_id.hdelidentregacitol = ? "
						+ " AND cnde.hdecetapa = ?  AND cnde.hdecresultado = ? ");

				parametros_neg.add(idListado);
				parametros_neg.add(IConstantes.CITOLOGIA_REG_LECTURA_UNO);
				parametros_neg.add(IConstantes.NEGATIVO);

				resultList_neg = this.getHibernateTemplate().find(sb_neg.toString(), parametros_neg.toArray());

				if (!resultList_neg.isEmpty()) {

					double cant = resultList_neg.size() * 0.1;
					BigDecimal toIndex = new BigDecimal(cant).setScale(0, BigDecimal.ROUND_CEILING);
					resultList_total.addAll(resultList_neg.subList(0, toIndex.intValue()));
				}

				if (!resultList_total.isEmpty()) {

					for (Chdetaentcito detalleEntrega : (List<Chdetaentcito>) resultList_total) {
						detalleEntrega.setHdecetapa(IConstantes.CITOLOGIA_ENV_LECTURA_DOS);
						StringBuffer sb1 = new StringBuffer();
						sb1.append("SELECT cnci FROM " + Cncitologi.class.getName()
								+ "   cnci WHERE  cnci.ccinconsec = ? ");
						detalleEntrega.setCncitologi((Cncitologi) this.getHibernateTemplate()
								.find(sb1.toString(), detalleEntrega.getComp_id().getHdencitologia()).get(0));

					}

				}

			}

		} catch (HibernateException e) {
			throw new ModelException("Error consultando citologias segunda lectura:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando citologias segunda lectura:" + e.getMessage(), e);
		}

		return resultList_total;
	}

	/**
	 * @param entregacitol
	 */
	public void saveEnvioCitologias(Chentregacitol entregacitol) throws ModelException {

		try {
			this.getHibernateTemplate().saveOrUpdate(entregacitol);
		} catch (HibernateException e) {
			throw new ModelException("Error actualizando informacion envio citologias:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error actualizando informacion envio citologias:" + e.getMessage(), e);
		}

	}

	/**
	 * obtener una lista citologias entregradas en un rango de fehca.
	 */
	public List getCitologiasEntregadas(Date fechaInicial, Date fechaFin, int codCentro) throws ModelException {

		java.util.List resultList = null;

		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		String fechaI = dateFormat.format(fechaInicial.getTime()) + HORA_INICIAL;
		String fechaF = dateFormat.format(fechaFin.getTime()) + HORA_FINAL;
		try {
			StringBuffer sb = new StringBuffer();

			sb.append(
					"SELECT chec.heclidentificador NUM_LISTADO,cnci.ccinconsec ID_CITOLOGIA, cnci.ccidfeccit FECHA_TOMA "
							+ ", cnci.ccictipide||' '|| cnci.ccianumide IDENTIFICACION, cnci.ccicprinom||' '||cnci.ccicsegnom||' '||cnci.ccicpriape||' '||cnci.ccicsegape USUARIA "
							+ ", chlc.hlcdfecregistr FECHA_ENTREGA, cnci.ccinnumero  NUM_CITOLOGIA "
							+ "FROM clinico.Cncitologi cnci, historia.Chdetaentcito chdec, historia.chentregacitol chec, historia.chlibrocitol chlc  WHERE (cnci.ccidfecreg BETWEEN TO_DATE( ? ,'dd/mm/yyyy hh24:mi') AND TO_DATE( ? ,'dd/mm/yyyy hh24:mi') )  AND cnci.ccinclinic = ? "
							+ "   AND cnci.ccinconsec IN ( SELECT chde.hdencitologia FROM historia.Chdetaentcito chde WHERE chde.hdencitologia = cnci.ccinconsec ) "
							+ "   AND cnci.ccinconsec = chdec.hdencitologia AND chdec.hdelidentregacitol = chec.heclidentificador "
							+ "   AND chlc.hlcnconsec = cnci.ccinconsec ");

			Query sqlquery = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
					.createQuery(sb.toString());
			sqlquery.setParameter(0, fechaI);
			sqlquery.setParameter(1, fechaF);
			sqlquery.setParameter(2, codCentro);
			resultList = sqlquery.list();

		} catch (HibernateException e) {
			throw new ModelException("Error consultando lista citologias entregradas:" + e.getMessage() + " Causa: "
					+ e.getCause().getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando lista citologias entregradas:" + e.getMessage() + " Causa: "
					+ e.getCause().getMessage(), e);
		}

		return resultList;
	}

	/**
	 * obtener una lista de Patologos para lectura.
	 */
	public List<Chproflect> getPatologosLecturas(Chproflect profesionalLectura) throws ModelException {

		java.util.List resultList = null;
		try {

			StringBuffer sb = new StringBuffer();
			sb.append("SELECT a FROM Chproflect AS a WHERE rownum > 0 ");

			List param = new ArrayList();

			if (profesionalLectura != null) {
				if (profesionalLectura.getComp_id().getHplnclinlect() != null) {
					sb.append(" AND a.comp_id.hplnclinlect = ? ");
					param.add(profesionalLectura.getComp_id().getHplnclinlect());
				}

				if (profesionalLectura.getComp_id().getHplncodprofes() != null) {
					sb.append(" AND a.comp_id.hplncodprofes = ? ");
					param.add(profesionalLectura.getComp_id().getHplncodprofes());
				}
			}

			sb.append(" ORDER BY a.comp_id.hplnclinlect ");
			resultList = this.getHibernateTemplate().find(sb.toString(), param.toArray());

			if (!resultList.isEmpty()) {

				for (Chproflect profLect : (List<Chproflect>) resultList) {

					List param1 = new ArrayList();
					StringBuffer sb1 = new StringBuffer();
					sb1.append("SELECT cppr FROM " + Cpprofesio.class.getName()
							+ "   cppr WHERE  cppr.id.cpfncodigo = ? AND cppr.id.cpfnclinic = ?");

					param1.add(profLect.getComp_id().getHplncodprofes());
					param1.add(profLect.getHplnclinprof());

					profLect.setCpprofesio(
							(Cpprofesio) this.getHibernateTemplate().find(sb1.toString(), param1.toArray()).get(0));

					StringBuffer sb2 = new StringBuffer();
					sb2.append("SELECT cpcl FROM " + Cpclinica.class.getName() + " cpcl WHERE  cpcl.cclncodigo = ? ");
					profLect.setCentroProfesional(((Cpclinica) this.getHibernateTemplate()
							.find(sb2.toString(), profLect.getHplnclinprof()).get(0)).getCclcnombre());

					StringBuffer sb3 = new StringBuffer();
					sb3.append("SELECT cpcl FROM " + Cpclinica.class.getName() + " cpcl WHERE  cpcl.cclncodigo = ? ");

					if (this.getHibernateTemplate().find(sb3.toString(), profLect.getComp_id().getHplnclinlect())
							.size() != 0) {
						profLect.setCentroLectura(((Cpclinica) this.getHibernateTemplate()
								.find(sb3.toString(), profLect.getComp_id().getHplnclinlect()).get(0)).getCclcnombre());
					} else {
						profLect.setCentroLectura("NACIONAL");
					}

				}

			}

		} catch (HibernateException e) {
			throw new ModelException(
					"Error consultando Profesionales" + e.getMessage() + " Causa: " + e.getCause().getMessage(), e);
		} catch (Exception e) {
			throw new ModelException(
					"Error consultando Profesionales" + e.getMessage() + " Causa: " + e.getCause().getMessage(), e);
		}
		return resultList;
	}

	/**
	 * Obtener lista Clinicas.
	 */
	public List getClinicas() throws ModelException {
		java.util.List resultList = null;
		try {

			StringBuffer sb = new StringBuffer();
			sb.append("SELECT a FROM " + Cpclinica.class.getName()
					+ " AS a WHERE a.cclcestado = 'VG' ORDER BY a.cclcnombre ");
			resultList = this.getHibernateTemplate().find(sb.toString());

		} catch (HibernateException e) {
			throw new ModelException("Error consultando clinica:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando clinica:" + e.getMessage(), e);
		}
		return resultList;
	}

	/**
	 * @param codclin
	 * @return resultList
	 * @throws ModelException
	 */
	public List<Cpprofesio> getListaProfesionalesXClinica(Integer codclin) throws ModelException {
		List<Cpprofesio> resultList = null;

		try {

			StringBuffer sb = new StringBuffer();
			sb.append(" SELECT cppr FROM " + Cpprofesio.class.getName()
					+ " cppr  WHERE cppr.id.cpfnclinic = ? AND cppr.cpfcestado = 'VG' ORDER BY cppr.cpfcnombre ");
			resultList = (List<Cpprofesio>) this.getHibernateTemplate().find(sb.toString(), codclin);
			return resultList;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Lista de Profesionales por clinica:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Lista de Profesionales por clinica:" + e.getMessage(), e);
		}

	}

	/**
	 * @param profLectura
	 */
	public void saveProfesionalLectura(Chproflect profLectura) throws ModelException {

		try {
			this.getHibernateTemplate().saveOrUpdate(profLectura);
		} catch (HibernateException e) {
			throw new ModelException("Error ingresar o actualizar profesional para lectura:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error ingresar o actualizar profesional para lectura:" + e.getMessage(), e);
		}

	}

	/**
	 * obtener una lista de seguimiento de citologias en un rango de fehca.
	 */
	public List getSeguimientoCitologias(Date fechaInicial, Date fechaFin, Integer codclinica) throws ModelException {

		java.util.List resultList = null;

		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		String fechaI = dateFormat.format(fechaInicial.getTime()) + HORA_INICIAL;
		String fechaF = dateFormat.format(fechaFin.getTime()) + HORA_FINAL;

		try {
			StringBuffer sb = new StringBuffer();

			sb.append("SELECT chec.heclidentificador NUM_LISTADO " + ", chec.hecdfechaenvio FECHA_EVIO_LECT1 "
					+ ", chec.hecnlablectura1 "
					+ ", NVL((SELECT cppr.cpfcnombre FROM clinico.cpprofesio cppr WHERE cppr.cpfncodigo = chec.hecnlablectura1 AND rownum = 1 ),'--') PATOLOGO_LECT1 "
					+ ", chec.hecdfechaenvio2 FECHA_EVIO_LECT2 " + ", chec.hecnlablectura2 "
					+ ", NVL((SELECT cppr.cpfcnombre FROM clinico.cpprofesio cppr WHERE cppr.cpfncodigo = chec.hecnlablectura2 AND rownum = 1 ),'--') PATOLOGO_LECT2 "
					+ ", chec.hecnclinica COD_CENTRO_LISTADO "
					+ ", NVL((SELECT cpcl.cclcnombre FROM clinico.cpclinica cpcl WHERE cpcl.cclncodigo = chec.hecnclinica AND cpcl.cclcestado = 'VG' ),'--') CENTRO_LISTADO "
					+ ", cnci.ccinconsec ID_CITOLOGIA, cnci.ccidfeccit FECHA_TOMA  "
					+ ", cnci.ccictipide||' '|| cnci.ccianumide IDENTIFICACION, cnci.ccicprinom||' '||cnci.ccicsegnom||' '||cnci.ccicpriape||' '||cnci.ccicsegape USUARIA "
					+ ", DECODE(chde.hdecetapa ,'ELU','Enviado Primera Lectura','RLU','Resultados Primera Lectura','ELD','Enviado Segunda Lectura','RLD','Resultados Segunda Lectura','--') ETAPA "
					+ ", DECODE(chde.hdecresultado ,'P','POSITIVO','N','NEGATIVO','NR','NO RECIBIDO','--') RES_LECT1 "
					+ ", DECODE(chde.hdecresultado2 ,'P','POSITIVO','N','NEGATIVO','NR','NO RECIBIDO','--') RES_LECT2, cnci.ccinnumero NUM_CITOLOGIA "
					+ "FROM historia.chentregacitol chec, historia.chdetaentcito chde , clinico.Cncitologi cnci  "
					+ "WHERE (cnci.ccidfecreg  BETWEEN TO_DATE( ? ,'dd/mm/yyyy hh24:mi') AND TO_DATE( ? ,'dd/mm/yyyy hh24:mi') ) "
					+ "AND cnci.ccinconsec = chde.hdencitologia AND chde.hdelidentregacitol = chec.heclidentificador AND cnci.ccinclinic = ? "
					+ "ORDER BY NUM_LISTADO DESC, USUARIA ASC");

			Query sqlquery = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
					.createQuery(sb.toString());
			sqlquery.setParameter(0, fechaI);
			sqlquery.setParameter(1, fechaF);
			sqlquery.setParameter(2, codclinica);
			resultList = sqlquery.list();

		} catch (HibernateException e) {
			throw new ModelException("Error consultando lista de seguimiento de citologias:" + e.getMessage()
					+ " Causa: " + e.getCause().getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando lista de seguimiento de citologias:" + e.getMessage()
					+ " Causa: " + e.getCause().getMessage(), e);
		}

		return resultList;
	}

	// FIXME FIN SEGUIMIENTO CITOLOGIAS

	/**
	 * @param dispositivo
	 * @throws ModelException
	 */
	public void saveAplicacionRetiroDispositivo(final Chdispoaplic dispositivo,
			final List<Cfdetafactura> listaServicios) throws ModelException {
		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {
					session.saveOrUpdate(dispositivo);
					if (listaServicios != null && !listaServicios.isEmpty()) {
						StringBuffer sb = new StringBuffer();
						sb.append(" select chco from Chconsulta"
								+ " chco  where chco.hcolnumero = :numeroCirugia  AND chco.hcoctiposervi = :tipoServicio ");
						Query query = session.createQuery(sb.toString());
						query.setParameter("numeroCirugia", dispositivo.getId().getHdalconsulta());
						query.setParameter("tipoServicio", IConstantes.TIPO_CONSULTA);

						Chconsulta consultaActual = (Chconsulta) query.uniqueResult();

						for (Cfdetafactura servicio : listaServicios) {
							if (servicio.isCheckServiciosAsociados()) {
								if (servicio.getTipoHistoria() == IConstantes.HISTORIA_PROCEDIMIENTO_ASOCIADO) {
									if (dispositivo.getHdacreaproins().equals("S")) {
										consultaActual.setHconprocasoc(servicio.getCdfnconsuclin());
									}
								} else if (servicio.getTipoHistoria() == IConstantes.HISTORIA_ANTICONCEPCION_RETIRO) {
									if (dispositivo.getHdacreaproret().equals("S")) {
										consultaActual.setHconproasoret(servicio.getCdfnconsuclin());
									}
								}
							} else {
								if (servicio.getTipoHistoria() == IConstantes.HISTORIA_PROCEDIMIENTO_ASOCIADO) {
									if (dispositivo.getHdacreaproins().equals("N")) {
										consultaActual.setHconprocasoc(null);
									}
								} else if (servicio.getTipoHistoria() == IConstantes.HISTORIA_ANTICONCEPCION_RETIRO) {
									if (dispositivo.getHdacreaproret().equals("N")) {
										consultaActual.setHconproasoret(null);
									}
								}
							}
						}

						session.saveOrUpdate(consultaActual);

					}
					return dispositivo;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Aplicacion -  Retiro Dispositivo:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Aplicacion -  Retiro Dispositivo:" + e.getMessage(), e);
		}
	}

	/**
	 * @param numeroConsulta
	 * @return
	 * @throws ModelException
	 */
	public Chdispoaplic getAplicacionRetiroDispositivo(Long numeroConsulta) throws ModelException {
		List<Chdispoaplic> resultList = null;
		List parametros = new ArrayList();

		try {
			if (numeroConsulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chda from " + Chdispoaplic.class.getName()
						+ " chda  where chda.id.hdalconsulta = ? AND chda.id.hdactiposerv = ? ");
				parametros.add(numeroConsulta);
				parametros.add(IConstantes.TIPO_CONSULTA);

				resultList = (List<Chdispoaplic>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Aplicacion -  Retiro Dispositivo:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Aplicacion -  Retiro Dispositivo:" + e.getMessage(), e);
		}

	}

	/**
	 * @param username
	 * @return
	 * @throws ModelException
	 */
	public List<Chplantilla> getPlantillaUsuario(String username) throws ModelException {
		List<Chplantilla> resultList = null;
		List parametros = new ArrayList();

		try {
			if (username != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chpl from " + Chplantilla.class.getName()
						+ " chpl  where chpl.id.hplcusuarplant = ? ");
				parametros.add(username);

				resultList = (List<Chplantilla>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList;
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Plantillas - Usuario:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Plantillas - Usuario:" + e.getMessage(), e);
		}

	}

	public List<Chplantilla> getPlantillaUsuarioCriterios(String username, Chplantilla plantilla)
			throws ModelException {
		List<Chplantilla> resultList = null;
		List parametros = new ArrayList();

		try {
			if (username != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chpl from " + Chplantilla.class.getName()
						+ " chpl  where chpl.id.hplcusuarplant = ? ");
				parametros.add(username);

				if (plantilla != null) {

					if (plantilla.getHplcnombrplant() != null && !plantilla.getHplcnombrplant().equals("")) {

						sb.append(" AND upper(chpl.hplcnombrplant) like upper(?) ");
						parametros.add("%" + plantilla.getHplcnombrplant() + "%");
					}

					if (plantilla.getHplcdescripcio() != null && !plantilla.getHplcdescripcio().equals("")) {

						sb.append(" AND upper(chpl.hplcdescripcio) like upper(?) ");
						parametros.add("%" + plantilla.getHplcdescripcio() + "%");
					}

				}

				resultList = (List<Chplantilla>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList;
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Plantillas - Usuario:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Plantillas - Usuario:" + e.getMessage(), e);
		}

	}

	/**
	 * @return
	 * @throws ModelException
	 */
	public List<Chcirugprogr> getConsultasClinicasXDia(final Date date, final Integer sala, final Integer codclin)
			throws ModelException {
		List<Chcirugprogr> pis = (List<Chcirugprogr>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				String DATE_FORMAT = "dd/MM/yyyy";
				SimpleDateFormat sdf = new SimpleDateFormat(DATE_FORMAT);

				String diaCons = sdf.format(date);

				StringBuffer sb = new StringBuffer();
				sb.append("select chcp from ");
				sb.append(Chcirugprogr.class.getName()).append(" chcp ");
				sb.append(" where to_char(chcp.hcpdfechacirug,'dd/MM/yyyy') = :diaCons ");
				sb.append(" and chcp.hcpcestado <> 'XX'");
				sb.append(" and chcp.hcpnsalainterv = :sala ");
				sb.append(" and chcp.hcpnclinica = :clinica ");
				sb.append(" order by  chcp.hcpdfechacirug , chcp.hcpnsalainterv ");
				String hql = sb.toString();

				Query query = session.createQuery(hql);

				query.setParameter("diaCons", diaCons);
				query.setParameter("clinica", codclin);
				query.setParameter("sala", sala);

				List<Chcirugprogr> lstusu;
				lstusu = query.list();

				for (Chcirugprogr usu : lstusu) {
					Chusuario usuario = usu.getHcplusuario();
					Hibernate.initialize(usuario);
				}

				// TODO: SE TIENE QUE REALIZAR EL REPORTE CON TODAS LAS CIRUGIAS PROGRAMADAS

				/*
				 * select * from Chcirugprogr chcp , CHDETACIRPRO chdc where
				 * to_char(chcp.hcpdfechacirug,'dd/MM/yyyy') = :diaCons and chcp.hcpcestado <>
				 * 'XX' and chcp.hcpnsalainterv = :sala and chcp.hcpnclinica = :clinica and
				 * chdc.HDCLCONSUPRINC = chcp.HCPLNUMERO order by chcp.hcpdfechacirug ,
				 * chcp.hcpnsalainterv
				 */

				return lstusu;
			}
		});
		return pis;
	}

	/**
	 * @param codclin
	 * @return
	 * @throws ModelException
	 */
	public List getSalasEspera(Integer codclin, String userName) throws ModelException {
		java.util.List resultList = null;
		try {
			if (userName != null && !userName.equals("") && codclin != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" SELECT DISTINCT cpse.cslnnumero,cpse.cslcdescri ");
				sb.append("  FROM clinico.cpsalaespe cpse, clinico.cpusuxsala cpus ");
				sb.append(" WHERE cpse.cslnclinic = cpus.cusnclinic and cpse.cslnnumero = cpus.cusnsalesp ");
				sb.append(" AND cslnclinic = :cslnclinic and cpus.cuscusuar = :cuscusuar ");
				sb.append(" order by cpse.cslnnumero ");

				Query query = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
						.createQuery(sb.toString());
				query.setParameter("cslnclinic", codclin);
				query.setParameter("cuscusuar", userName);
				resultList = query.list();
			}
			if (resultList.size() != 0)
				return resultList;
		} catch (HibernateException e) {
			throw new ModelException("Error consultando salas de espera:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando salas de espera:" + e.getMessage(), e);
		}
		return null;
	}

	/**
	 * @param codclin
	 * @param codmed
	 * @return
	 * @throws ModelException
	 */
	public List getServiciosPorProfesional(Integer codclin, Integer codmed, String wprio) throws ModelException {
		List resultList = null;
		List parametros = new ArrayList();

		try {
			if (codclin != null && codmed != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select cptp.ctacservic, cpse.csvcnombre from " + "Clinico.Cptarxprof "
						+ " cptp , Clinico.Cpservicio cpse ");
				sb.append(
						"  where cpse.csvccodigo = cptp.ctacservic and cptp.ctanclinic = ?  and cptp.ctanprofes = ?  ");

				if (wprio != null && wprio.equals("S")) {
					sb.append(" and cptp.ctacpriori = 'S' ");
				} else if (wprio != null && wprio.equals("N")) {
					sb.append(" and (cptp.ctacpriori !=  'S' OR cptp.ctacpriori is null )");
				}

				Query query = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
						.createQuery(sb.toString());
				query.setParameter(0, codclin);
				query.setParameter(1, codmed);

				resultList = query.list();

				if (!resultList.isEmpty()) {
					return resultList;
				}

				return null;
			} else {
				return null;
			}

		} catch (HibernateException e) {
			throw new ModelException("Error Obteniendo Servicios Por Profesional :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Obteniendo Servicios Por Profesional:" + e.getMessage(), e);
		}

	}

	/**
	 * @param codclin
	 * @param codmed
	 * @return
	 * @throws ModelException
	 */
	public List getServiciosPorProfesionalXContrato(Integer codclin, BigDecimal codmed, Cpservicio servicio,
			Integer codigocontrato) throws ModelException {
		List resultList = null;
		List parametros = new ArrayList();

		try {
			if (codclin != null && codmed != null && servicio != null) {
				StringBuffer sb = new StringBuffer();

				if (codigocontrato.intValue() == 1) {
					sb.append(" select cpdl.CDLCSERVIC, cpse.CSVCNOMBRE, cpdl.CDLAVALSER ");
					sb.append(" from CLINICO.CPLISTPREC cplp, CLINICO.CPDETALIPR cpdl, CLINICO.CPSERVICIO cpse ");
					sb.append(
							" where cpse.CSVCCODIGO = cpdl.CDLCSERVIC and  cplp.CLPNNUMERO = cpdl.CDLNNUMERO and cpdl.CDLNCLINIC = :codclin and cpdl.CDLCINTEXT = 'I' ");
					sb.append(" and cpse.csvntipcon = :wtipocon ");
					sb.append(
							" and cplp.CLPNNUMERO = (select unique(CCNNLISTPREC) from clinico.cpcontrato where CCNNNUMERO = :wcontra and CCNNCLINIC = :codclin) ");
					sb.append(
							" and cpdl.CDLCSERVIC in (select cptp.ctacservic from Clinico.Cptarxprof cptp  where  cptp.ctanclinic = :codclin and cptp.ctanprofes = :codmed) ");

				} else {
					sb.append(" select cpsc.CSCCCODISERV, cpse.CSVCNOMBRE, cpsc.CSCNVALSER ");
					sb.append(" from clinico.CPCONTRATO cpco, clinico.CPSERVXCONT cpsc, clinico.CPSERVICIO cpse ");
					sb.append(" where cpse.CSVCCODIGO = cpsc.CSCCCODISERV ");
					sb.append(" and  cpco.CCNNNUMERO = cpsc.CSCNNUMECONT ");
					sb.append(" and cpco.CCNNCLINIC = cpsc.CSCNCLINICA ");
					sb.append(" and cpco.CCNNCLINIC = :codmed and cpsc.CSCCINTREXTR = 'I' ");
					sb.append(" and cpse.csvntipcon = :wtipocon ");
					sb.append(
							" and cpsc.CSCCCODISERV in (select cptp.ctacservic from Clinico.Cptarxprof cptp  where  cptp.ctanclinic = :codclin and cptp.ctanprofes = :codmed) ");
					sb.append(" and cpco.CCNNNUMERO =  :wcontra ");

				}

				Query query = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
						.createQuery(sb.toString());
				query.setParameter("codclin", codclin);
				query.setParameter("codmed", codmed);
				query.setParameter("wcontra", codigocontrato);
				query.setParameter("wtipocon", servicio.getCsvntipcon());

				resultList = query.list();

				if (!resultList.isEmpty()) {
					return resultList;
				}

				return null;
			} else {
				return null;
			}

		} catch (HibernateException e) {
			throw new ModelException("Error Obteniendo Servicios Por Profesional :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Obteniendo Servicios Por Profesional:" + e.getMessage(), e);
		}

	}
	
	/**
	 * @param wcodclin
	 * @return
	 * @throws ModelException
	 */
	public List<Chprioxmedi> getPrioridadProfesional(Integer wcodclin) throws ModelException {
		List<Chprioxmedi> resultList = null;
		List parametros = new ArrayList();

		try {
			if (wcodclin != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chpm from " + Chprioxmedi.class.getName()
						+ " chpm  where chpm.id.hpmncodigclini = ? ");
				parametros.add(wcodclin);

				resultList = (List<Chprioxmedi>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList;
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Prioridad Profesional:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Prioridad Profesional:" + e.getMessage(), e);
		}

	}

	/**
	 * @param wclipro
	 * @param wcodpro
	 * @return
	 * @throws ModelException
	 */
	public Integer getSalaXservicioProfesional(Integer wclipro, String wcodpro) throws ModelException {
		List<Integer> resultList = null;
		List parametros = new ArrayList();

		try {
			if (wclipro != null && wcodpro != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select cpus.id.cusnsalesp from " + Cpusuxsala.class.getName()).append(" cpus ");
				sb.append("  where cpus.id.cusnclinic = ? and cpus.id.cuscusuar = ? ");

				parametros.add(wclipro);
				parametros.add(wcodpro);

				resultList = (List<Integer>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Sala X servicio Profesional:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Sala X servicio Profesional:" + e.getMessage(), e);
		}

	}

	/**
	 * @param cervix
	 * @throws ModelException
	 */
	public void saveCuestionarioCervix(Chcancecervi cervix) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(cervix);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Cuestionario Cervix :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Cuestionario Cervix :" + e.getMessage(), e);
		}
	}

	/**
	 * @param numeroConsulta
	 * @param tipoServicio
	 * @return
	 * @throws ModelException
	 */
	public Chcancecervi getCuestionarioCervix(Long numeroConsulta, String tipoServicio) throws ModelException {
		List<Chcancecervi> resultList = null;
		List parametros = new ArrayList();
		try {
			if (numeroConsulta != null && tipoServicio != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chcc from " + Chcancecervi.class.getName()
						+ " chcc  where chcc.id.hcclconsulta = ? AND chcc.id.hccctiposerv = ? ");
				parametros.add(numeroConsulta);
				parametros.add(tipoServicio);

				resultList = (List<Chcancecervi>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Cuestionario Cervix:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Cuestionario Cervix:" + e.getMessage(), e);
		}

	}

	// M�todos Privados

	private String cfpagnod(Session session, Integer wclipro, BigDecimal wcodpro, String wcodser) {

		/** Variable object. */
		boolean wok_funcion;
		wok_funcion = true;
		String wpagnom = null;
		String wconnom = null;
		String wdestaj = null;
		String wsumcuo = null;

		List resultList = null;
		Cptipocont tipocon = null;

		StringBuffer sb6 = new StringBuffer();
		sb6.append(" select cpti  from " + Cpprofesio.class.getName()).append(" cppr, ");
		sb6.append(Cptipocont.class.getName()).append(" cpti ");
		sb6.append(" where cpti.ctcnnumero = cppr.cpfntipcon ");
		sb6.append(" AND cppr.id.cpfnclinic = :cpfnclinic ");
		sb6.append(" AND cppr.id.cpfncodigo = :cpfncodigo ");
		Query query6 = session.createQuery(sb6.toString());
		query6.setParameter("cpfnclinic", wclipro);
		query6.setParameter("cpfncodigo", wcodpro);
		resultList = query6.list();

		if (!resultList.isEmpty()) {
			tipocon = (Cptipocont) resultList.get(0);
		} else {
			wok_funcion = false;
		}

		if (tipocon != null) {
			wpagnom = tipocon.getCtccpagnom();
			wconnom = tipocon.getCtccconnom();
			wdestaj = tipocon.getCtccdestaj();
		}

		if (wok_funcion) {
			if (wpagnom != null && wpagnom.equals("N")) {
				return ("D");
			}
			if (wdestaj != null && wdestaj.equals("N")) {
				return ("N");
			}
			if (wconnom != null && wconnom.equals("N")) {
				return ("D");
			}

			List resultList2 = null;

			StringBuffer sb7 = new StringBuffer();
			sb7.append("select cpti.ctlcsumcuo  from " + Cpservicio.class.getName()).append(" cpse, ");
			sb7.append(Cptipconcl.class.getName()).append(" cpti ");
			sb7.append(" where  cpti.ctlncodigo = cpse.csvntipcon ");
			sb7.append(" AND  cpse.csvccodigo = :csvccodigo ");
			Query query7 = session.createQuery(sb7.toString());

			query7.setParameter("csvccodigo", wcodser);
			resultList2 = query7.list();

			if (!resultList2.isEmpty()) {
				wsumcuo = (String) resultList2.get(0);
				if (wsumcuo != null && wsumcuo.equals("S")) {
					return ("N");
				} else {
					// TODO: TEMPORAL
					if (wcodser != null && wcodser.equals("898001.0") && wcodser.equals("S898001.0")
							&& wclipro != null) {
						if (wclipro.equals(1) || wclipro.equals(2) || wclipro.equals(6)) {
							return ("N");
						}
					}
					return ("D");
				}
			} else {
				wok_funcion = false;
			}

		}
		return ("O");
	}

	private void generarHonorariosProfesional(Session session, Cnconsclin consulta, Chconsulta consultaActual,
			String userName, String codigoProfesional) {
		// Ingresamos los honorarios del profesional

		Cnprofxcon honorarios = null;
		Cptarxprof tarifas = null;
		Cpcontrato contrato = null;
		Integer wswcont = null;
		BigDecimal wtarpar = null;
		BigDecimal wtarcre = null;

		Cpprofesio profesional = null;
		String wregnod = null;
		BigDecimal wvalpag = null;
		BigDecimal wvalser = null;
		wvalpag = new BigDecimal("0");

		if (consultaActual != null && userName != null && consultaActual.getHconclinica() != null) {
			StringBuffer sb4 = new StringBuffer();
			if (codigoProfesional == null) {
				sb4.append(" select cppr from " + Cpprofesio.class.getName()
						+ " cppr  where cppr.id.cpfnclinic = :cpfnclinic "
						+ " and cppr.id.cpfncodigo = (select cppu.curnprofes from Cpusuario cppu where cppu.curcusuari = :curcusuari ) ");
				Query query4 = session.createQuery(sb4.toString());
				query4.setParameter("cpfnclinic", consultaActual.getHconclinica());
				query4.setParameter("curcusuari", userName);

				profesional = (Cpprofesio) query4.uniqueResult();

			} else {
				sb4.append(" select cppr from " + Cpprofesio.class.getName()
						+ " cppr  where cppr.id.cpfnclinic = :cpfnclinic " + " and cppr.id.cpfncodigo = :cpfncodigo ");
				Query query4 = session.createQuery(sb4.toString());
				query4.setParameter("cpfnclinic", consultaActual.getHconclinica());
				query4.setParameter("cpfncodigo", codigoProfesional);

				profesional = (Cpprofesio) query4.uniqueResult();

			}

		}

		if (consulta != null && profesional != null) {

			StringBuffer sb5 = new StringBuffer();
			sb5.append(" select cnpc from " + Cnprofxcon.class.getName()
					+ " cnpc  where cnpc.id.cpnnconcli = :cpnnconcli AND cnpc.id.cpnnprofes = :cpnnprofes  ");
			Query query5 = session.createQuery(sb5.toString());
			query5.setParameter("cpnnconcli", consulta.getCconnumero());
			query5.setParameter("cpnnprofes", profesional.getId().getCpfncodigo());

			honorarios = (Cnprofxcon) query5.uniqueResult();

		}

		if (consultaActual != null && profesional != null && profesional.getId() != null && consulta != null
				&& consulta.getCcocservic() != null) {

			StringBuffer sb6 = new StringBuffer();
			sb6.append(" SELECT cpta from " + Cptarxprof.class.getName()
					+ " cpta  WHERE cpta.id.ctanclinic = :ctanclinic ");
			sb6.append(" AND cpta.id.ctanprofes = :ctanprofes  ");
			sb6.append(" AND cpta.id.ctacservic = :ctacservic  ");
			Query query6 = session.createQuery(sb6.toString());
			query6.setParameter("ctanclinic", consultaActual.getHconclinica());
			query6.setParameter("ctanprofes", profesional.getId().getCpfncodigo());
			query6.setParameter("ctacservic", consulta.getCcocservic().getCsvccodigo());
			tarifas = (Cptarxprof) query6.uniqueResult();
		}

		if (consulta != null) {

			List lstConsulta;
			StringBuffer sb7 = new StringBuffer();
			sb7.append(" SELECT cpco from " + Cpcontrato.class.getName()).append(" cpco  ");
			sb7.append(" WHERE cpco.id.ccnnnumero = :ccnnnumero  ");
			sb7.append(" AND cpco.id.ccnnclinic = :ccnnclinic  ");
			Query query7 = session.createQuery(sb7.toString());
			query7.setParameter("ccnnnumero", consulta.getCconcontra());
			query7.setParameter("ccnnclinic", consulta.getCconclinic());
			lstConsulta = query7.list();

			if (lstConsulta != null && !lstConsulta.isEmpty()) {
				contrato = (Cpcontrato) lstConsulta.get(0);
			}
		}

		if (tarifas != null && contrato != null) {
			wswcont = contrato.getCcnnswcont();

			wtarpar = tarifas.getCtaatarpar();

			wtarcre = tarifas.getCtaatarcre();

			wvalser = consulta.getCcoavalser();

			if (wswcont == 0 || contrato.getId().getCcnnnumero().intValue() == 1000) {
				wvalpag = (wtarpar);
			} else {
				wvalpag = (wtarcre);
			}

			if (wvalpag != null && wvalpag.floatValue() < 1) {
				if (wvalser != null) {
					wvalpag = wvalser.multiply(wvalpag);
				}

			}

		}

		if (honorarios == null) {
			honorarios = new Cnprofxcon();
		}
		Cptipocont tipocon;

		tipocon = null;
		boolean wok_funcion;
		wok_funcion = true;

		if (profesional != null) {
			wregnod = cfpagnod(session, profesional.getCpfnclinic(), profesional.getCpfncodigo(),
					consulta.getCcocservic().getCsvccodigo());
		}

		honorarios.setCpnnconcli(consulta.getCconnumero());
		if (profesional != null && profesional.getId() != null) {
			honorarios.setCpnnprofes(profesional.getId().getCpfncodigo());

			honorarios.setCpncregnod(wregnod);
			honorarios.setCpncmodnod(" ");
			honorarios.setCpnccalnod(" ");
			honorarios.setCpnctomnod(wregnod);
			honorarios.setCpncpagada("N");
			honorarios.setCpnavalpag(wvalpag);
			honorarios.setCpndfeccon(consulta.getCcodfeccon());
			honorarios.setCpndfecreg(new Date());
			honorarios.setCpndfecmod(null);
			honorarios.setCpndfeccal(null);
			honorarios.setCpncusureg(userName);
			honorarios.setCpncusumod(null);
			honorarios.setCpncusucal(null);
			honorarios.setCpnnclinic(consultaActual.getHconclinica());
			honorarios.setCpncestado(IConstantes.ESTADO_VIGENTE);
			session.saveOrUpdate(honorarios);

		}

	}

	private void generarHonorariosProfesionalVPH(Session session, Cnconsclin consulta, String userName,
			String codigoProfesional) {
		// Ingresamos los honorarios del profesional

		Cnprofxcon honorarios = null;
		Cptarxprof tarifas = null;
		Cpcontrato contrato = null;
		Integer wswcont = null;
		BigDecimal wtarpar = null;
		BigDecimal wtarcre = null;

		Cpprofesio profesional = null;
		String wregnod = null;
		BigDecimal wvalpag = null;
		BigDecimal wvalser = null;
		wvalpag = new BigDecimal("0");

		if (consulta != null && userName != null && consulta.getCconclinic() != null) {
			StringBuffer sb4 = new StringBuffer();
			if (codigoProfesional == null) {
				sb4.append(" select cppr from " + Cpprofesio.class.getName()
						+ " cppr  where cppr.id.cpfnclinic = :cpfnclinic "
						+ " and cppr.id.cpfncodigo = (select cppu.curnprofes from Cpusuario cppu where cppu.curcusuari = :curcusuari ) ");
				Query query4 = session.createQuery(sb4.toString());
				query4.setParameter("cpfnclinic", consulta.getCconclinic());
				query4.setParameter("curcusuari", userName);

				profesional = (Cpprofesio) query4.uniqueResult();

			} else {
				sb4.append(" select cppr from " + Cpprofesio.class.getName()
						+ " cppr  where cppr.id.cpfnclinic = :cpfnclinic " + " and cppr.id.cpfncodigo = :cpfncodigo ");
				Query query4 = session.createQuery(sb4.toString());
				query4.setParameter("cpfnclinic", consulta.getCconclinic());
				query4.setParameter("cpfncodigo", codigoProfesional);

				profesional = (Cpprofesio) query4.uniqueResult();

			}

		}

		if (consulta != null && profesional != null) {

			StringBuffer sb5 = new StringBuffer();
			sb5.append(" select cnpc from " + Cnprofxcon.class.getName()
					+ " cnpc  where cnpc.id.cpnnconcli = :cpnnconcli AND cnpc.id.cpnnprofes = :cpnnprofes  ");
			Query query5 = session.createQuery(sb5.toString());
			query5.setParameter("cpnnconcli", consulta.getCconnumero());
			query5.setParameter("cpnnprofes", profesional.getId().getCpfncodigo());

			honorarios = (Cnprofxcon) query5.uniqueResult();

		}

		if (consulta != null && profesional != null && profesional.getId() != null && consulta != null
				&& consulta.getCcocservic() != null) {

			StringBuffer sb6 = new StringBuffer();
			sb6.append(" SELECT cpta from " + Cptarxprof.class.getName()
					+ " cpta  WHERE cpta.id.ctanclinic = :ctanclinic ");
			sb6.append(" AND cpta.id.ctanprofes = :ctanprofes  ");
			sb6.append(" AND cpta.id.ctacservic = :ctacservic  ");
			Query query6 = session.createQuery(sb6.toString());
			query6.setParameter("ctanclinic", consulta.getCconclinic());
			query6.setParameter("ctanprofes", profesional.getId().getCpfncodigo());
			query6.setParameter("ctacservic", consulta.getCcocservic().getCsvccodigo());
			tarifas = (Cptarxprof) query6.uniqueResult();
		}

		if (consulta != null) {

			List lstConsulta;
			StringBuffer sb7 = new StringBuffer();
			sb7.append(" SELECT cpco from " + Cpcontrato.class.getName()).append(" cpco  ");
			sb7.append(" WHERE cpco.id.ccnnnumero = :ccnnnumero  ");
			sb7.append(" AND cpco.id.ccnnclinic = :ccnnclinic  ");
			Query query7 = session.createQuery(sb7.toString());
			query7.setParameter("ccnnnumero", consulta.getCconcontra());
			query7.setParameter("ccnnclinic", consulta.getCconclinic());
			lstConsulta = query7.list();

			if (lstConsulta != null && !lstConsulta.isEmpty()) {
				contrato = (Cpcontrato) lstConsulta.get(0);
			}
		}

		if (tarifas != null && contrato != null) {
			wswcont = contrato.getCcnnswcont();

			wtarpar = tarifas.getCtaatarpar();

			wtarcre = tarifas.getCtaatarcre();

			wvalser = consulta.getCcoavalser();

			if (wswcont == 0 || contrato.getId().getCcnnnumero().intValue() == 1000) {
				wvalpag = (wtarpar);
			} else {
				wvalpag = (wtarcre);
			}

			if (wvalpag != null && wvalpag.floatValue() < 1) {
				if (wvalser != null) {
					wvalpag = wvalser.multiply(wvalpag);
				}

			}

		}

		if (honorarios == null) {
			honorarios = new Cnprofxcon();
		}
		Cptipocont tipocon;

		tipocon = null;
		boolean wok_funcion;
		wok_funcion = true;

		if (profesional != null) {
			wregnod = cfpagnod(session, profesional.getCpfnclinic(), profesional.getCpfncodigo(),
					consulta.getCcocservic().getCsvccodigo());
		}

		honorarios.setCpnnconcli(consulta.getCconnumero());
		if (profesional != null && profesional.getId() != null) {
			honorarios.setCpnnprofes(profesional.getId().getCpfncodigo());

			honorarios.setCpncregnod(wregnod);
			honorarios.setCpncmodnod(" ");
			honorarios.setCpnccalnod(" ");
			honorarios.setCpnctomnod(wregnod);
			honorarios.setCpncpagada("N");
			honorarios.setCpnavalpag(wvalpag);
			honorarios.setCpndfeccon(consulta.getCcodfeccon());
			honorarios.setCpndfecreg(new Date());
			honorarios.setCpndfecmod(null);
			honorarios.setCpndfeccal(null);
			honorarios.setCpncusureg(userName);
			honorarios.setCpncusumod(null);
			honorarios.setCpncusucal(null);
			honorarios.setCpnnclinic(consulta.getCconclinic());
			honorarios.setCpncestado(IConstantes.ESTADO_VIGENTE);
			session.saveOrUpdate(honorarios);

		}

	}

	private void generarHonorariosCitologiaConvencional(Session session, Cnconsclin consulta, String userName) {
		// Ingresamos los honorarios del profesional

		Cnprofxcon honorarios = null;
		Cptarxprof tarifas = null;
		Cpcontrato contrato = null;
		Integer wswcont = null;
		BigDecimal wtarpar = null;
		BigDecimal wtarcre = null;

		Cpprofesio profesional = null;
		String wregnod = null;
		BigDecimal wvalpag = null;
		BigDecimal wvalser = null;
		wvalpag = new BigDecimal("0");

		if (consulta != null && userName != null && consulta.getCconclinic() != null) {

			BigDecimal codigoCentroLectura = null;

			StringBuffer sb11 = new StringBuffer();
			sb11.append(" select max(chpl.comp_id.hplncodprofes) from " + Chproflect.class.getName()
					+ " chpl  where chpl.hplnclinprof = :hplnclinprof AND chpl.hplcestado  = 'VG' " + "  ");
			Query query11 = session.createQuery(sb11.toString());
			query11.setParameter("hplnclinprof", consulta.getCconclinic());
			codigoCentroLectura = (BigDecimal) query11.uniqueResult();

			if (codigoCentroLectura != null) {
				StringBuffer sb4 = new StringBuffer();
				sb4.append(" select cppr from " + Cpprofesio.class.getName()
						+ " cppr  where cppr.id.cpfnclinic = :cpfnclinic " + " and cppr.id.cpfncodigo = :codigo ");
				Query query4 = session.createQuery(sb4.toString());
				query4.setParameter("cpfnclinic", consulta.getCconclinic());
				query4.setParameter("codigo", codigoCentroLectura);

				profesional = (Cpprofesio) query4.uniqueResult();
			}

		}

		if (profesional != null) {

			if (consulta != null) {

				StringBuffer sb5 = new StringBuffer();
				sb5.append(" select cnpc from " + Cnprofxcon.class.getName()
						+ " cnpc  where cnpc.id.cpnnconcli = :cpnnconcli AND cnpc.id.cpnnprofes = :cpnnprofes  ");
				Query query5 = session.createQuery(sb5.toString());
				query5.setParameter("cpnnconcli", consulta.getCconnumero());
				query5.setParameter("cpnnprofes", profesional.getId().getCpfncodigo());

				honorarios = (Cnprofxcon) query5.uniqueResult();

			}

			if (consulta != null && profesional != null && profesional.getId() != null && consulta != null
					&& consulta.getCcocservic() != null) {

				StringBuffer sb6 = new StringBuffer();
				sb6.append(" SELECT cpta from " + Cptarxprof.class.getName()
						+ " cpta  WHERE cpta.id.ctanclinic = :ctanclinic ");
				sb6.append(" AND cpta.id.ctanprofes = :ctanprofes  ");
				sb6.append(" AND cpta.id.ctacservic = :ctacservic  ");
				Query query6 = session.createQuery(sb6.toString());
				query6.setParameter("ctanclinic", consulta.getCconclinic());
				query6.setParameter("ctanprofes", profesional.getId().getCpfncodigo());
				query6.setParameter("ctacservic", consulta.getCcocservic().getCsvccodigo());
				tarifas = (Cptarxprof) query6.uniqueResult();
			}

			if (consulta != null) {

				List lstConsulta;
				StringBuffer sb7 = new StringBuffer();
				sb7.append(" SELECT cpco from " + Cpcontrato.class.getName()).append(" cpco  ");
				sb7.append(" WHERE cpco.id.ccnnnumero = :ccnnnumero  ");
				sb7.append(" AND cpco.id.ccnnclinic = :ccnnclinic  ");
				Query query7 = session.createQuery(sb7.toString());
				query7.setParameter("ccnnnumero", consulta.getCconcontra());
				query7.setParameter("ccnnclinic", consulta.getCconclinic());
				lstConsulta = query7.list();

				if (lstConsulta != null && !lstConsulta.isEmpty()) {
					contrato = (Cpcontrato) lstConsulta.get(0);
				}
			}

			if (tarifas != null && contrato != null) {
				wswcont = contrato.getCcnnswcont();

				wtarpar = tarifas.getCtaatarpar();

				wtarcre = tarifas.getCtaatarcre();

				wvalser = consulta.getCcoavalser();

				if (wswcont == 0 || contrato.getId().getCcnnnumero().intValue() == 1000) {
					wvalpag = (wtarpar);
				} else {
					wvalpag = (wtarcre);
				}

				if (wvalpag != null && wvalpag.floatValue() < 1) {
					if (wvalser != null) {
						wvalpag = wvalser.multiply(wvalpag);
					}

				}

			}

			if (honorarios == null) {
				honorarios = new Cnprofxcon();
			}
			Cptipocont tipocon;

			tipocon = null;
			boolean wok_funcion;
			wok_funcion = true;

			wregnod = cfpagnod(session, profesional.getCpfnclinic(), profesional.getCpfncodigo(),
					consulta.getCcocservic().getCsvccodigo());

			honorarios.setCpnnconcli(consulta.getCconnumero());
			if (profesional != null && profesional.getId() != null) {
				honorarios.setCpnnprofes(profesional.getId().getCpfncodigo());

				honorarios.setCpncregnod(wregnod);
				honorarios.setCpncmodnod(" ");
				honorarios.setCpnccalnod(" ");
				honorarios.setCpnctomnod(wregnod);
				honorarios.setCpncpagada("N");
				honorarios.setCpnavalpag(wvalpag);
				honorarios.setCpndfeccon(consulta.getCcodfeccon());
				honorarios.setCpndfecreg(new Date());
				honorarios.setCpndfecmod(null);
				honorarios.setCpndfeccal(null);
				honorarios.setCpncusureg(userName);
				honorarios.setCpncusumod(null);
				honorarios.setCpncusucal(null);
				honorarios.setCpnnclinic(consulta.getCconclinic());
				honorarios.setCpncestado(IConstantes.ESTADO_VIGENTE);
				session.saveOrUpdate(honorarios);

			}

		}

	}

	private void generarHonorariosCitologiaBaseLiquida(Session session, Cnconsclin consulta, String userName,
			boolean aplicaCambio, BigDecimal codigoCentroLectura) {
		// Ingresamos los honorarios del profesional

		Cnprofxcon honorarios = null;
		Cptarxprof tarifas = null;
		Cpcontrato contrato = null;
		Integer wswcont = null;
		BigDecimal wtarpar = null;
		BigDecimal wtarcre = null;

		Cpprofesio profesional = null;
		String wregnod = null;
		BigDecimal wvalpag = null;
		BigDecimal wvalser = null;
		wvalpag = new BigDecimal("0");

		if (consulta != null && userName != null && consulta.getCconclinic() != null && codigoCentroLectura != null) {

			/*
			 * BigDecimal codigoCentroLectura = null;
			 * 
			 * 
			 * StringBuffer sb11 = new StringBuffer();
			 * sb11.append(" select chpl.comp_id.hplncodprofes from " +
			 * Chproflebl.class.getName() +
			 * " chpl  where chpl.comp_id.hplnclinica = :hplnclinprof AND chpl.hplcestado  = 'VG' "
			 * + "  "); Query query11 = session.createQuery(sb11.toString());
			 * query11.setParameter("hplnclinprof", consulta.getCconclinic());
			 * codigoCentroLectura = (BigDecimal)query11.uniqueResult();
			 */

			if (codigoCentroLectura != null) {
				StringBuffer sb4 = new StringBuffer();
				sb4.append(" select cppr from " + Cpprofesio.class.getName()
						+ " cppr  where cppr.id.cpfnclinic = :cpfnclinic " + " and cppr.id.cpfncodigo = :codigo ");
				Query query4 = session.createQuery(sb4.toString());
				query4.setParameter("cpfnclinic", consulta.getCconclinic());
				query4.setParameter("codigo", codigoCentroLectura);

				profesional = (Cpprofesio) query4.uniqueResult();
			}

		}

		if (profesional != null) {

			if (consulta != null) {

				StringBuffer sb5 = new StringBuffer();
				sb5.append(" select cnpc from " + Cnprofxcon.class.getName()
						+ " cnpc  where cnpc.id.cpnnconcli = :cpnnconcli AND cnpc.id.cpnnprofes = :cpnnprofes  ");
				Query query5 = session.createQuery(sb5.toString());
				query5.setParameter("cpnnconcli", consulta.getCconnumero());
				query5.setParameter("cpnnprofes", profesional.getId().getCpfncodigo());

				honorarios = (Cnprofxcon) query5.uniqueResult();

			}

			if (consulta != null && profesional != null && profesional.getId() != null && consulta != null
					&& consulta.getCcocservic() != null) {

				StringBuffer sb6 = new StringBuffer();
				sb6.append(" SELECT cpta from " + Cptarxprof.class.getName()
						+ " cpta  WHERE cpta.id.ctanclinic = :ctanclinic ");
				sb6.append(" AND cpta.id.ctanprofes = :ctanprofes  ");
				sb6.append(" AND cpta.id.ctacservic = :ctacservic  ");
				Query query6 = session.createQuery(sb6.toString());
				query6.setParameter("ctanclinic", consulta.getCconclinic());
				query6.setParameter("ctanprofes", profesional.getId().getCpfncodigo());
				query6.setParameter("ctacservic", consulta.getCcocservic().getCsvccodigo());
				tarifas = (Cptarxprof) query6.uniqueResult();
			}

			if (consulta != null) {

				List lstConsulta;
				StringBuffer sb7 = new StringBuffer();
				sb7.append(" SELECT cpco from " + Cpcontrato.class.getName()).append(" cpco  ");
				sb7.append(" WHERE cpco.id.ccnnnumero = :ccnnnumero  ");
				sb7.append(" AND cpco.id.ccnnclinic = :ccnnclinic  ");
				Query query7 = session.createQuery(sb7.toString());
				query7.setParameter("ccnnnumero", consulta.getCconcontra());
				query7.setParameter("ccnnclinic", consulta.getCconclinic());
				lstConsulta = query7.list();

				if (lstConsulta != null && !lstConsulta.isEmpty()) {
					contrato = (Cpcontrato) lstConsulta.get(0);
				}
			}

			if (tarifas != null && contrato != null) {
				wswcont = contrato.getCcnnswcont();

				wtarpar = tarifas.getCtaatarpar();

				wtarcre = tarifas.getCtaatarcre();

				wvalser = consulta.getCcoavalser();

				if (wswcont == 0 || contrato.getId().getCcnnnumero().intValue() == 1000) {
					wvalpag = (wtarpar);
				} else {
					wvalpag = (wtarcre);
				}

				if (wvalpag != null && wvalpag.floatValue() < 1) {
					if (wvalser != null) {
						wvalpag = wvalser.multiply(wvalpag);
					}

				}

			}

			if (honorarios == null) {
				honorarios = new Cnprofxcon();
			}
			Cptipocont tipocon;

			tipocon = null;
			boolean wok_funcion;
			wok_funcion = true;

			wregnod = cfpagnod(session, profesional.getCpfnclinic(), profesional.getCpfncodigo(),
					consulta.getCcocservic().getCsvccodigo());

			honorarios.setCpnnconcli(consulta.getCconnumero());
			if (profesional != null && profesional.getId() != null) {
				honorarios.setCpnnprofes(profesional.getId().getCpfncodigo());

				honorarios.setCpncregnod(wregnod);
				honorarios.setCpncmodnod(" ");
				honorarios.setCpnccalnod(" ");
				honorarios.setCpnctomnod(wregnod);
				honorarios.setCpncpagada("N");
				honorarios.setCpnavalpag(wvalpag);
				honorarios.setCpndfeccon(consulta.getCcodfeccon());
				honorarios.setCpndfecreg(new Date());
				honorarios.setCpndfecmod(null);
				honorarios.setCpndfeccal(null);
				honorarios.setCpncusureg(userName);
				honorarios.setCpncusumod(null);
				honorarios.setCpncusucal(null);
				honorarios.setCpnnclinic(consulta.getCconclinic());
				honorarios.setCpncestado(IConstantes.ESTADO_VIGENTE);
				session.saveOrUpdate(honorarios);

			}

		}

	}

	private void generarRipsProcedimientoIve(Session session, Cnconsclin consulta, String userName,
			Cnconsclin consultaActual) {
		// Ingresamos el RIPS del procedimiento

		Crarcproce crarcproce = null;
		CrarcproceId idRips = null;
		String autorizacion = "";
		BigDecimal wvalcuota = new BigDecimal(0);
		BigDecimal wvalneto = consulta.getCcoavalser();
		Chdispoaplic dispositivo = null;
		Cpprofesio profesional = null;

		if (consulta != null) {
			StringBuffer sb = new StringBuffer();
			sb.append(" select crap from " + Crarcproce.class.getName()).append(" crap ");
			sb.append(" where crap.id.capnconcli = :cpnnconcli ");
			sb.append(" and crap.id.capnconsec = :cpnnconsec ");
			Query query = session.createQuery(sb.toString());
			query.setParameter("cpnnconcli", consulta.getCconnumero());
			query.setParameter("cpnnconsec", new Integer(0));
			crarcproce = (Crarcproce) query.uniqueResult();

			StringBuffer sb1 = new StringBuffer();
			sb1.append(" select chda from " + Chdispoaplic.class.getName()).append(" chda ");
			sb1.append(" where chda.id.hdalconsulta = :cpnnconcli ");
			sb1.append(" and chda.id.hdactiposerv = :wtiposer ");
			Query query1 = session.createQuery(sb1.toString());
			query1.setParameter("cpnnconcli", consultaActual.getCconnumero());
			query1.setParameter("wtiposer", "C");
			dispositivo = (Chdispoaplic) query1.uniqueResult();

		}

		if (consulta != null && consulta.getCconclinic() != null && userName != null) {
			StringBuffer sb4 = new StringBuffer();
			sb4.append(" select cppr from " + Cpprofesio.class.getName()
					+ " cppr  where cppr.id.cpfnclinic = :cpfnclinic "
					+ " and cppr.id.cpfncodigo = (select cppu.curnprofes from Cpusuario cppu where cppu.curcusuari = :curcusuari ) ");
			Query query4 = session.createQuery(sb4.toString());
			query4.setParameter("cpfnclinic", consulta.getCconclinic());
			query4.setParameter("curcusuari", userName);

			profesional = (Cpprofesio) query4.uniqueResult();

		}

		if (consulta != null && consulta.getCcontipdoc() != null
				&& consulta.getCcontipdoc().getCtdnnumero().equals(IConstantes.CDOC_ADMISION)) {
			Cfadmision admision = null;
			Cfdetaadmision detadmi = null;
			List<Cfdetaadmision> lstDetadm;
			StringBuffer sb1 = new StringBuffer();
			sb1.append("select cfad from Cfadmision " + " cfad  where cfad.cannumero = :numdoc ");
			Query query1 = session.createQuery(sb1.toString());
			query1.setParameter("numdoc", consulta.getCconnumdoc());
			admision = (Cfadmision) query1.uniqueResult();

			if (admision != null && consulta.getCcocservic() != null) {
				StringBuffer sb21 = new StringBuffer();
				sb21.append(" select cfde from " + Cfdetaadmision.class.getName()
						+ " cfde  where cfde.id.cdannumadm = :cdannumadm AND cfde.cdacservic = :cdacservic ");
				Query query21 = session.createQuery(sb21.toString());
				query21.setParameter("cdannumadm", admision.getCannumero());
				query21.setParameter("cdacservic", consulta.getCcocservic().getCsvccodigo());
				lstDetadm = (List<Cfdetaadmision>) query21.list();

				if (lstDetadm != null && !lstDetadm.isEmpty()) {
					detadmi = lstDetadm.get(0);
				}

				if (detadmi != null && detadmi.getCdacpaquet() != null && !detadmi.getCdacpaquet().equals("0")) {
					StringBuffer sb11 = new StringBuffer();
					sb11.append("select cppa.cpecserpri from " + Cppaquserv.class.getName() + " cppa  "
							+ "where cppa.id.cpecpaquet = :wpaquet AND cppa.id.cpecservic = :wservic "
							+ "and cppa.cpecestado = 'VG' ");
					Query query11 = session.createQuery(sb11.toString());
					query11.setParameter("wpaquet", detadmi.getCdacpaquet());
					query11.setParameter("wservic", consulta.getCcocservic().getCsvccodigo());
					List<String> principal = (List<String>) query11.list();
					if (principal != null && !principal.isEmpty() && "S".equals(principal.get(0))) {
						StringBuffer sb20 = new StringBuffer();
						sb20.append(" select cfde from " + Cfdetaadmision.class.getName()
								+ " cfde  where cfde.id.cdannumadm = :cdannumadm AND cfde.cdacservic = :wpaquete ");
						Query query20 = session.createQuery(sb20.toString());
						query20.setParameter("cdannumadm", admision.getCannumero());
						query20.setParameter("wpaquete", detadmi.getCdacpaquet());
						lstDetadm = (List<Cfdetaadmision>) query20.list();

						if (lstDetadm != null && !lstDetadm.isEmpty()) {
							detadmi = lstDetadm.get(0);
						}
					}
				}

				if (admision != null) {
					autorizacion = admision.getCacnumrem();
					if (autorizacion != null && autorizacion.length() > 15) {
						autorizacion = autorizacion.substring(0, 14);
					}
				}

				if (detadmi != null && detadmi.getCdanvalser() != null && detadmi.getCdanvalent() != null) {
					wvalneto = new BigDecimal(detadmi.getCdanvalser());
					wvalcuota = wvalneto.subtract(new BigDecimal(detadmi.getCdanvalent()));
				}
			}
		}

		if (crarcproce == null) {
			crarcproce = new Crarcproce();
		}

		if (dispositivo != null && userName != null && profesional != null) {

			if (crarcproce.getId() == null || crarcproce.getId().getCapnconcli() == null
					|| crarcproce.getId().getCapnconsec() == null) {
				idRips = new CrarcproceId();
				idRips.setCapnconcli(consulta.getCconnumero());
				idRips.setCapnconsec(0);
				crarcproce.setId(idRips);
			}

			if (consulta != null && consulta.getCconclinic() != null && userName != null) {
				StringBuffer sb4 = new StringBuffer();
				sb4.append(" select cppr from " + Cpprofesio.class.getName()
						+ " cppr  where cppr.id.cpfnclinic = :cpfnclinic "
						+ " and cppr.id.cpfncodigo = (select cppu.curnprofes from Cpusuario cppu where cppu.curcusuari = :curcusuari ) ");
				Query query4 = session.createQuery(sb4.toString());
				query4.setParameter("cpfnclinic", consulta.getCconclinic());
				query4.setParameter("curcusuari", userName);

				profesional = (Cpprofesio) query4.uniqueResult();

			}

			crarcproce.setCapdfecpro(new Date());
			crarcproce.setCapctipide(consulta.getCcoctipide());
			crarcproce.setCapanumide(consulta.getCcoanumide());
			crarcproce.setCapnconcep(2);
			crarcproce.setCapcautori(autorizacion);
			if (consulta.getCcocservic() != null)
				if (consulta.getCcocservic() != null && consulta.getCcocservic().getCsvccodcups() != null
						&& consulta.getCcocservic().getCsvccodcups().equals("0")) {
					crarcproce.setCapccodpro(cfcocups(consulta.getCcocservic().getCsvccodigo()));
				} else {
					crarcproce.setCapccodpro(cfcocups(consulta.getCcocservic().getCsvccodcups()));
				}

			crarcproce.setCapnambito(dispositivo.getHdanambitproce());
			crarcproce.setCapnfinpro(dispositivo.getHdanfinalidad());
			crarcproce.setCapcperate(profesional.getCpfntippro().toString());
			crarcproce.setCapcdiagpr(dispositivo.getHdacdiagposter());
			crarcproce.setCapcdiagre(dispositivo.getHdacdiagposter());
			crarcproce.setCapccompli(" ");
			crarcproce.setCapnrealiz(dispositivo.getHdanrealizacio());
			crarcproce.setCapavalpro(wvalneto);
			crarcproce.setCapdfecreg(new Date());
			crarcproce.setCapcusuari(userName);
			if (consulta.getCcolusuario() != null && consulta.getCcolusuario().getHuslnumero() != null)
				crarcproce.setCaplusuario(new BigDecimal(consulta.getCcolusuario().getHuslnumero().intValue()));
			crarcproce.setCapnclinic(consulta.getCconclinic());

			session.saveOrUpdate(crarcproce);
		}
	}

	private void generarRipsProcedimiento(Session session, Cnconsclin consulta, String userName) {
		// Ingresamos el RIPS del procedimiento

		Crarcproce crarcproce = null;
		CrarcproceId idRips = null;
		String autorizacion = "";
		BigDecimal wvalcuota = new BigDecimal(0);
		BigDecimal wvalneto = consulta.getCcoavalser();
		Chdispoaplic dispositivo = null;
		Cpprofesio profesional = null;

		if (consulta != null) {
			StringBuffer sb = new StringBuffer();
			sb.append(" select crap from " + Crarcproce.class.getName()).append(" crap ");
			sb.append(" where crap.id.capnconcli = :cpnnconcli ");
			sb.append(" and crap.id.capnconsec = :cpnnconsec ");
			Query query = session.createQuery(sb.toString());
			query.setParameter("cpnnconcli", consulta.getCconnumero());
			query.setParameter("cpnnconsec", new Integer(0));
			crarcproce = (Crarcproce) query.uniqueResult();

			StringBuffer sb1 = new StringBuffer();
			sb1.append(" select chda from " + Chdispoaplic.class.getName()).append(" chda ");
			sb1.append(" where chda.id.hdalconsulta = :cpnnconcli ");
			sb1.append(" and chda.id.hdactiposerv = :wtiposer ");
			Query query1 = session.createQuery(sb1.toString());
			query1.setParameter("cpnnconcli", consulta.getCconnumero());
			query1.setParameter("wtiposer", "C");
			dispositivo = (Chdispoaplic) query1.uniqueResult();

		}

		if (consulta != null && consulta.getCconclinic() != null && userName != null) {
			StringBuffer sb4 = new StringBuffer();
			sb4.append(" select cppr from " + Cpprofesio.class.getName()
					+ " cppr  where cppr.id.cpfnclinic = :cpfnclinic "
					+ " and cppr.id.cpfncodigo = (select cppu.curnprofes from Cpusuario cppu where cppu.curcusuari = :curcusuari ) ");
			Query query4 = session.createQuery(sb4.toString());
			query4.setParameter("cpfnclinic", consulta.getCconclinic());
			query4.setParameter("curcusuari", userName);

			profesional = (Cpprofesio) query4.uniqueResult();

		}

		if (consulta != null && consulta.getCcontipdoc() != null
				&& consulta.getCcontipdoc().getCtdnnumero().equals(IConstantes.CDOC_ADMISION)) {
			Cfadmision admision = null;
			Cfdetaadmision detadmi = null;
			List<Cfdetaadmision> lstDetadm;
			StringBuffer sb1 = new StringBuffer();
			sb1.append("select cfad from Cfadmision " + " cfad  where cfad.cannumero = :numdoc ");
			Query query1 = session.createQuery(sb1.toString());
			query1.setParameter("numdoc", consulta.getCconnumdoc());
			admision = (Cfadmision) query1.uniqueResult();

			if (admision != null && consulta.getCcocservic() != null) {
				StringBuffer sb21 = new StringBuffer();
				sb21.append(" select cfde from " + Cfdetaadmision.class.getName()
						+ " cfde  where cfde.id.cdannumadm = :cdannumadm AND cfde.cdacservic = :cdacservic ");
				Query query21 = session.createQuery(sb21.toString());
				query21.setParameter("cdannumadm", admision.getCannumero());
				query21.setParameter("cdacservic", consulta.getCcocservic().getCsvccodigo());
				lstDetadm = (List<Cfdetaadmision>) query21.list();

				if (lstDetadm != null && !lstDetadm.isEmpty()) {
					detadmi = lstDetadm.get(0);
				}

				if (detadmi != null && detadmi.getCdacpaquet() != null && !detadmi.getCdacpaquet().equals("0")) {
					StringBuffer sb11 = new StringBuffer();
					sb11.append("select cppa.cpecserpri from " + Cppaquserv.class.getName() + " cppa  "
							+ "where cppa.id.cpecpaquet = :wpaquet AND cppa.id.cpecservic = :wservic "
							+ "and cppa.cpecestado = 'VG' ");
					Query query11 = session.createQuery(sb11.toString());
					query11.setParameter("wpaquet", detadmi.getCdacpaquet());
					query11.setParameter("wservic", consulta.getCcocservic().getCsvccodigo());
					List<String> principal = (List<String>) query11.list();
					if (principal != null && !principal.isEmpty() && "S".equals(principal.get(0))) {
						StringBuffer sb20 = new StringBuffer();
						sb20.append(" select cfde from " + Cfdetaadmision.class.getName()
								+ " cfde  where cfde.id.cdannumadm = :cdannumadm AND cfde.cdacservic = :wpaquete ");
						Query query20 = session.createQuery(sb20.toString());
						query20.setParameter("cdannumadm", admision.getCannumero());
						query20.setParameter("wpaquete", detadmi.getCdacpaquet());
						lstDetadm = (List<Cfdetaadmision>) query20.list();

						if (lstDetadm != null && !lstDetadm.isEmpty()) {
							detadmi = lstDetadm.get(0);
						}
					}
				}

				if (admision != null) {
					autorizacion = admision.getCacnumrem();
					if (autorizacion != null && autorizacion.length() > 15) {
						autorizacion = autorizacion.substring(0, 14);
					}
				}

				if (detadmi != null && detadmi.getCdanvalser() != null && detadmi.getCdanvalent() != null) {
					wvalneto = new BigDecimal(detadmi.getCdanvalser());
					wvalcuota = wvalneto.subtract(new BigDecimal(detadmi.getCdanvalent()));
				}
			}
		}

		if (crarcproce == null) {
			crarcproce = new Crarcproce();
		}

		if (dispositivo != null && userName != null && profesional != null) {

			if (crarcproce.getId() == null || crarcproce.getId().getCapnconcli() == null
					|| crarcproce.getId().getCapnconsec() == null) {
				idRips = new CrarcproceId();
				idRips.setCapnconcli(consulta.getCconnumero());
				idRips.setCapnconsec(0);
				crarcproce.setId(idRips);
			}

			if (consulta != null && consulta.getCconclinic() != null && userName != null) {
				StringBuffer sb4 = new StringBuffer();
				sb4.append(" select cppr from " + Cpprofesio.class.getName()
						+ " cppr  where cppr.id.cpfnclinic = :cpfnclinic "
						+ " and cppr.id.cpfncodigo = (select cppu.curnprofes from Cpusuario cppu where cppu.curcusuari = :curcusuari ) ");
				Query query4 = session.createQuery(sb4.toString());
				query4.setParameter("cpfnclinic", consulta.getCconclinic());
				query4.setParameter("curcusuari", userName);

				profesional = (Cpprofesio) query4.uniqueResult();

			}

			crarcproce.setCapdfecpro(new Date());
			crarcproce.setCapctipide(consulta.getCcoctipide());
			crarcproce.setCapanumide(consulta.getCcoanumide());
			crarcproce.setCapnconcep(2);
			crarcproce.setCapcautori(autorizacion);
			if (consulta.getCcocservic() != null)
				if (consulta.getCcocservic() != null && consulta.getCcocservic().getCsvccodcups() != null
						&& consulta.getCcocservic().getCsvccodcups().equals("0")) {
					crarcproce.setCapccodpro(cfcocups(consulta.getCcocservic().getCsvccodigo()));
				} else {
					crarcproce.setCapccodpro(cfcocups(consulta.getCcocservic().getCsvccodcups()));
				}

			crarcproce.setCapnambito(dispositivo.getHdanambitproce());
			crarcproce.setCapnfinpro(dispositivo.getHdanfinalidad());
			crarcproce.setCapcperate(profesional.getCpfntippro().toString());
			crarcproce.setCapcdiagpr(dispositivo.getHdacdiagposter());
			crarcproce.setCapcdiagre(dispositivo.getHdacdiagposter());
			crarcproce.setCapccompli(" ");
			crarcproce.setCapnrealiz(dispositivo.getHdanrealizacio());
			crarcproce.setCapavalpro(wvalneto);
			crarcproce.setCapdfecreg(new Date());
			crarcproce.setCapcusuari(userName);
			if (consulta.getCcolusuario() != null && consulta.getCcolusuario().getHuslnumero() != null)
				crarcproce.setCaplusuario(new BigDecimal(consulta.getCcolusuario().getHuslnumero().intValue()));
			crarcproce.setCapnclinic(consulta.getCconclinic());

			session.saveOrUpdate(crarcproce);
		}
	}

	private void generarRipsProcedimientoConsultorio(Session session, Cnconsclin consulta, String userName) {
		// Ingresamos el RIPS del procedimiento de la citologia
		Crripsserv ripsNac = null;
		Crarcproce crarcproce = null;
		CrarcproceId idRips = null;
		Chproceconsu procedimiento = null;
		Cpprofesio profesional = null;
		String autorizacion = "";
		BigDecimal wvalcuota = new BigDecimal(0);
		BigDecimal wvalneto = consulta.getCcoavalser();

		if (consulta != null) {

			// Consultamos si existe un rips para el procedimiento, en caso que exista se
			// modifica
			StringBuffer sb = new StringBuffer();
			sb.append(" select crap from " + Crarcproce.class.getName()).append(" crap ");
			sb.append(" where crap.id.capnconcli = :cpnnconcli ");
			sb.append(" and crap.id.capnconsec = :cpnnconsec ");
			Query query = session.createQuery(sb.toString());
			query.setParameter("cpnnconcli", consulta.getCconnumero());
			query.setParameter("cpnnconsec", new Integer(0));
			crarcproce = (Crarcproce) query.uniqueResult();

			// Consultamos si existe un rips parametizado por clinica
			StringBuffer sb10 = new StringBuffer();
			sb10.append(" select crri from ").append(Crripsserv.class.getName()).append(" crri ");
			sb10.append(" WHERE crri.id.crscservic = :cricservic and crri.id.crsngrupo = :cringrupo ");
			sb10.append(" and crri.id.crsnsubgru = :crinsubgru and crri.crscestado = 'VG' ");
			Query query10 = session.createQuery(sb10.toString());
			query10.setParameter("cricservic", consulta.getCcocservic().getCsvccodigo());
			query10.setParameter("cringrupo", consulta.getCcocservic().getCsvngrupo());
			query10.setParameter("crinsubgru", consulta.getCcocservic().getCsvnsubgru());
			ripsNac = (Crripsserv) query10.uniqueResult();

			if (ripsNac == null) {
				Crripxclin rips = null;
				StringBuffer sb1 = new StringBuffer();
				sb1.append(" select crri from ").append(Crripxclin.class.getName()).append(" crri ");
				sb1.append(" WHERE crri.id.crinclinic = :crinclinic AND crri.id.cricservic = :cricservic  ");
				sb1.append("  and crri.id.cringrupo = :cringrupo and crri.id.crinsubgru = :crinsubgru ");
				Query query1 = session.createQuery(sb1.toString());
				query1.setParameter("crinclinic", consulta.getCconclinic());
				query1.setParameter("cricservic", consulta.getCcocservic().getCsvccodigo());
				query1.setParameter("cringrupo", consulta.getCcocservic().getCsvngrupo());
				query1.setParameter("crinsubgru", consulta.getCcocservic().getCsvnsubgru());
				rips = (Crripxclin) query1.uniqueResult();
				if (rips != null) {
					ripsNac = new Crripsserv(new CrripsservId());
					ripsNac.setCrsnconcep(rips.getCrinconcep());
					ripsNac.setCrsnambito(rips.getCrinambito());
					ripsNac.setCrsnfinali(rips.getCrinfinali());
					ripsNac.setCrscperate(rips.getCricperate());
					ripsNac.setCrscdiagpr(rips.getCricdiagpr());
					ripsNac.setCrscdiagre(rips.getCricdiagre());
					ripsNac.setCrsnrealiz(rips.getCrinrealiz());
				}
			}

			// Consultamos si existe un registro en la tabla chprocecosnu

			StringBuffer sb2 = new StringBuffer();
			sb2.append(" select chpc from ").append(Chproceconsu.class.getName()).append(" chpc ");
			sb2.append(" WHERE chpc.id.hpclconsulta = :hpclconsulta ");
			sb2.append(" AND  chpc.id.hpcctiposervi = :hpcctiposervi  ");
			Query query2 = session.createQuery(sb2.toString());
			query2.setParameter("hpclconsulta", consulta.getCconnumero());
			query2.setParameter("hpcctiposervi", IConstantes.TIPO_CONSULTA);

			procedimiento = (Chproceconsu) query2.uniqueResult();

			if (consulta != null && consulta.getCcontipdoc() != null
					&& consulta.getCcontipdoc().getCtdnnumero().equals(IConstantes.CDOC_ADMISION)) {
				Cfadmision admision = null;
				Cfdetaadmision detadmi = null;
				List<Cfdetaadmision> lstDetadm;
				StringBuffer sb1 = new StringBuffer();
				sb1.append("select cfad from Cfadmision " + " cfad  where cfad.cannumero = :numdoc ");
				Query query1 = session.createQuery(sb1.toString());
				query1.setParameter("numdoc", consulta.getCconnumdoc());
				admision = (Cfadmision) query1.uniqueResult();

				if (admision != null && consulta.getCcocservic() != null) {
					StringBuffer sb21 = new StringBuffer();
					sb21.append(" select cfde from " + Cfdetaadmision.class.getName()
							+ " cfde  where cfde.id.cdannumadm = :cdannumadm AND cfde.cdacservic = :cdacservic ");
					Query query21 = session.createQuery(sb21.toString());
					query21.setParameter("cdannumadm", admision.getCannumero());
					query21.setParameter("cdacservic", consulta.getCcocservic().getCsvccodigo());
					lstDetadm = (List<Cfdetaadmision>) query21.list();

					if (lstDetadm != null && !lstDetadm.isEmpty()) {
						detadmi = lstDetadm.get(0);
					}

					if (detadmi != null && detadmi.getCdacpaquet() != null && !detadmi.getCdacpaquet().equals("0")) {
						StringBuffer sb11 = new StringBuffer();
						sb11.append("select cppa.cpecserpri from " + Cppaquserv.class.getName() + " cppa  "
								+ "where cppa.id.cpecpaquet = :wpaquet AND cppa.id.cpecservic = :wservic "
								+ "and cppa.cpecestado = 'VG' ");
						Query query11 = session.createQuery(sb11.toString());
						query11.setParameter("wpaquet", detadmi.getCdacpaquet());
						query11.setParameter("wservic", consulta.getCcocservic().getCsvccodigo());
						List<String> principal = (List<String>) query11.list();
						if (principal != null && !principal.isEmpty() && "S".equals(principal.get(0))) {
							StringBuffer sb20 = new StringBuffer();
							sb20.append(" select cfde from " + Cfdetaadmision.class.getName()
									+ " cfde  where cfde.id.cdannumadm = :cdannumadm AND cfde.cdacservic = :wpaquete ");
							Query query20 = session.createQuery(sb20.toString());
							query20.setParameter("cdannumadm", admision.getCannumero());
							query20.setParameter("wpaquete", detadmi.getCdacpaquet());
							lstDetadm = (List<Cfdetaadmision>) query20.list();

							if (lstDetadm != null && !lstDetadm.isEmpty()) {
								detadmi = lstDetadm.get(0);
							}
						}
					}

					if (admision != null) {
						autorizacion = admision.getCacnumrem();
						if (autorizacion != null && autorizacion.length() > 15) {
							autorizacion = autorizacion.substring(0, 14);
						}
					}

					if (detadmi != null && detadmi.getCdanvalser() != null && detadmi.getCdanvalent() != null) {
						wvalneto = new BigDecimal(detadmi.getCdanvalser());
						wvalcuota = wvalneto.subtract(new BigDecimal(detadmi.getCdanvalent()));
					}
				}
			}

		}

		if (crarcproce == null) {
			crarcproce = new Crarcproce();

		}

		if (consulta != null) {
			if (crarcproce.getId() == null || crarcproce.getId().getCapnconcli() == null
					|| crarcproce.getId().getCapnconsec() == null) {
				idRips = new CrarcproceId();
				idRips.setCapnconcli(consulta.getCconnumero());
				idRips.setCapnconsec(0);
				crarcproce.setId(idRips);
			}

			crarcproce.setCapdfecpro(new Date());
			crarcproce.setCapctipide(consulta.getCcoctipide());
			crarcproce.setCapanumide(consulta.getCcoanumide());
			crarcproce.setCapcautori(autorizacion);
			crarcproce.setCapavalpro(wvalneto);
			crarcproce.setCapdfecreg(new Date());
			crarcproce.setCapcusuari(userName);
			crarcproce.setCapnclinic(consulta.getCconclinic());
			if (consulta.getCcocservic() != null && consulta.getCcocservic().getCsvccodcups() != null
					&& consulta.getCcocservic().getCsvccodcups().equals("0")) {
				crarcproce.setCapccodpro(cfcocups(consulta.getCcocservic().getCsvccodigo()));
			} else {
				crarcproce.setCapccodpro(cfcocups(consulta.getCcocservic().getCsvccodcups()));
			}
			if (consulta.getCcolusuario() != null && consulta.getCcolusuario().getHuslnumero() != null) {
				crarcproce.setCaplusuario(new BigDecimal(consulta.getCcolusuario().getHuslnumero().intValue()));
			}

			if (consulta != null && consulta.getCconclinic() != null && userName != null) {
				StringBuffer sb4 = new StringBuffer();
				sb4.append(" select cppr from " + Cpprofesio.class.getName()
						+ " cppr  where cppr.id.cpfnclinic = :cpfnclinic "
						+ " and cppr.id.cpfncodigo = (select cppu.curnprofes from Cpusuario cppu where cppu.curcusuari = :curcusuari ) ");
				Query query4 = session.createQuery(sb4.toString());
				query4.setParameter("cpfnclinic", consulta.getCconclinic());
				query4.setParameter("curcusuari", userName);

				profesional = (Cpprofesio) query4.uniqueResult();

			}

			if (procedimiento != null && userName != null && profesional != null
					&& profesional.getCpfntippro() != null) {
				crarcproce.setCapnconcep(2);
				crarcproce.setCapnambito(procedimiento.getHpcnambitproce());
				crarcproce.setCapnfinpro(procedimiento.getHpcnfinalidad());
				crarcproce.setCapcperate(profesional.getCpfntippro().toString());
				crarcproce.setCapcdiagpr(procedimiento.getHpccdiagprinci());
				if (procedimiento.getHpccdiagcompli() != null) {
					crarcproce.setCapccompli(procedimiento.getHpccdiagcompli());
				} else {
					crarcproce.setCapccompli("");
				}

				crarcproce.setCapnrealiz(procedimiento.getHpcnrealizacio());

				session.saveOrUpdate(crarcproce);
			} else if (ripsNac != null && userName != null) {

				crarcproce.setCapnconcep(ripsNac.getCrsnconcep());
				crarcproce.setCapnambito(ripsNac.getCrsnambito());
				crarcproce.setCapnfinpro(ripsNac.getCrsnfinali());
				crarcproce.setCapcperate(ripsNac.getCrscperate());
				crarcproce.setCapcdiagpr(ripsNac.getCrscdiagpr());
				crarcproce.setCapcdiagre(ripsNac.getCrscdiagre());
				crarcproce.setCapnrealiz(ripsNac.getCrsnrealiz());
				crarcproce.setCapccompli("");
				session.saveOrUpdate(crarcproce);

			}
		}
	}

	private void generarRipsConsultaExterna(Session session, Cnconsclin consulta, String userName, Chusuario usuario,
			Chmotivocon motivo, Chimprdiag impresion) {
		String autorizacion = "";
		Ccfactserv factura = null;
		BigDecimal wvalcuota;
		wvalcuota = new BigDecimal(0);

		BigDecimal wvalneto = new BigDecimal(0);

		if (consulta != null && consulta.getCcontipdoc() != null) {
			if (consulta.getCcontipdoc().getCtdnnumero().equals(IConstantes.CDOC_FACTURA)) {
				StringBuffer sb1 = new StringBuffer();
				sb1.append("select ccfs from Ccfactserv" + " ccfs  where ccfs.cfsnnumfac = :numerofac ");
				Query query1 = session.createQuery(sb1.toString());
				query1.setParameter("numerofac", consulta.getCconnumdoc());

				factura = (Ccfactserv) query1.uniqueResult();
			}

		}

		Ccdetafact detalle = null;
		List<Ccdetafact> lstDetalle;

		if (factura != null && consulta.getCcocservic() != null) {

			StringBuffer sb2 = new StringBuffer();
			sb2.append(" select ccdf from " + Ccdetafact.class.getName()
					+ " ccdf  where ccdf.id.cdfnnumero = :cdfnnumero AND ccdf.cdfcservic = :cdfcservic ");
			Query query2 = session.createQuery(sb2.toString());
			query2.setParameter("cdfnnumero", factura.getCfsnnumero());
			query2.setParameter("cdfcservic", consulta.getCcocservic().getCsvccodigo());

			lstDetalle = (List<Ccdetafact>) query2.list();

			if (lstDetalle != null && !lstDetalle.isEmpty()) {
				detalle = lstDetalle.get(0);
			}

		}

		if (factura != null) {
			autorizacion = factura.getCfscnumrem();
		}

		if (detalle != null && detalle.getCdfavalser() != null && detalle.getCdfavalent() != null) {
			wvalcuota = detalle.getCdfavalser().subtract(detalle.getCdfavalent());

			wvalneto = consulta.getCcoavalser().subtract(wvalcuota);
		}

		if (consulta != null && consulta.getCcontipdoc() != null
				&& consulta.getCcontipdoc().getCtdnnumero().equals(IConstantes.CDOC_ADMISION)) {

			Cfadmision admision = null;
			Cfdetaadmision detadmi = null;
			List<Cfdetaadmision> lstDetadm;
			StringBuffer sb1 = new StringBuffer();
			sb1.append("select cfad from Cfadmision " + " cfad  where cfad.cannumero = :numdoc ");
			Query query1 = session.createQuery(sb1.toString());
			query1.setParameter("numdoc", consulta.getCconnumdoc());
			admision = (Cfadmision) query1.uniqueResult();

			if (admision != null && consulta.getCcocservic() != null) {
				StringBuffer sb2 = new StringBuffer();
				sb2.append(" select cfde from " + Cfdetaadmision.class.getName()
						+ " cfde  where cfde.id.cdannumadm = :cdannumadm AND cfde.cdacservic = :cdacservic ");
				Query query2 = session.createQuery(sb2.toString());
				query2.setParameter("cdannumadm", admision.getCannumero());
				query2.setParameter("cdacservic", consulta.getCcocservic().getCsvccodigo());
				lstDetadm = (List<Cfdetaadmision>) query2.list();

				if (lstDetadm != null && !lstDetadm.isEmpty()) {
					detadmi = lstDetadm.get(0);
				}

				if (detadmi != null && detadmi.getCdacpaquet() != null && !detadmi.getCdacpaquet().equals("0")) {
					StringBuffer sb10 = new StringBuffer();
					sb10.append("select cppa.cpecserpri from " + Cppaquserv.class.getName() + " cppa  "
							+ "where cppa.id.cpecpaquet = :wpaquet AND cppa.id.cpecservic = :wservic "
							+ "and cppa.cpecestado = 'VG' ");
					Query query10 = session.createQuery(sb10.toString());
					query10.setParameter("wpaquet", detadmi.getCdacpaquet());
					query10.setParameter("wservic", consulta.getCcocservic().getCsvccodigo());
					List<String> principal = (List<String>) query10.list();
					if (principal != null && !principal.isEmpty() && "S".equals(principal.get(0))) {
						StringBuffer sb20 = new StringBuffer();
						sb20.append(" select cfde from " + Cfdetaadmision.class.getName()
								+ " cfde  where cfde.id.cdannumadm = :cdannumadm AND cfde.cdacservic = :wpaquete ");
						Query query20 = session.createQuery(sb20.toString());
						query20.setParameter("cdannumadm", admision.getCannumero());
						query20.setParameter("wpaquete", detadmi.getCdacpaquet());
						lstDetadm = (List<Cfdetaadmision>) query20.list();

						if (lstDetadm != null && !lstDetadm.isEmpty()) {
							detadmi = lstDetadm.get(0);
						}
					}
				}

				if (admision != null) {
					autorizacion = admision.getCacnumrem();
					if (autorizacion != null && autorizacion.length() > 15) {
						autorizacion = autorizacion.substring(0, 14);
					}
				}

				if (detadmi != null && detadmi.getCdanvalser() != null && detadmi.getCdanvalent() != null) {
					wvalneto = new BigDecimal(detadmi.getCdanvalser());
					wvalcuota = wvalneto.subtract(new BigDecimal(detadmi.getCdanvalent()));
				}
			}
		}

		if (!consulta.getCcontipdoc().getCtdnnumero().equals(IConstantes.CDOC_FACTURA)
				&& !consulta.getCcontipdoc().getCtdnnumero().equals(IConstantes.CDOC_ADMISION)) {
			wvalneto = consulta.getCcoavalser();
		}

		Crarcconsu rips = null;
		List<Crarcconsu> lstRips;
		CrarcconsuId id;
		String codcon = "";

		if (usuario != null && consulta != null) {
			StringBuffer sb3 = new StringBuffer();
			sb3.append(" select crac from ").append(Crarcconsu.class.getName()).append(" crac ");
			sb3.append(
					" where crac.id.cacnconcli = :cacnconcli and crac.caclusuario = :caclusuario  order by crac.id.cacnconsec desc  ");
			Query query3 = session.createQuery(sb3.toString());
			query3.setParameter("cacnconcli", consulta.getCconnumero());
			query3.setParameter("caclusuario", usuario.getHuslnumero());

			lstRips = (List<Crarcconsu>) query3.list();

			if (lstRips != null && !lstRips.isEmpty()) {
				rips = lstRips.get(0);
			}
		}

		if (rips == null || rips.getId() == null) {
			rips = new Crarcconsu();
			id = new CrarcconsuId();
			id.setCacnconcli(consulta.getCconnumero());
			id.setCacnconsec(0);
			rips.setId(id);
		}

		if (consulta.getCcocservic().getCsvccodcups() != null
				&& consulta.getCcocservic().getCsvccodcups().equals("0")) {
			StringTokenizer st = new StringTokenizer(consulta.getCcocservic().getCsvccodigo(), ".");
			codcon = st.nextToken();
		} else {
			codcon = consulta.getCcocservic().getCsvccodcups();
		}

		rips.setCacdfeccon(consulta.getCcodfecreg());
		rips.setCacctipide(consulta.getCcoctipide());
		rips.setCacanumide(consulta.getCcoanumide());
		rips.setCacnconcep(IConstantes.CONCEPTO_RIPS_CONSULTA_EXTERNA);
		rips.setCacccodcon(codcon);
		rips.setCacnfincon(motivo.getHmcnfinalidad());
		rips.setCacncauext(motivo.getHmcncausaexte());
		if (impresion.getHidcdiagprin() != null)
			rips.setCaccdiagpr(impresion.getHidcdiagprin().toUpperCase());
		if (impresion.getHidcdiagrela1() != null)
			rips.setCaccdiagr1(impresion.getHidcdiagrela1().toUpperCase());
		if (impresion.getHidcdiagrela2() != null)
			rips.setCaccdiagr2(impresion.getHidcdiagrela2().toUpperCase());
		if (impresion.getHidcdiagrela3() != null)
			rips.setCaccdiagr3(impresion.getHidcdiagrela3().toUpperCase());
		rips.setCacntipdia(impresion.getHidntipodiagn());
		if (wvalcuota.intValue() != 0) {
			rips.setCacavalcon(wvalneto.subtract(wvalcuota));
		} else {
			rips.setCacavalcon(consulta.getCcoavalser());
		}
		rips.setCaccautori(autorizacion);
		rips.setCacavalcuo(wvalcuota);
		rips.setCacavalnet(wvalneto);
		rips.setCacdfecreg(new Date());
		rips.setCaccusuari(userName);
		rips.setCaclusuario(new BigDecimal(consulta.getCcolusuario().getHuslnumero().doubleValue()));
		rips.setCacnclinic(consulta.getCconclinic());
		session.saveOrUpdate(rips);

	}

	private void generarRipsConsultaProcedimiento(Session session, Cnconsclin consulta, String userName,
			Chusuario usuario, Chimprdiag impresion, Chmotivocon motivo) {
		// Ingresamos el RIPS del procedimiento

		Crarcproce crarcproce = null;
		CrarcproceId idRips = null;
		String autorizacion = "";
		BigDecimal wvalcuota = new BigDecimal(0);
		BigDecimal wvalneto = consulta.getCcoavalser();
		Chdispoaplic dispositivo = null;
		Cpprofesio profesional = null;

		if (consulta != null) {
			StringBuffer sb = new StringBuffer();
			sb.append(" select crap from " + Crarcproce.class.getName()).append(" crap ");
			sb.append(" where crap.id.capnconcli = :cpnnconcli ");
			sb.append(" and crap.id.capnconsec = :cpnnconsec ");
			Query query = session.createQuery(sb.toString());
			query.setParameter("cpnnconcli", consulta.getCconnumero());
			query.setParameter("cpnnconsec", new Integer(0));
			crarcproce = (Crarcproce) query.uniqueResult();

			StringBuffer sb1 = new StringBuffer();
			sb1.append(" select chda from " + Chdispoaplic.class.getName()).append(" chda ");
			sb1.append(" where chda.id.hdalconsulta = :cpnnconcli ");
			sb1.append(" and chda.id.hdactiposerv = :wtiposer ");
			Query query1 = session.createQuery(sb1.toString());
			query1.setParameter("cpnnconcli", consulta.getCconnumero());
			query1.setParameter("wtiposer", "C");
			dispositivo = (Chdispoaplic) query1.uniqueResult();

		}

		if (consulta != null && consulta.getCconclinic() != null && userName != null) {
			StringBuffer sb4 = new StringBuffer();
			sb4.append(" select cppr from " + Cpprofesio.class.getName()
					+ " cppr  where cppr.id.cpfnclinic = :cpfnclinic "
					+ " and cppr.id.cpfncodigo = (select cppu.curnprofes from Cpusuario cppu where cppu.curcusuari = :curcusuari ) ");
			Query query4 = session.createQuery(sb4.toString());
			query4.setParameter("cpfnclinic", consulta.getCconclinic());
			query4.setParameter("curcusuari", userName);

			profesional = (Cpprofesio) query4.uniqueResult();

		}

		if (consulta != null && consulta.getCcontipdoc() != null
				&& consulta.getCcontipdoc().getCtdnnumero().equals(IConstantes.CDOC_ADMISION)) {
			Cfadmision admision = null;
			Cfdetaadmision detadmi = null;
			List<Cfdetaadmision> lstDetadm;
			StringBuffer sb1 = new StringBuffer();
			sb1.append("select cfad from Cfadmision " + " cfad  where cfad.cannumero = :numdoc ");
			Query query1 = session.createQuery(sb1.toString());
			query1.setParameter("numdoc", consulta.getCconnumdoc());
			admision = (Cfadmision) query1.uniqueResult();

			if (admision != null && consulta.getCcocservic() != null) {
				StringBuffer sb21 = new StringBuffer();
				sb21.append(" select cfde from " + Cfdetaadmision.class.getName()
						+ " cfde  where cfde.id.cdannumadm = :cdannumadm AND cfde.cdacservic = :cdacservic ");
				Query query21 = session.createQuery(sb21.toString());
				query21.setParameter("cdannumadm", admision.getCannumero());
				query21.setParameter("cdacservic", consulta.getCcocservic().getCsvccodigo());
				lstDetadm = (List<Cfdetaadmision>) query21.list();

				if (lstDetadm != null && !lstDetadm.isEmpty()) {
					detadmi = lstDetadm.get(0);
				}

				if (detadmi != null && detadmi.getCdacpaquet() != null && !detadmi.getCdacpaquet().equals("0")) {
					StringBuffer sb11 = new StringBuffer();
					sb11.append("select cppa.cpecserpri from " + Cppaquserv.class.getName() + " cppa  "
							+ "where cppa.id.cpecpaquet = :wpaquet AND cppa.id.cpecservic = :wservic "
							+ "and cppa.cpecestado = 'VG' ");
					Query query11 = session.createQuery(sb11.toString());
					query11.setParameter("wpaquet", detadmi.getCdacpaquet());
					query11.setParameter("wservic", consulta.getCcocservic().getCsvccodigo());
					List<String> principal = (List<String>) query11.list();
					if (principal != null && !principal.isEmpty() && "S".equals(principal.get(0))) {
						StringBuffer sb20 = new StringBuffer();
						sb20.append(" select cfde from " + Cfdetaadmision.class.getName()
								+ " cfde  where cfde.id.cdannumadm = :cdannumadm AND cfde.cdacservic = :wpaquete ");
						Query query20 = session.createQuery(sb20.toString());
						query20.setParameter("cdannumadm", admision.getCannumero());
						query20.setParameter("wpaquete", detadmi.getCdacpaquet());
						lstDetadm = (List<Cfdetaadmision>) query20.list();

						if (lstDetadm != null && !lstDetadm.isEmpty()) {
							detadmi = lstDetadm.get(0);
						}
					}
				}

				if (admision != null) {
					autorizacion = admision.getCacnumrem();
					if (autorizacion != null && autorizacion.length() > 15) {
						autorizacion = autorizacion.substring(0, 14);
					}
				}

				if (detadmi != null && detadmi.getCdanvalser() != null && detadmi.getCdanvalent() != null) {
					wvalneto = new BigDecimal(detadmi.getCdanvalser());
					wvalcuota = wvalneto.subtract(new BigDecimal(detadmi.getCdanvalent()));
				}
			}
		}

		if (crarcproce == null) {
			crarcproce = new Crarcproce();
		}

		if (dispositivo != null && userName != null && profesional != null) {

			if (crarcproce.getId() == null || crarcproce.getId().getCapnconcli() == null
					|| crarcproce.getId().getCapnconsec() == null) {
				idRips = new CrarcproceId();
				idRips.setCapnconcli(consulta.getCconnumero());
				idRips.setCapnconsec(0);
				crarcproce.setId(idRips);
			}

			if (consulta != null && consulta.getCconclinic() != null && userName != null) {
				StringBuffer sb4 = new StringBuffer();
				sb4.append(" select cppr from " + Cpprofesio.class.getName()
						+ " cppr  where cppr.id.cpfnclinic = :cpfnclinic "
						+ " and cppr.id.cpfncodigo = (select cppu.curnprofes from Cpusuario cppu where cppu.curcusuari = :curcusuari ) ");
				Query query4 = session.createQuery(sb4.toString());
				query4.setParameter("cpfnclinic", consulta.getCconclinic());
				query4.setParameter("curcusuari", userName);

				profesional = (Cpprofesio) query4.uniqueResult();

			}

			crarcproce.setCapdfecpro(new Date());
			crarcproce.setCapctipide(consulta.getCcoctipide());
			crarcproce.setCapanumide(consulta.getCcoanumide());
			crarcproce.setCapnconcep(2);
			crarcproce.setCapcautori(autorizacion);
			if (consulta.getCcocservic() != null)
				if (consulta.getCcocservic() != null && consulta.getCcocservic().getCsvccodcups() != null
						&& consulta.getCcocservic().getCsvccodcups().equals("0")) {
					crarcproce.setCapccodpro(cfcocups(consulta.getCcocservic().getCsvccodigo()));
				} else {
					crarcproce.setCapccodpro(cfcocups(consulta.getCcocservic().getCsvccodcups()));
				}

			crarcproce.setCapnambito(dispositivo.getHdanambitproce());
			crarcproce.setCapnfinpro(dispositivo.getHdanfinalidad());
			crarcproce.setCapcperate(profesional.getCpfntippro().toString());
			crarcproce.setCapcdiagpr(dispositivo.getHdacdiagposter());
			crarcproce.setCapcdiagre(dispositivo.getHdacdiagposter());
			crarcproce.setCapccompli(" ");
			crarcproce.setCapnrealiz(dispositivo.getHdanrealizacio());
			crarcproce.setCapavalpro(wvalneto);
			crarcproce.setCapdfecreg(new Date());
			crarcproce.setCapcusuari(userName);
			if (consulta.getCcolusuario() != null && consulta.getCcolusuario().getHuslnumero() != null)
				crarcproce.setCaplusuario(new BigDecimal(consulta.getCcolusuario().getHuslnumero().intValue()));
			crarcproce.setCapnclinic(consulta.getCconclinic());

			session.saveOrUpdate(crarcproce);
		} else if (dispositivo == null && userName != null && profesional != null && impresion != null
				&& motivo != null) {
			if (crarcproce.getId() == null || crarcproce.getId().getCapnconcli() == null
					|| crarcproce.getId().getCapnconsec() == null) {
				idRips = new CrarcproceId();
				idRips.setCapnconcli(consulta.getCconnumero());
				idRips.setCapnconsec(0);
				crarcproce.setId(idRips);
			}

			if (consulta != null && consulta.getCconclinic() != null && userName != null) {
				StringBuffer sb4 = new StringBuffer();
				sb4.append(" select cppr from " + Cpprofesio.class.getName()
						+ " cppr  where cppr.id.cpfnclinic = :cpfnclinic "
						+ " and cppr.id.cpfncodigo = (select cppu.curnprofes from Cpusuario cppu where cppu.curcusuari = :curcusuari ) ");
				Query query4 = session.createQuery(sb4.toString());
				query4.setParameter("cpfnclinic", consulta.getCconclinic());
				query4.setParameter("curcusuari", userName);

				profesional = (Cpprofesio) query4.uniqueResult();

			}

			crarcproce.setCapdfecpro(new Date());
			crarcproce.setCapctipide(consulta.getCcoctipide());
			crarcproce.setCapanumide(consulta.getCcoanumide());
			crarcproce.setCapnconcep(2);
			crarcproce.setCapcautori(autorizacion);
			if (consulta.getCcocservic() != null)
				if (consulta.getCcocservic() != null && consulta.getCcocservic().getCsvccodcups() != null
						&& consulta.getCcocservic().getCsvccodcups().equals("0")) {
					crarcproce.setCapccodpro(cfcocups(consulta.getCcocservic().getCsvccodigo()));
				} else {
					crarcproce.setCapccodpro(cfcocups(consulta.getCcocservic().getCsvccodcups()));
				}

			crarcproce.setCapnambito(1);
			crarcproce.setCapnfinpro(motivo.getHmcnfinalidad());
			crarcproce.setCapcperate(profesional.getCpfntippro().toString());
			crarcproce.setCapcdiagpr(impresion.getHidcdiagprin().toUpperCase());
			if (impresion.getHidcdiagrela1() != null) {
				crarcproce.setCapcdiagre(impresion.getHidcdiagrela1().toUpperCase());
			}
			crarcproce.setCapccompli(" ");
			crarcproce.setCapnrealiz(0);
			crarcproce.setCapavalpro(wvalneto);
			crarcproce.setCapdfecreg(new Date());
			crarcproce.setCapcusuari(userName);
			if (consulta.getCcolusuario() != null && consulta.getCcolusuario().getHuslnumero() != null)
				crarcproce.setCaplusuario(new BigDecimal(consulta.getCcolusuario().getHuslnumero().intValue()));
			crarcproce.setCapnclinic(consulta.getCconclinic());

			session.saveOrUpdate(crarcproce);
		}
	}

	private void generarRipsConsultaProcedimientoAsociado(Session session, Cnconsclin consulta, String userName,
			Chconsulta consulraPrincipal) {
		// Ingresamos el RIPS del procedimiento

		Crarcproce crarcproce = null;
		CrarcproceId idRips = null;
		String autorizacion = "";
		BigDecimal wvalcuota = new BigDecimal(0);
		BigDecimal wvalneto = consulta.getCcoavalser();
		Cpprofesio profesional = null;
		Chdispoaplic dispositivo = null;

		if (consulta != null) {
			StringBuffer sb = new StringBuffer();
			sb.append(" select crap from " + Crarcproce.class.getName()).append(" crap ");
			sb.append(" where crap.id.capnconcli = :cpnnconcli ");
			sb.append(" and crap.id.capnconsec = :cpnnconsec ");
			Query query = session.createQuery(sb.toString());
			query.setParameter("cpnnconcli", consulta.getCconnumero());
			query.setParameter("cpnnconsec", new Integer(0));
			crarcproce = (Crarcproce) query.uniqueResult();

			StringBuffer sbda = new StringBuffer();
			sbda.append(" select chda from " + Chdispoaplic.class.getName()).append(" chda ");
			sbda.append(" where chda.id.hdalconsulta = :cpnnconcli ");
			sbda.append(" and chda.id.hdactiposerv = :wtiposer ");
			Query queryda = session.createQuery(sbda.toString());
			queryda.setParameter("cpnnconcli", consulta.getCconnumero());
			queryda.setParameter("wtiposer", "C");
			dispositivo = (Chdispoaplic) queryda.uniqueResult();

			if (consulta != null && consulta.getCcontipdoc() != null
					&& consulta.getCcontipdoc().getCtdnnumero().equals(IConstantes.CDOC_ADMISION)) {
				Cfadmision admision = null;
				Cfdetaadmision detadmi = null;
				List<Cfdetaadmision> lstDetadm;
				StringBuffer sb1 = new StringBuffer();
				sb1.append("select cfad from Cfadmision " + " cfad  where cfad.cannumero = :numdoc ");
				Query query1 = session.createQuery(sb1.toString());
				query1.setParameter("numdoc", consulta.getCconnumdoc());
				admision = (Cfadmision) query1.uniqueResult();

				if (admision != null && consulta.getCcocservic() != null) {
					StringBuffer sb21 = new StringBuffer();
					sb21.append(" select cfde from " + Cfdetaadmision.class.getName()
							+ " cfde  where cfde.id.cdannumadm = :cdannumadm AND cfde.cdacservic = :cdacservic ");
					Query query21 = session.createQuery(sb21.toString());
					query21.setParameter("cdannumadm", admision.getCannumero());
					query21.setParameter("cdacservic", consulta.getCcocservic().getCsvccodigo());
					lstDetadm = (List<Cfdetaadmision>) query21.list();

					if (lstDetadm != null && !lstDetadm.isEmpty()) {
						detadmi = lstDetadm.get(0);
					}

					if (detadmi != null && detadmi.getCdacpaquet() != null && !detadmi.getCdacpaquet().equals("0")) {
						StringBuffer sb11 = new StringBuffer();
						sb11.append("select cppa.cpecserpri from " + Cppaquserv.class.getName() + " cppa  "
								+ "where cppa.id.cpecpaquet = :wpaquet AND cppa.id.cpecservic = :wservic "
								+ "and cppa.cpecestado = 'VG' ");
						Query query11 = session.createQuery(sb11.toString());
						query11.setParameter("wpaquet", detadmi.getCdacpaquet());
						query11.setParameter("wservic", consulta.getCcocservic().getCsvccodigo());
						List<String> principal = (List<String>) query11.list();
						if (principal != null && !principal.isEmpty() && "S".equals(principal.get(0))) {
							StringBuffer sb20 = new StringBuffer();
							sb20.append(" select cfde from " + Cfdetaadmision.class.getName()
									+ " cfde  where cfde.id.cdannumadm = :cdannumadm AND cfde.cdacservic = :wpaquete ");
							Query query20 = session.createQuery(sb20.toString());
							query20.setParameter("cdannumadm", admision.getCannumero());
							query20.setParameter("wpaquete", detadmi.getCdacpaquet());
							lstDetadm = (List<Cfdetaadmision>) query20.list();

							if (lstDetadm != null && !lstDetadm.isEmpty()) {
								detadmi = lstDetadm.get(0);
							}
						}
					}

					if (admision != null) {
						autorizacion = admision.getCacnumrem();
						if (autorizacion != null && autorizacion.length() > 15) {
							autorizacion = autorizacion.substring(0, 14);
						}
					}

					if (detadmi != null && detadmi.getCdanvalser() != null && detadmi.getCdanvalent() != null) {
						wvalneto = new BigDecimal(detadmi.getCdanvalser());
						wvalcuota = wvalneto.subtract(new BigDecimal(detadmi.getCdanvalent()));
					}
				}
			}
		}

		if (crarcproce == null) {
			crarcproce = new Crarcproce();

		}
		if (consulta != null && userName != null && dispositivo != null) {

			Iterator it = consulraPrincipal.getChdispoaplic().iterator();
			if (it.hasNext()) {
				dispositivo = (Chdispoaplic) it.next();
			}

			if (crarcproce.getId() == null || crarcproce.getId().getCapnconcli() == null
					|| crarcproce.getId().getCapnconsec() == null) {
				idRips = new CrarcproceId();
				idRips.setCapnconcli(consulta.getCconnumero());
				idRips.setCapnconsec(0);
				crarcproce.setId(idRips);
			}

			crarcproce.setCapdfecpro(new Date());
			crarcproce.setCapctipide(consulta.getCcoctipide());
			crarcproce.setCapanumide(consulta.getCcoanumide());
			crarcproce.setCapnconcep(2);
			crarcproce.setCapcautori(autorizacion);
			if (consulta.getCcocservic() != null)
				if (consulta.getCcocservic() != null && consulta.getCcocservic().getCsvccodcups() != null
						&& consulta.getCcocservic().getCsvccodcups().equals("0")) {

					crarcproce.setCapccodpro(cfcocups(consulta.getCcocservic().getCsvccodigo()));
				} else {
					crarcproce.setCapccodpro(cfcocups(consulta.getCcocservic().getCsvccodcups()));
				}

			if (consulta != null && consulta.getCconclinic() != null && userName != null) {
				StringBuffer sb4 = new StringBuffer();
				sb4.append(" select cppr from " + Cpprofesio.class.getName()
						+ " cppr  where cppr.id.cpfnclinic = :cpfnclinic "
						+ " and cppr.id.cpfncodigo = (select cppu.curnprofes from Cpusuario cppu where cppu.curcusuari = :curcusuari ) ");
				Query query4 = session.createQuery(sb4.toString());
				query4.setParameter("cpfnclinic", consulta.getCconclinic());
				query4.setParameter("curcusuari", userName);

				profesional = (Cpprofesio) query4.uniqueResult();

			}

			crarcproce.setCapnambito(dispositivo.getHdanambitproce());
			crarcproce.setCapnfinpro(dispositivo.getHdanfinalidad());
			crarcproce.setCapcperate(profesional.getCpfntippro().toString());
			crarcproce.setCapcdiagpr(dispositivo.getHdacdiagposter());
			crarcproce.setCapccompli(dispositivo.getHdacdiagcompli());
			crarcproce.setCapnrealiz(dispositivo.getHdanrealizacio());
			crarcproce.setCapavalpro(wvalneto);
			crarcproce.setCapdfecreg(new Date());
			crarcproce.setCapcusuari(userName);
			if (consulta.getCcolusuario() != null && consulta.getCcolusuario().getHuslnumero() != null)
				crarcproce.setCaplusuario(new BigDecimal(consulta.getCcolusuario().getHuslnumero().intValue()));
			crarcproce.setCapnclinic(consulta.getCconclinic());

			session.saveOrUpdate(crarcproce);
		}
	}

	/**
	 * @param pwservic
	 * @return
	 */
	private String cfcocups(final String pwservic) {
		String servicio = null;
		if (pwservic != null && pwservic.length() > 0) {
			StringTokenizer st = new StringTokenizer(pwservic, ".");

			servicio = st.nextToken();
		}
		return servicio;

	}

	// FIXME INICIO SEGUIMIENTO OTRAS PATOLOGIAS

	/**
	 * @param pat
	 * @throws ModelException
	 */
	public void saveOrUpdatePatologia(Chotraspatolog pat) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(pat);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando patologias" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando patologias" + e.getMessage(), e);
		}

		try {
			if (pat.getEtapapatol() != null && !pat.getEtapapatol().equalsIgnoreCase("")) {
				updateEtapaPatologia(pat);
			}
		} catch (Exception e) {
			throw new ModelException("Error actualizando etapa de la patologia" + e.getMessage(), e);
		}
	}

	/**
	 * @param pat
	 * @return chotraspatolog
	 * @throws ModelException
	 */
	public Chotraspatolog getOtrasPatolog(Chotraspatolog pat) throws ModelException {

		Chotraspatolog chotraspatolog = null;
		java.util.List resultList = null;
		List parametros = new ArrayList();

		try {

			StringBuffer sb = new StringBuffer();
			sb.append("SELECT chop FROM " + Chotraspatolog.class.getName() + " AS chop WHERE rownum > 0 ");

			if (pat != null) {

				if (pat.getChopntipodoc() != null) {
					sb.append(" AND chop.chopntipodoc = ? ");
					parametros.add(pat.getChopntipodoc().intValue());
				}
				if (pat.getChopnnumdoc() != null) {
					sb.append(" AND chop.chopnnumdoc = ? ");
					parametros.add(pat.getChopnnumdoc().intValue());

				}
				if (pat.getChopnclinorig() != null) {
					sb.append(" AND chop.chopnclinorig = ? ");
					parametros.add(pat.getChopnclinorig().intValue());

				}

			}

			resultList = this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			if (resultList.size() != 0) {
				chotraspatolog = (Chotraspatolog) resultList.get(0);
			}

		} catch (HibernateException e) {
			throw new ModelException(
					"Error consultando Otras Patologias:" + e.getMessage() + " Causa: " + e.getCause().getMessage(), e);
		} catch (Exception e) {
			throw new ModelException(
					"Error consultando Otras Patologias:" + e.getMessage() + " Causa: " + e.getCause().getMessage(), e);
		}
		return chotraspatolog;

	}

	/**
	 * @param clinica, tipDoc, numDoc
	 * @return factura
	 * @throws ModelException
	 */
	public Object getInfoFactura(Integer clinica, Integer tipDoc, Integer numDoc) throws ModelException {

		Object factura = null;
		java.util.List resultList = null;
		List parametros = new ArrayList();

		final int DOC_ASENTADO = 1;

		try {

			StringBuffer sb = new StringBuffer();
			if (tipDoc.intValue() == 20 || tipDoc.intValue() == 51) {

				sb.append("SELECT ccfa FROM Ccfactvent AS ccfa WHERE ccfa.cfvnclinic = ? AND ccfa.cfvntipdoc = ? "
						+ " AND ccfa.cfvnnumero = ? AND ccfa.cfvnestado = ? ");

				parametros.add(clinica);
				parametros.add(tipDoc);
				parametros.add(numDoc);
				parametros.add(DOC_ASENTADO);

			} else {

				sb.append("SELECT ccfa FROM Ccfactserv AS ccfa WHERE ccfa.cfsnclinic = ? AND ccfa.cfsnnumfac = ? "
						+ " AND ccfa.cfsnestado = ?  ");

				parametros.add(clinica);
				parametros.add(numDoc);
				parametros.add(DOC_ASENTADO);

			}

			resultList = this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			if (resultList.size() != 0) {
				factura = resultList.get(0);
			}

		} catch (HibernateException e) {
			throw new ModelException(
					"Error consultando facturas:" + e.getMessage() + " Causa: " + e.getCause().getMessage(), e);
		} catch (Exception e) {
			throw new ModelException(
					"Error consultando facturas:" + e.getMessage() + " Causa: " + e.getCause().getMessage(), e);
		}
		return factura;

	}

	/**
	 * Obtener una lista del detalle de una factura.
	 */
	public List getDetalleFact(Integer tipDoc, Integer numConsecutivo) throws ModelException {

		java.util.List resultList = null;
		List parametros = new ArrayList();

		try {

			StringBuffer sb = new StringBuffer();
			if (tipDoc.intValue() == 20 || tipDoc.intValue() == 51) {
				sb.append("SELECT ccde FROM Ccdetfacve ccde  WHERE ccde.id.cdvnconsec = ?  AND ccde.cdvcswpaqu = 'N' ");
				parametros.add(numConsecutivo);
			} else {
				sb.append(
						"SELECT ccde FROM Ccdetafact AS ccde WHERE ccde.id.cdfnnumero = ? AND ccde.cdfcswpaqu = 'N' ");
				parametros.add(numConsecutivo);
			}

			resultList = this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

		} catch (HibernateException e) {
			throw new ModelException(
					"Error consultando detalle de facturas:" + e.getMessage() + " Causa: " + e.getCause().getMessage(),
					e);
		} catch (Exception e) {
			throw new ModelException(
					"Error consultando detalle de facturas:" + e.getMessage() + " Causa: " + e.getCause().getMessage(),
					e);
		}
		return resultList;
	}

	/**
	 * @param serv
	 * @return cpservicio
	 * @throws ModelException
	 */
	public Cpservicio getServicioClinico(Cpservicio serv) throws ModelException {
		Cpservicio cpservicio = null;
		java.util.List resultList = null;
		try {
			StringBuffer sb = new StringBuffer();
			sb.append("SELECT cpse FROM " + Cpservicio.class.getName() + " AS cpse WHERE rownum > 0 ");
			if (serv != null) {
				if (serv.getCsvccodigo() != null) {
					sb.append(" AND cpse.csvccodigo = '" + serv.getCsvccodigo() + "' ");
				}
			}
			resultList = this.getHibernateTemplate().find(sb.toString());
			if (resultList.size() != 0) {
				cpservicio = (Cpservicio) resultList.get(0);
			}
		} catch (HibernateException e) {
			throw new ModelException(
					"Error consultando Servicios:" + e.getMessage() + " Causa: " + e.getCause().getMessage(), e);
		} catch (Exception e) {
			throw new ModelException(
					"Error consultando Servicios:" + e.getMessage() + " Causa: " + e.getCause().getMessage(), e);
		}
		return cpservicio;
	}

	/**
	 * Obtener Lista de otras Patologias para lectura en laboratorios.
	 */
	public List getPatologiasLectura(Date fechaInicial, Date fechafinal, int codCentro, int patologo)
			throws ModelException {

		List resultList = null;

		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		String fechaI = dateFormat.format(fechaInicial.getTime()) + HORA_INICIAL;
		String fechaF = dateFormat.format(fechafinal.getTime()) + HORA_FINAL;

		try {

			StringBuffer sb = new StringBuffer();
			sb.append(
					"SELECT  chop.chopnconsec, chop.chopdfechareg, chop.chopnclinorig, cpcl.cclcnombre, chop.chopntipodoc, chop.chopnnumdoc, chop.chopccodiserv, cpse.csvcnombre "
							+ ", ccfa.cfvctipide, ccfa.cfvanumide, (ccfa.cfvcpriape ||' '|| ccfa.cfvcprinom ||' '|| ccfa.cfvcsegape ||' '|| ccfa.cfvcsegnom) PACIENTE, chpr.hppngrupat, cppr.cpfcnombre "
							+ "FROM historia.Chotraspatolog chop, clinico.cpclinica cpcl, clinico.cpservicio cpse, clinico.ccfactvent ccfa, historia.Chprofpatol chpr, clinico.Cpprofesio cppr  "
							+ "WHERE (chop.chopdfechareg BETWEEN TO_DATE(?,'dd/MM/yyyy hh24:mi') AND TO_DATE(?,'dd/MM/yyyy hh24:mi'))  AND chop.chopnclinorig = ? "
							+ "AND chop.chopnconsec NOT IN ( SELECT chde.hepnpatologia FROM historia.Chdetaentpatol chde WHERE chde.hepnpatologia = chop.chopnconsec ) "
							+ "AND chop.chopccodiserv = cpse.csvccodigo AND chop.chopnclinorig = cpcl.cclncodigo "
							+ "AND chop.chopnnumdoc = ccfa.cfvnnumero AND chop.chopntipodoc = ccfa.cfvntipdoc "
							+ "AND ccfa.cfvnclinic = chop.chopnclinorig "
							+ "AND chpr.hppcservicio = chop.chopccodiserv AND chpr.hppnclinlect = chop.chopnclinorig AND chpr.hppncodprofes = ? "
							+ "AND chpr.hppncodprofes = cppr.cpfncodigo AND chpr.hppnclinprof = cppr.cpfnclinic "
							+ "UNION ALL "
							+ "SELECT  chop.chopnconsec, chop.chopdfechareg, chop.chopnclinorig, cpcl.cclcnombre, chop.chopntipodoc, chop.chopnnumdoc, chop.chopccodiserv, cpse.csvcnombre "
							+ ", ccfa.cfsctipide, ccfa.cfsanumide, ccfa.cfscpacien, chpr.hppngrupat, cppr.cpfcnombre  "
							+ "FROM historia.Chotraspatolog chop, clinico.cpclinica cpcl, clinico.cpservicio cpse, clinico.ccfactserv ccfa, historia.Chprofpatol chpr, clinico.Cpprofesio cppr "
							+ "WHERE (chop.chopdfechareg BETWEEN TO_DATE(?,'dd/MM/yyyy hh24:mi') AND TO_DATE(?,'dd/MM/yyyy hh24:mi'))  AND chop.chopnclinorig = ? "
							+ "AND chop.chopnconsec NOT IN ( SELECT chde.hepnpatologia FROM historia.Chdetaentpatol chde WHERE chde.hepnpatologia = chop.chopnconsec )"
							+ " AND chop.chopccodiserv = cpse.csvccodigo AND chop.chopnclinorig = cpcl.cclncodigo "
							+ "AND chop.chopnnumdoc = ccfa.cfsnnumfac AND ccfa.cfsnclinic = chop.chopnclinorig "
							+ "AND chpr.hppcservicio = chop.chopccodiserv AND chpr.hppnclinlect = chop.chopnclinorig AND chpr.hppncodprofes = ? "
							+ "AND chpr.hppncodprofes = cppr.cpfncodigo AND chpr.hppnclinprof = cppr.cpfnclinic ");

			Query sqlquery = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
					.createQuery(sb.toString());

			sqlquery.setParameter(0, fechaI);
			sqlquery.setParameter(1, fechaF);
			sqlquery.setParameter(2, codCentro);
			sqlquery.setParameter(3, patologo);

			sqlquery.setParameter(4, fechaI);
			sqlquery.setParameter(5, fechaF);
			sqlquery.setParameter(6, codCentro);
			sqlquery.setParameter(7, patologo);

			resultList = sqlquery.list();

		} catch (HibernateException e) {
			throw new ModelException("Error consultando otras patologias:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando otras patologias:" + e.getMessage(), e);
		}

		return resultList;
	}

	/**
	 * @return
	 * @throws ModelException
	 */
	public List<Chcirugprogr> getCirugiasClinicasXFecha(final Date date, final Date fechaFinal, final Integer sala,
			final Integer codclin, final Long wusuario) throws ModelException {
		List<Chcirugprogr> pis = (List<Chcirugprogr>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
				String fechaI = dateFormat.format(date.getTime()) + HORA_INICIAL;
				String fechaF = dateFormat.format(fechaFinal.getTime()) + HORA_FINAL;

				StringBuffer sb = new StringBuffer();
				sb.append("select chcp from ");
				sb.append(Chcirugprogr.class.getName()).append(" chcp ");
				sb.append(" where chcp.hcpcestado <> 'XX' ");
				sb.append(" and chcp.hcpnclinica = :clinica ");

				if (wusuario != null) {
					sb.append(" and chcp.hcplusuario.husanumeiden = :wusuario ");
				} else {
					sb.append(
							" and (chcp.hcpdfechacirug BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi')) ");
					if (sala != null && !sala.equals("")) {
						sb.append(" and chcp.hcpnsalainterv = :sala ");
					}
				}

				sb.append(" order by  chcp.hcpdfechacirug , chcp.hcpnsalainterv ");
				String hql = sb.toString();

				Query query = session.createQuery(hql);
				if (wusuario != null) {
					query.setParameter("wusuario", wusuario);
				} else {
					query.setParameter("fechaI", fechaI);
					query.setParameter("fechaF", fechaF);

					if (sala != null && !sala.equals("")) {
						query.setParameter("sala", sala);
					}
				}

				query.setParameter("clinica", codclin);

				List<Chcirugprogr> lstusu;
				lstusu = query.list();

				for (Chcirugprogr usu : lstusu) {
					Chusuario usuario = usu.getHcplusuario();
					Hibernate.initialize(usuario);
				}

				// TODO: SE TIENE QUE REALIZAR EL REPORTE CON TODAS LAS CIRUGIAS PROGRAMADAS

				/*
				 * select * from Chcirugprogr chcp , CHDETACIRPRO chdc where
				 * to_char(chcp.hcpdfechacirug,'dd/MM/yyyy') = :diaCons and chcp.hcpcestado <>
				 * 'XX' and chcp.hcpnsalainterv = :sala and chcp.hcpnclinica = :clinica and
				 * chdc.HDCLCONSUPRINC = chcp.HCPLNUMERO order by chcp.hcpdfechacirug ,
				 * chcp.hcpnsalainterv
				 */

				return lstusu;
			}
		});
		return pis;
	}

	/**
	 * Obtener Lista de Profesionales para Lectura de otras patologias.
	 */
	public Cpprofesio getProfesionalesPatologia(int codCentro, Integer codProf) throws ModelException {

		List<Chprofpatol> resultList = null;
		Cpprofesio prof = new Cpprofesio();

		try {

			if (codProf == null) {

				StringBuffer sb = new StringBuffer();
				sb.append("SELECT chpl FROM " + Chprofpatol.class.getName()
						+ "  chpl WHERE chpl.hppcestado = 'VG' AND chpl.comp_id.hppnclinlect = ? ");
				resultList = (List<Chprofpatol>) this.getHibernateTemplate().find(sb.toString(), codCentro);

				if (resultList.isEmpty()) {

					StringBuffer sb1 = new StringBuffer();
					sb1.append("SELECT chpl FROM " + Chprofpatol.class.getName()
							+ "  chpl WHERE chpl.hppcestado = 'VG' AND chpl.comp_id.hppnclinlect = 0 ");
					resultList = (List<Chprofpatol>) this.getHibernateTemplate().find(sb1.toString());

				}

			} else {

				StringBuffer sb3 = new StringBuffer();
				sb3.append("SELECT chpl FROM " + Chprofpatol.class.getName()
						+ "  chpl WHERE chpl.hppcestado = 'VG' AND chpl.comp_id.hppncodprofes != ? ");
				resultList = (List<Chprofpatol>) this.getHibernateTemplate().find(sb3.toString(), codProf);

			}

			if (!resultList.isEmpty()) {

				BigDecimal codprofes = (resultList.get(0)).getComp_id().getHppncodprofes();

				StringBuffer sb2 = new StringBuffer();
				sb2.append("SELECT cppr FROM " + Cpprofesio.class.getName() + "  cppr WHERE cppr.id.cpfncodigo = ? ");
				prof = (Cpprofesio) (this.getHibernateTemplate().find(sb2.toString(), codprofes.intValue())).get(0);

			}

		} catch (HibernateException e) {
			throw new ModelException("Error consultando lista de profesionales para lectura:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando lista de profesionales para lectura:" + e.getMessage(), e);
		}
		return prof;
	}

	/**
	 * @see ClinicoDaoImp#saveListaEntregaPatologia(entregapatol) Salvar o modificar
	 *      listado de patologias a entregar
	 */
	public BigDecimal saveListaEntregaPatologia(Chentregapatol entregapatol) throws ModelException {
		this.getHibernateTemplate().getSessionFactory();
		SessionFactory sessionFactory = this.getHibernateTemplate().getSessionFactory();
		Session session = sessionFactory.openSession();
		Transaction tx = session.beginTransaction();

		BigDecimal secuenciaActual = new BigDecimal(0);

		try {

			if (entregapatol.getHeplidentificador() == null) {
				session.saveOrUpdate(entregapatol);
				StringBuffer sb = new StringBuffer();
				sb.append("SELECT HISTORIA.SEC_CHENTREGAPATOL.CURRVAL FROM DUAL");
				String hql = sb.toString();
				Query query = session.createQuery(hql);
				secuenciaActual = (BigDecimal) query.uniqueResult();
			} else {
				StringBuffer sb = new StringBuffer();
				sb.append("DELETE FROM historia.chdetaentpatol chde WHERE chde.heplidentregapatol = :id");
				Query query = session.createQuery(sb.toString());
				query.setLong("id", entregapatol.getHeplidentificador());
				int rowCount = query.executeUpdate();
				session.saveOrUpdate(entregapatol);
				secuenciaActual = (BigDecimal.valueOf(entregapatol.getHeplidentificador()));
			}
			for (Chdetaentpatol chdetaentpatol : (Set<Chdetaentpatol>) entregapatol.getChdetaentpatols()) {
				chdetaentpatol.getComp_id().setHeplidentregapatol(new Long(secuenciaActual.longValue()));
				session.saveOrUpdate(chdetaentpatol);
			}

		} catch (HibernateException e) {
			tx.rollback();
			throw new ModelException("Error Registrando Listado de Entrega otras patologias:" + e.getMessage(), e);
		} catch (Exception e) {
			tx.rollback();
			throw new ModelException("Error Registrando Listado de Entrega otras patologias:" + e.getMessage(), e);
		} finally {
			try {
				tx.commit();
			} catch (Exception e) {
				throw new ModelException("Error confirmando Transaccion" + e.getMessage(), e);
			} finally {
				session.close();
			}
		}

		return secuenciaActual;
	}

	/**
	 * obtener una lista de Patologos Generales para lectura.
	 */
	public List getPatologosGeneral(Chprofpatol profesionalLectura) throws ModelException {

		java.util.List resultList = null;
		try {

			StringBuffer sb = new StringBuffer();
			sb.append("SELECT a FROM Chprofpatol AS a WHERE rownum > 0 ");

			List param = new ArrayList();

			if (profesionalLectura != null) {
				if (profesionalLectura.getComp_id().getHppnclinlect() != null) {
					sb.append(" AND a.comp_id.hppnclinlect = ? ");
					param.add(profesionalLectura.getComp_id().getHppnclinlect());
				}

				if (profesionalLectura.getComp_id().getHppncodprofes() != null) {
					sb.append(" AND a.comp_id.hppncodprofes = ? ");
					param.add(profesionalLectura.getComp_id().getHppncodprofes());
				}

				if (profesionalLectura.getComp_id().getHppcservicio() != null) {
					sb.append(" AND a.comp_id.hppcservicio = ? ");
					param.add(profesionalLectura.getComp_id().getHppcservicio());
				}

			}

			sb.append(" ORDER BY a.comp_id.hppnclinlect ");
			resultList = this.getHibernateTemplate().find(sb.toString(), param.toArray());

			if (!resultList.isEmpty()) {

				for (Chprofpatol profPatol : (List<Chprofpatol>) resultList) {

					List param1 = new ArrayList();

					StringBuffer sb1 = new StringBuffer();
					sb1.append("SELECT cppr FROM " + Cpprofesio.class.getName()
							+ "   cppr WHERE  cppr.id.cpfncodigo = ? AND cppr.id.cpfnclinic = ?");

					param1.add(profPatol.getComp_id().getHppncodprofes());
					param1.add(profPatol.getHppnclinprof());

					profPatol.setCpprofesio(
							(Cpprofesio) this.getHibernateTemplate().find(sb1.toString(), param1.toArray()).get(0));

					StringBuffer sb2 = new StringBuffer();
					sb2.append("SELECT cpcl FROM " + Cpclinica.class.getName() + " cpcl WHERE  cpcl.cclncodigo = ? ");
					profPatol.setCentroProfesional(((Cpclinica) this.getHibernateTemplate()
							.find(sb2.toString(), profPatol.getHppnclinprof()).get(0)).getCclcnombre());

					StringBuffer sb3 = new StringBuffer();
					sb3.append("SELECT cpcl FROM " + Cpclinica.class.getName() + " cpcl WHERE  cpcl.cclncodigo = ? ");

					if (this.getHibernateTemplate().find(sb3.toString(), profPatol.getComp_id().getHppnclinlect())
							.size() != 0) {
						profPatol.setCentroLectura(((Cpclinica) this.getHibernateTemplate()
								.find(sb3.toString(), profPatol.getComp_id().getHppnclinlect()).get(0))
										.getCclcnombre());
					} else {
						profPatol.setCentroLectura("NACIONAL");
					}

					StringBuffer sb4 = new StringBuffer();
					sb4.append("SELECT cpse FROM " + Cpservicio.class.getName() + " cpse WHERE  cpse.csvccodigo = ? ");
					profPatol.setNombservicio(((Cpservicio) this.getHibernateTemplate()
							.find(sb4.toString(), profPatol.getComp_id().getHppcservicio()).get(0)).getCsvcnombre());

				}

			}

		} catch (HibernateException e) {
			throw new ModelException(
					"Error consultando Profesionales" + e.getMessage() + " Causa: " + e.getCause().getMessage(), e);
		} catch (Exception e) {
			throw new ModelException(
					"Error consultando Profesionales" + e.getMessage() + " Causa: " + e.getCause().getMessage(), e);
		}
		return resultList;
	}

	/**
	 * @param profPatologia
	 */
	public void saveProfesionalGeneral(Chprofpatol profPatologia) throws ModelException {

		try {
			this.getHibernateTemplate().saveOrUpdate(profPatologia);
		} catch (HibernateException e) {
			throw new ModelException("Error ingresar o actualizar profesional para patologia general:" + e.getMessage(),
					e);
		} catch (Exception e) {
			throw new ModelException("Error ingresar o actualizar profesional para patologia general:" + e.getMessage(),
					e);
		}

	}

	/**
	 * Obtener Listado de Pattologias para registro de resultados.
	 */
	public List getListadoPatologias(Chdetaentpatol detaentpatol) throws ModelException {
		List resultList = null;
		try {
			StringBuffer sb = new StringBuffer();
			sb.append("SELECT chop FROM Chdetaentpatol chdp, Chentregapatol chep, Chotraspatolog chop  "
					+ " WHERE chep.heplidentificador = chdp.comp_id.heplidentregapatol AND chdp.comp_id.hepnpatologia = chop.chopnconsec ");

			List param = new ArrayList();
			if (detaentpatol != null) {

				if (detaentpatol.getHepcetapa() != null) {
					sb.append(" AND chdp.hepcetapa = ? ");
					param.add(detaentpatol.getHepcetapa());
				}

				if (detaentpatol.getComp_id() != null && detaentpatol.getComp_id().getHeplidentregapatol() != null) {
					sb.append(" AND chdp.comp_id.heplidentregapatol = ? ");
					param.add(detaentpatol.getComp_id().getHeplidentregapatol());
				}

				if (detaentpatol.getComp_id() != null && detaentpatol.getComp_id().getHepnpatologia() != null) {
					sb.append(" AND chdp.comp_id.hepnpatologia = ? ");
					param.add(detaentpatol.getComp_id().getHepnpatologia());
				}
			}

			sb.append(" ORDER BY chdp.comp_id.hepnpatologia DESC ");
			resultList = this.getHibernateTemplate().find(sb.toString(), param.toArray());

			if (!resultList.isEmpty()) {

				for (Chotraspatolog patol : (List<Chotraspatolog>) resultList) {

					java.util.List listDetalle = null;

					StringBuffer sbDetalle = new StringBuffer();
					sbDetalle.append(
							"SELECT chep.heplidentificador, chde.hepcetapa, chde.hepnclinica, cpcl.cclcnombre, chep.hepnlablectura, cppr.cpfcnombre "
									+ ", chop.chopccodiserv , cpse.csvcnombre "
									+ "FROM historia.chdetaentpatol chde, historia.chentregapatol chep, historia.chotraspatolog chop, clinico.cpclinica cpcl "
									+ ", clinico.cpprofesio cppr, clinico.cpservicio cpse "
									+ "WHERE chde.hepnpatologia = ? "
									+ "AND chde.heplidentregapatol = chep.heplidentificador "
									+ "AND chde.hepnpatologia = chop.chopnconsec "
									+ "AND chde.hepnclinica = cpcl.cclncodigo "
									+ "AND chep.hepnclinica = cppr.cpfnclinic AND chep.hepnlablectura = cppr.cpfncodigo "
									+ "AND cpse.csvccodigo = chop.chopccodiserv");

					Query sqlquery = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
							.createQuery(sbDetalle.toString());
					sqlquery.setParameter(0, patol.getChopnconsec());
					listDetalle = sqlquery.list();

					if (!listDetalle.isEmpty()) {
						Iterator i = listDetalle.iterator();
						while (i.hasNext()) {

							Object[] a = (Object[]) i.next();
							patol.setNombClinica(a[3].toString());
							patol.setNombServcio(a[7].toString());
							patol.setIdListado(((BigDecimal) a[0]).longValue());
							patol.setEtapapatol(a[1].toString());
							patol.setIdLab(((BigDecimal) a[4]).intValue());
							patol.setLaboratorio(a[5].toString());

							if (patol.getChopntipodoc().intValue() == 20 || patol.getChopntipodoc().intValue() == 51) {
								Ccfactvent facturaVenta = (Ccfactvent) this.getInfoFactura(patol.getChopnclinorig(),
										patol.getChopntipodoc(), patol.getChopnnumdoc());
								if (facturaVenta != null) {
									patol.setTipoIden((String) facturaVenta.getCfvctipide());
									patol.setNumInden(facturaVenta.getCfvanumide().longValue());
									patol.setNombusuario(facturaVenta.getCfvcprinom() + " "
											+ facturaVenta.getCfvcsegnom() + " " + facturaVenta.getCfvcpriape() + " "
											+ facturaVenta.getCfvcsegape());
								}

							} else if (patol.getChopntipodoc().intValue() == 2) {
								Ccfactserv facturaServicio = (Ccfactserv) this.getInfoFactura(patol.getChopnclinorig(),
										patol.getChopntipodoc(), patol.getChopnnumdoc());
								if (facturaServicio != null) {
									patol.setTipoIden((String) facturaServicio.getCfsctipide());
									patol.setNumInden(facturaServicio.getCfsanumide().longValue());
									patol.setNombusuario((String) facturaServicio.getCfscpacien());
								}
							}

						}

					}

				}

			}

		} catch (HibernateException e) {
			throw new ModelException("Error consultando listado de Patologias :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando listado de Patologias:" + e.getMessage(), e);
		}

		return resultList;
	}

	/**
	 * obtener una lista de Patologias Enviadas.
	 */
	public List getListaEntregaPatol(Chentregapatol entregapatol) throws ModelException {

		java.util.List resultList = null;
		try {

			StringBuffer sb = new StringBuffer();
			sb.append("SELECT a FROM Chentregapatol AS a WHERE rownum > 0 ");

			List param = new ArrayList();

			if (entregapatol != null) {
				if (entregapatol.getHeplidentificador() != null) {
					sb.append(" AND a.heplidentificador = ? ");
					param.add(entregapatol.getHeplidentificador());
				}

			}

			sb.append(" ORDER BY a.heplidentificador ");
			resultList = this.getHibernateTemplate().find(sb.toString(), param.toArray());

		} catch (HibernateException e) {
			throw new ModelException("Error consultando lista de patologias enviadas" + e.getMessage() + " Causa: "
					+ e.getCause().getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando lista de patologias enviadas" + e.getMessage() + " Causa: "
					+ e.getCause().getMessage(), e);
		}
		return resultList;
	}

	/**
	 * @param chentregapatol
	 */
	public void saveCabeceraListaEnvio(Chentregapatol chentregapatol) throws ModelException {

		try {
			this.getHibernateTemplate().saveOrUpdate(chentregapatol);
		} catch (HibernateException e) {
			throw new ModelException("Error ingresar o actualizar lista envio:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error ingresar o actualizar lista envio:" + e.getMessage(), e);
		}

	}

	/**
	 * obtener una lista de Patologos.
	 */
	public List getComboPatologos(Chprofpatol profesionalLectura) throws ModelException {

		java.util.List resultList = null;
		try {

			StringBuffer sb = new StringBuffer();
			sb.append("SELECT DISTINCT cppr " + "FROM Chprofpatol chpp, Cpprofesio cppr "
					+ "WHERE chpp.comp_id.hppncodprofes = cppr.id.cpfncodigo AND chpp.hppnclinprof = cppr.id.cpfnclinic ");

			List param = new ArrayList();

			if (profesionalLectura != null) {
				if (profesionalLectura.getComp_id().getHppnclinlect() != null) {
					sb.append(" AND chpp.comp_id.hppnclinlect = ? ");
					param.add(profesionalLectura.getComp_id().getHppnclinlect());
				}
			}

			sb.append(" ORDER BY cppr.cpfcnombre ");
			resultList = this.getHibernateTemplate().find(sb.toString(), param.toArray());

		} catch (HibernateException e) {
			throw new ModelException(
					"Error consultando lista de patologos" + e.getMessage() + " Causa: " + e.getCause().getMessage(),
					e);
		} catch (Exception e) {
			throw new ModelException(
					"Error consultando lista de patologos" + e.getMessage() + " Causa: " + e.getCause().getMessage(),
					e);
		}
		return resultList;
	}

	public void updateEtapaPatologia(Chotraspatolog pat) throws ModelException {
		SessionFactory sessionFactory = this.getHibernateTemplate().getSessionFactory();
		Session session = sessionFactory.openSession();
		Transaction tx = session.beginTransaction();
		try {

			StringBuffer sb = new StringBuffer();
			sb.append("UPDATE historia.Chdetaentpatol chep SET chep.hepcetapa = :codetapa , hepdfechamod = SYSDATE "
					+ "WHERE heplidentregapatol = :identrega AND hepnpatologia = :idpatologia ");
			Query query = session.createQuery(sb.toString());
			query.setString("codetapa", pat.getEtapapatol());
			query.setLong("identrega", pat.getIdListado());
			query.setLong("idpatologia", pat.getChopnconsec().longValue());
			query.executeUpdate();

		} catch (HibernateException e) {
			tx.rollback();
			throw new ModelException("Error actualizando etapa de la patologia" + e.getMessage(), e);
		} catch (Exception e) {
			tx.rollback();
			throw new ModelException("Error actualizando etapa de la patologia" + e.getMessage(), e);
		} finally {
			try {
				tx.commit();
			} catch (Exception e) {
				throw new ModelException("Error confirmando etapa de la patologia" + e.getMessage(), e);
			} finally {
				session.close();
			}

		}
	}

	// FIXME FIN SEGUIMIENTO OTRAS PATOLOGIAS

	/**
	 * @param antecedente
	 * @throws ModelException
	 */
	public void saveAntecedentePsicologia(Chpsicoantec antecedente) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(antecedente);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Antecedentes Psicologicos" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Antecedentes Psicologicos" + e.getMessage(), e);
		}
	}

	/**
	 * @param numeroConsulta
	 * @param tipoServicio
	 * @throws ModelException
	 */
	public Chpsicoantec getAntecedentePsicologia(Long numeroConsulta, String tipoServicio) throws ModelException {
		List<Chpsicoantec> resultList = null;
		List parametros = new ArrayList();
		try {
			if (numeroConsulta != null && tipoServicio != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chap from " + Chpsicoantec.class.getName()
						+ " chap  where chap.id.hpalconsulta = ? AND chap.id.hpactiposervi = ? ");
				parametros.add(numeroConsulta);
				parametros.add(tipoServicio);

				resultList = (List<Chpsicoantec>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Antecedentes Generales:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Antecedentes Generales :" + e.getMessage(), e);
		}

	}

	/**
	 * @param evaluacion
	 * @throws ModelException
	 */
	public void saveEvaluacionGeneral(Chevalugener evaluacion) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(evaluacion);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Evaluaci�n General" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Evaluaci�n General" + e.getMessage(), e);
		}
	}

	/**
	 * @param numeroConsulta
	 * @param tipoServicio
	 * @return
	 * @throws ModelException
	 */
	public Chevalugener getEvaluacionGeneral(Long numeroConsulta, String tipoServicio) throws ModelException {
		List<Chevalugener> resultList = null;
		List parametros = new ArrayList();
		try {
			if (numeroConsulta != null && tipoServicio != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select cheg from " + Chevalugener.class.getName()
						+ " cheg  where cheg.id.heglconsulta = ? AND cheg.id.hegctiposerv = ? ");
				parametros.add(numeroConsulta);
				parametros.add(tipoServicio);

				resultList = (List<Chevalugener>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Evaluaci�n General:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Evaluaci�n General:" + e.getMessage(), e);
		}

	}

	/**
	 * @param plan
	 * @throws ModelException
	 */
	public void savePlanTratamiento(Chpladetrat plan) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(plan);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Plan Tratamiento" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Plan Tratamiento" + e.getMessage(), e);
		}
	}

	/**
	 * @param numeroConsulta
	 * @param tipoServicio
	 * @return
	 * @throws ModelException
	 */
	public Chpladetrat getPlanTratamiento(Long numeroConsulta, String tipoServicio) throws ModelException {
		List<Chpladetrat> resultList = null;
		List parametros = new ArrayList();
		try {
			if (numeroConsulta != null && tipoServicio != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chpt from " + Chpladetrat.class.getName()
						+ " chpt  where chpt.id.hptlconsulta = ? AND chpt.id.hptctiposervi = ? ");
				parametros.add(numeroConsulta);
				parametros.add(tipoServicio);

				resultList = (List<Chpladetrat>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Plan de Tratamiento:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Plan de Tratamiento:" + e.getMessage(), e);
		}

	}

	/**
	 * @param seguimiento
	 * @throws ModelException
	 */
	public void saveSeguimientoPsicologia(Chseguipsico seguimiento) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(seguimiento);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Segumiento Psicologia" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Segumiento Psicologia" + e.getMessage(), e);
		}
	}

	/**
	 * @param numeroConsulta
	 * @param tipoServicio
	 * @return
	 * @throws ModelException
	 */
	public Chseguipsico getSeguimientoPsicologia(Long numeroConsulta, String tipoServicio) throws ModelException {
		List<Chseguipsico> resultList = null;
		List parametros = new ArrayList();
		try {
			if (numeroConsulta != null && tipoServicio != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chsc from " + Chseguipsico.class.getName()
						+ " chsc  where chsc.id.hsplconsulta = ? AND chsc.id.hspctiposervi = ? ");
				parametros.add(numeroConsulta);
				parametros.add(tipoServicio);

				resultList = (List<Chseguipsico>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Seguimiento Psicologia:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Seguimiento Psicologia:" + e.getMessage(), e);
		}

	}

	/**
	 * @param aplicacion
	 * @throws ModelException
	 */
	public void saveAplicacionCervix(Chcervaaplic aplicacion) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(aplicacion);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Aplicacion Cervix" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Aplicacion Cervix" + e.getMessage(), e);
		}
	}

	/**
	 * @param medicamento
	 * @throws ModelException
	 */
	public void saveAplicacionMedicamento(final List<Chmedicament> medicamento, final Long numeroConsulta,
			final String usuario) throws ModelException {
		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {

					List<Chmedicament> resultList = null;
					List parametros = new ArrayList();
					// deleteAplicacionMedicamento(medicamento);
					for (Chmedicament aux : medicamento) {
						Chmedicament med = new Chmedicament();
						Long consulta = 0L;
						Long consultaAsociada = 0L;
						int consecutivo;

						consulta = aux.getId().getHmelconsulta();
						consultaAsociada = aux.getId().getHmelconsuasoci();
						consecutivo = aux.getId().getHmenconsecut();

						StringBuffer sb = new StringBuffer();
						sb.append(" select chmd from " + Chmedicament.class.getName()
								+ " chmd  where chmd.id.hmelconsulta = :numeroConsulta and chmd.id.hmelconsuasoci = :consultaAsociada and chmd.id.hmenconsecut = :consecutivo ");

						parametros.add(aux.getId().getHmelconsulta().toString());
						parametros.add(aux.getId().getHmelconsuasoci().toString());
						parametros.add(aux.getId().getHmenconsecut().toString());

						String hql = sb.toString();

						Query query = session.createQuery(hql);
						query.setParameter("numeroConsulta", aux.getId().getHmelconsulta().toString());
						query.setParameter("consultaAsociada", aux.getId().getHmelconsuasoci().toString());
						query.setParameter("consecutivo", aux.getId().getHmenconsecut().toString());
						List<Chmedicament> pis;
						pis = query.list();

						if (!pis.isEmpty()) {
							med = pis.get(0);
							med.setHmelcregiacti(aux.getHmelcregiacti());
							med.setHmecpresentaci(aux.getHmecpresentaci());
							med.setHmennumervacun(aux.getHmennumervacun());
							med.setHmeclotemedic(aux.getHmeclotemedic());
							med.setHmedfechavenci(aux.getHmedfechavenci());
							med.setHmecviadministr(aux.getHmecviadministr());
							med.setHmecsitioaplic(aux.getHmecsitioaplic());
							med.setHmelcgrusangu(aux.getHmelcgrusangu());
							med.setHmelcrh(aux.getHmelcrh());
							med.setHmecnomblabo(aux.getHmecnomblabo());
							med.setHmecobservac(aux.getHmecobservac());
							med.setHmelcregiacti(aux.getHmelcregiacti());
							med.setHmedfecregistr(new Date());
							med.setHmectiposerv("C");
							med.setHmecoperador(usuario);
							med.setHmentipohisto(aux.getHmentipohisto());
							med.setHmecmedicament(aux.getHmecmedicament());
							session.saveOrUpdate(med);
						} else {

							med.setId(aux.getId());
							med.setHmelcregiacti(aux.getHmelcregiacti());
							med.setHmecpresentaci(aux.getHmecpresentaci());
							med.setHmennumervacun(aux.getHmennumervacun());
							med.setHmeclotemedic(aux.getHmeclotemedic());
							med.setHmedfechavenci(aux.getHmedfechavenci());
							med.setHmecviadministr(aux.getHmecviadministr());
							med.setHmecsitioaplic(aux.getHmecsitioaplic());
							med.setHmelcgrusangu(aux.getHmelcgrusangu());
							med.setHmelcrh(aux.getHmelcrh());
							med.setHmecnomblabo(aux.getHmecnomblabo());
							med.setHmecobservac(aux.getHmecobservac());
							med.setHmelcregiacti(aux.getHmelcregiacti());
							med.setHmedfecregistr(new Date());
							med.setHmectiposerv("C");
							med.setHmecoperador(usuario);
							med.setHmentipohisto(aux.getHmentipohisto());
							med.setHmecmedicament(aux.getHmecmedicament());
							session.save(med);
						}

					}

					return resultList;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Modificando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Modificando :" + e.getMessage(), e);
		}

	}

	/**
	 * @param medicamento
	 * @throws ModelException
	 */
	public void deleteAplicacionMedicamento(final List<Chmedicament> medicamento) throws ModelException {

		try {
			for (Chmedicament aux : medicamento) {

				this.getHibernateTemplate().delete(aux);

			}
		} catch (HibernateException e) {
			throw new ModelException("Error Eliminando tema:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Eliminando tema:" + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroConsulta
	 * @param tipoServicio
	 * @return
	 * @throws ModelException
	 */
	public Chcervaaplic getAplicacionCervix(Long numeroConsulta, String tipoServicio) throws ModelException {
		List<Chcervaaplic> resultList = null;
		List parametros = new ArrayList();
		try {
			if (numeroConsulta != null && tipoServicio != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chca from " + Chcervaaplic.class.getName()
						+ " chca  where chca.id.hcalconsulta = ? AND chca.id.hcactiposervi = ? ");
				parametros.add(numeroConsulta);
				parametros.add(tipoServicio);

				resultList = (List<Chcervaaplic>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Aplicacion Cervix:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Aplicacion Cervix:" + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroConsulta
	 * @param consecutivo
	 * @return
	 * @throws ModelException
	 */
	public List<Chmedicament> getAdministracionMedicamento(Long numeroConsulta, Integer consecutivo)
			throws ModelException {
		List<Chmedicament> resultList = null;
		List parametros = new ArrayList();
		try {
			if (numeroConsulta != null && consecutivo != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(
						" select chmd from " + Chmedicament.class.getName() + " chmd  where chmd.id.hmelconsulta = ? ");
				parametros.add(numeroConsulta);

				resultList = (List<Chmedicament>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList;
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Aplicacion Cervix:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Aplicacion Cervix:" + e.getMessage(), e);
		}

	}

	/**
	 * @return
	 */
	public Chcervaaplic getAplicacionCervixPrimera(Long numeroUsuario) throws ModelException {
		List<Chcervaaplic> resultList = null;
		List parametros = new ArrayList();
		try {
			if (numeroUsuario != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chca from " + Chcervaaplic.class.getName()
						+ " chca  where chca.id.hcactiposervi = ? and  chca.id.hcalconsulta = (select max(chco.hcolnumero) from Chconsulta chco  where chco.hcolusuario.huslnumero = ?  and chco.hcocservicio.csvccodigo in (?,?) and chco.hcoeetapa = ?) ");
				parametros.add(IConstantes.TIPO_CONSULTA);
				parametros.add(numeroUsuario);
				parametros.add(IConstantes.CODIGO_VACUNACION_CERVIX_PRIMERA_TOMA);
				parametros.add(IConstantes.CODIGO_VACUNACION_GARDASIL_PRIMERA_TOMA);
				parametros.add(IConstantes.ETAPA_CERRADA);

				resultList = (List<Chcervaaplic>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Aplicacion Cervix:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Aplicacion Cervix:" + e.getMessage(), e);
		}

	}

	/**
	 * @return
	 */
	public Chcervaaplic getAplicacionCervixSegunda(Long numeroUsuario) throws ModelException {
		List<Chcervaaplic> resultList = null;
		List parametros = new ArrayList();
		try {
			if (numeroUsuario != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chca from " + Chcervaaplic.class.getName()
						+ " chca  where chca.id.hcactiposervi = ? and  chca.id.hcalconsulta = (select max(chco.hcolnumero) from Chconsulta chco  where chco.hcolusuario.huslnumero = ? and chco.hcocservicio.csvccodigo in  (?,?)  and chco.hcoeetapa = ?) ");
				parametros.add(IConstantes.TIPO_CONSULTA);
				parametros.add(numeroUsuario);
				parametros.add(IConstantes.CODIGO_VACUNACION_CERVIX_SEGUNDA_TOMA);
				parametros.add(IConstantes.CODIGO_VACUNACION_GARDASIL_SEGUNDA_TOMA);
				parametros.add(IConstantes.ETAPA_CERRADA);

				resultList = (List<Chcervaaplic>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Aplicacion Cervix:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Aplicacion Cervix:" + e.getMessage(), e);
		}

	}

	/**
	 * @param esterilizacion
	 * @throws ModelException
	 */
	public void saveEsterilizacionMasculina(Chestermascu esterilizacion) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(esterilizacion);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Esterilizaci�n Masculina" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Esterilizaci�n Masculina" + e.getMessage(), e);
		}
	}

	/**
	 * @param numeroUsuario
	 * @return
	 * @throws ModelException
	 */
	public Chestermascu getEsterilizacionMasculina(Long numeroUsuario) throws ModelException {
		List<Chestermascu> resultList = null;
		List parametros = new ArrayList();
		try {
			if (numeroUsuario != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chem from " + Chestermascu.class.getName()
						+ " chem  where chem.id.hemlconsulta = ? and  chem.id.hemctiposerv = ? ");
				parametros.add(numeroUsuario);
				parametros.add(IConstantes.TIPO_CONSULTA);

				resultList = (List<Chestermascu>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Esterilizaci�n Masculina:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Esterilizaci�n Masculina:" + e.getMessage(), e);
		}

	}

	/**
	 * @param clinica
	 * @param userName
	 * @throws ModelException
	 */
	public void updateClinicaUsuario(final Integer clinica, final String userName) throws ModelException {
		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {

					StringBuffer sb = new StringBuffer();
					sb.append(" update clinico.Cpusuxclin set cucndefaul = 0 " + "   where cuccusuari = :userName ");
					Query query = session.createQuery(sb.toString());
					query.setParameter("userName", userName);
					query.executeUpdate();

					StringBuffer sb1 = new StringBuffer();
					sb1.append(" update clinico.Cpusuxclin set cucndefaul = 1 "
							+ "   where cuccusuari = :userName AND cucnclinic = :clinica ");
					Query query1 = session.createQuery(sb1.toString());
					query1.setParameter("userName", userName);
					query1.setParameter("clinica", clinica);
					query1.executeUpdate();

					return clinica;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Modificando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Modificando :" + e.getMessage(), e);
		}
	}

	/**
	 * @param userName
	 * @return
	 * @throws ModelException
	 */
	public Integer getClinicaActiva(String userName) throws ModelException {
		List<Integer> resultList = null;
		List parametros = new ArrayList();
		try {
			if (userName != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select cpuc.id.cucnclinic from " + Cpusuxclin.class.getName()
						+ " cpuc  where upper(cpuc.id.cuccusuari) = ? and  cpuc.cucndefaul = 1 ");
				parametros.add(userName);

				resultList = (List<Integer>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Clinica Activa :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Clinica Activa :" + e.getMessage(), e);
		}

	}


	/**
	 * @param userName
	 * @param numeroUsuario
	 * @param fechaConsulta
	 * @return
	 * @throws ModelException
	 */
	public List<Chconsulta> getConsultasCerradasProfesional(final String userName, final Long numeroUsuario,
			final Date fechaConsulta) throws ModelException {
		List<Chconsulta> pis = (List<Chconsulta>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {
				String HORA_INICIAL = " 00:00";
				String HORA_FINAL = " 23:59";

				SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
				String fechaI = dateFormat.format(fechaConsulta.getTime()) + HORA_INICIAL;
				String fechaF = dateFormat.format(fechaConsulta.getTime()) + HORA_FINAL;

				StringBuffer sb = new StringBuffer();
				sb.append("SELECT chco from ");
				sb.append(Chconsulta.class.getName()).append(" chco ");
				sb.append("WHERE chco.hcoeetapa = 'CE' and chco.hcolusuario.huslnumero = :numeroUsuario  ");
				sb.append(
						" AND (chco.hcodfecregistr BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))");
				sb.append(" AND chco.hcocoperador =  :userName   ");

				String hql = sb.toString();

				Query query = session.createQuery(hql);
				query.setParameter("numeroUsuario", numeroUsuario);
				query.setParameter("fechaI", fechaI);
				query.setParameter("fechaF", fechaF);
				query.setParameter("userName", userName);
				List<Chconsulta> pis;
				pis = query.list();

				for (Chconsulta co : pis) {
					Cpservicio servicio = co.getHcocservicio();
					Hibernate.initialize(servicio);

					Chusuario usu = co.getHcolusuario();
					Hibernate.initialize(usu);
				}

				return pis;
			}
		});
		return pis;
	}

	/**
	 * @param solicitud
	 * @throws ModelException
	 */
	public void saveSolicitudAnulacion(Chsolicanula solicitud) throws Exception {
		try {
			this.getHibernateTemplate().saveOrUpdate(solicitud);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Solicitud Anulaci�n Consulta" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Solicitud Anulaci�n Consulta" + e.getMessage(), e);
		}
	}

	/**
	 * @param codclin
	 * @return
	 * @throws Exception
	 */
	public List<Chsolicanula> getSolicitudesAnulacionClinica(final Integer codclin) throws Exception {
		List<Chsolicanula> pis = (List<Chsolicanula>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				StringBuffer sb = new StringBuffer();
				sb.append("SELECT chsa from ");
				sb.append(Chsolicanula.class.getName()).append(" chsa ");
				sb.append("WHERE chsa.hsacetapa = 'VG' and chsa.hsanclinica = :codclin  ");

				String hql = sb.toString();

				Query query = session.createQuery(hql);
				query.setParameter("codclin", codclin);

				List<Chsolicanula> pis;
				pis = query.list();

				for (Chsolicanula sa : pis) {
					Cpservicio servicio = sa.getHsacservicio();
					Hibernate.initialize(servicio);

					Chusuario usuario = sa.getHsalusuario();
					Hibernate.initialize(usuario);
				}

				return pis;
			}
		});
		return pis;
	}

	/**
	 * @param solicitud
	 * @throws Exception
	 */
	public void updateSolicitudAnulacion(final Chsolicanula solicitud) throws Exception {
		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {

					if (solicitud != null) {
						session.saveOrUpdate(solicitud);
						if (solicitud.getHsacacepta() != null && solicitud.getHsacacepta().equals("S")) {

							Chconsulta consultaUsuario;
							consultaUsuario = null;

							StringBuffer sb = new StringBuffer();
							sb.append(" select chco from Chconsulta"
									+ " chco  where chco.hcolnumero = :numeroConsulta  AND chco.hcoctiposervi = :tipoServicio ");
							Query query = session.createQuery(sb.toString());
							query.setParameter("numeroConsulta", solicitud.getId().getHsalconsulta());
							query.setParameter("tipoServicio", solicitud.getId().getHsactiposervi());

							consultaUsuario = (Chconsulta) query.uniqueResult();

							consultaUsuario.setHcoeetapa(IConstantes.ESTADO_ANULADO);

							session.saveOrUpdate(consultaUsuario);

						}

					}

					return solicitud;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		}
	}

	/**
	 * @param numeroCitologia
	 * @return
	 * @throws Exception
	 */
	public boolean verificarCitologia(Integer numeroCitologia) throws Exception {

		List parametros;
		List<String> lstConsulta;

		try {

			parametros = new ArrayList();
			if (numeroCitologia != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select cnci.ccinconsec from ").append(Cncitologi.class.getName()).append(" cnci ");
				sb.append(" where cnci.ccinnumero = ? ");
				parametros.add(numeroCitologia);

				lstConsulta = (List<String>) getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (lstConsulta != null && !lstConsulta.isEmpty()) {
					return true;
				}

			}

			return false;

		} catch (HibernateException e) {
			throw new ModelException("Error Verificando si existe citologia:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Verificando si existe citologia:" + e.getMessage(), e);
		}

	}

	/**
	 * @param logimpresion
	 * @throws Exception
	 */
	public void saveLogImpresionHistorias(Chlogimpresi logimpresion) throws Exception {
		try {
			this.getHibernateTemplate().saveOrUpdate(logimpresion);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Log de la impresion historias" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Log de la impresion historias" + e.getMessage(), e);
		}
	}

	/**
	 * @param userName
	 * @param codclin
	 * @param dia
	 * @return
	 * @throws Exception
	 */
	public List<Chconsulta> getCitologiasImpresionUsuario(final String userName, final Integer codclin, final Date dia)
			throws Exception {
		List<Chconsulta> pis = (List<Chconsulta>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				String HORA_INICIAL = " 00:00";
				String HORA_FINAL = " 23:59";

				SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
				String fechaI = dateFormat.format(dia) + HORA_INICIAL;
				String fechaF = dateFormat.format(dia) + HORA_FINAL;

				StringBuffer sb = new StringBuffer();
				sb.append("SELECT chco from ");
				sb.append(Chconsulta.class.getName()).append(" chco ");
				sb.append("WHERE    ");
				sb.append("   chco.hcocservicio.csvntiphis  in (:wtiphistoma, :wtiphislectura, :wtiphiscero ) ");
				sb.append(
						" AND (chco.hcodfecregistr BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))");
				sb.append(" AND chco.hcocoperador = :userName  ");
				sb.append(" AND chco.hconclinica = :codclin ");

				String hql = sb.toString();

				Query query = session.createQuery(hql);
				query.setParameter("fechaI", fechaI);
				query.setParameter("fechaF", fechaF);
				query.setParameter("userName", userName);
				query.setParameter("codclin", codclin);
				query.setParameter("wtiphistoma", IConstantes.HISTORIA_PROCEDIMIENTO_CITOLOGIA_TOMA);
				query.setParameter("wtiphislectura", IConstantes.HISTORIA_PROCEDIMIENTO_CITOLOGIA_LECTURA);
				query.setParameter("wtiphiscero", IConstantes.HISTORIA_TODAS);

				List<Chconsulta> pis;
				pis = query.list();

				for (Chconsulta co : pis) {
					Cpservicio servicio = co.getHcocservicio();
					Hibernate.initialize(servicio);

					Chusuario usu = co.getHcolusuario();
					Hibernate.initialize(usu);

				}

				return pis;
			}
		});
		return pis;
	}

	/**
	 * @param userName
	 * @param codclin
	 * @param dia
	 * @return
	 * @throws Exception
	 */
	public List<Chconsulta> getConsultasSinCerrar(final String userName, final Integer codclin, final Date dia)
			throws Exception {
		List<Chconsulta> pis = (List<Chconsulta>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				String HORA_INICIAL = " 00:00";
				String HORA_FINAL = " 23:59";

				String fechaI = null;
				String fechaF = null;

				if (dia != null) {
					SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
					fechaI = dateFormat.format(dia) + HORA_INICIAL;
					fechaF = dateFormat.format(dia) + HORA_FINAL;
				}

				StringBuffer sb = new StringBuffer();
				sb.append("SELECT chco from ");
				sb.append(Chconsulta.class.getName()).append(" chco, ");
				sb.append(Chimprdiag.class.getName()).append(" chid ");
				sb.append("WHERE    ");
				sb.append(" chco.hcolnumero  = chid.id.hidlconsulta ");
				sb.append(" AND  chco.hcoeetapa = 'AB' ");
				sb.append(" AND  chco.hcocservicio.csvntiphis not in (10,34,47,44,45,46, 50,51,52,53,54,55,56)  ");
				sb.append(" AND chco.hcocoperador = :userName  ");
				sb.append(" AND chco.hconclinica = :codclin ");
				if (dia != null) {
					sb.append(
							" AND (chco.hcodfecregistr BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))");
				}
				sb.append(" order by chco.hcodfecregistr desc ");
				String hql = sb.toString();

				Query query = session.createQuery(hql);
				query.setParameter("userName", userName);
				query.setParameter("codclin", codclin);

				if (dia != null) {
					query.setParameter("fechaI", fechaI);
					query.setParameter("fechaF", fechaF);
				}

				List<Chconsulta> pis;
				pis = query.list();

				for (Chconsulta co : pis) {

					Cpservicio servicio = co.getHcocservicio();
					Hibernate.initialize(servicio);

					Chusuario usu = co.getHcolusuario();
					Hibernate.initialize(usu);

				}

				return pis;
			}
		});
		return pis;
	}

	public Chremisilve getRemisionIlve(Long numeroConsulta, String tipoServicio) throws ModelException {
		List resultList = null;
		List parametros = new ArrayList();
		try {
			if (numeroConsulta != null && tipoServicio != null) {
				StringBuffer sb = new StringBuffer();
				sb.append((new StringBuilder()).append(" select chri from ").append(Chremisilve.class.getName())
						.append(" chri  where chri.id.hrilconsulta = ? AND chri.id.hrictiposerv = ? ").toString());
				parametros.add(numeroConsulta);
				parametros.add(tipoServicio);
				resultList = getHibernateTemplate().find(sb.toString(), parametros.toArray());
				if (!resultList.isEmpty()) {
					Chremisilve chremisilve = (Chremisilve) resultList.get(0);
					return chremisilve;
				}
			}
			Chremisilve chremisilve1 = null;
			return chremisilve1;
		} catch (HibernateException e) {
			throw new ModelException(
					(new StringBuilder()).append("Error consultando Remision Ilve:").append(e.getMessage()).toString(),
					e);
		} catch (Exception e) {
			throw new ModelException(
					(new StringBuilder()).append("Error consultando Remision Ilve:").append(e.getMessage()).toString(),
					e);
		}
	}

	/**
	 * @param remision
	 * @throws ModelException
	 */
	public void saveRemisionIlve(Chremisilve remision) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(remision);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando remision ilve" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando remision ilve" + e.getMessage(), e);
		}
	}

	/**
	 * @param evaluacion
	 * @throws ModelException
	 */
	public void saveEstadoPsicoemocional(Chestadpsico evaluacion) throws ModelException {
		try {
			getHibernateTemplate().saveOrUpdate(evaluacion);
		} catch (HibernateException e) {
			throw new ModelException((new StringBuilder()).append("Error Insertando Estado Psicoemocional")
					.append(e.getMessage()).toString(), e);
		} catch (Exception e) {
			throw new ModelException((new StringBuilder()).append("Error Insertando Estado Psicoemocional")
					.append(e.getMessage()).toString(), e);
		}
	}

	/**
	 * @param numeroConsulta
	 * @param tipoServicio
	 * @return
	 * @throws ModelException
	 */
	public Chestadpsico getEstadoPsicoemocional(Long numeroConsulta, String tipoServicio) throws ModelException {
		List resultList = null;
		List parametros = new ArrayList();
		try {
			if (numeroConsulta != null && tipoServicio != null) {
				StringBuffer sb = new StringBuffer();
				sb.append((new StringBuilder()).append(" select chep from ").append(Chestadpsico.class.getName())
						.append(" chep  where chep.id.heplconsulta = ? AND chep.id.hepctiposerv = ? "));
				parametros.add(numeroConsulta);
				parametros.add(tipoServicio);
				resultList = getHibernateTemplate().find(sb.toString(), parametros.toArray());
				if (!resultList.isEmpty()) {
					Chestadpsico chestadpsico = (Chestadpsico) resultList.get(0);
					return chestadpsico;
				}
			}
			Chestadpsico chestadpsico1 = null;
			return chestadpsico1;
		} catch (HibernateException e) {
			throw new ModelException((new StringBuilder()).append("Error consultando Evaluacion General:")
					.append(e.getMessage()).toString(), e);
		} catch (Exception e) {
			throw new ModelException((new StringBuilder()).append("Error consultando Evaluacion General:")
					.append(e.getMessage()).toString(), e);
		}
	}

	/**
	 * @param codclin
	 * @param fechaInicial
	 * @param fechaFinal
	 * @return
	 * @throws Exception
	 */
	public List getConsultasSinCerrarClinica(final Integer codclin, final Date fechaInicial, final Date fechaFinal)
			throws ModelException {
		List<Chconsulta> pis = (List<Chconsulta>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				String HORA_INICIAL = " 00:00";
				String HORA_FINAL = " 23:59";

				String fechaI = null;
				String fechaF = null;

				if (fechaInicial != null && fechaFinal != null) {
					SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
					fechaI = dateFormat.format(fechaInicial) + HORA_INICIAL;
					fechaF = dateFormat.format(fechaFinal) + HORA_FINAL;
				}

				StringBuffer sb = new StringBuffer();
				sb.append("SELECT chco from ");
				sb.append(Chconsulta.class.getName()).append(" chco, ");
				sb.append(Chimprdiag.class.getName()).append(" chid ");
				sb.append("WHERE    ");
				sb.append(" chco.hcolnumero  = chid.id.hidlconsulta ");
				sb.append(" AND chco.hcoctiposervi  = chid.id.hidctiposervi ");
				sb.append(" AND  chco.hcoeetapa = 'AB' ");
				sb.append(" AND  chco.hcocservicio.csvntiphis  in (:wtiphistoma, :wtiphislectura, :wtiphiscero )   ");
				if (codclin > 0) {
					sb.append(" AND chco.hconclinica = :codclin ");
				}

				if (fechaInicial != null && fechaFinal != null) {
					sb.append(
							" AND (chco.hcodfecregistr BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))");
				}
				sb.append(" order by chco.hcodfecregistr desc ");
				String hql = sb.toString();

				Query query = session.createQuery(hql);
				if (codclin > 0) {
					query.setParameter("codclin", codclin);
				}
				if (fechaInicial != null && fechaFinal != null) {
					query.setParameter("fechaI", fechaI);
					query.setParameter("fechaF", fechaF);
				}

				query.setParameter("wtiphistoma", IConstantes.HISTORIA_PROCEDIMIENTO_CITOLOGIA_TOMA);
				query.setParameter("wtiphislectura", IConstantes.HISTORIA_PROCEDIMIENTO_CITOLOGIA_LECTURA);

				query.setParameter("wtiphiscero", IConstantes.HISTORIA_TODAS);

				List<Chconsulta> pis;
				pis = query.list();

				for (Chconsulta co : pis) {

					Cpservicio servicio = co.getHcocservicio();
					Hibernate.initialize(servicio);

					Chusuario usu = co.getHcolusuario();
					Hibernate.initialize(usu);

				}

				return pis;
			}
		});
		return pis;
	}

	/**
	 * @param fechaInicial
	 * @param fechaFinal
	 * @param codclin
	 * @return
	 * @throws Exception
	 */
	public List getAntecedentesGinecologicoValoracion(Date fechaInicial, Date fechaFinal, Integer codclin)
			throws ModelException {
		List resultList = null;
		String HORA_INICIAL = " 00:00";
		String HORA_FINAL = " 23:59";
		String fechaI = null;
		String fechaF = null;
		if (fechaInicial != null && fechaFinal != null) {
			SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
			fechaI = (new StringBuilder()).append(dateFormat.format(fechaInicial)).append(HORA_INICIAL).toString();
			fechaF = (new StringBuilder()).append(dateFormat.format(fechaFinal)).append(HORA_FINAL).toString();
		}
		try {
			if (fechaInicial != null && fechaFinal != null && codclin != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(
						"  SELECT chco.hcodfecregistr, chus.husetipoiden,chus.husanumeiden,chus.huscprimernomb,chus.huscprimerapel, ");
				sb.append(" chag.hagnnumgesta,chag.hagnnumparto,chag.hagnnumaborto,chag.hagnnumcesare, ");
				sb.append(" chag.hagnnumvivo,chag.hagnectopico,chag.hagnmortina,chag.hagnmuerto ");
				sb.append("  FROM historia.chconsulta chco, historia.chantegineco chag , historia.chusuario chus ");
				sb.append(" WHERE chco.hcolnumero = chag.haglconsulta AND chco.hcoctiposervi  = chag.hagctiposervi  ");
				sb.append("  AND chus.huslnumero     = chco.hcolusuario ");
				sb.append("  AND chco.hcoeetapa = 'CE' AND chco.hcocservicio in ('890201.8','S890201.8') ");
				sb.append("  AND chco.hconclinica = :codclin ");
				sb.append(
						" AND (chco.hcodfecregistr BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))");
				sb.append(" order by chco.hcodfecregistr ");
				Query query = getHibernateTemplate().getSessionFactory().getCurrentSession()
						.createQuery(sb.toString());
				query.setParameter("codclin", codclin);
				query.setParameter("fechaI", fechaI);
				query.setParameter("fechaF", fechaF);
				resultList = query.list();
			}
			if (resultList != null && resultList.size() != 0) {
				List list = resultList;
				return list;
			}
		} catch (HibernateException e) {
			throw new ModelException((new StringBuilder())
					.append("Error consultando Antecedentes Ginecologicos Valoracion Pre quirurgica:")
					.append(e.getMessage()).toString(), e);
		} catch (Exception e) {
			throw new ModelException((new StringBuilder())
					.append("Error consultando Antecedentes Ginecologicos Valoracion Pre quirurgica:")
					.append(e.getMessage()).toString(), e);
		}
		return null;
	}

	/**
	 * @param fechaInicial
	 * @param fechaFinal
	 * @param codclin
	 * @return
	 * @throws Exception
	 */
	public List getReporteActividadesEducativas(Date fechaInicial, Date fechaFinal, Integer codclin)
			throws ModelException {
		List resultList = null;
		String HORA_INICIAL = " 00:00";
		String HORA_FINAL = " 23:59";
		String fechaI = null;
		String fechaF = null;
		if (fechaInicial != null && fechaFinal != null) {
			SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
			fechaI = (new StringBuilder()).append(dateFormat.format(fechaInicial)).append(HORA_INICIAL).toString();
			fechaF = (new StringBuilder()).append(dateFormat.format(fechaFinal)).append(HORA_FINAL).toString();
		}
		try {
			if (fechaInicial != null && fechaFinal != null && codclin != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chae.haennumero NUMERO_ASESORIA, chae.haedfechases FECHA_ASESORIA, ");
				sb.append(" (chae.haenhorainic || ':' || chae.haenminuinic) HORA_INICIAL, ");
				sb.append(" (chae.haenhorafina || ':' || chae.haenminufina)  HORA_FINAL,  ");
				sb.append(
						" chae.haeclugar LUGAR , chae.haentipoacti TIPO,chpe.hpecdescripcion DESC_TIPO, chae.haennatuacti NATURALEZA, chpe1.hpecdescripcion DESC_NATURA, ");
				sb.append(
						" chae.haecproyacti PROYECTO , chae.haentemaacti EJES_TEMATICOS, chpe2.hpecdescripcion DESC_EJES ,chae.haecperscont PERSONA_CONTACTO, ");
				sb.append(
						" chae.haecdirecont DIRECCION_CONTACTO, chae.haectelecont TELEFONO_CONTACTO, chae.haenpoblacti POBLACION,chpe3.hpecdescripcion DESC_POBLA, ");
				sb.append(" chae.haencondacti CONDICION , chpe4.hpecdescripcion DESC_CONDICION, ");
				sb.append(
						" (case chae.haecetniacti when '01' THEN 'Ind�gena' when '02' then 'ROM (gitano)' when '03' then 'Raizal (archipi�lago de San Andr�s y Providencia)' when '04' then 'Palanquero de San Basilio' when '05' then 'Negro(a)' when '06' then 'Afrocolombiano(a)' when '99' then 'Ninguno de los anteriores' else '' END ) ETNIA, ");
				sb.append(
						" chae.haennumehomb NUMERO_HOMBRES, chae.haennumemuje NUMERO_MUJERES, chae.haeavaloacti VALOR_ACTIVIDAD, haecusuaregi ASESOR , chae.haenclinic CLINICA, cpcl.cclcnombre NOMBRE_CLINICA   ");
				sb.append(" from historia.chactiveduca chae  ");
				sb.append(
						" LEFT JOIN historia.Chparameduca chpe ON chae.haentipoacti =   chpe.hpennumero and chpe.hpeccolumna = 'ACTIVIDAD' ");
				sb.append(
						" LEFT JOIN historia.Chparameduca chpe1 ON chae.haennatuacti =   chpe1.hpennumero and chpe1.hpeccolumna = 'NATURALEZA' ");
				sb.append(
						" LEFT JOIN historia.Chparameduca chpe2 ON chae.haentemaacti =   chpe2.hpennumero and chpe2.hpeccolumna = 'EJES' ");
				sb.append(
						" LEFT JOIN historia.Chparameduca chpe3 ON chae.haenpoblacti =   chpe3.hpennumero and chpe3.hpeccolumna = 'POBLACION' ");
				sb.append(
						" LEFT JOIN historia.Chparameduca chpe4 ON chae.haencondacti =   chpe4.hpennumero and chpe4.hpeccolumna = 'CONDICION' ");
				sb.append(" LEFT JOIN clinico.Cpclinica cpcl ON cpcl.cclncodigo =   chae.haenclinic ");
				sb.append(
						" where (chae.haedfechases BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))  ");

				Query query = getHibernateTemplate().getSessionFactory().getCurrentSession()
						.createQuery(sb.toString());
				// query.setParameter("codclin", codclin);
				query.setParameter("fechaI", fechaI);
				query.setParameter("fechaF", fechaF);
				resultList = query.list();
			}
			if (resultList != null && resultList.size() != 0) {
				List list = resultList;
				return list;
			}
		} catch (HibernateException e) {
			throw new ModelException((new StringBuilder()).append("Error consultando Reporte Actividades Educativas:")
					.append(e.getMessage()).toString(), e);
		} catch (Exception e) {
			throw new ModelException((new StringBuilder()).append("Error consultando Reporte Actividades Educativas:")
					.append(e.getMessage()).toString(), e);
		}
		return null;
	}

	/**
	 * @param fechaInicial
	 * @param fechaFinal
	 * @param codclin
	 * @return
	 * @throws Exception
	 */
	public List getReporteIlve(Date fechaInicial, Date fechaFinal, Integer codclin) throws ModelException {
		List resultList = null;
		String HORA_INICIAL = " 00:00";
		String HORA_FINAL = " 23:59";
		String fechaI = null;
		String fechaF = null;
		if (fechaInicial != null && fechaFinal != null) {
			SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
			fechaI = (new StringBuilder()).append(dateFormat.format(fechaInicial)).append(HORA_INICIAL).toString();
			fechaF = (new StringBuilder()).append(dateFormat.format(fechaFinal)).append(HORA_FINAL).toString();
		}
		try {
			if (fechaInicial != null && fechaFinal != null && codclin != null) {
				StringBuffer sb = new StringBuffer();

				sb.append(
						"   select TIPO_DOC, NUM_IDEN,NOMBRES, APELLIDOS, FECHA_NAC, EDAD,ESTADO_CIVIL,NIVEL_EDUCATIVO, TELEFONO, CELULAR, ESTRATO, ETNIA, NOMBRE_MUNICIPIO,NOMBRE_DEPAR, AREA_PROCE, ");
				sb.append(
						"   TIPO_AFILIACION,DESC_ENTIDAD,NUM_FACTURA,FECHA_CONSULTA,FUR,CAUSAL,ANTE_ABORTO, ANTE_GESTA, ANTE_PARTO,ANTE_PLANI,DIAG_PRINCI,DIAG_REL1,DIAG_REL2,DIAG_REL3,MODO_TERMINACION,SEMANA_EMBARAZO, COD_CLINICA from ");
				sb.append(
						"   (select NUMERO_USUARIO_ILVE,TIPO_DOC,NUM_IDEN,NOMBRES, APELLIDOS, FECHA_NAC,EDAD,ESTADO_CIVIL,NIVEL_EDUCATIVO,TELEFONO,CELULAR,ESTRATO,ETNIA,NOMBRE_MUNICIPIO,NOMBRE_DEPAR,AREA_PROCE,TIPO_AFILIACION,DESC_ENTIDAD,NUM_FACTURA,FECHA_CONSULTA,COD_CLINICA from ( ");
				sb.append(
						"     select distinct chus.huslnumero NUMERO_USUARIO_ILVE, chus.husetipoiden TIPO_DOC, chus.husanumeiden NUM_IDEN, ");
				sb.append(
						"     CONCAT(CONCAT(chus.huscprimernomb,' '),chus.huscsegundnomb) NOMBRES, CONCAT(CONCAT(chus.huscprimerapel,' '),chus.huscsegundapel) APELLIDOS, ");
				sb.append("     chus.husdfechanacim FECHA_NAC, ");
				sb.append("     (EXTRACT(YEAR FROM sysdate) - EXTRACT(YEAR FROM chus.husdfechanacim) ) EDAD, ");
				sb.append(
						"     (case when chus.huseestadcivil = 'C' THEN  'CASADO' when chus.huseestadcivil = 'D' THEN 'DIVORCIADO' ");
				sb.append(
						"     when chus.huseestadcivil = 'S' THEN 'SOLTERO' when chus.huseestadcivil = 'U' THEN 'UNION LIBRE' ");
				sb.append("     when chus.huseestadcivil = 'V' THEN 'VIUDO' else '' END ) ESTADO_CIVIL, ");
				sb.append(
						"     (case when chus.husnniveledu = 1 THEN 'No Definido' when chus.husnniveledu = 2 THEN 'Preescolar' ");
				sb.append(
						"     when chus.husnniveledu = 3 THEN 'B�sica Primaria' when chus.husnniveledu = 4 THEN 'B�sica Secundaria (Bachillerato B�sico)' ");
				sb.append(
						"     when chus.husnniveledu = 5 THEN 'Media Acad�mica o Cl�sica (Bachillerato B�sico)' when chus.husnniveledu = 6 THEN 'Media T�cnica (Bachillerato T�cnico)' ");
				sb.append(
						"     when chus.husnniveledu = 7 THEN 'Normalista' when chus.husnniveledu = 8 THEN 'T�cnica Profesional' ");
				sb.append(
						"     when chus.husnniveledu = 9 THEN 'Tecnol�gica' when chus.husnniveledu = 10 THEN 'Profesional' ");
				sb.append(
						"     when chus.husnniveledu = 11 THEN 'Especializaci�n' when chus.husnniveledu = 12 THEN 'Maestr�a' ");
				sb.append("     when chus.husnniveledu = 13 THEN 'Doctorado' ELSE '' END) NIVEL_EDUCATIVO, ");
				sb.append("     chus.husctelefono TELEFONO, chus.husccelular CELULAR, chus.husnestrato ESTRATO, ");
				sb.append(
						"     (case when chus.huscetnia = '01' THEN 'Ind�gena' when chus.huscetnia = '02' THEN 'ROM (gitano)' when chus.huscetnia = '03' THEN 'Raizal (archipi�lago de San Andr�s y Providencia)' ");
				sb.append(
						"     when chus.huscetnia = '04' THEN 'Palanquero de San Basilio' when chus.huscetnia = '05' THEN 'Negro(a) ");
				sb.append(
						"     when chus.huscetnia = '06' THEN 'Afrocolombiano(a)' WHEN chus.huscetnia = '99' THEN 'Ninguno de los anteriores' else ' ' END) ETNIA , ");
				sb.append("     cpmd.cmdcnommun NOMBRE_MUNICIPIO, cpmd.cmdcnomdpt NOMBRE_DEPAR, ");
				sb.append(
						"     (case when chus.husezonareside = 'R' THEN  'Rural Disperso' when chus.husezonareside = 'U' THEN 'Urbana o Cabecera Municipal' else '' END ) AREA_PROCE, ");
				sb.append(
						"     (case when chus.husetipoafilia = 'C' THEN  'CONTRIBUTIVO' when chus.husetipoafilia = 'E' THEN 'ESPECIAL' ");
				sb.append(
						"     when chus.husetipoafilia = 'R' THEN 'SUBSIDIO PARCIAL' when chus.husetipoafilia = 'S' THEN 'SUBSIDIADO' ");
				sb.append(
						"     when chus.husetipoafilia = 'V' THEN 'VINCULADO' when chus.husetipoafilia = 'X' THEN 'NINGUNO' else '' END ) TIPO_AFILIACION, ");
				sb.append(
						"     cpea.ceacnombre DESC_ENTIDAD, cnco.cconnumdoc NUM_FACTURA, cnco.ccodfeccon FECHA_CONSULTA, ccfs.cfsnclinic COD_CLINICA ");
				sb.append("     from clinico.ccdetasap ccds ");
				sb.append("     left join clinico.ccfactsap ccfs on ccfs.cfsnnumero = ccds.cdfnnumero ");
				sb.append("     left join historia.chusuario chus on chus.huslnumero =  ccfs.cfslusuario ");
				sb.append(
						"     left join clinico.cpmunidane cpmd on cpmd.cmdncoddep = chus.husndepartamen and cpmd.cmdncodmun = chus.husnciudad ");
				sb.append("     left join clinico.Cpentidadadm cpea on cpea.ceaccodigo = chus.huscentidadadm ");
				sb.append(
						"     left join clinico.cnconsclin cnco ON cnco.cconnumdoc = ccds.cdfnnumero and cnco.ccontipdoc = 90 and ccds.cdfcservic = cnco.ccocservic and cnco.ccolusuario = chus.huslnumero ");
				sb.append(
						"     where ccds.cdfcservic in (select chst.hstccodiserv from historia.chserxtipo chst where   hstncoditipo = 1) ");
				sb.append(
						"     AND (ccfs.cfsdfecreg BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi')) ");
				if (codclin.intValue() != 0) {
					sb.append("     and ccfs.cfsnclinic = :codclin ");
				}
				sb.append("     AND ccfs.cfsnestado = 1 ) ");
				sb.append("   ) INFORMACION_ILVE ");
				sb.append("   LEFT JOIN ");
				sb.append(
						"   (select NUMERO_USUARIO, ANTE_ABORTO, ANTE_GESTA, ANTE_PARTO, ANTE_PLANI,DIAG_PRINCI,DIAG_REL1,DIAG_REL2,DIAG_REL3,CAUSAL,MODO_TERMINACION,SEMANA_EMBARAZO, FUR from ( ");
				sb.append(
						"     select chco.hcolusuario NUMERO_USUARIO, chag.hagnnumaborto ANTE_ABORTO, chag.hagnnumgesta ANTE_GESTA, chag.hagnnumparto ANTE_PARTO, ");
				sb.append(
						"      TO_CHAR (CASE  WHEN (chag.hagcmetodoplan = null AND chag.hagcotrometodo = NULL) THEN 'NO TIENE'  ELSE 'SI TIENE' END) ANTE_PLANI, ");
				sb.append(
						"      chid.hidcdiagprin DIAG_PRINCI,chid.hidcdiagrela1 DIAG_REL1,chid.hidcdiagrela2 DIAG_REL2,chid.hidcdiagrela3 DIAG_REL3, ");
				sb.append(
						"      chag.hagdfur FUR ,(case when chri.hriccausailve = 'CS' THEN  'Causal Salud' when chri.hriccausailve ='VS' THEN  'Violencia Sexual' when chri.hriccausailve ='MC' THEN 'Malformaci�n Congenita' else ' 'END ) CAUSAL, ");
				sb.append(
						"     (case when chri.hrictiporemis = 'IM' THEN 'ILVE Farmacol�gico' when chri.hrictiporemis = 'QL' THEN 'ILVE por AMEU por Bloqueo' when  chri.hrictiporemis = 'IQ' THEN 'ILVE Quir�rgico' when chri.hrictiporemis = 'QG' THEN 'ILVE por AMEU BAG' else '' end  ) MODO_TERMINACION, ");
				sb.append(
						"     (CASE  WHEN (chid.hidcconfiseman = 'N')  THEN chid.hidnsemanembar  ELSE  chid.hidnsemanameno  END) SEMANA_EMBARAZO ");
				sb.append(
						"     from historia.Chconsulta chco, historia.Chantegineco chag, historia.Chremisilve chri, historia.Chimprdiag chid ");
				sb.append(
						"     where chag.haglconsulta = chco.hcolnumero and chri.hrilconsulta = chco.hcolnumero and chid.hidlconsulta = chco.hcolnumero  and chco.hcocservicio in (select chst.hstccodiserv from historia.chserxtipo chst where   hstncoditipo = 3) ");
				sb.append(
						"     and (chco.hcodfecregistr BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi')  AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi')) ) ");
				sb.append("   INFORMACION_CONSULTA) ");
				sb.append("   ON NUMERO_USUARIO_ILVE =  NUMERO_USUARIO ");

				Query query = getHibernateTemplate().getSessionFactory().getCurrentSession()
						.createQuery(sb.toString());

				if (codclin.intValue() != 0) {
					query.setParameter("codclin", codclin);
				}

				query.setParameter("fechaI", fechaI);
				query.setParameter("fechaF", fechaF);
				resultList = query.list();
			}
			if (resultList != null && resultList.size() != 0) {
				List list = resultList;
				return list;
			}
		} catch (HibernateException e) {
			throw new ModelException((new StringBuilder()).append("Error consultando Reporte Actividades Educativas:")
					.append(e.getMessage()).toString(), e);
		} catch (Exception e) {
			throw new ModelException((new StringBuilder()).append("Error consultando Reporte Actividades Educativas:")
					.append(e.getMessage()).toString(), e);
		}
		return null;
	}

	public List getReporteIlveNal(Date fechaInicial, Date fechaFinal, Integer codclin) throws ModelException {
		List resultList = null;
		String HORA_INICIAL = " 00:00";
		String HORA_FINAL = " 23:59";
		String fechaI = null;
		String fechaF = null;
		if (fechaInicial != null && fechaFinal != null) {
			SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
			fechaI = (new StringBuilder()).append(dateFormat.format(fechaInicial)).append(HORA_INICIAL).toString();
			fechaF = (new StringBuilder()).append(dateFormat.format(fechaFinal)).append(HORA_FINAL).toString();
		}
		try {
			if (fechaInicial != null && fechaFinal != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(
						"select NUMERO_USUARIO_ILVE, TIPO_DOC, NUM_IDEN,NOMBRE1,NOMBRE2, APELLIDO1,APELLIDO2, FECHA_NAC, EDAD, ESTADO_CIVIL, ETNIA, "
								+ "NIVEL_EDUCATIVO, OCUPACION, TELEFONO, CELULAR, ESTRATO, NOMBRE_MUNICIPIO, NOMBRE_DEPAR, AREA_PROCE, NACIONALIDAD, DESC_ENTIDAD, "
								+ "TIPO_AFILIACION, SUFRE_VIOL, COD_CLINICA_CONS, FECHA_CONSULTA, COD_MED_CONS, NOM_MED_CONS, NUM_FACTURA, FUR, SEMANA_EMBARAZO, "
								+ "ANTE_GESTA, ANTE_PARTO, ANTE_ABORTO, ANTE_CESAREA, ANTE_VIVO, ANTE_PLANI, CAUSAL, DESCDP, DIAG_PRINCI, DESCREL1, DIAG_REL1, "
								+ "DESCREL2, DIAG_REL2, DESCREL3, DIAG_REL3, TIPO_PROC, CODIGO_CUPS, ESCOGE_VOLUNTARIAMENTE, COD_CLINICA_PRO, NOM_MED_PROC, "
								+ "CARGO_MED_PROC, FECHA_PROCEDIMIENTO, NUMERO_FACTURA "
								+ "from (select distinct chus.huslnumero NUMERO_USUARIO_ILVE, chus.husetipoiden TIPO_DOC, chus.husanumeiden NUM_IDEN, "
								+ "  chus.huscprimernomb NOMBRE1,chus.huscsegundnomb NOMBRE2, huscprimerapel APELLIDO1, chus.huscsegundapel APELLIDO2, "
								+ "  chus.husdfechanacim FECHA_NAC, EXTRACT(YEAR FROM cnco.ccodfeccon) - EXTRACT(YEAR FROM chus.husdfechanacim) EDAD, "
								+ "  case when chus.huseestadcivil = 'C' THEN  'CASADO' when chus.huseestadcivil = 'D' THEN 'DIVORCIADO' when chus.huseestadcivil = 'S' "
								+ "  THEN 'SOLTERO' when chus.huseestadcivil = 'U' THEN 'UNION LIBRE' when chus.huseestadcivil = 'V' THEN 'VIUDO' else '' END  \n"
								+ "  ESTADO_CIVIL, case when chus.huscetnia = '01' THEN 'Ind�gena' when chus.huscetnia = '02' THEN 'ROM (gitano)' when chus.huscetnia = '03' "
								+ "  THEN 'Raizal (archipi�lago de San Andr�s y Providencia)' when chus.huscetnia = '04' THEN 'Palanquero de San Basilio' "
								+ "  when chus.huscetnia = '05' THEN 'Negro(a)' when chus.huscetnia = '06' then 'Afrocolombiano(a)' when chus.huscetnia = '99' "
								+ "  THEN 'Ninguno de los anteriores' else ' ' END ETNIA, case when chus.husnniveledu = 1 THEN 'No Definido' when chus.husnniveledu = 2 "
								+ "  THEN 'Preescolar' when chus.husnniveledu = 3 THEN 'B�sica Primaria' when chus.husnniveledu = 4 THEN 'B�sica Secundaria (Bachillerato B�sico)' "
								+ "  when chus.husnniveledu = 5 THEN 'Media Acad�mica o Cl�sica (Bachillerato B�sico)' when chus.husnniveledu = 6 THEN "
								+ "  'Media T�cnica (Bachillerato T�cnico)' when chus.husnniveledu = 7 THEN 'Normalista' when chus.husnniveledu = 8 THEN "
								+ "  'T�cnica Profesional' when chus.husnniveledu = 9 THEN 'Tecnol�gica' when chus.husnniveledu = 10 THEN 'Profesional' "
								+ "  when chus.husnniveledu = 11 THEN 'Especializaci�n' when chus.husnniveledu = 12 THEN 'Maestr�a' when chus.husnniveledu = 13 "
								+ "  THEN 'Doctorado' ELSE '' END NIVEL_EDUCATIVO, cpoc.coccdescri OCUPACION, chus.husctelefono TELEFONO, chus.husccelular CELULAR, "
								+ "  chus.husnestrato ESTRATO, cpmd.cmdcnommun NOMBRE_MUNICIPIO, cpmd.cmdcnomdpt NOMBRE_DEPAR, cpco.ccncdescri DESC_ENTIDAD, "
								+ "  case when chus.husezonareside = 'R' THEN  'Rural Disperso' when chus.husezonareside = 'U' THEN 'Urbana o Cabecera Municipal' "
								+ "  else '' END AREA_PROCE, case when chus.husetipoafilia = 'C' THEN  'CONTRIBUTIVO' when chus.husetipoafilia = 'E' THEN 'ESPECIAL' "
								+ "  when chus.husetipoafilia = 'R' THEN 'SUBSIDIO PARCIAL' when chus.husetipoafilia = 'S' THEN 'SUBSIDIADO' when chus.husetipoafilia = 'V' "
								+ "  THEN 'VINCULADO' when chus.husetipoafilia = 'X' THEN 'NINGUNO' else '' END TIPO_AFILIACION, chvi.hviesufreviol SUFRE_VIOL, "
								+ "  cnco.cconclinic COD_CLINICA_CONS, cnco.cconnumdoc NUM_FACTURA, nvl(chus.husccodinaci,'COL') NACIONALIDAD "
								+ "  from clinico.cnconsclin cnco "
								+ "  inner join historia.chserxtipo chst on chst.hstccodiserv = cnco.ccocservic and chst.hstncoditipo = 1  "
								+ "  inner join clinico.cpcontrato cpco on cpco.ccnnclinic = cnco.cconclinic and cpco.ccnnnumero = cnco.cconcontra "
								+ "  left join historia.chusuario chus on chus.huslnumero =  cnco.ccolusuario "
								+ "  left join clinico.cpmunidane cpmd on cpmd.cmdncoddep = chus.husndepartamen and cpmd.cmdncodmun = chus.husnciudad "
								+ "  left join clinico.Cpentidadadm cpea on cpea.ceaccodigo = chus.huscentidadadm "
								+ "  left join clinico.cpocupacio cpoc on cpoc.cocncodigo = chus.husnocupacion "
								+ "  left join historia.chviolencia chvi on chvi.hvilconsulta = cnco.cconnumero "
								+ " where cnco.ccodfeccon BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi') "
								+ ") INFORMACION_ILVE "
								+ "LEFT JOIN (select chco.hcolusuario NUMERO_USUARIO, chag.hagnnumaborto ANTE_ABORTO, chag.hagnnumgesta ANTE_GESTA, chag.hagnnumparto ANTE_PARTO, "
								+ "  chag.hagnnumcesare ANTE_CESAREA, chag.hagnnumvivo ANTE_VIVO, case WHEN chag.hagcmetodoplan = null AND chag.hagcotrometodo = NULL "
								+ "  THEN 'NO TIENE'  ELSE 'SI TIENE' END ANTE_PLANI, chid.hidcdiagprin DIAG_PRINCI, cdc1.CDCCDESCRI DESCDP, chid.hidcdiagrela1 DIAG_REL1, "
								+ "  cdc2.CDCCDESCRI DESCREL1, chid.hidcdiagrela2 DIAG_REL2, cdc3.CDCCDESCRI DESCREL2, chid.hidcdiagrela3 DIAG_REL3, cdc4.CDCCDESCRI DESCREL3, "
								+ "  chag.hagdfur FUR ,case when chri.hriccausailve = 'CS' THEN  'Causal Salud' when chri.hriccausailve ='VS' THEN 'Violencia Sexual' "
								+ "  when chri.hriccausailve = 'MC' THEN 'Malformaci�n Congenita' else ' ' END CAUSAL, case when chri.HRICTIPOREMIS = 'FA' then "
								+ "  'Aborto Farmacol�gico' when chri.HRICTIPOREMIS = 'AG' then 'Aborto por aspiraci�n Bajo anestesia general' when chri.HRICTIPOREMIS = 'AB' "
								+ "  then 'Aborto por aspiraci�n bajo Bloqueo' when chri.HRICTIPOREMIS = 'DE' then 'Aborto por dilataci�n y evacuaci�n' when "
								+ "  chri.HRICTIPOREMIS = 'AF' then 'Interrupci�n voluntaria del embarazo por asistolia fetal' when chri.hrictiporemis = 'IM' THEN "
								+ "  'ILVE Farmacol�gico' when chri.hrictiporemis = 'QL' THEN 'ILVE por AMEU por Bloqueo' when chri.hrictiporemis = 'IQ' THEN 'ILVE Quir�rgico' "
								+ "  when chri.hrictiporemis = 'QG' THEN 'ILVE por AMEU BAG' when chri.hrictiporemis = 'MF' then 'IVE por Inducci�n por muerte fetal' else "
								+ "  chri.HRICTIPOREMIS end TIPO_PROC, CASE WHEN chid.hidcconfiseman = 'N' THEN chid.hidnsemanembar ELSE chid.hidnsemanameno END SEMANA_EMBARAZO, "
								+ "  cpse.CSVCCODCUPS CODIGO_CUPS, case when chri.hricescogvolun = 'CG' then 'Continuar gestaci�n' when chri.hricescogvolun = 'AD' then "
								+ "  'Adopci�n' when chri.hricescogvolun = 'IV' then 'Interrupci�n voluntaria del embarazo' else chri.hricescogvolun end ESCOGE_VOLUNTARIAMENTE, "
								+ "  chco.hcodfecregistr FECHA_CONSULTA, chco.HCOCOPERADOR COD_MED_CONS, acus1.SUSCNOMBRE NOM_MED_CONS "
								+ "  from historia.Chconsulta chco "
								+ "  inner join historia.chserxtipo chst on chst.hstccodiserv = chco.hcocservicio and chst.hstncoditipo = 3 "
								+ "  inner join clinico.cpservicio cpse on cpse.CSVCCODIGO = chco.hcocservicio "
								+ "  left join historia.Chantegineco chag on chag.haglconsulta = chco.hcolnumero "
								+ "  left join historia.Chremisilve chri on chri.hrilconsulta = chco.hcolnumero "
								+ "  left join historia.Chimprdiag chid on chid.hidlconsulta = chco.hcolnumero "
								+ "  left join clinico.crdgncie10 cdc1 on cdc1.cdcccodigo = chid.hidcdiagprin "
								+ "  left join clinico.crdgncie10 cdc2 on cdc2.cdcccodigo = chid.hidcdiagrela1 "
								+ "  left join clinico.crdgncie10 cdc3 on cdc3.cdcccodigo = chid.hidcdiagrela2 "
								+ "  left join clinico.crdgncie10 cdc4 on cdc4.cdcccodigo = chid.hidcdiagrela3 "
								+ "  left join activos.sausuario acus1 on acus1.SUSCLOGIN = chco.HCOCOPERADOR "
								+ "  where  chco.hcodfecregistr BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi')  AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi') "
								+ ") INFORMACION_CONSULTA ON NUMERO_USUARIO = NUMERO_USUARIO_ILVE "
								+ "LEFT JOIN (select chco.hcolusuario NUMERO_USUARIOP, chco.hconclinica COD_CLINICA_PRO, chco.HCOCOPERADOR COD_MED_PROC, acus2.SUSCNOMBRE "
								+ "  NOM_MED_PROC, acus2.SUSCDESCRI CARGO_MED_PROC, chco.hcodfecregistr FECHA_PROCEDIMIENTO, CCON.CCONNUMDOC NUMERO_FACTURA "
								+ "  from historia.Chconsulta chco "
								+ "  inner join historia.chserxtipo chst on chst.hstccodiserv = chco.hcocservicio and hstncoditipo = 6 "
								+ "  inner join CLINICO.CNCONSCLIN CCON on CHCO.HCOLNUMERO = CCON.CCONNUMERO "
								+ "  left join activos.sausuario acus2 on acus2.SUSCLOGIN = chco.HCOCOPERADOR "
								+ "  where chco.hcodfecregistr BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi')  AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi') "
								+ ") INFORMACION_PROCEDIMIENTO ON NUMERO_USUARIOP = NUMERO_USUARIO_ILVE ");

				/*
				 * sb.
				 * append(" select NUMERO_USUARIO_ILVE,TIPO_DOC, NUM_IDEN,NOMBRE1,NOMBRE2, APELLIDO1,APELLIDO2, FECHA_NAC, EDAD,ESTADO_CIVIL,ETNIA,NIVEL_EDUCATIVO,OCUPACION, TELEFONO, CELULAR, ESTRATO,NOMBRE_MUNICIPIO,NOMBRE_DEPAR, AREA_PROCE, "
				 * ); sb.
				 * append(" DESC_ENTIDAD,TIPO_AFILIACION,SUFRE_VIOL,COD_CLINICA_CONS,FECHA_CONSULTA,COD_MED_CONS,NOM_MED_CONS, NUM_FACTURA,FUR,SEMANA_EMBARAZO, ANTE_GESTA, ANTE_PARTO,ANTE_ABORTO,ANTE_CESAREA,ANTE_VIVO,ANTE_PLANI, "
				 * ); sb.
				 * append(" CAUSAL,DESCDP,DIAG_PRINCI,DESCREL1,DIAG_REL1,DESCREL2,DIAG_REL2,DESCREL3,DIAG_REL3,TIPO_PROC, CODIGO_CUPS, ACEPTA_TECNICA, "
				 * ); sb.
				 * append(" COD_CLINICA_PRO, NOM_MED_PROC, CARGO_MED_PROC, FECHA_PROCEDIMIENTO, NUMERO_FACTURA "
				 * ); sb.append(" from  "); sb.
				 * append(" (select NUMERO_USUARIO_ILVE,TIPO_DOC,NUM_IDEN,NOMBRE1,NOMBRE2, APELLIDO1, APELLIDO2, FECHA_NAC,EDAD,ESTADO_CIVIL,ETNIA,NIVEL_EDUCATIVO,OCUPACION,TELEFONO,CELULAR,ESTRATO,NOMBRE_MUNICIPIO,NOMBRE_DEPAR,AREA_PROCE,TIPO_AFILIACION,SUFRE_VIOL,DESC_ENTIDAD,NUM_FACTURA,COD_CLINICA_CONS from (  "
				 * ); sb.
				 * append("   select distinct chus.huslnumero NUMERO_USUARIO_ILVE, chus.husetipoiden TIPO_DOC, chus.husanumeiden NUM_IDEN,  "
				 * ); sb.
				 * append("   chus.huscprimernomb NOMBRE1,chus.huscsegundnomb NOMBRE2, huscprimerapel APELLIDO1, chus.huscsegundapel APELLIDO2,  "
				 * ); sb.append("   chus.husdfechanacim FECHA_NAC,  "); sb.
				 * append("   (EXTRACT(YEAR FROM sysdate) - EXTRACT(YEAR FROM chus.husdfechanacim) ) EDAD,  "
				 * ); sb.
				 * append("   (case when chus.huseestadcivil = 'C' THEN  'CASADO' when chus.huseestadcivil = 'D' THEN 'DIVORCIADO'  "
				 * ); sb.
				 * append("   when chus.huseestadcivil = 'S' THEN 'SOLTERO' when chus.huseestadcivil = 'U' THEN 'UNION LIBRE'  "
				 * ); sb.
				 * append("   when chus.huseestadcivil = 'V' THEN 'VIUDO' else '' END ) ESTADO_CIVIL,  "
				 * ); sb.
				 * append("     (case when chus.huscetnia = '01' THEN 'Ind�gena' when chus.huscetnia = '02' THEN 'ROM (gitano)' when chus.huscetnia = '03' THEN 'Raizal (archipi�lago de San Andr�s y Providencia)'  "
				 * ); sb.
				 * append("   when chus.huscetnia = '04' THEN 'Palanquero de San Basilio' when chus.huscetnia = '05' THEN 'Negro(a)'  "
				 * ); sb.
				 * append("   when chus.huscetnia = '06' THEN 'Afrocolombiano(a)' when chus.huscetnia = '99' THEN 'Ninguno de los anteriores' else ' ' END) ETNIA, "
				 * ); sb.
				 * append("   (case when chus.husnniveledu = 1 THEN 'No Definido' when chus.husnniveledu = 2 THEN 'Preescolar'  "
				 * ); sb.
				 * append("   when chus.husnniveledu = 3 THEN 'B�sica Primaria' when chus.husnniveledu = 4 THEN 'B�sica Secundaria (Bachillerato B�sico)'  "
				 * ); sb.
				 * append("   when chus.husnniveledu = 5 THEN 'Media Acad�mica o Cl�sica (Bachillerato B�sico)' when chus.husnniveledu = 6 THEN 'Media T�cnica (Bachillerato T�cnico)'  "
				 * ); sb.
				 * append("   when chus.husnniveledu = 7 THEN 'Normalista' when chus.husnniveledu = 8 THEN 'T�cnica Profesional'  "
				 * ); sb.
				 * append("   when chus.husnniveledu = 9 THEN 'Tecnol�gica' when chus.husnniveledu = 10 THEN 'Profesional'  "
				 * ); sb.
				 * append("   when chus.husnniveledu = 11 THEN 'Especializaci�n' when chus.husnniveledu = 12 THEN 'Maestr�a'  "
				 * ); sb.
				 * append("   when chus.husnniveledu = 13 THEN 'Doctorado' ELSE '' END) NIVEL_EDUCATIVO, cpoc.coccdescri OCUPACION, "
				 * ); sb.
				 * append("   chus.husctelefono TELEFONO, chus.husccelular CELULAR, chus.husnestrato ESTRATO,  "
				 * ); sb.
				 * append("   cpmd.cmdcnommun NOMBRE_MUNICIPIO, cpmd.cmdcnomdpt NOMBRE_DEPAR, cpea.ceacnombre DESC_ENTIDAD, "
				 * ); sb.
				 * append("   (case when chus.husezonareside = 'R' THEN  'Rural Disperso' when chus.husezonareside = 'U' THEN 'Urbana o Cabecera Municipal' else '' END ) AREA_PROCE,  "
				 * ); sb.
				 * append("   (case when chus.husetipoafilia = 'C' THEN  'CONTRIBUTIVO' when chus.husetipoafilia = 'E' THEN 'ESPECIAL'  "
				 * ); sb.
				 * append("   when chus.husetipoafilia = 'R' THEN 'SUBSIDIO PARCIAL' when chus.husetipoafilia = 'S' THEN 'SUBSIDIADO'  "
				 * ); sb.
				 * append("   when chus.husetipoafilia = 'V' THEN 'VINCULADO' when chus.husetipoafilia = 'X' THEN 'NINGUNO' else '' END ) TIPO_AFILIACION,  "
				 * ); sb.
				 * append("   chvi.hviesufreviol SUFRE_VIOL, ccfs.cfsnclinic COD_CLINICA_CONS , cnco.cconnumdoc NUM_FACTURA "
				 * ); sb.append("   from clinico.cnconsclin cnco   "); sb.
				 * append("   left join clinico.ccdetasap ccds ON cnco.cconnumdoc = ccds.cdfnnumero and ccds.cdfcservic = cnco.ccocservic  "
				 * ); sb.
				 * append("   left join clinico.ccfactsap ccfs on ccfs.cfsnnumero = ccds.cdfnnumero  "
				 * ); sb.
				 * append("   left join historia.chusuario chus on chus.huslnumero =  cnco.ccolusuario  "
				 * ); sb.
				 * append("   left join clinico.cpmunidane cpmd on cpmd.cmdncoddep = chus.husndepartamen and cpmd.cmdncodmun = chus.husnciudad  "
				 * ); sb.
				 * append("   left join clinico.Cpentidadadm cpea on cpea.ceaccodigo = chus.huscentidadadm "
				 * ); sb.
				 * append("   left join clinico.cpocupacio cpoc on cpoc.cocncodigo = chus.husnocupacion "
				 * ); sb.
				 * append("   left join historia.chviolencia chvi on chvi.hvilconsulta = ccds.cdfnnumero  "
				 * ); sb.
				 * append("  where cnco.ccocservic in (select chst.hstccodiserv from historia.chserxtipo chst where   hstncoditipo = 1) "
				 * ); sb.
				 * append("   AND (cnco.ccodfecreg BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))  "
				 * ); sb.append("   )  "); sb.append(" ) INFORMACION_ILVE  ");
				 * sb.append(" LEFT JOIN  "); sb.
				 * append(" (select NUMERO_USUARIO, ANTE_ABORTO, ANTE_GESTA, ANTE_PARTO,ANTE_CESAREA,ANTE_VIVO, ANTE_PLANI,DIAG_PRINCI,DIAG_REL1,DIAG_REL2,DIAG_REL3,CAUSAL,TIPO_PROC,SEMANA_EMBARAZO, FUR,CODIGO_CUPS ,ACEPTA_TECNICA,FECHA_CONSULTA,COD_MED_CONS from (  "
				 * ); sb.
				 * append("   select chco.hcolusuario NUMERO_USUARIO, chag.hagnnumaborto ANTE_ABORTO, chag.hagnnumgesta ANTE_GESTA, chag.hagnnumparto ANTE_PARTO, chag.hagnnumcesare ANTE_CESAREA, chag.hagnnumvivo ANTE_VIVO, "
				 * ); sb.
				 * append("    to_char(case  WHEN (chag.hagcmetodoplan = null AND chag.hagcotrometodo = NULL) THEN 'NO TIENE'  ELSE 'SI TIENE' END) ANTE_PLANI,  "
				 * ); sb.
				 * append("    chid.hidcdiagprin DIAG_PRINCI,chid.hidcdiagrela1 DIAG_REL1,chid.hidcdiagrela2 DIAG_REL2,chid.hidcdiagrela3 DIAG_REL3,  "
				 * ); sb.
				 * append("    chag.hagdfur FUR ,(case when chri.hriccausailve = 'CS' THEN  'Causal Salud' when chri.hriccausailve ='VS' THEN  'Violencia Sexual' when chri.hriccausailve ='MC' THEN 'Malformaci�n Congenita' else ' 'END ) CAUSAL,  "
				 * ); sb.
				 * append("   (case when chri.hrictiporemis = 'IM' THEN 'ILVE Farmacol�gico' when chri.hrictiporemis = 'QL' THEN 'ILVE por AMEU por Bloqueo' when  chri.hrictiporemis = 'IQ' THEN 'ILVE Quir�rgico' when chri.hrictiporemis = 'QG' THEN 'ILVE por AMEU BAG' else '' end  ) TIPO_PROC,  "
				 * ); sb.
				 * append("   (CASE  WHEN (chid.hidcconfiseman = 'N')  THEN chid.hidnsemanembar  ELSE  chid.hidnsemanameno  END) SEMANA_EMBARAZO ,cpse.CSVCCODCUPS CODIGO_CUPS, chri.hricaceptpacie ACEPTA_TECNICA, chco.hcodfecregistr FECHA_CONSULTA, chco.HCOCOPERADOR COD_MED_CONS "
				 * ); sb.
				 * append("   from historia.Chconsulta chco, historia.Chantegineco chag, historia.Chremisilve chri, historia.Chimprdiag chid , clinico.cpservicio cpse "
				 * ); sb.
				 * append("   where chag.haglconsulta = chco.hcolnumero and chri.hrilconsulta = chco.hcolnumero and chid.hidlconsulta = chco.hcolnumero  and cpse.CSVCCODIGO = chco.hcocservicio "
				 * ); sb.
				 * append("   and chco.hcocservicio in (select chst.hstccodiserv from historia.chserxtipo chst where   hstncoditipo = 3)  "
				 * ); sb.
				 * append("   and (chco.hcodfecregistr BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi')  AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi')) )  "
				 * ); sb.append(" INFORMACION_CONSULTA)  ");
				 * sb.append(" ON NUMERO_USUARIO = NUMERO_USUARIO_ILVE   "); sb.
				 * append(" LEFT JOIN (select cdc1.CDCCCODIGO CONDIAGPRI, cdc1.CDCCDESCRI DESCDP from clinico.crdgncie10 cdc1 ) ON DIAG_PRINCI = CONDIAGPRI "
				 * ); sb.
				 * append(" LEFT JOIN (select cdc2.CDCCCODIGO CONDIAGREL1, cdc2.CDCCDESCRI DESCREL1 from clinico.crdgncie10 cdc2 ) ON DIAG_REL1 = CONDIAGREL1 "
				 * ); sb.
				 * append(" LEFT JOIN (select cdc3.CDCCCODIGO CONDIAGREL2, cdc3.CDCCDESCRI DESCREL2 from clinico.crdgncie10 cdc3 ) ON DIAG_REL2 = CONDIAGREL2 "
				 * ); sb.
				 * append(" LEFT JOIN (select cdc4.CDCCCODIGO CONDIAGREL3, cdc4.CDCCDESCRI DESCREL3 from clinico.crdgncie10 cdc4 ) ON DIAG_REL3 = CONDIAGREL3 "
				 * ); sb.
				 * append(" LEFT JOIN (SELECT acus1.SUSCLOGIN COD_LOG1,  acus1.SUSCNOMBRE NOM_MED_CONS from activos.sausuario acus1 ) ON COD_MED_CONS = COD_LOG1 "
				 * ); sb.append(" LEFT JOIN  "); sb.
				 * append(" (select NUMERO_USUARIOP,COD_CLINICA_PRO, COD_MED_PROC, FECHA_PROCEDIMIENTO, NUMERO_FACTURA  from (  "
				 * ); sb.
				 * append("   select chco.hcolusuario NUMERO_USUARIOP,chco.hconclinica COD_CLINICA_PRO, chco.HCOCOPERADOR COD_MED_PROC, chco.hcodfecregistr FECHA_PROCEDIMIENTO, CCON.CCONNUMDOC NUMERO_FACTURA "
				 * ); sb.
				 * append("   from historia.Chconsulta chco, CLINICO.CNCONSCLIN CCON  where CHCO.HCOLNUMERO = CCON.CCONNUMERO and chco.hcocservicio in (select chst.hstccodiserv from historia.chserxtipo chst where   hstncoditipo = 6)  "
				 * ); sb.
				 * append("   and (chco.hcodfecregistr BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi')  AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi')) )  "
				 * ); sb.append(" INFORMACION_PROCEDIMIENTO)  ");
				 * sb.append(" ON NUMERO_USUARIOP = NUMERO_USUARIO_ILVE   "); sb.
				 * append(" LEFT JOIN (SELECT acus2.SUSCLOGIN COD_LOG2,  acus2.SUSCNOMBRE NOM_MED_PROC, acus2.SUSCDESCRI CARGO_MED_PROC from activos.sausuario acus2 ) ON COD_MED_PROC = COD_LOG2 "
				 * );
				 */

				Query query = getHibernateTemplate().getSessionFactory().getCurrentSession()
						.createQuery(sb.toString());

				query.setParameter("fechaI", fechaI);
				query.setParameter("fechaF", fechaF);
				resultList = query.list();
			}
			if (resultList != null && resultList.size() != 0) {
				List list = resultList;
				return list;
			}
		} catch (HibernateException e) {
			throw new ModelException((new StringBuilder()).append("Error consultando Reporte Actividades Educativas:")
					.append(e.getMessage()).toString(), e);
		} catch (Exception e) {
			throw new ModelException((new StringBuilder()).append("Error consultando Reporte Actividades Educativas:")
					.append(e.getMessage()).toString(), e);
		}
		return null;
	}

	public List getReporteResolucion256(Date fechaInicial, Date fechaFinal, Integer codclin) throws ModelException {
		List resultList = null;
		Integer wclinici = null;
		Integer wclinicf = null;
		String HORA_INICIAL = " 00:00";
		String HORA_FINAL = " 23:59";
		String fechaI = null;
		String fechaF = null;
		if (codclin == 0) {
			wclinici = 1;
			wclinicf = 99;
		} else {
			wclinici = codclin;
			wclinicf = codclin;
		}
		if (fechaInicial != null && fechaFinal != null) {
			SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
			fechaI = (new StringBuilder()).append(dateFormat.format(fechaInicial)).append(HORA_INICIAL).toString();
			fechaF = (new StringBuilder()).append(dateFormat.format(fechaFinal)).append(HORA_FINAL).toString();
		}
		try {
			if (fechaInicial != null && fechaFinal != null) {
				StringBuffer sb = new StringBuffer();

				sb.append(
						"SELECT cpcl.CCLCNOMBRE CLINICA, TO_CHAR(chcp.HCPDFECHACIRUG,'MM') MES, chus.HUSETIPOIDEN TIPO_DOC, "
								+ "chus.HUSANUMEIDEN NUM_IDEN, chus.HUSDFECHANACIM FECHA_NAC, chus.HUSESEXO SEXO, chus.HUSCPRIMERNOMB NOMBRE1, "
								+ "chus.HUSCSEGUNDNOMB NOMBRE2, chus.HUSCPRIMERAPEL APELLIDO1, chus.HUSCSEGUNDAPEL APELLIDO2, "
								+ "case when cpco.ccnccodsgs = '0' then cpcl.cclncoddane else nvl(cpco.ccnccodsgs,chcp.HCPCENTIDADADM) end  TIPO_ENTIDAD, "
								+ "cpcl.CCLNCODDANE COD_MUNICIPIO, case when cpse.CSVCCODCUPS = ' ' then cpse.CSVCCODIGO else cpse.csvccodcups end COD_PROCEDIMIENTO, "
								+ "chcp.HCPDFECREGISTR FECHA_SOLICITUD_PROC, chcp.HCPDFECHACIRUG FECHA_PROCEDIMIENTO, "
								+ "CASE WHEN chcp.HCPCMOTIVANULA IS NULL THEN '1' ELSE '2' END REALIZO_PROCEDIMIENTO, chcp.HCPCMOTIVANULA CAUSA_NO_PRO, "
								+ "CASE WHEN (chcp.HCPCMOTIVANULA IS NOT NULL AND chcp.HCPCESTADO = 'VG') THEN '1' ELSE '2' END REPROGAMO "
								+ "FROM historia.CHCIRUGPROGR chcp, historia.CHUSUARIO chus, historia.CHDETACIRPRO chdc, clinico.CPCLINICA cpcl, "
								+ "clinico.CPSERVICIO cpse, clinico.cnconsclin cncc, clinico.cpcontrato cpco "
								+ "WHERE chcp.HCPDFECHACIRUG BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi') "
								+ "AND chcp.HCPNCLINICA BETWEEN :wclinici AND :wclinicf and chdc.HDCLCONSUPRINC  = chcp.HCPLNUMERO "
								+ "AND chus.HUSLNUMERO = chcp.HCPLUSUARIO AND chcp.HCPLNUMERO = cncc.cconnumero and CPCO.CCNNNUMERO = CNCC.CCONCONTRA "
								+ "AND CPCO.CCNNCLINIC = CNCC.CCONCLINIC AND chcp.HCPNCLINICA = cpcl.CCLNCODIGO AND chdc.HDCCSERVICIO = cpse.CSVCCODIGO "
								+ "AND (chcp.HCPCMOTIVANULA is null or chcp.HCPCMOTIVANULA <> 4)");

				Query query = getHibernateTemplate().getSessionFactory().getCurrentSession()
						.createQuery(sb.toString());

				query.setParameter("fechaI", fechaI);
				query.setParameter("fechaF", fechaF);
				query.setParameter("wclinici", wclinici);
				query.setParameter("wclinicf", wclinicf);
				resultList = query.list();
			}
			if (resultList != null && resultList.size() != 0) {
				List list = resultList;
				return list;
			}
		} catch (HibernateException e) {
			throw new ModelException(
					(new StringBuilder()).append("Error consultando Reporte 256:").append(e.getMessage()).toString(),
					e);
		} catch (Exception e) {
			throw new ModelException(
					(new StringBuilder()).append("Error consultando Reporte 256:").append(e.getMessage()).toString(),
					e);
		}
		return null;
	}

	/**
	 * @param fechaInicial
	 * @param fechaFinal
	 * @param codclin
	 * @return
	 * @throws ModelException
	 */
	public List getDatosRipsConsulta(Date fechaInicial, Date fechaFinal, Integer codclin, Integer tipoUsuario,
			String codservicio) throws ModelException {
		List resultList = null;
		String HORA_INICIAL = " 00:00";
		String HORA_FINAL = " 23:59";
		String fechaI = null;
		String fechaF = null;
		if (fechaInicial != null && fechaFinal != null) {
			SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
			fechaI = (new StringBuilder()).append(dateFormat.format(fechaInicial)).append(HORA_INICIAL).toString();
			fechaF = (new StringBuilder()).append(dateFormat.format(fechaFinal)).append(HORA_FINAL).toString();
		}
		try {
			if (fechaInicial != null && fechaFinal != null && codclin != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(
						" select chco.hcodfecregistr,chco.hcolnumero,cncl.ccoctipide, cncl.ccoanumide, cncl.ccocprinom, ");
				sb.append(
						" cncl.ccocsegnom, cncl.ccocpriape, cncl.ccocsegape, chmc.hmcnfinalidad,  chmc.hmcncausaexte,  ");
				sb.append(" chid.hidcdiagprin, chid.hidcdiagrela1, chid.hidntipodiagn ");
				sb.append(
						" from  historia.chconsulta chco, historia.chmotivocons chmc, historia.chimprdiag chid, clinico.cnconsclin cncl ");
				sb.append(
						" where cncl.cconnumero = chco.hcolnumero and cncl.cconclinic = chco.hconclinica and chmc.hmclconsulta = chco.hcolnumero   ");
				sb.append(" and chmc.hmcctiposervi = chco.hcoctiposervi  ");
				sb.append(" and chco.hcolnumero = chid.hidlconsulta and chco.hcoctiposervi = chid.hidctiposervi ");
				sb.append(" and chco.hconclinica = :codclin  ");
				sb.append(" and chco.hcoeetapa = 'CE'  ");
				sb.append(
						" AND (chco.hcodfecregistr BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))");
				if (tipoUsuario != null) {
					sb.append(" and cncl.cconcontra = :tipoUsuario ");
				}
				if (codservicio != null && !codservicio.equals("")) {
					sb.append(" and cncl.ccocservic = :codservicio ");
				}

				sb.append(" order by cncl.ccodfeccon desc ");
				Query query = getHibernateTemplate().getSessionFactory().getCurrentSession()
						.createQuery(sb.toString());
				query.setParameter("codclin", codclin);
				query.setParameter("fechaI", fechaI);
				query.setParameter("fechaF", fechaF);
				if (tipoUsuario != null) {
					query.setParameter("tipoUsuario", tipoUsuario);
				}

				if (codservicio != null && !codservicio.equals("")) {
					query.setParameter("codservicio", codservicio);
				}
				resultList = query.list();
			}
			if (resultList != null && resultList.size() != 0) {
				List list = resultList;
				return list;
			}
		} catch (HibernateException e) {
			throw new ModelException(
					(new StringBuilder()).append("Error consultando Datos Rips:").append(e.getMessage()).toString(), e);
		} catch (Exception e) {
			throw new ModelException(
					(new StringBuilder()).append("Error consultando Datos Rips:").append(e.getMessage()).toString(), e);
		}
		return null;
	}

	public List<Cpcontrato> getTipoUsuarioClinico(Integer codigo) throws ModelException {
		List<Cpcontrato> resultList = null;
		List parametros = new ArrayList();

		try {

			StringBuffer sb = new StringBuffer();
			sb.append(" select cpco from " + Cpcontrato.class.getName() + " cpco  where cpco.ccncestado = 'VG' ");
			if (codigo.intValue() != 0)
				sb.append("AND (cpco.id.ccnnclinic = ? OR cpco.id.ccnnclinic = 9)  ");
			sb.append(" order by cpco.id.ccnnclinic, cpco.id.ccnnnumero ");
			if (codigo.intValue() != 0)
				parametros.add(codigo);

			resultList = (List<Cpcontrato>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			if (!resultList.isEmpty()) {
				return resultList;
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Tipos de Usuarios :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Tipos de Usuarios : " + e.getMessage(), e);
		}

	}

	public List<Cvcontrato> getCvcontratoClinico(Integer codigo) throws ModelException {
		List<Cvcontrato> resultList = null;
		List parametros = new ArrayList();

		try {

			StringBuffer sb = new StringBuffer();
			sb.append(" select cpco from " + Cvcontrato.class.getName() + " cpco "
					+ " WHERE (cpco.ccncestado = 'VG' or cpco.ccndfecreg > to_date('01/01/2015','dd/MM/yyyy')) ");
			if (codigo.intValue() != 0)
				sb.append("AND (cpco.id.ccnnclinic = ? OR cpco.id.ccnnclinic = 9)  ");
			sb.append(" order by cpco.id.ccnnclinic, cpco.id.ccnnnumero ");
			if (codigo.intValue() != 0)
				parametros.add(codigo);

			resultList = (List<Cvcontrato>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			if (!resultList.isEmpty()) {
				return resultList;
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Contratos clinica :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Contratos Clinica : " + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroUsuario
	 * @return
	 * @throws ModelException
	 */
	public String getCompromisosPsicologiaByUsuario(Long numeroUsuario) throws ModelException {
		List<String> resultList = null;
		List parametros = new ArrayList<Chformulahos>();

		try {

			StringBuffer sb = new StringBuffer();
			sb.append(" select chpt.hptccompromiso from " + Chconsulta.class.getName());
			sb.append(" chco, Chpladetrat chpt  where chco.hcolnumero = chpt.id.hptlconsulta  ");
			sb.append(" and chco.hcoctiposervi = chpt.id.hptctiposervi and chpt.hptccompromiso is not null ");
			sb.append(" and chco.hcoeetapa = 'CE' ");
			sb.append(" and chco.hcolusuario = ?  ");
			sb.append(" order by chco.hcodfecregistr desc ");

			parametros.add(numeroUsuario);

			resultList = (List<String>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			if (!resultList.isEmpty()) {
				return resultList.get(0);
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Compromisos Psicologicos:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Compromisos Psicologicos: " + e.getMessage(), e);
		}

	}

	/**
	 * @param colposcopia
	 * @throws ModelException
	 */
	public

			void saveColposcopia(final Chcolposcopia colposcopia) throws ModelException {

		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {

					Chanatopatol anatomia = null;

					if (colposcopia != null) {

						StringBuffer sb = new StringBuffer();
						sb.append(" select chap from  Chanatopatol  chap  "
								+ " where chap.id.haplconsulta = :wmuncons AND chap.id.hapctiposervi = :wtipserv ");

						Query query1 = session.createQuery(sb.toString());
						query1.setParameter("wmuncons", colposcopia.getId().getHcllconsulta());
						query1.setParameter("wtipserv", colposcopia.getId().getHclctiposervi());

						anatomia = (Chanatopatol) query1.uniqueResult();

						if (colposcopia.getHclcobsebiop() != null && !colposcopia.getHclcobsebiop().equals("")) {
							if (anatomia != null) {

								anatomia.setHapcorigepieza(colposcopia.getHclcobsebiop());
								session.saveOrUpdate(colposcopia);
							}

							else {

								anatomia = new Chanatopatol();
								anatomia.getId().setHaplconsulta(colposcopia.getId().getHcllconsulta());
								anatomia.getId().setHapctiposervi(colposcopia.getId().getHclctiposervi());
								anatomia.getId().setHapnconsecutiv(1);
								anatomia.setHapcoperador(colposcopia.getHclcoperador());
								anatomia.setHapcorigepieza(colposcopia.getHclcobsebiop());
								anatomia.setHapdfecregistr(new Date());
								session.saveOrUpdate(anatomia);
							}
						}

						session.saveOrUpdate(colposcopia);
					}

					return colposcopia;

				}

			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		}
	}

	/**
	 * @param numeroConsulta
	 * @return
	 * @throws ModelException
	 */
	public Chcolposcopia getColposcopia(Long numeroConsulta) throws ModelException {
		List<Chcolposcopia> resultList = null;
		List parametros = new ArrayList();

		try {
			if (numeroConsulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chcl from " + Chcolposcopia.class.getName()
						+ " chcl  where chcl.id.hcllconsulta = ? AND chcl.id.hclctiposervi = ? ");
				parametros.add(numeroConsulta);
				parametros.add(IConstantes.TIPO_CONSULTA);

				resultList = (List<Chcolposcopia>) this.getHibernateTemplate().find(sb.toString(),
						parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando colposcopia :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando colposcopia : " + e.getMessage(), e);
		}

	}

	/**
	 * @param serorigen
	 * @return
	 * @throws ModelException
	 */
	public List<Object[]> getServiciosAnexosControlSinCosto(String serorigen) throws ModelException {
		List resultList = null;

		try {
			if (serorigen != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select cpse.csvccodigo, cpse.csvcnombre ");
				sb.append("  from clinico.cpservanex cpsa, clinico.Cpservicio cpse ");
				sb.append(" where  cpsa.csacserane = cpse.csvccodigo and cpsa.csacservic = :servicio ");
				/*
				 * sb.append(" union  ");
				 * sb.append(" select cpse1.csvccodigo, cpse1.csvcnombre ");
				 * sb.append("   from clinico.cpservanex cpsa1, clinico.Cpservicio cpse1 "); sb.
				 * append(" where  cpsa1.csacserane = cpse1.csvccodigo and cpsa1.csacservic in  "
				 * ); sb.
				 * append(" (select cpsa2.csacservic from clinico.cpservanex cpsa2 where cpsa2.csacserane =  :servicio) "
				 * );
				 */Query sqlquery = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
						.createQuery(sb.toString());
				sqlquery.setParameter("servicio", serorigen);
				resultList = sqlquery.list();

				if (!resultList.isEmpty()) {
					return resultList;
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando servicios anexos :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando servicios anexos : " + e.getMessage(), e);
		}

	}

	/**
	 * @param fechaInicial
	 * @param fechaFinal
	 * @param clinica
	 * @return
	 * @throws ModelException
	 */
	public List<Object[]> getOportunidadEntregaGeneral(Date fechaInicial, Date fechaFinal, Integer clinica)
			throws ModelException {
		List resultList = null;

		String HORA_INICIAL = " 00:00";
		String HORA_FINAL = " 23:59";
		String fechaI = null;
		String fechaF = null;
		if (fechaInicial != null && fechaFinal != null) {
			SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");

			fechaI = dateFormat.format(fechaInicial) + HORA_INICIAL;
			fechaF = dateFormat.format(fechaFinal) + HORA_FINAL;
		}

		try {
			if (fechaInicial != null && fechaFinal != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(
						" select cnci.ccinconsec, cnci.ccictipide, cnci.ccianumide, cnci.ccicprinom, cnci.ccicsegnom,cnci.ccicpriape, cnci.ccicsegape,cntm.ctmdfectom,chlc.hlcdfecregistr,cncl.clcccatego ");
				sb.append(" from clinico.cncitotoma cntm ");
				sb.append(" left join clinico.cncitologi cnci on cntm.ctmnconsec = cnci.ccinconsec   ");
				sb.append(" left join clinico.cncitolect cncl on cntm.ctmnconsec = cncl.clcnconsec   ");
				sb.append(" left join historia.chlibrocitol chlc on cntm.ctmnconsec = chlc.hlcnconsec   ");
				sb.append(" where  cntm.ctmnclinic = :clinica ");
				sb.append(
						" and  (cntm.ctmdfecreg BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))  ");

				Query sqlquery = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
						.createQuery(sb.toString());
				sqlquery.setParameter("fechaI", fechaI);
				sqlquery.setParameter("fechaF", fechaF);
				sqlquery.setParameter("clinica", clinica);

				resultList = sqlquery.list();

				if (!resultList.isEmpty()) {
					return resultList;
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando oportunidad de entrega :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando oportunidad de entrega : " + e.getMessage(), e);
		}

	}

	/**
	 * @param fechaInicial
	 * @param fechaFinal
	 * @return
	 * @throws ModelException
	 */
	public List<Object[]> getReportePorcentajeManual(Date fechaInicial, Date fechaFinal, Integer clinica,
			BigDecimal codMedico, Integer numeroSala, String wservicio) throws ModelException {
		List resultList = null;

		String HORA_INICIAL = " 00:00";
		String HORA_FINAL = " 23:59";
		String fechaI = null;
		String fechaF = null;
		if (fechaInicial != null && fechaFinal != null) {
			SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");

			fechaI = dateFormat.format(fechaInicial) + HORA_INICIAL;
			fechaF = dateFormat.format(fechaFinal) + HORA_FINAL;
		}

		try {
			if (fechaInicial != null && fechaFinal != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(
						" select cnco.cconnumero, NVL(cnpc.cpnnprofes,0), NVL(chco.hcoeetapa,''), NVL(cppr.cpfcnombre,''), ");
				sb.append(
						" NVL(cnco.cconnumero,0), NVL(cnco.ccocservic,''), NVL(cpse.csvcnombre,''), cnco.ccodfeccon, chco.hcodfeccierre, ");
				sb.append(
						" chco.hcodfecinicio, cnco.ccodfecreg, cnco.CCONCLINIC,cpcl.CCLCNOMBRE, cnco.CCOANUMIDE,cnco.cconnumdoc ");
				sb.append(" from clinico.cnconsclin cnco  ");
				sb.append(
						" left join clinico.cnprofxcon cnpc ON cnpc.cpnnconcli = cnco.cconnumero AND cnpc.cpncestado != 'XX'  ");
				sb.append(" left join historia.chconsulta chco ON chco.hcolconsuclini = cnco.cconnumero   ");
				sb.append(
						" left join clinico.cpprofesio cppr ON cppr.cpfncodigo = cnpc.cpnnprofes and cppr.cpfnclinic = cnco.cconclinic   ");
				sb.append(" left join clinico.cpservicio cpse ON cpse.csvccodigo = cnco.ccocservic   ");
				sb.append(" left join clinico.cpclinica cpcl ON cpcl.CCLNCODIGO = cnco.CCONCLINIC     ");
				sb.append(
						" where cppr.cpfctipper = 'N' and (cnco.ccodfeccon BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))  ");

				if (clinica != null && clinica > 0) {
					sb.append(" and cnco.cconclinic = :clinica  ");
				}

				if (codMedico != null && codMedico.compareTo(new BigDecimal("0")) > 0) {
					sb.append(" and cppr.cpfncodigo= :codMedico ");
				}

				if (numeroSala != null) {
					sb.append(" and cnco.cconsalesp= :numeroSala ");
				}

				if (wservicio != null && !wservicio.equals("")) {
					sb.append(" AND cnco.ccocservic like :wservicio ");
				}

				sb.append(" and cnco.ccocestado != 'XX' AND cnco.ccocetapa = 'AT' ");
				sb.append(
						" AND cnco.ccocservic not in ('898001.0','898001.1','9648','9649','S898001.0','S898001.1','S9648','S9649','S898001.4') ");
				sb.append(
						" group by cnco.cconnumero,cnpc.cpnnprofes,chco.hcoeetapa,cppr.cpfcnombre,cnco.cconnumdoc,cnco.ccocservic, cpse.csvcnombre, ");
				sb.append(
						" cnco.ccodfeccon, chco.hcodfeccierre, chco.hcodfecinicio, cnco.ccodfecreg, cnco.CCONCLINIC,cpcl.CCLCNOMBRE, cnco.CCOANUMIDE  ");
				sb.append(
						" order by cnco.cconnumero,cnpc.cpnnprofes,chco.hcoeetapa,cppr.cpfcnombre,cnco.cconnumdoc,cnco.ccocservic, cpse.csvcnombre, ");
				sb.append(
						" cnco.ccodfeccon, chco.hcodfeccierre, chco.hcodfecinicio , cnco.ccodfecreg, cnco.CCONCLINIC,cpcl.CCLCNOMBRE, cnco.CCOANUMIDE ");

				Query sqlquery = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
						.createQuery(sb.toString());
				sqlquery.setParameter("fechaI", fechaI);
				sqlquery.setParameter("fechaF", fechaF);

				if (clinica != null && clinica > 0) {
					sqlquery.setParameter("clinica", clinica);
				}

				if (codMedico != null && codMedico.compareTo(new BigDecimal("0")) > 0) {
					sqlquery.setParameter("codMedico", codMedico);
				}

				if (numeroSala != null) {
					sqlquery.setParameter("numeroSala", numeroSala);
				}

				if (wservicio != null && !wservicio.equals("")) {
					sqlquery.setParameter("wservicio", "%" + wservicio + "%");
				}

				resultList = sqlquery.list();

				if (!resultList.isEmpty()) {
					return resultList;
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Porcentaje Manual :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Porcentaje Manual  : " + e.getMessage(), e);
		}

	}

	/**
	 * @return
	 * @throws ModelException
	 */
	public List<Chtipoinas> getListaHistoriaIntervencionAsesoria(Integer dependencia) throws ModelException {
		List<Chtipoinas> resultList = null;
		List parametros = new ArrayList();
		try {

			if (dependencia != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chti from " + Chtipoinas.class.getName());
				sb.append(" chti where chti.hticestado = ?   ");
				sb.append(" and  chti.htindepen = ?   ");
				sb.append("  order by chti.htinnumero ");
				parametros.add(IConstantes.ESTADO_VIGENTE);
				parametros.add(dependencia);

				resultList = (List<Chtipoinas>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList;
				}
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Intervenciones Asesoria:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Intervenciones Asesoria :" + e.getMessage(), e);
		}

	}

	/**
	 * @param ctinnumero
	 * @return
	 * @throws ModelException
	 */
	public String getDescripcionIntervencionAsesoriaXid(Integer ctinnumero) throws ModelException {
		List<Chtipoinas> resultList = null;
		List parametros = new ArrayList();

		try {

			if (ctinnumero != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select cnti from " + Chtipoinas.class.getName() + " cnti where cnti.htinnumero = ?  ");
				parametros.add(ctinnumero);

				resultList = (List<Chtipoinas>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0).getHticdescri();
				}
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Descripci�n  Intervenciones Asesoria:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Descripci�n  Intervenciones Asesoria :" + e.getMessage(), e);
		}

	}

	/**
	 * @param asesoria
	 * @throws ModelException
	 */
	public void saveAsesoriaHunanitaria(Chasesohuman asesoria) throws ModelException {

		try {
			this.getHibernateTemplate().saveOrUpdate(asesoria);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando asesoria:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando asesoria :" + e.getMessage(), e);
		}
	}

	/**
	 * @param hahcoperador
	 * @param hahnclinica
	 * @return
	 * @throws ModelException
	 */
	public List<Chasesohuman> getAsesoriaHumanitariaXUsuario(String hahcoperador, Integer hahnclinica)
			throws ModelException {
		List<Chasesohuman> resultList = null;
		List parametros = new ArrayList();
		String HORA_INICIAL = " 00:00";
		String HORA_FINAL = " 23:59";

		Date fechaHoy = new Date();

		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		String fechaI = dateFormat.format(fechaHoy) + HORA_INICIAL;
		String fechaF = dateFormat.format(fechaHoy) + HORA_FINAL;

		try {

			if (hahcoperador != null && hahnclinica != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chah from " + Chasesohuman.class.getName());
				sb.append(" chah where chah.hahcoperador = ? AND chah.hahnclinica = ?  ");
				sb.append(
						" AND (chah.hahdfecregistr BETWEEN TO_DATE(?,'dd/MM/yyyy hh24:mi') AND TO_DATE(?,'dd/MM/yyyy hh24:mi'))");

				parametros.add(hahcoperador);
				parametros.add(hahnclinica);
				parametros.add(fechaI);
				parametros.add(fechaF);

				resultList = (List<Chasesohuman>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList;
				}
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Asesoria Humanitaria:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Asesoria Humanitaria :" + e.getMessage(), e);
		}

	}

	/**
	 * @param asesoria
	 * @throws ModelException
	 */
	public void saveAsesoriaAvise(Chaseavise asesoria) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(asesoria);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando asesoria:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando asesoria :" + e.getMessage(), e);
		}
	}

	public void saveOtraAsesoria(final Chasesoria asesoria) throws ModelException {
		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {
					if (asesoria != null) {
						/*
						 * if (asesoria.getHaslnumero() == null) { Cpconsec consecutivo = null;
						 * StringBuffer sb = new StringBuffer(); sb.append(" select  cpco from " +
						 * Cpconsec.class.getName() + " cpco  where cpco.conncodigo =  :conncodigo ");
						 * Query query = session.createQuery(sb.toString());
						 * query.setParameter("conncodigo", IConstantes.CONSECUTIVO_ASESORIA);
						 * consecutivo = (Cpconsec)query.uniqueResult();
						 * 
						 * session.
						 * createQuery("update clinico.Cpconsec set connnumero = connnumero + 1  where conncodigo = "
						 * + IConstantes.CONSECUTIVO_ASESORIA + " ").executeUpdate();
						 * 
						 * 
						 * if (consecutivo != null && consecutivo.getConncodigo() != null) {
						 * asesoria.setHaslnumero(new Long(consecutivo.getConnnumero() + 1)); }
						 * 
						 * }
						 */

						session.saveOrUpdate(asesoria);
					}

					return asesoria;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		}
	}

	/**
	 * @param seguimiento
	 * @throws ModelException
	 */
	public void saveSeguimientoAvise(final Chseguavis seguimiento) throws ModelException {
		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {
					Integer consecutivo = null;
					if (seguimiento != null && seguimiento.getId() != null) {
						if (seguimiento.getId().getHsanconsec() == null) {
							StringBuffer sb1 = new StringBuffer();

							String HORA_INICIAL = " 00:00";
							String HORA_FINAL = " 23:59";

							SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
							String fechaI = dateFormat.format(seguimiento.getId().getHsadfecase()) + HORA_INICIAL;
							String fechaF = dateFormat.format(seguimiento.getId().getHsadfecase()) + HORA_FINAL;

							sb1.append(" select max(cnsa.id.hsanconsec) from " + Chseguavis.class.getName()
									+ " cnsa  where cnsa.id.hsalusuario = :numusu   ");

							sb1.append(
									" AND (cnsa.id.hsadfecase BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))");
							Query query1 = session.createQuery(sb1.toString());
							query1.setParameter("numusu", seguimiento.getId().getHsalusuario());
							query1.setParameter("fechaI", fechaI);
							query1.setParameter("fechaF", fechaF);

							Integer secuenciaActual = (Integer) query1.uniqueResult();

							if (secuenciaActual != null) {
								consecutivo = secuenciaActual.intValue() + 1;
							} else {
								consecutivo = 1;
							}
							if (consecutivo != null) {
								seguimiento.getId().setHsanconsec(consecutivo);
							}

						}

						session.saveOrUpdate(seguimiento);
					}

					return seguimiento;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		}
	}

	/**
	 * @param usuario
	 * @return
	 * @throws ModelException
	 */
	public Chaseavise getAsesoriaUsuario(final Chusuario usuario) throws ModelException {
		Chaseavise pis = (Chaseavise) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				if (usuario != null && usuario.getHuslnumero() != null) {
					StringBuffer sb = new StringBuffer();
					sb.append(" select chav from " + Chaseavise.class.getName());
					sb.append(" chav  ");
					sb.append(" where chav.id.havlusuario = :wnumusu  ");
					sb.append(" order by chav.id.havdfecase desc ");

					String hql = sb.toString();

					Query query = session.createQuery(hql);
					query.setParameter("wnumusu", usuario.getHuslnumero());

					List<Chaseavise> pis;
					pis = query.list();

					Chaseavise co;

					co = null;

					if (pis != null && !pis.isEmpty()) {
						co = pis.get(0);

						if (co != null) {
							Set seguimiento = co.getHnseguavis();
							Hibernate.initialize(seguimiento);
						}
					}

					return co;
				}

				return null;
			}

		});
		return pis;
	}

	/**
	 * @param usuario
	 * @param fechaAsesoria
	 * @return
	 * @throws ModelException
	 */
	public List<Chaseavise> getAsesoriaUsuario(final Chusuario usuario, final Date fechaAsesoria)
			throws ModelException {
		List<Chaseavise> pis = (List<Chaseavise>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				String HORA_INICIAL = " 00:00";
				String HORA_FINAL = " 23:59";

				SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
				String fechaI = dateFormat.format(fechaAsesoria) + HORA_INICIAL;
				String fechaF = dateFormat.format(fechaAsesoria) + HORA_FINAL;

				StringBuffer sb = new StringBuffer();
				sb.append(" select cnav from " + Chaseavise.class.getName());
				sb.append(" cnav  ");
				sb.append(" where cnav.id.havlusuario = :wnumusu  ");
				sb.append(
						" AND (cnav.id.havdfecase BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))");

				String hql = sb.toString();

				Query query = session.createQuery(hql);
				query.setParameter("wnumusu", usuario.getHuslnumero());
				query.setParameter("fechaI", fechaI);
				query.setParameter("fechaF", fechaF);
				List<Chaseavise> pis;
				pis = query.list();

				for (Chaseavise co : pis) {
					Set seguimiento = co.getHnseguavis();
					Hibernate.initialize(seguimiento);
				}

				return pis;
			}
		});
		return pis;
	}

	/**
	 * @return
	 * @throws ModelException
	 */
	public List<Chaseavise> getListAsesoriaUsuario(final Chusuario usuario) throws ModelException {
		List<Chaseavise> pis = (List<Chaseavise>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				StringBuffer sb = new StringBuffer();
				sb.append(" select cnav from " + Chaseavise.class.getName());
				sb.append(" cnav  ");
				sb.append(" where cnav.id.havlusuario = :wnumusu  ");
				sb.append(" order by cnav.id.havdfecase ");
				String hql = sb.toString();

				Query query = session.createQuery(hql);
				query.setParameter("wnumusu", usuario.getHuslnumero());

				List<Chaseavise> pis;
				pis = query.list();

				for (Chaseavise co : pis) {
					Set seguimiento = co.getHnseguavis();
					Hibernate.initialize(seguimiento);

					/*
					 * Chusuario usuAux = co.getCavlusuario(); Hibernate.initialize(usuAux);
					 */
				}

				return pis;
			}
		});
		return pis;
	}

	public boolean verificarAsesoriaDia(Chusuario usuario, Date fechaAsesoria) throws ModelException {
		List resultList = null;
		List parametros = new ArrayList();

		try {

			if (usuario != null && usuario.getHuslnumero() != null && fechaAsesoria != null) {

				String HORA_INICIAL = " 00:00";
				String HORA_FINAL = " 23:59";

				SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
				String fechaI = dateFormat.format(fechaAsesoria) + HORA_INICIAL;
				String fechaF = dateFormat.format(fechaAsesoria) + HORA_FINAL;

				StringBuffer sb = new StringBuffer();
				sb.append(" select chaa.havdfecreg from " + Chaseavise.class.getName());
				sb.append(" chaa where chaa.id.havlusuario = ?  ");
				sb.append(
						" AND (chaa.id.havdfecase BETWEEN TO_DATE(?,'dd/MM/yyyy hh24:mi') AND TO_DATE(?,'dd/MM/yyyy hh24:mi'))");
				parametros.add(usuario.getHuslnumero());
				parametros.add(fechaI);
				parametros.add(fechaF);

				resultList = this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return true;
				}
			}

			return false;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Descripci�n  Intervenciones Asesoria:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Descripci�n  Intervenciones Asesoria :" + e.getMessage(), e);
		}

	}

	/**
	 * @param usuario
	 * @param fechaAsesoria
	 * @return
	 * @throws ModelException
	 */
	public boolean verificarAsesoriaDiaPosterior(Chusuario usuario, Date fechaAsesoria) throws ModelException {
		List resultList = null;
		List parametros = new ArrayList();

		try {

			if (usuario != null && usuario.getHuslnumero() != null && fechaAsesoria != null) {

				StringBuffer sb = new StringBuffer();
				sb.append(" select chaa.havdfecreg from " + Chaseavise.class.getName());
				sb.append(" chaa where chaa.id.havlusuario = ?  ");
				sb.append(" AND chaa.id.havdfecase > ? ");
				parametros.add(usuario.getHuslnumero());
				parametros.add(fechaAsesoria);

				resultList = this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return true;
				}
			}

			return false;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Descripci�n  Intervenciones Asesoria:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Descripci�n  Intervenciones Asesoria :" + e.getMessage(), e);
		}

	}

	/**
	 * @return
	 * @throws ModelException
	 */
	public List<Chcirugprogr> getCirugiasProgramadasActivas(final Integer codclin, final String etapa,
			final String etapa2, final Date fechaCirugia, final BigDecimal wcodmed) throws ModelException {
		List<Chcirugprogr> pis = (List<Chcirugprogr>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				String HORA_INICIAL = " 00:00";
				String HORA_FINAL = " 23:59";
				String fechaI = null;
				String fechaF = null;
				boolean tieneSala = false;

				if (fechaCirugia != null) {
					SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
					fechaI = dateFormat.format(fechaCirugia) + HORA_INICIAL;
					fechaF = dateFormat.format(fechaCirugia) + HORA_FINAL;

				}

				if (wcodmed != null) {
					StringBuffer hql = new StringBuffer();
					hql.append(" select chps from " + Chsalaxprofe.class.getName());
					hql.append(" chps  where chps.id.hspnnumero = :wcodmed and chps.id.hspnclinica = :codclin ");

					Query query = session.createQuery(hql.toString());
					query.setParameter("codclin", codclin);
					query.setParameter("wcodmed", wcodmed);

					List<Chcirugprogr> pis;
					pis = query.list();

					if (pis != null && !pis.isEmpty()) {
						tieneSala = true;
					}

				}

				StringBuffer sb = new StringBuffer();
				sb.append("select chcp from ");
				sb.append(Chcirugprogr.class.getName()).append(" chcp ");
				sb.append("where chcp.hcpnclinica = :codclin and chcp.hcpcsalidenfer != 'S' ");
				sb.append(" and chcp.hcpcestado <> 'XX'");
				if (etapa != null && etapa2 != null) {
					sb.append(" and chcp.hcpcetapa in (:etapa, :etapa2) ");

				} else if (etapa != null) {
					sb.append(" and chcp.hcpcetapa in (:etapa) ");

				}

				if (fechaCirugia != null) {
					sb.append(
							" AND (chcp.hcpdfechacirug BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))");
				}

				if (tieneSala) {
					sb.append(
							" and chcp.hcpnsalainterv in (select chps.id.hspnsala from Chsalaxprofe chps where chps.id.hspnnumero = :wcodmed )");
				}

				sb.append(" order by chcp.hcpnordenllega desc");

				String hql = sb.toString();

				Query query = session.createQuery(hql);
				query.setParameter("codclin", codclin);
				if (etapa != null) {
					query.setParameter("etapa", etapa);
				}

				if (etapa2 != null) {
					query.setParameter("etapa2", etapa2);
				}

				if (fechaCirugia != null) {
					query.setParameter("fechaI", fechaI);
					query.setParameter("fechaF", fechaF);
				}

				if (tieneSala) {
					query.setParameter("wcodmed", wcodmed);
				}

				List<Chcirugprogr> pis;
				List<Chcirugprogr> pis2;
				pis = query.list();

				pis2 = new ArrayList<Chcirugprogr>();

				for (Chcirugprogr co : pis) {
					String nombreServicio = "";
					String servicio1 = "";
					String servicio2 = "";

					Chusuario usuario = co.getHcplusuario();
					Hibernate.initialize(usuario);

					Set chdetacirpros = co.getChdetacirpros();
					Hibernate.initialize(chdetacirpros);
					StringBuffer sb1 = new StringBuffer();
					sb1.append(
							" select (cpse.csvcnombre) from Historia.Chdetacirpro chdc, Clinico.cpservicio cpse where cpse.csvccodigo = chdc.hdccservicio AND  chdc.hdclconsuprinc = :numeroConsulta  ");
					sb1.append(" ");

					Query query1 = session.createQuery(sb1.toString());
					query1.setParameter("numeroConsulta", co.getHcplnumero());

					List pis3;
					pis3 = new ArrayList();

					pis3 = query1.list();

					if (pis3.size() == 1) {
						int size = pis3.size();
						for (int x = 0; x < pis3.size(); x++) {
							servicio1 = (String) pis3.get(x);
							nombreServicio = servicio1;
						}
					} else {
						for (int x = 0; x < pis3.size(); x++) {

							servicio2 = servicio2 + " - " + (String) pis3.get(x);
							nombreServicio = servicio2;
						}
					}

					co.setNombreServicio(nombreServicio);

					pis2.add(co);

				}
				return pis2;
			}
		});
		return pis;
	}

	// activas con solo la clinica

	/**
	 * @return
	 * @throws ModelException
	 */
	public List<Chcirugprogr> getCirugiasProgramadasAnestesia(final Integer codclin, final String wetapa,
			final String wetapa2, final Date fechaCirugia, final BigDecimal wcodmed) throws ModelException {
		List<Chcirugprogr> pis = (List<Chcirugprogr>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				String HORA_INICIAL = " 00:00";
				String HORA_FINAL = " 23:59";
				boolean tieneSala = false;

				SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
				String fechaI = dateFormat.format(fechaCirugia) + HORA_INICIAL;
				String fechaF = dateFormat.format(fechaCirugia) + HORA_FINAL;

				if (wcodmed != null) {
					StringBuffer hql = new StringBuffer();
					hql.append(" select chps from " + Chsalaxprofe.class.getName());
					hql.append(" chps  where chps.id.hspnnumero = :wcodmed and chps.id.hspnclinica = :codclin ");

					Query query1 = session.createQuery(hql.toString());
					query1.setParameter("codclin", codclin);
					query1.setParameter("wcodmed", wcodmed);

					List<Chcirugprogr> pis;
					pis = query1.list();

					if (pis != null && !pis.isEmpty()) {
						tieneSala = true;
					}

				}

				StringBuffer sb = new StringBuffer();
				sb.append("select chcp from ");
				sb.append(Chcirugprogr.class.getName()).append(" chcp ");
				sb.append("where chcp.hcpnclinica = :codclin and chcp.hcpcingreenfer = 'S' ");
				sb.append(" and chcp.hcpcsalidenfer != 'S'   ");
				sb.append(" and chcp.hcpctipoaneste !=  '6' and  chcp.hcpctipoaneste !=  '8'  ");
				sb.append(" and chcp.hcpcestado <> 'XX' ");

				if (wetapa2 != null && !wetapa2.equals("")) {
					sb.append(" and chcp.hcpcetapa in  (:wetapa, :wetapa2)   ");
				} else {
					sb.append(" and chcp.hcpcetapa = :wetapa   ");
				}

				if (tieneSala) {
					sb.append(
							"and chcp.hcpnsalainterv in (select chps.id.hspnsala from Chsalaxprofe chps where chps.id.hspnnumero = :wcodmed )");
				}

				if (fechaCirugia != null) {
					sb.append(
							" AND (chcp.hcpdfechacirug BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))");
				}

				sb.append(" and (chcp.hcpcregisanest = 'N' OR  chcp.hcpcregisanest is null) ");
				sb.append(" order by chcp.hcpnordenllega desc");

				String hql = sb.toString();

				Query query = session.createQuery(hql);
				query.setParameter("codclin", codclin);
				query.setParameter("wetapa", wetapa);

				if (fechaCirugia != null) {
					query.setParameter("fechaI", fechaI);
					query.setParameter("fechaF", fechaF);
				}

				if (tieneSala) {
					query.setParameter("wcodmed", wcodmed);
				}

				if (wetapa2 != null && !wetapa2.equals("")) {
					query.setParameter("wetapa2", wetapa2);
				}
				List<Chcirugprogr> pis;
				List<Chcirugprogr> pis2;
				pis = query.list();

				pis2 = new ArrayList<Chcirugprogr>();

				for (Chcirugprogr co : pis) {
					String nombreServicio = "";
					String servicio1 = "";
					String servicio2 = "";
					Chusuario usuario = co.getHcplusuario();
					Hibernate.initialize(usuario);

					Set chdetacirpros = co.getChdetacirpros();
					Hibernate.initialize(chdetacirpros);

					StringBuffer sb1 = new StringBuffer();
					sb1.append(
							" select (cpse.csvcnombre) from Historia.Chdetacirpro chdc, Clinico.cpservicio cpse where cpse.csvccodigo = chdc.hdccservicio AND  chdc.hdclconsuprinc = :numeroConsulta  ");
					sb1.append(" ");

					Query query1 = session.createQuery(sb1.toString());
					query1.setParameter("numeroConsulta", co.getHcplnumero());
					List pis3;
					pis3 = new ArrayList();

					pis3 = query1.list();

					if (pis3.size() == 1) {
						int size = pis3.size();
						for (int x = 0; x < pis3.size(); x++) {
							servicio1 = (String) pis3.get(x);
							nombreServicio = servicio1;
						}
					} else {
						for (int x = 0; x < pis3.size(); x++) {

							servicio2 = servicio2 + "-" + (String) pis3.get(x);
							nombreServicio = servicio2;
						}
					}

					co.setNombreServicio(nombreServicio);

					pis2.add(co);

				}

				return pis2;
			}
		});
		return pis;
	}

	/**
	 * @return
	 * @throws ModelException
	 */
	public List<Chcirugprogr> getCirugiasProgramadasEpicrisis(final Integer codclin, final Date fechaHoy)
			throws ModelException {
		List<Chcirugprogr> pis = (List<Chcirugprogr>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				String HORA_INICIAL = " 00:00";
				String HORA_FINAL = " 23:59";
				String fechaI = null;
				String fechaF = null;

				if (fechaHoy != null) {
					SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
					fechaI = dateFormat.format(fechaHoy) + HORA_INICIAL;
					fechaF = dateFormat.format(fechaHoy) + HORA_FINAL;

				}

				StringBuffer sb = new StringBuffer();
				sb.append("select chcp from ");
				sb.append(Chcirugprogr.class.getName()).append(" chcp ");
				sb.append("where chcp.hcpnclinica = :codclin and chcp.hcpcingreenfer = 'S' ");
				sb.append(" and chcp.hcpcsalidmedic = 'S'   ");
				sb.append(" and (chcp.hcpcregisepicr = 'N' OR  chcp.hcpcregisepicr is null) ");

				if (fechaHoy != null) {
					sb.append(
							" AND (chcp.hcpdfechacirug BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))");
				}

				String hql = sb.toString();

				Query query = session.createQuery(hql);
				query.setParameter("codclin", codclin);
				if (fechaHoy != null) {
					query.setParameter("fechaI", fechaI);
					query.setParameter("fechaF", fechaF);
				}

				List<Chcirugprogr> pis;
				List<Chcirugprogr> pis2;
				pis = query.list();

				pis2 = new ArrayList<Chcirugprogr>();

				for (Chcirugprogr co : pis) {
					String nombreServicio = "";
					String servicio1 = "";
					String servicio2 = "";
					Chusuario usuario = co.getHcplusuario();
					Hibernate.initialize(usuario);

					Chdescrquiru descripcionQuirurgica = co.getChdescrquiru();
					Hibernate.initialize(descripcionQuirurgica);

					Set chdetacirpros = co.getChdetacirpros();
					Hibernate.initialize(chdetacirpros);

					StringBuffer sb1 = new StringBuffer();
					sb1.append(
							" select (cpse.csvcnombre) from Historia.Chdetacirpro chdc, Clinico.cpservicio cpse where cpse.csvccodigo = chdc.hdccservicio AND  chdc.hdclconsuprinc = :numeroConsulta  ");
					sb1.append(" ");

					Query query1 = session.createQuery(sb1.toString());
					query1.setParameter("numeroConsulta", co.getHcplnumero());
					List pis3;
					pis3 = new ArrayList();

					pis3 = query1.list();

					if (pis3.size() == 1) {
						int size = pis3.size();
						for (int x = 0; x < pis3.size(); x++) {
							servicio1 = (String) pis3.get(x);
							nombreServicio = servicio1;
						}
					} else {
						for (int x = 0; x < pis3.size(); x++) {

							servicio2 = servicio2 + "-" + (String) pis3.get(x);
							nombreServicio = servicio2;
						}
					}

					co.setNombreServicio(nombreServicio);

					pis2.add(co);
				}

				return pis;
			}
		});
		return pis;
	}

	/**
	 * @param codclin
	 * @return
	 * @throws ModelException
	 */
	public List<Chcirugprogr> getCirugiasProgramadasIngresoEnfermeria(final Integer codclin, final Date fechaActual)
			throws ModelException {
		List<Chcirugprogr> pis = (List<Chcirugprogr>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				String HORA_INICIAL = " 00:00";
				String HORA_FINAL = " 23:59";

				SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
				String fechaI = dateFormat.format(fechaActual) + HORA_INICIAL;
				String fechaF = dateFormat.format(fechaActual) + HORA_FINAL;

				StringBuffer sb = new StringBuffer();
				sb.append("select chcp from ");
				sb.append(Chcirugprogr.class.getName()).append(" chcp ");
				sb.append("where chcp.hcpnclinica = :codclin ");
				sb.append(" AND chcp.hcpcestado <> 'XX'");
				sb.append(" AND (chcp.hcpcingreenfer = 'N' OR  chcp.hcpcingreenfer is null) ");
				sb.append(
						" AND (chcp.hcpdfechacirug BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))");
				sb.append(" order by chcp.hcpdfechacirug  ");
				String hql = sb.toString();

				Query query = session.createQuery(hql);
				query.setParameter("codclin", codclin);
				query.setParameter("fechaI", fechaI);
				query.setParameter("fechaF", fechaF);
				List<Chcirugprogr> pis;
				pis = query.list();

				for (Chcirugprogr co : pis) {
					Chusuario usuario = co.getHcplusuario();
					Hibernate.initialize(usuario);

					Set chdetacirpros = co.getChdetacirpros();
					Hibernate.initialize(chdetacirpros);
				}

				return pis;
			}
		});
		return pis;
	}

	/**
	 * @param codclin
	 * @return
	 * @throws ModelException
	 */
	public List<Chcirugprogr> getCirugiasProgramadasIngresoMedico(final Integer codclin, final Date fechaActual)
			throws ModelException {
		List<Chcirugprogr> pis = (List<Chcirugprogr>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				String HORA_INICIAL = " 00:00";
				String HORA_FINAL = " 23:59";

				SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
				String fechaI = dateFormat.format(fechaActual) + HORA_INICIAL;
				String fechaF = dateFormat.format(fechaActual) + HORA_FINAL;

				StringBuffer sb = new StringBuffer();
				sb.append("select chcp from ");
				sb.append(Chcirugprogr.class.getName()).append(" chcp ");
				sb.append("where chcp.hcpnclinica = :codclin ");
				sb.append(" AND (chcp.hcpcingremedic = 'N' OR  chcp.hcpcingremedic is null) ");
				sb.append(
						" AND (chcp.hcpdfechacirug BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))");

				String hql = sb.toString();

				Query query = session.createQuery(hql);
				query.setParameter("codclin", codclin);
				query.setParameter("fechaI", fechaI);
				query.setParameter("fechaF", fechaF);
				List<Chcirugprogr> pis;
				pis = query.list();

				for (Chcirugprogr co : pis) {
					Chusuario usuario = co.getHcplusuario();
					Hibernate.initialize(usuario);

					Set chdetacirpros = co.getChdetacirpros();
					Hibernate.initialize(chdetacirpros);
				}

				return pis;
			}
		});
		return pis;
	}

	/**
	 * @return
	 * @throws ModelException
	 */
	public List<Cpdonante> getDonante() throws ModelException {
		List<Cpdonante> resultList = null;
		List parametros = new ArrayList();

		try {
			StringBuffer sb = new StringBuffer();
			sb.append(" select cpdo from ").append(Cpdonante.class.getName());
			sb.append(" cpdo  where cpdo.cdncestado = 'VG' ");
			sb.append(" order by cpdo.cdnncodigo ");

			resultList = (List<Cpdonante>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			if (!resultList.isEmpty()) {
				return resultList;
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error Obteniendo Donante :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Obteniendo Donante  :" + e.getMessage(), e);
		}

	}

	public List<Object[]> getLibroControlCitologia(Date fechaInicial, Date fechaFinal, Integer clinica)
			throws ModelException {

		List resultList = null;

		String HORA_INICIAL = " 00:00";
		String HORA_FINAL = " 23:59";

		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		String fechaI = dateFormat.format(fechaInicial) + HORA_INICIAL;
		String fechaF = dateFormat.format(fechaFinal) + HORA_FINAL;

		try {
			if (fechaInicial != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(
						" select cntm.ctmnnumero, (cnci.ccicprinom || ' ' || cnci.ccicsegnom ||' ' || cnci.ccicpriape||' ' || cnci.ccicsegape) NOMBRE, cntm.ctmdfectom, ");
				sb.append(
						" (cnci.ccictipide || ' ' || cnci.ccianumide) IDENTIFICACION, cntm.ctmnconsec, cnci.ccinedad, (cnci.ccintipdoc||' - '||cnci.ccinnumdoc) NUMERO_FACTURA, ");
				sb.append(
						" cnci.ccictelefo, cnci.ccicdirecc,cnci.ccicasegur,cnle.clcccatego, cnle.clcccalmue, cnci.ccidfecent, cntm.ctmcesquem,chlc.hlccnombrerecl  ");
				sb.append(" from clinico.cncitotoma cntm");
				sb.append(" left join clinico.cncitologi cnci on cnci.ccinconsec = cntm.ctmnconsec ");
				sb.append(" left join clinico.cncitolect cnle on cnle.clcnconsec =  cntm.ctmnconsec  ");
				sb.append(" left join historia.chlibrocitol chlc on chlc.hlcnconsec =  cntm.ctmnconsec  ");
				sb.append(
						" where (cntm.ctmdfectom BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))  ");
				if (clinica != 0) {
					sb.append(" AND  cntm.ctmnclinic = :clinica  ");
				}

				sb.append("  ");
				Query sqlquery = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
						.createQuery(sb.toString());

				if (clinica != 0) {
					sqlquery.setParameter("clinica", clinica);
				}

				sqlquery.setParameter("fechaI", fechaI);
				sqlquery.setParameter("fechaF", fechaF);

				resultList = sqlquery.list();

				if (!resultList.isEmpty()) {
					return resultList;
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando servicios anexos :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando servicios anexos : " + e.getMessage(), e);
		}

	}

	/**
	 * @param cdictabla
	 * @param cdiccampo
	 * @param cdicvalor
	 * @return
	 * @throws ModelException
	 */
	public String getDescripcionParametrosCitologia(String cdictabla, String cdiccampo, String cdicvalor)
			throws ModelException {
		List<String> resultList = null;
		List parametros = new ArrayList();

		try {
			if (cdictabla != null && cdiccampo != null && cdicvalor != null) {

				StringBuffer sb = new StringBuffer();
				sb.append(" select cnde.cdicdescri ");
				sb.append("  from Cndesccito cnde  ");
				sb.append(" where cnde.id.cdictabla = ? and cnde.id.cdiccampo = ? ");
				sb.append(" and cnde.cdicvalor = ?  ");
				parametros.add(cdictabla);
				parametros.add(cdiccampo);
				parametros.add(cdicvalor);

				resultList = (List<String>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Descripcion Parametros Citologia" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Descripcion Parametros Citologia" + e.getMessage(), e);
		}

	}

	public String getDescripcionTipoProfesional(Integer codProfes) throws ModelException {
		List<String> resultList = null;
		List parametros = new ArrayList();

		try {
			if (codProfes != null) {

				StringBuffer sb = new StringBuffer();
				sb.append(" select cptp.ctpcdescri from " + Cptipoprof.class.getName()
						+ " cptp  where cptp.ctpncodigo =  ? ");
				parametros.add(codProfes);
				resultList = (List<String>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty() && resultList.get(0) != null) {
					return resultList.get(0);
				}
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Descripcion Tipo Profesional:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Descripcion Tipo Profesional:" + e.getMessage(), e);
		}

	}

	// consulta la espcialidad del medico

	public String getDescripcionTipoEspecialidad(Integer codEspe) throws ModelException {
		List<String> resultList = null;
		List parametros = new ArrayList();

		try {
			if (codEspe != null) {

				StringBuffer sb = new StringBuffer();
				sb.append(" select cpti.ctecdescri from " + Cptipoespe.class.getName()
						+ " cpti  where cpti.ctencodigo =  ? ");
				parametros.add(codEspe);
				resultList = (List<String>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty() && resultList.get(0) != null) {
					return resultList.get(0);
				}
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Descripcion Tipo Especialidad:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Descripcion Tipo Especialidad:" + e.getMessage(), e);
		}

	}

	/**
	 * @param hdclconsuprinc
	 * @return
	 * @throws ModelException
	 */
	public List<Object[]> getListaDetalleCirugiasProgramadas(Long hdclconsuprinc) throws ModelException {
		List resultList = null;

		try {
			if (hdclconsuprinc != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" SELECT chdc.hdclconsuprinc,chdc.hdccservicio,cpse.csvcnombre ");
				sb.append(" FROM historia.Chdetacirpro chdc,clinico.Cpservicio cpse ");
				sb.append(" WHERE cpse.csvccodigo = chdc.hdccservicio ");
				sb.append(" AND chdc.hdclconsuprinc = :hdclconsuprinc ");

				Query sqlquery = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
						.createQuery(sb.toString());
				sqlquery.setParameter("hdclconsuprinc", hdclconsuprinc);
				resultList = sqlquery.list();

				if (!resultList.isEmpty()) {
					return resultList;
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando detalle cirugias programadas :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando detalle cirugias programadas  : " + e.getMessage(), e);
		}

	}

	public Chdetacirpro getCirugiaDetallada(Long codigoPrincipal, String servicio) throws ModelException {
		List<Chdetacirpro> resultList = null;
		List parametros = new ArrayList();

		try {
			if (codigoPrincipal != null && servicio != null && !servicio.equals("")) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chdc from " + Chdetacirpro.class.getName()
						+ " chdc  where chdc.id.hdclconsuprinc = ? AND chdc.id.hdccservicio  = ? ");
				parametros.add(codigoPrincipal);
				parametros.add(servicio);

				resultList = (List<Chdetacirpro>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Cirugia detallada :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Cirugia detallada : " + e.getMessage(), e);
		}

	}

	/**
	 * @param codigoPrincipal
	 * @return
	 * @throws ModelException
	 */
	public List<Chdetacirpro> getDetalleCirugiasProgramadas(Long codigoPrincipal) throws ModelException {
		List<Chdetacirpro> resultList = null;
		List parametros = new ArrayList();

		try {
			if (codigoPrincipal != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chdc from " + Chdetacirpro.class.getName()
						+ " chdc  where chdc.id.hdclconsuprinc = ? ");
				parametros.add(codigoPrincipal);

				resultList = (List<Chdetacirpro>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList;
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Lista Cirugia detallada :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Lista Cirugia detallada : " + e.getMessage(), e);
		}

	}

	/**
	 * @param codigoPrincipal
	 * @return
	 * @throws ModelException
	 */
	public List<Object[]> getDetalleCirugiasProgramadasBasico(Long codigoPrincipal, boolean registro)
			throws ModelException {

		List resultList = null;

		try {
			if (codigoPrincipal != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(
						" select chdc.hdclconsuprinc, chdc.hdccservicio, cpse.csvcnombre, chdc.hdccdescrquiru,chdc.hdcnconsedescr, chdc.hdclusuario, chdc.hdcnclinica ");
				sb.append(" from historia.Chdetacirpro chdc, Clinico.Cpservicio cpse ");
				sb.append(" where cpse.csvccodigo = chdc.hdccservicio  ");
				sb.append(" and   chdc.hdclconsuprinc = :codigoPrincipal  ");
				if (registro) {
					sb.append(" and   (chdc.hdccdescrquiru = 'N' OR chdc.hdccdescrquiru is null)  ");
				} else {
					sb.append(" and   chdc.hdccdescrquiru = 'S'  ");
				}

				Query query = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
						.createQuery(sb.toString());
				query.setParameter("codigoPrincipal", codigoPrincipal);

				resultList = query.list();

				if (!resultList.isEmpty()) {
					return resultList;
				}

				return null;
			} else {
				return null;
			}

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Lista Cirugia detallada :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Lista Cirugia detallada :" + e.getMessage(), e);
		}

	}

	/**
	 * @param codClinica
	 * @return
	 * @throws ModelException
	 */
	public List<Object[]> getReporteAsesoraIlve(Integer codClinica, Date fechaInicial, Date fechaFinal)
			throws ModelException {
		List resultList = null;

		String HORA_INICIAL = " 00:00";
		String HORA_FINAL = " 23:59";

		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		String fechaI = dateFormat.format(fechaInicial) + HORA_INICIAL;
		String fechaF = dateFormat.format(fechaFinal) + HORA_FINAL;

		try {
			if (codClinica != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" SELECT chav.havdfecase AS FECHA_ASESORIA               , ");
				sb.append(" chav.havnclinic       AS CLINICA                      , ");
				sb.append(" chav.havanumide       AS NUMERO_IDENTIFICACION        , ");
				sb.append(" chav.havnedad         AS EDAD                         , ");
				sb.append(" chav.havnconavs       AS MOTIVO_CONOCIMIENTO_PROGRAMA , ");
				sb.append(" chav.havnintase       AS INTERVENCION_ASESORIA        , ");
				sb.append(" chav.havndetint       AS TIPO_INTERVENCION            , ");
				sb.append(" chav.havcremotr       AS OTRA_REMISION                , ");
				sb.append(" chav.havcremind       AS INDECISION                   ,");
				sb.append(" chav.havcremcos       AS CAPACIDAD_PAGO_LIMITADA      ,");
				sb.append(" chav.havcremeps       AS VA_USAR_EPS                  ,");
				sb.append(" chav.havcremips       AS VA_USAR_OTRA_IPS             ,");
				sb.append(" chav.havcremcau       AS NO_APLICA_CAUSAL             ,");
				sb.append(" chav.havcremmay       AS REMISION_POR_EDAD_GESTACIONAL,");
				sb.append(" chav.havcremcon       AS DESEA_CONTINUAR_EMBARAZO     ,");
				sb.append(" chav.havcremilv       AS OPTA_ILVE                    ,");
				sb.append(" chav.havcremapl       AS APLAZA_DECISION ,");
				sb.append(" chav.havcusureg  AS LOGIN_REGISTRO,  ");
				sb.append(" chav.havcnomdoc      AS OTRA_REMISION_, ");
				sb.append(" chav.havnedages      AS NUMERO_EDAD_GESTACIONAL , ");
				sb.append(" chse.hsanconsec       AS NUMERO_SEGUI , ");
				sb.append(" chse.hsadfecase       AS FECHA_SEGUI, ");
				sb.append(" chse.hsanedages       AS   NUMERO_EDAD_GES_SEGUI       , ");
				sb.append(" chse.hsacremmot       AS MOTIVO_APLAZA_DECI_SEGUI, ");
				sb.append(" chse.hsacnmbotr       AS  OTRA_CONDUCTA_SEGUI , ");
				sb.append(" chse.hsacremotr       AS   OTRA_REMISION_SEGUI       , ");
				sb.append(" chse.hsacremind       AS INDECISION_SEGUI         , ");
				sb.append(" chse.hsacremcos       AS CAPACIDAD_PAGO_LIMITADA_SEGUI         , ");
				sb.append(" chse.hsacremeps       AS    VA_USAR_EPS_SEGUI       , ");
				sb.append(" chse.hsacremips       AS     VA_USAR_OTRA_IPS_SEGUI     , ");
				sb.append(" chse.hsacremcau       AS NO_APLICA_CAUSAL_SEGUI         , ");
				sb.append(" chse.hsacremmay       AS REMISION_POR_EDAD_GES_SEGUI         , ");
				sb.append(" chse.hsacremcon       AS DESEA_CONTINUAR_EMBARAZO_SEGUI         , ");
				sb.append(" chse.hsacremilv       AS OPTA_ILVE_SEGUI         , ");
				sb.append(" chse.hsacremapl       AS APLAZA_DECISION_SEGUI          , ");
				sb.append(" chse.hsacasesor       AS  ASESOR_SEGUI       , ");
				sb.append(" to_char(chse.hsacseguim)       AS SEGUIMIENTO         , ");
				sb.append(" chse.hsansemest       AS SEMANAS_ESTIMADAS_SEGUI          , ");
				sb.append(" chse.hsadfececo       AS FECHA_ECOGRAFIA_SEGUI         , ");
				sb.append(" chse.hsansemeco       AS SEMANAS_ECOGRAFIA_SEGUI         , ");
				sb.append(" chse.hsacconduc       AS TIPO_SERVICIO_SEGUI        , ");
				sb.append(" chse.hsacinsrem       AS NOMBRE_INSTITUCION_SEGUI         , ");
				sb.append(" chse.hsaccontac       AS NOMBRE_CONTACTO_SEGUI        ,  ");
				sb.append(" chse.hsantelcon       AS TELEFONO_CONTACTO         ,  ");
				sb.append(" chse.hsacreapro       AS CONFIRMA_PROCEDIMIENTO          ,  ");
				sb.append(" chse.hsaclugpro       AS LUGAR_PROCEDIMIENTO         ,  ");
				sb.append(" chse.hsacmetant       AS METODO_ANTICONCEPCION         ,  ");
				sb.append(" cpse.csvcnombre       AS NOMBRE_SERVICIO ,     ");
				sb.append(" cpus.curcnombre       AS  NOMBRE_ASESOR,    ");
				sb.append(" cpus1.curcnombre        AS  NOMBRE_ASESOR_SEGUI     ");
				sb.append(" FROM historia.chaseavise  chav   ");
				sb.append(
						" LEFT JOIN historia.chseguavis chse ON chav.havdfecase = chse.hsadfecase and chav.havlusuario = chse.hsalusuario  ");
				sb.append(" LEFT JOIN clinico.Cpservicio cpse ON cpse.csvccodigo = chse.hsacmetant ");
				sb.append(
						" LEFT JOIN clinico.cpusuario cpus ON cpus.curcusuari = chav.havcusureg and cpus.curnclinic = chav.havnclinic ");
				sb.append(
						"  LEFT JOIN clinico.cpusuario cpus1 ON cpus1.curcusuari = chse.hsacusureg and cpus1.curnclinic = chse.hsanclinic ");
				sb.append(
						" where  (chav.havdfecase BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi')) ");

				if (codClinica != null && codClinica > 0) {
					sb.append(" AND chav.havnclinic  = :codClinica  ");
				}

				sb.append(" order by chav.havdfecase, chav.havlusuario, chse.hsanconsec  ");

				Query sqlquery = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
						.createQuery(sb.toString());
				sqlquery.setParameter("fechaI", fechaI);
				sqlquery.setParameter("fechaF", fechaF);

				if (codClinica != null && codClinica > 0) {
					sqlquery.setParameter("codClinica", codClinica);
				}

				sb.append(" order by chav.havdfecase ");

				resultList = sqlquery.list();

				if (!resultList.isEmpty()) {
					return resultList;
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Reporte Asesoria ILVE :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Reporte Asesoria ILVE : " + e.getMessage(), e);
		}

	}

	/**
	 * @param codClinica
	 * @return
	 * @throws ModelException
	 */
	public List<Object[]> getReporteMisAsesoraIlve(Integer codClinica, Date fechaInicial, Date fechaFinal,
			String userName) throws ModelException {
		List resultList = null;

		String HORA_INICIAL = " 00:00";
		String HORA_FINAL = " 23:59";

		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		String fechaI = dateFormat.format(fechaInicial) + HORA_INICIAL;
		String fechaF = dateFormat.format(fechaFinal) + HORA_FINAL;

		try {
			if (codClinica != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" SELECT chav.havdfecase AS FECHA_ASESORIA               , ");
				sb.append(" chav.havnclinic       AS CLINICA                      , ");
				sb.append(" chav.havanumide       AS NUMERO_IDENTIFICACION        , ");
				sb.append(" chav.havnedad         AS EDAD                         , ");
				sb.append(" chav.havnconavs       AS MOTIVO_CONOCIMIENTO_PROGRAMA , ");
				sb.append(" chav.havnintase       AS INTERVENCION_ASESORIA        , ");
				sb.append(" chav.havndetint       AS TIPO_INTERVENCION            , ");
				sb.append(" chav.havcremotr       AS OTRA_REMISION                , ");
				sb.append(" chav.havcremind       AS INDECISION                   ,");
				sb.append(" chav.havcremcos       AS CAPACIDAD_PAGO_LIMITADA      ,");
				sb.append(" chav.havcremeps       AS VA_USAR_EPS                  ,");
				sb.append(" chav.havcremips       AS VA_USAR_OTRA_IPS             ,");
				sb.append(" chav.havcremcau       AS NO_APLICA_CAUSAL             ,");
				sb.append(" chav.havcremmay       AS REMISION_POR_EDAD_GESTACIONAL,");
				sb.append(" chav.havcremcon       AS DESEA_CONTINUAR_EMBARAZO     ,");
				sb.append(" chav.havcremilv       AS OPTA_ILVE                    ,");
				sb.append(" chav.havcremapl       AS APLAZA_DECISION ,");
				sb.append(" chav.havcusureg  AS LOGIN_REGISTRO,  ");
				sb.append(" chav.havcnomdoc      AS OTRA_REMISION_, ");
				sb.append(" chav.havnedages      AS NUMERO_EDAD_GESTACIONAL, ");
				sb.append(" chus.husctelefono    AS TELEFONO,  ");
				sb.append(" chus.husccelular     AS CELULAR,  ");
				sb.append(
						" (chus.huscprimernomb || ' ' ||   huscsegundnomb ||' ' ||  chus.huscprimerapel ||' ' ||  chus.huscsegundapel) AS NOMBRE    ");
				sb.append(" FROM historia.chaseavise  chav, historia.chusuario chus");
				sb.append(
						" where  chus.huslnumero = chav.havlusuario and (chav.havdfecreg BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))");
				if (codClinica != null && codClinica > 0) {
					sb.append(" AND chav.havnclinic  = :codClinica  ");
				}

				sb.append(" AND  chav.havcusureg = :userName  ");

				Query sqlquery = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
						.createQuery(sb.toString());
				sqlquery.setParameter("fechaI", fechaI);
				sqlquery.setParameter("fechaF", fechaF);
				sqlquery.setParameter("userName", userName);

				if (codClinica != null && codClinica > 0) {
					sqlquery.setParameter("codClinica", codClinica);
				}

				sb.append(" order by chav.havdfecase ");

				resultList = sqlquery.list();

				if (!resultList.isEmpty()) {
					return resultList;
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Reporte Asesoria ILVE :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Reporte Asesoria ILVE : " + e.getMessage(), e);
		}

	}

	// reporte de asesorias ILVE por clinica

	/**
	 * @param codClinica
	 * @return
	 * @throws ModelException
	 */
	public List<Object[]> getReporteClinicAsesoraIlve(Integer codClinica, Date fechaInicial, Date fechaFinal)
			throws ModelException {
		List resultList = null;

		String HORA_INICIAL = " 00:00";
		String HORA_FINAL = " 23:59";

		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		String fechaI = dateFormat.format(fechaInicial) + HORA_INICIAL;
		String fechaF = dateFormat.format(fechaFinal) + HORA_FINAL;

		try {
			if (codClinica != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" SELECT chav.havdfecase AS FECHA_ASESORIA               , ");
				sb.append(" chav.havnclinic       AS CLINICA                      , ");
				sb.append(" chav.havanumide       AS NUMERO_IDENTIFICACION        , ");
				sb.append(" chav.havnedad         AS EDAD                         , ");
				sb.append(" chav.havnconavs       AS MOTIVO_CONOCIMIENTO_PROGRAMA , ");
				sb.append(" chav.havnintase       AS INTERVENCION_ASESORIA        , ");
				sb.append(" chav.havndetint       AS TIPO_INTERVENCION            , ");
				sb.append(" chav.havcremotr       AS OTRA_REMISION                , ");
				sb.append(" chav.havcremind       AS INDECISION                   ,");
				sb.append(" chav.havcremcos       AS CAPACIDAD_PAGO_LIMITADA      ,");
				sb.append(" chav.havcremeps       AS VA_USAR_EPS                  ,");
				sb.append(" chav.havcremips       AS VA_USAR_OTRA_IPS             ,");
				sb.append(" chav.havcremcau       AS NO_APLICA_CAUSAL             ,");
				sb.append(" chav.havcremmay       AS REMISION_POR_EDAD_GESTACIONAL,");
				sb.append(" chav.havcremcon       AS DESEA_CONTINUAR_EMBARAZO     ,");
				sb.append(" chav.havcremilv       AS OPTA_ILVE                    ,");
				sb.append(" chav.havcremapl       AS APLAZA_DECISION ,");
				sb.append(" chav.havcusureg  AS LOGIN_REGISTRO,  ");
				sb.append(" chav.havcnomdoc      AS OTRA_REMISION_, ");
				sb.append(" chav.havnedages      AS NUMERO_EDAD_GESTACIONAL , ");
				sb.append(" chse.hsanconsec       AS NUMERO_SEGUI , ");
				sb.append(" chse.hsadfecase       AS FECHA_SEGUI, ");
				sb.append(" chse.hsanedages       AS   NUMERO_EDAD_GES_SEGUI       , ");
				sb.append(" chse.hsacremmot       AS MOTIVO_APLAZA_DECI_SEGUI, ");
				sb.append(" chse.hsacnmbotr       AS  OTRA_CONDUCTA_SEGUI , ");
				sb.append(" chse.hsacremotr       AS   OTRA_REMISION_SEGUI       , ");
				sb.append(" chse.hsacremind       AS INDECISION_SEGUI         , ");
				sb.append(" chse.hsacremcos       AS CAPACIDAD_PAGO_LIMITADA_SEGUI         , ");
				sb.append(" chse.hsacremeps       AS    VA_USAR_EPS_SEGUI       , ");
				sb.append(" chse.hsacremips       AS     VA_USAR_OTRA_IPS_SEGUI     , ");
				sb.append(" chse.hsacremcau       AS NO_APLICA_CAUSAL_SEGUI         , ");
				sb.append(" chse.hsacremmay       AS REMISION_POR_EDAD_GES_SEGUI         , ");
				sb.append(" chse.hsacremcon       AS DESEA_CONTINUAR_EMBARAZO_SEGUI         , ");
				sb.append(" chse.hsacremilv       AS OPTA_ILVE_SEGUI         , ");
				sb.append(" chse.hsacremapl       AS APLAZA_DECISION_SEGUI          , ");
				sb.append(" chse.hsacasesor       AS  ASESOR_SEGUI       , ");
				sb.append(" to_char(chse.hsacseguim)       AS SEGUIMIENTO         , ");
				sb.append(" chse.hsansemest       AS SEMANAS_ESTIMADAS_SEGUI          , ");
				sb.append(" chse.hsadfececo       AS FECHA_ECOGRAFIA_SEGUI         , ");
				sb.append(" chse.hsansemeco       AS SEMANAS_ECOGRAFIA_SEGUI         , ");
				sb.append(" chse.hsacconduc       AS TIPO_SERVICIO_SEGUI        , ");
				sb.append(" chse.hsacinsrem       AS NOMBRE_INSTITUCION_SEGUI         , ");
				sb.append(" chse.hsaccontac       AS NOMBRE_CONTACTO_SEGUI        ,  ");
				sb.append(" chse.hsantelcon       AS TELEFONO_CONTACTO         ,  ");
				sb.append(" chse.hsacreapro       AS CONFIRMA_PROCEDIMIENTO          ,  ");
				sb.append(" chse.hsaclugpro       AS LUGAR_PROCEDIMIENTO         ,  ");
				sb.append(" chse.hsacmetant       AS METODO_ANTICONCEPCION         ,  ");
				sb.append(" cpse.csvcnombre       AS NOMBRE_SERVICIO ,     ");
				sb.append(" cpus.curcnombre       AS  NOMBRE_ASESOR,    ");
				sb.append(" cpus1.curcnombre        AS  NOMBRE_ASESOR_SEGUI     ");
				sb.append(" FROM historia.chaseavise  chav   ");
				sb.append(
						" LEFT JOIN historia.chseguavis chse ON chav.havdfecase = chse.hsadfecase and chav.havlusuario = chse.hsalusuario  ");
				sb.append(" LEFT JOIN clinico.Cpservicio cpse ON cpse.csvccodigo = chse.hsacmetant ");
				sb.append(
						" LEFT JOIN clinico.cpusuario cpus ON cpus.curcusuari = chav.havcusureg and cpus.curnclinic = chav.havnclinic ");
				sb.append(
						"  LEFT JOIN clinico.cpusuario cpus1 ON cpus1.curcusuari = chse.hsacusureg and cpus1.curnclinic = chse.hsanclinic ");
				sb.append(
						" where  (chav.havdfecase BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi')) ");

				if (codClinica != null && codClinica > 0) {
					sb.append(" AND chav.havnclinic  = :codClinica  ");
				}

				sb.append(" order by chav.havdfecase, chav.havlusuario, chse.hsanconsec  ");

				Query sqlquery = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
						.createQuery(sb.toString());
				sqlquery.setParameter("fechaI", fechaI);
				sqlquery.setParameter("fechaF", fechaF);

				if (codClinica != null && codClinica > 0) {
					sqlquery.setParameter("codClinica", codClinica);
				}

				sb.append(" order by chav.havdfecase ");

				resultList = sqlquery.list();

				if (!resultList.isEmpty()) {
					return resultList;
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Reporte Asesoria ILVE :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Reporte Asesoria ILVE : " + e.getMessage(), e);
		}

	}

	// generar autorizacion de servicios en .xls

	/**
	 * @param codClinica
	 * @return
	 * @throws ModelException
	 */
	public List<Object[]> getReporteAutorizacionServicios(Integer codClinica, Date fechaInicial, Date fechaFinal)
			throws ModelException {
		List resultList = null;

		String HORA_INICIAL = " 00:00";
		String HORA_FINAL = " 23:59";

		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		String fechaI = dateFormat.format(fechaInicial) + HORA_INICIAL;
		String fechaF = dateFormat.format(fechaFinal) + HORA_FINAL;

		try {
			if (codClinica != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" SELECT chau.haunconsecutiv AS CONSECUTIVO              , ");
				sb.append(" cpen.CEACNOMBRE            as ENTIDAD_ADMINISTRADORA   ,");
				sb.append(
						" (chus.HUSCPRIMERNOMB || ' ' || nvl(chus.HUSCSEGUNDNOMB, '') || ' ' || chus.HUSCPRIMERAPEL || ' ' || nvl(chus.HUSCSEGUNDAPEL, ''))       AS NOMBRE_PACIENTE ,");
				sb.append(" chus.HUSETIPOIDEN          as TIPO_IDENTI              , ");
				sb.append(" chus.HUSANUMEIDEN          as DOCUMENTO_PACIENTE       ,");
				sb.append(" chus.HUSESEXO              as GENERO_PACIENTE          ,");
				sb.append(" chus.HUSDFECHANACIM        as FECHA_NACIMIENTO         ,");
				sb.append(" chus.HUSCCELULAR           as TELEFONOMOVIL_PACIENTE   ,");
				sb.append(" chus.HUSCTELEFONO          as TELEFONOFIJO_PACIENTE    ,");
				sb.append(" chus.HUSCCORREOELEC        as CORREO_PACIENTE    ,");
				sb.append(" chco.HCODFECREGISTR        as FECHA_ATENCION           ,");
				sb.append(" chau.haucorigeatenc        AS ORIGEN_ATENCION          , ");
				sb.append(" chse.hsencodigocups        AS CODIGO_CUPS               ,");
				sb.append(" chse.HSECNOMBRESERV        as DESCRIPCION_SERVICIO     ,");
				sb.append(" chse.hsencantiservi        AS CANTIDAD_SERVICIO  ,");
				sb.append(" chau.haucprioriaten        AS PRIORIDAD_ATENCION  ,");
				sb.append(" chau.HAUDFECHAREGIS        as FECHA_SOLICITUD  ,");
				sb.append("chau.hauctipsersoli        AS RECOMENDACIONES          ,");
				sb.append(" chau.haucjustifclin        AS JUSTIFICACION_CLINICA    ,");
				sb.append(" chau.haucdiagnprinc        AS DIAGNOSTICO_PRINCIPAL     ,");
				sb.append(" crdg.CDCCDESCRI        AS DESCRIPCION_PRINCIPAL       ,");
				sb.append(" chau.HAUCOPERADOR      AS USUARIO_MEDICO       ");
				sb.append(
						" FROM historia.chautoriserv  chau, historia.chserviautor chse, historia.chconsulta chco, historia.chusuario chus, CLINICO.CPENTIDADADM cpen, CLINICO.CPSERVICIO cpse, CLINICO.CRDGNCIE10 crdg");
				sb.append(
						" where chse.hselconsulta = chau.haulconsulta and chau.haulconsulta = chco.HCOLNUMERO and chus.HUSLNUMERO = chco.HCOLUSUARIO and crdg.CDCCCODIGO = chau.HAUCDIAGNPRINC and chco.HCOCENTIDADADM = cpen.CEACCODIGO and chco.HCOCSERVICIO = cpse.CSVCCODIGO ");
				sb.append(
						" and (chau.haudfecharegis BETWEEN TO_DATE(:fechaI, 'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF, 'dd/MM/yyyy hh24:mi'))");
				if (codClinica != null && codClinica > 0) {
					sb.append(" AND chau.haunclinica  = :codClinica  ");
				}

				Query sqlquery = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
						.createQuery(sb.toString());
				sqlquery.setParameter("fechaI", fechaI);
				sqlquery.setParameter("fechaF", fechaF);

				if (codClinica != null && codClinica > 0) {
					sqlquery.setParameter("codClinica", codClinica);
				}

				resultList = sqlquery.list();

				if (!resultList.isEmpty()) {
					return resultList;
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Autorizacion Servicios :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Autorizacion Servicios  : " + e.getMessage(), e);
		}

	}

	/**
	 * @param usuario
	 * @return
	 * @throws ModelException
	 */
	public List<Chasesoria> getOtrasAsesoria(Chusuario usuario) throws ModelException {
		List<Chasesoria> resultList = null;
		List parametros = new ArrayList();
		try {

			if (usuario != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chas from " + Chasesoria.class.getName() + " chas  where  chas.haseestado = ? ");
				parametros.add(IConstantes.ESTADO_VIGENTE);

				if (usuario.getHusetipoiden() != null && !usuario.getHusetipoiden().equals("")) {
					sb.append(" AND chas.hasetipoiden = ? ");
					parametros.add(usuario.getHusetipoiden());

				}

				if (usuario.getHusanumeiden() != null && !usuario.getHusanumeiden().equals("")) {
					sb.append(" and chas.hasanumeiden = ?  ");
					parametros.add(usuario.getHusanumeiden());
				}

				if (usuario.getHuscprimernomb() != null && !usuario.getHuscprimernomb().equals("")) {
					sb.append(" and chas.hascprimernomb = ?  ");
					parametros.add(usuario.getHuscprimernomb().toUpperCase());
				}

				if (usuario.getHuscsegundnomb() != null && !usuario.getHuscsegundnomb().equals("")) {
					sb.append(" and chas.hascsegundnomb = ?  ");
					parametros.add(usuario.getHuscsegundnomb().toUpperCase());
				}

				if (usuario.getHuscprimerapel() != null && !usuario.getHuscprimerapel().equals("")) {
					sb.append(" and chas.hascprimerapel = ?  ");
					parametros.add(usuario.getHuscprimerapel().toUpperCase());
				}

				if (usuario.getHuscsegundapel() != null && !usuario.getHuscsegundapel().equals("")) {
					sb.append(" and chas.hascsegundapel = ?  ");
					parametros.add(usuario.getHuscsegundapel().toUpperCase());
				}

				sb.append(" order by chas.haslnumero ");

				resultList = (List<Chasesoria>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			}

			if (!resultList.isEmpty()) {
				return resultList;
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Otras Asesorias:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Otras Asesorias:" + e.getMessage(), e);
		}

	}

	/**
	 * @return
	 * @throws ModelException
	 */
	public List<Chasesoria> getListaOtrasAsesorias(Date fechaInicial, Date fechaFinal, Integer codClinica)
			throws ModelException {
		List<Chasesoria> resultList = null;
		List parametros = new ArrayList();
		try {

			String HORA_INICIAL = " 00:00";
			String HORA_FINAL = " 23:59";
			String fechaI = null;
			String fechaF = null;
			if (fechaInicial != null && fechaFinal != null) {
				SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");

				fechaI = dateFormat.format(fechaInicial) + HORA_INICIAL;
				fechaF = dateFormat.format(fechaFinal) + HORA_FINAL;
			}

			if (fechaInicial != null && fechaFinal != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chas from " + Chasesoria.class.getName());
				sb.append(" chas where chas.haseestado = ?   ");

				if (codClinica != null) {
					sb.append(" and chas.hasnclinic = ? ");
				}
				sb.append(
						" and  (chas.hasdfecregistr BETWEEN TO_DATE(?,'dd/MM/yyyy hh24:mi') AND TO_DATE(?,'dd/MM/yyyy hh24:mi'))  ");
				sb.append("  order by chas.haslnumero ");

				parametros.add(IConstantes.ESTADO_VIGENTE);
				if (codClinica != null) {
					parametros.add(codClinica);
				}
				parametros.add(fechaI);
				parametros.add(fechaF);

				resultList = (List<Chasesoria>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList;
				}
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Otras Asesorias:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Otras Asesorias:" + e.getMessage(), e);
		}

	}

	public BigDecimal getDescuentoEmpleado(String servicio, String tipIdent, BigDecimal numIdent)
			throws ModelException {
		BigDecimal resultList = new BigDecimal(0);
		Cpservicio resultList2 = null;
		Ccdescempl resultList3 = null;
		List<Ccdescempl> resultList4 = null;
		Ccdescempl resultList5 = null;

		Integer grupo = null;
		Integer subgrupo = null;
		Integer grupo2 = null;
		Integer subgrupo2 = null;
		String servici = null;
		Integer grpcmp = null;
		Integer cantidad = null;
		BigDecimal porcedescu = null;
		Integer anno = null;
		Integer grupo3 = null;
		Integer subgrupo3 = null;
		String servicio2 = null;
		Integer cantidad2 = null;
		Integer cantidad3 = null;
		BigDecimal wporgrp = new BigDecimal(0);
		try {

			if (servicio != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select cpse from " + Cpservicio.class.getName());
				sb.append(" cpse ");
				sb.append(" WHERE cpse.csvccodigo = :servicio ");

				Query sqlquery = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
						.createQuery(sb.toString());
				sqlquery.setParameter("servicio", servicio);

				resultList2 = (Cpservicio) sqlquery.uniqueResult();
				if (resultList2 != null) {

					grupo = resultList2.getCsvngrupo();
					subgrupo = resultList2.getCsvnsubgru();

					// return resultList;
				}
			}

			if (servicio != null && !servicio.equals("") && resultList2 != null && grupo != null && subgrupo != null) {
				StringBuffer sf = new StringBuffer();
				sf.append(" select ccde");
				sf.append(" FROM " + Ccdescempl.class.getName());
				sf.append(" ccde ");
				sf.append(" WHERE ccde.id.cdenanno = 2011 AND ccde.id.cdectipide = 'CC' ");
				sf.append(" AND ccde.id.cdeanumide = 0 AND ccde.id.cdengrupo = :grupo ");
				sf.append(" AND (ccde.id.cdensubgru = 0 OR ccde.id.cdensubgru = :subgrupo) ");
				sf.append(" AND (ccde.id.cdecservic = :servicio) ");
				sf.append(" ORDER BY ccde.id.cdecservic DESC ");

				Query sqlquery2 = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
						.createQuery(sf.toString());
				sqlquery2.setParameter("grupo", grupo);
				sqlquery2.setParameter("subgrupo", subgrupo);
				sqlquery2.setParameter("servicio", servicio);

				resultList3 = (Ccdescempl) sqlquery2.uniqueResult();
				if (resultList3 != null) {
					grupo2 = resultList3.getCdengrupo();
					subgrupo2 = resultList3.getCdensubgru();
					servici = resultList3.getCdecservic();
					grpcmp = resultList3.getCdengrpcmp();
					cantidad = resultList3.getCdencantid();
					porcedescu = resultList3.getCdeapordsc();
					anno = resultList3.getCdenanno();

				}

			}

			Calendar calen = Calendar.getInstance();
			Integer wanoreg = calen.get(Calendar.YEAR);

			if (servicio != null && !servicio.equals("") && resultList3 != null) {
				StringBuffer sd = new StringBuffer();
				sd.append(" SELECT ccde ");
				sd.append(" from " + Ccdescempl.class.getName());
				sd.append(" ccde ");
				sd.append(" WHERE ccde.id.cdenanno = :wanoreg AND ccde.id.cdectipide = :tipIdent  ");
				sd.append(" AND ccde.id.cdeanumide = :numIndent AND ccde.cdengrpcmp = :grpcmp ");

				Query sqlquery3 = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
						.createQuery(sd.toString());
				sqlquery3.setParameter("wanoreg", wanoreg);
				sqlquery3.setParameter("tipIdent", tipIdent);
				sqlquery3.setParameter("numIndent", numIdent);
				sqlquery3.setParameter("grpcmp", grpcmp);

				resultList4 = (List<Ccdescempl>) sqlquery3.list();
				if (resultList4 != null) {
					for (Ccdescempl papaito : resultList4) {
						grupo3 = papaito.getCdengrupo();
						subgrupo3 = papaito.getCdensubgru();
						servicio2 = papaito.getCdecservic();
						cantidad2 = papaito.getCdencantid();

						if (servicio != null && !servicio.equals("") && grupo3 != null && subgrupo3 != null
								&& servicio2 != null) {
							StringBuffer se = new StringBuffer();
							se.append(" SELECT ccde ");
							se.append(" from " + Ccdescempl.class.getName());
							se.append(" ccde ");
							se.append(" WHERE ccde.id.cdenanno = 2011 AND ccde.id.cdectipide = 'CC' ");
							se.append(" AND ccde.id.cdeanumide = 0 AND ccde.id.cdengrupo = :grupo3 ");
							se.append(" AND ccde.id.cdensubgru = :subgrupo3 AND ccde.id.cdecservic = :servicio2 ");

							Query sqlquery4 = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
									.createQuery(se.toString());
							sqlquery4.setParameter("grupo3", grupo3);
							sqlquery4.setParameter("subgrupo3", subgrupo3);
							sqlquery4.setParameter("servicio2", servicio2);
							resultList5 = (Ccdescempl) sqlquery4.uniqueResult();
							if (resultList5 != null) {
								cantidad3 = resultList5.getCdencantid();
							}
							if (cantidad3 != null && cantidad2 != null && cantidad != null) {
								wporgrp = wporgrp.add(new BigDecimal(cantidad2).multiply(new BigDecimal(100))
										.divide(new BigDecimal(cantidad), 2, BigDecimal.ROUND_HALF_DOWN));
								System.out.println("" + wporgrp);
							}
							if (wporgrp != null) {
								resultList = wporgrp;
							}

						}

					}

				}
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Descuentos de Empleado:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Descuentos de Empleado:" + e.getMessage(), e);
		}

	}

	public List<Cprestxcon> getValidarContrato(Integer clinic, Integer contra, String servicio) throws ModelException {
		List<Cprestxcon> resultList = null;
		Integer contrato = null;
		List<Cprestxcon> resultList2 = null;
		String estado = null;
		String regimen = null;
		String servic = null;
		String sexo = null;
		Integer edadmin = null;
		Integer edadmax = null;
		String tideex = null;
		try {
			if (contra != null && clinic != null && servicio != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" SELECT cpre ");
				sb.append(" from " + Cprestxcon.class.getName());
				sb.append(" cpre ");
				sb.append(" WHERE cpre.id.crxnclinic = :clinic AND cpre.id.crxncontra = :contra ");
				sb.append(" AND cpre.crxcservic = :servicio AND cpre.crxcestado = 'VG' ");
				sb.append(" ORDER BY cpre.crxnedamin, cpre.crxnedamax ");

				Query sqlquery = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
						.createQuery(sb.toString());
				sqlquery.setParameter("clinic", clinic);
				sqlquery.setParameter("contra", contra);
				sqlquery.setParameter("servicio", servicio);

				resultList2 = (List<Cprestxcon>) sqlquery.list();
				if (resultList2 != null) {
					for (Cprestxcon restricc : resultList2) {
						estado = restricc.getCrxcestado();
						regimen = restricc.getCrxcregime();
						servic = restricc.getCrxcservic();
						sexo = restricc.getCrxcsexo();
						edadmin = restricc.getCrxnedamin();
						edadmax = restricc.getCrxnedamax();
						tideex = restricc.getCrxctideex();

					}
				}
			}

			return resultList2;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Otras Asesorias:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Otras Asesorias:" + e.getMessage(), e);
		}

	}

	public List<Crdgncie10> getCie10Ilve(Integer tipoDiagnostico) throws ModelException {
		List resultList = null;
		List parametros = new ArrayList();
		String codigosCie = "";

		try {

			if (tipoDiagnostico != null) {

				StringBuffer sb = new StringBuffer();
				sb.append("SELECT cie FROM " + Crdgncie10.class.getName() + " cie where cie.cdccestado = 'VG' ");

				if (tipoDiagnostico == 0) {
					sb.append(
							" and cie.cdcccodigo in ('F320','F321','F322','F323','F324','F325','F326','F327','F328','F329','F330','F331','F332','F333','F334','F335','F336','F337','F338','F339','F410','F411','F412','F413','F414','F415','F416','F417','F418','F419') ");

				} else if (tipoDiagnostico == 1) {
					sb.append(" and cie.cdcccodigo in ('Z303') ");

				} else if (tipoDiagnostico == 2) {

					sb.append(
							" and cie.cdcccodigo in ('Z357','Z358','Z359','T742','O350','O351','O352','O353','O354','O355','O356','O357','O358','O359' ) ");

				} else if (tipoDiagnostico == 3) {

					sb.append(" and cie.cdcccodigo in ('Z300','Z301','Z302','Z304','Z305','Z308','Z309') ");

				}

				resultList = this.getHibernateTemplate().find(sb.toString(), parametros.toArray());
			}

		} catch (HibernateException e) {
			throw new ModelException("Error consultando CIE10 ILVE :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando CIE10 ILVE:" + e.getMessage(), e);
		}
		return resultList;

	}

	/**
	 * @param tipoDiagnostico
	 * @param tipoControl
	 * @return
	 * @throws ModelException
	 */
	public List<Crdgncie10> getCie10ControlIlve(Integer tipoDiagnostico, Integer tipoControl) throws ModelException {
		List resultList = null;
		List parametros = new ArrayList();
		String codigosCie = "";

		try {

			if (tipoDiagnostico != null) {

				StringBuffer sb = new StringBuffer();
				sb.append("SELECT cie FROM " + Crdgncie10.class.getName() + " cie where cie.cdccestado = 'VG'   ");

				if (tipoControl == 3) {
					if (tipoDiagnostico == 0) {
						sb.append(
								" and cie.cdcccodigo in ('O040','O041','O042','O043','O044','O045','O046','O047','O048','O049','O050','O051','O052','O053','O054','O055','O056','O057','O058','O059','O060','O061','O062','O063', 'O064','O065','O066','O067','O068','O069','O070','O071','O072','O073','O074','O075','O076','O077','O078','O079') ");

					} else if (tipoDiagnostico == 1) {
						sb.append(" and cie.cdcccodigo in ('Z303') ");

					} else if (tipoDiagnostico == 2) {

						sb.append(" and cie.cdcccodigo in ('Z300', 'Z301', 'Z302', 'Z304', 'Z305', 'Z308' , 'Z309') ");

					} else if (tipoDiagnostico == 3) {

						sb.append(" and cie.cdcccodigo in ('Z300', 'Z301', 'Z302', 'Z304', 'Z305', 'Z308' , 'Z309') ");

					}
					// FARMACOLOGICO
				} else if (tipoControl == 2) {
					if (tipoDiagnostico == 0) {
						sb.append(
								" and cie.cdcccodigo in ('O079','O078','O077',	'O076',	'O075',	'O074',	'O073',	'O072',	'O071',	'O070',	'O069',	'O068',	'O067',	'O066',	'O065',	'O064',	'O063',	'O062',	'O061',	'O060',	'O059',	'O058',	'O057',	'O056',	'O055',	'O054',	'O053',	'O052',	'O051',	'O050',	'O049',	'O048',	'O047',	'O046',	'O045') ");

					} else if (tipoDiagnostico == 1) {
						sb.append(" and cie.cdcccodigo in ('Z303') ");

					} else if (tipoDiagnostico == 2) {

						sb.append(" and cie.cdcccodigo in ('Z300','Z301','Z302','Z304','Z305','Z308','Z309' ) ");

					}

				} // // QUIRURGICO

				else if (tipoControl == 3) {
					if (tipoDiagnostico == 0) {
						sb.append(" and cie.cdcccodigo in ('O364') ");

					} else if (tipoDiagnostico == 1) {
						sb.append(" and cie.cdcccodigo in ('Z303') ");

					} else if (tipoDiagnostico == 2) {

						sb.append(" and cie.cdcccodigo in ('Z300','Z301','Z302','Z304','Z305','Z308','Z309') ");

					}

				}

				resultList = this.getHibernateTemplate().find(sb.toString(), parametros.toArray());
			}

		} catch (HibernateException e) {
			throw new ModelException("Error consultando CIE10 ILVE :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando CIE10 ILVE:" + e.getMessage(), e);
		}
		return resultList;

	}

	/**
	 * @return
	 * @throws ModelException
	 */
	public List<Cpprograma> getPrograma() throws ModelException {
		List<Cpprograma> resultList = null;
		List parametros = new ArrayList();

		try {
			StringBuffer sb = new StringBuffer();
			sb.append(" select cppr from ").append(Cpprograma.class.getName());
			sb.append(" cppr  where cppr.cpgcestado = 'VG' ");
			sb.append(" order by cppr.cpgcnombre ");

			resultList = (List<Cpprograma>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			if (!resultList.isEmpty()) {
				return resultList;
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error Obteniendo Programa :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Obteniendo Programa :" + e.getMessage(), e);
		}

	}

	/**
	 * @param actividad
	 * @throws ModelException
	 */
	public void saveActividadEducativa(Chactiveduca actividad) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(actividad);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Actividad Educativa:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Actividad Educativa:" + e.getMessage(), e);
		}
	}

	/**
	 * @param codclin
	 * @return
	 * @throws Exception
	 */
	public List<Chconsulta> getConsultasReferenciaPorConfirmar(final Integer codclin) throws Exception {
		List<Chconsulta> pis = (List<Chconsulta>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				StringBuffer sb = new StringBuffer();
				sb.append("SELECT chco from ");
				sb.append(Chconsulta.class.getName()).append(" chco, ");
				sb.append(Chreferencia.class.getName()).append(" chre ");
				sb.append("WHERE    ");
				sb.append(" chco.hcolnumero  = chre.id.hrelconsulta ");
				sb.append(" AND  chco.hconclinica = :codclin ");
				sb.append(" AND  chre.hrecetapa = 'RG' ");
				sb.append(" order by chco.hcodfecregistr desc ");
				String hql = sb.toString();

				Query query = session.createQuery(hql);
				query.setParameter("codclin", codclin);

				List<Chconsulta> pis;
				pis = query.list();

				for (Chconsulta co : pis) {

					Cpservicio servicio = co.getHcocservicio();
					Hibernate.initialize(servicio);

					Chusuario usu = co.getHcolusuario();
					Hibernate.initialize(usu);

				}

				return pis;
			}
		});
		return pis;
	}

	/**
	 * @param usuaria
	 * @throws ModelException
	 */
	public List<Chcuestester> getCuestionarioEsterilizacionPorUsuaria(Long usuaria) throws ModelException {
		List<Chcuestester> resultList = null;
		List parametros = new ArrayList();
		try {
			StringBuffer sb = new StringBuffer();
			sb.append(" SELECT chce FROM " + Chcuestester.class.getName() + " chce, " + Chconsulta.class.getName()
					+ " chco WHERE chco.hcolusuario = ? AND chce.comp_id.hcelconsulta = chco.hcolnumero "
					+ " AND chce.comp_id.hcectiposerv = ? " + " ORDER BY chce.hcedfecreg DESC ");
			parametros.add(usuaria);
			parametros.add(IConstantes.TIPO_CONSULTA);

			resultList = (List<Chcuestester>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			if (!resultList.isEmpty()) {
				return resultList;
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error obteniendo Cuestionario Esterilizaci�n:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error obteniendo Cuestionario Esterilizaci�n:" + e.getMessage(), e);
		}

	}

	public String formatearCampoRevision(String campo) {
		if (campo == null) {
			campo = "";
		} else {
			if (campo.equals("R")) {
				campo = "Refiere";
			}
			if (campo.equals("N")) {
				campo = "No Refiere";
			}
			campo.trim();
		}
		return campo;
	}

	/**
	 * @param numeroUsuario
	 * @return
	 * @throws ModelException
	 */
	public String getEtapaNotaEnfermeria(Long numeroConsulta) throws ModelException {
		List<String> resultList = null;
		List parametros = new ArrayList<Chformulahos>();

		try {

			StringBuffer sb = new StringBuffer();
			sb.append(" select chpt.hptccompromiso from " + Chconsulta.class.getName());
			sb.append(" chco, Chpladetrat chpt  where chco.hcolnumero = chpt.id.hptlconsulta  ");
			sb.append(" and chco.hcoctiposervi = chpt.id.hptctiposervi and chpt.hptccompromiso is not null ");
			sb.append(" and chco.hcoeetapa = 'CE' ");
			sb.append(" and chco.hcolusuario = ?  ");
			sb.append(" order by chco.hcodfecregistr desc ");

			parametros.add(numeroConsulta);

			resultList = (List<String>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			if (!resultList.isEmpty()) {
				return resultList.get(0);
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Compromisos Psicologicos:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Compromisos Psicologicos: " + e.getMessage(), e);
		}

	}

	public void saveTipoServicio(Chtiposerv servicio) throws ModelException {
		try {
			if (servicio != null) {
				this.getHibernateTemplate().saveOrUpdate(servicio);
			}

		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Toma Citologia:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Toma Citologia:" + e.getMessage(), e);
		}
	}

	public List<Chtiposerv> getLstTipoServicio() throws ModelException {
		List<Chtiposerv> resultList = null;
		List parametros = new ArrayList();

		try {

			StringBuffer sb = new StringBuffer();
			sb.append(" select chts from " + Chtiposerv.class.getName());
			sb.append(" chts ");
			sb.append(" where chts.htscestado in ('AC','IN') order by chts.htsncodigo ");

			resultList = (List<Chtiposerv>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			if (!resultList.isEmpty()) {
				return resultList;
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando lista Tipo Servicio:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando lista Tipo Servicio: " + e.getMessage(), e);
		}

	}

	/**
	 * @param servicio
	 * @throws ModelException
	 */
	public void saveServicioXTipo(Chserxtipo servicio) throws ModelException {
		try {
			if (servicio != null) {
				this.getHibernateTemplate().saveOrUpdate(servicio);
			}

		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Servicio X Tipo:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Servicio X Tipo:" + e.getMessage(), e);
		}
	}

	/**
	 * @param codigo
	 * @return
	 * @throws ModelException
	 */
	public List<Chserxtipo> getLstServicioXTipo(Integer codigo) throws ModelException {
		List<Chserxtipo> resultList = null;
		List parametros = new ArrayList();

		try {

			StringBuffer sb = new StringBuffer();
			sb.append(" select chst from " + Chserxtipo.class.getName());
			sb.append(" chst ");
			sb.append(" where chst.comp_id.hstncoditipo  = ?  ");
			sb.append(" order by chst.comp_id.hstncoditipo   ");

			parametros.add(codigo);

			resultList = (List<Chserxtipo>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			if (!resultList.isEmpty()) {
				return resultList;
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando lista Tipo Servicio:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando lista Tipo Servicio: " + e.getMessage(), e);
		}

	}

	/**
	 * @param servicio
	 * @throws ModelException
	 */
	public void deleteServicioXTipo(Chserxtipo servicio) throws ModelException {
		try {
			if (servicio != null) {
				this.getHibernateTemplate().delete(servicio);
			}

		} catch (HibernateException e) {
			throw new ModelException("Error Eliminando Servicio X Tipo:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Eliminando Servicio X Tipo:" + e.getMessage(), e);
		}
	}

	/**
	 * @param consultorioObject
	 * 
	 * @throws ModelException
	 */
	public void saveSalaCirugia(final Chconsultori consultorioObject) throws ModelException {

		try {
			this.getHibernateTemplate().saveOrUpdate(consultorioObject);
		} catch (HibernateException e) {
			throw new ModelException("Error insertando Consultorio Cirugia:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error insertando Consultorio Cirugia:" + e.getMessage(), e);
		}
	}

	/**
	 *
	 * @return
	 * @throws ModelException
	 */
	public

			List<Chconsultori> getSalasCirugia() throws ModelException {
		List<Chconsultori> resultList = null;
		List parametros = new ArrayList();

		try {
			StringBuffer sb = new StringBuffer();
			sb.append(" select chco from ").append(Chconsultori.class.getName());
			sb.append(" chco where chco.hcocestado = 'VG' ");
			sb.append(" order by hconclinica ");

			resultList = (List<Chconsultori>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			if (!resultList.isEmpty()) {
				return resultList;
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando el Consultorio:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando el Consultorio :" + e.getMessage(), e);
		}

	}

	/**
	 * @param aplicacion
	 * @throws ModelException
	 */
	public void saveAplicacionVacuna(Chvacunacion aplicacion) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(aplicacion);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Aplicacion Vacuna" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Aplicacion Vacuna" + e.getMessage(), e);
		}
	}

	/**
	 * @param confirmacion
	 * @throws ModelException
	 */
	public
	/*
	 * public void saveConfirmacionServicio(final Chconfiservi confirmacion, final
	 * Cfnoveadmi novedadAdmision, final List<Cfnovedeta> detalleNovedadList) throws
	 * ModelException {
	 * 
	 * try { this.getHibernateTemplate().execute(new HibernateCallback() { public
	 * Object doInHibernate(Session session) {
	 * 
	 * if (confirmacion != null) { session.saveOrUpdate(confirmacion); } return
	 * confirmacion; } }); if (confirmacion == null) { throw new
	 * ModelException("Error Insertando  la confirmacion del servicio"); } } catch
	 * (HibernateException e) { throw e; } catch (Exception e) { throw new
	 * ModelException("Error Insertando la confirmacion del servicio" +
	 * e.getMessage(), e); }
	 * 
	 * 
	 * if (novedadAdmision != null) { try { this.getHibernateTemplate().execute(new
	 * HibernateCallback() { public Object doInHibernate(Session session) {
	 * 
	 * if (novedadAdmision != null) { session.saveOrUpdate(novedadAdmision); }
	 * return novedadAdmision; }
	 * 
	 * });
	 * 
	 * if (novedadAdmision == null) { throw new
	 * ModelException("Error Insertando la novedad de Admision"); } } catch
	 * (HibernateException e) { throw e; } catch (Exception e) { throw new
	 * ModelException("Error Insertando la novedad de Admision" + e.getMessage(),
	 * e); }
	 * 
	 * try { this.getHibernateTemplate().execute(new HibernateCallback() { public
	 * Object doInHibernate(Session session) { List<Cfnovedeta>
	 * detalleNovedadListAux = new ArrayList<Cfnovedeta>(); Long consecutivo = 1L;
	 * if (detalleNovedadList != null) { for (Cfnovedeta detanov:
	 * detalleNovedadList) { detanov.setComp_id(new
	 * CfnovedetaPK(novedadAdmision.getCnnconsec().longValue(), consecutivo));
	 * consecutivo++; session.saveOrUpdate(detanov);
	 * detalleNovedadListAux.add(detanov); }
	 * 
	 * } return detalleNovedadListAux; } });
	 * 
	 * } catch (HibernateException e) { throw e; } catch (Exception e) { throw new
	 * ModelException("Error Insertando el detallle novedad de Admision" +
	 * e.getMessage(), e); } } }
	 */

	void saveConfirmacionServicio(final Chconfiservi confirmacion, final Cnconsclin consulta, final String userName,
			final String codigoProfesional) throws ModelException {

		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {

					Chconsulta consultaActual = new Chconsulta();
					Cnconsclin consultaAux = null;
					List lstHonorarios = null;

					if (confirmacion != null) {
						session.saveOrUpdate(confirmacion);

						StringBuffer sb1 = new StringBuffer();
						sb1.append(" select cncl from Cnconsclin " + " cncl  where cncl.cconnumero = :numero ");
						Query query1 = session.createQuery(sb1.toString());
						query1.setParameter("numero", consulta.getCconnumero());

						consultaAux = (Cnconsclin) query1.uniqueResult();

						if ("S".equals(confirmacion.getHcscrealiservi())) {
							StringBuffer sbAda = new StringBuffer();
							sbAda.append(" update clinico.CFDETAFACTURA ccdf1  set ccdf1.CDFCETAPA = 'AT' ");
							sbAda.append(" where (ccdf1.CDFNCONSFACT, ccdf1.CDFNNUMITEM) in( ");
							sbAda.append(" select ccdf.CDFNCONSFACT, ccdf.CDFNNUMITEM ");
							sbAda.append(" from clinico.CFFACTURA ccfa, clinico.CFDETAFACTURA ccdf ");
							sbAda.append(" where ccfa.CFNCONSFACT = ccdf.CDFNCONSFACT ");
							sbAda.append(" and ccfa.CFNADMISION = :wadmision ");
							sbAda.append(" and ccdf.CDFCSERVICIO = :wservicio ) ");

							Query queryAda = session.createQuery(sbAda.toString());
							queryAda.setParameter("wadmision", consultaAux.getCconnumdoc());
							queryAda.setParameter("wservicio", consultaAux.getCcocservic().getCsvccodigo());
							queryAda.executeUpdate();

							// VERIFICAMOS SI EXISTE MAS DE UN PROFESIONAL ASIGNADO A LA CONSULTA NO
							// CAMBIAMOS LA FECHA DE LA CONSULTA,. NI ACTUALIZAMOS LA FECHA DE LA CONSULTA

							if (consulta != null) {

								StringBuffer sb5 = new StringBuffer();
								sb5.append(" select cnpc from " + Cnprofxcon.class.getName()
										+ " cnpc  where cnpc.id.cpnnconcli = :cpnnconcli AND cnpc.cpncestado != 'XX'  ");
								Query query5 = session.createQuery(sb5.toString());
								query5.setParameter("cpnnconcli", consulta.getCconnumero());

								lstHonorarios = query5.list();

							}

							consultaActual.setHconclinica(consultaAux.getCconclinic());
							if (consultaAux != null && lstHonorarios != null && lstHonorarios.size() <= 1) {
								consultaAux.setCcodfeccon(new Date());
								generarHonorariosProfesional(session, consultaAux, consultaActual, userName,
										codigoProfesional);

							}

							if (consultaAux != null) {
								consultaAux.setCcothorate(new Date());
								consultaAux.setCcocetapa(IConstantes.ETAPA_ATENDIDO);
								consultaAux.setCcocusumod(userName);

								// Cambiamos el estado de la consulta x clinica a atendida
								session.update(consultaAux);
							}
						}
					}
					return confirmacion;
				}
			});

			if (confirmacion == null) {
				throw new ModelException("Error Insertando  la confirmacion del servicio");
			}

		} catch (HibernateException e) {
			throw e;
		} catch (Exception e) {
			throw new ModelException("Error Insertando la confirmacion del servicio" + e.getMessage(), e);
		}

	}

	/**
	 * @param aplicacion
	 * @throws ModelException
	 */
	public
	/*
	 * public void saveAplicacionEspermograma(Chespervasec aplicacion) throws
	 * ModelException { try { this.getHibernateTemplate().saveOrUpdate(aplicacion);
	 * } catch (HibernateException e) { throw new
	 * ModelException("Error Insertando  Espermograma" + e.getMessage(), e); } catch
	 * (Exception e) { throw new ModelException("Error Insertando  Espermograma" +
	 * e.getMessage(), e); } }
	 */
	void saveAplicacionEspermograma(final Chespervasec aplicacion, final Cnconsclin consulta) throws ModelException {
		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {
					StringBuffer sb1 = new StringBuffer();
					sb1.append(" select chco from Chconsulta " + " chco  where chco.hcolnumero = :numero ");
					Query query1 = session.createQuery(sb1.toString());
					query1.setParameter("numero", aplicacion.getHevlconsulta());

					Chconsulta consultaAux = (Chconsulta) query1.uniqueResult();

					if (consultaAux == null) {
						consultaAux = new Chconsulta();
						consultaAux.setHcolnumero(aplicacion.getHevlconsulta());
						consultaAux.setHcocentidadadm("");
						consultaAux.setHcolusuario(consulta.getCcolusuario());
						consultaAux.setHconfolio(0);
						consultaAux.setHcocservicio(consulta.getCcocservic());
						consultaAux.setHcodfeccierre(null);
						consultaAux.setHcoeetapa(IConstantes.ETAPA_ABIERTO);
						consultaAux.setHcocoperador(aplicacion.getHevcoperador());
						consultaAux.setHcodfecregistr(new Date());
						consultaAux.setHconclinica(consulta.getCconclinic());
						consultaAux.setHcoctiposervi(aplicacion.getHevctiposervi());
						consultaAux.setHcolconsuclini(aplicacion.getHevlconsulta());
						consultaAux.setHcodfecinicio(aplicacion.getHevdfecharesul());

						session.save(consultaAux);
					}
					session.saveOrUpdate(aplicacion);
					return aplicacion;
				}
			});

		} catch (HibernateException e) {
			throw new ModelException("Error Insertando  Espermograma" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando  Espermograma" + e.getMessage(), e);
		}

	}

	/**
	 * @param espermograma
	 * @throws ModelException
	 */
	public void saveEspermogramaFertilidad(final Cnespermog espermograma, final Cncapaespe capacitacion)
			throws ModelException {
		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {

					if (espermograma != null) {
						StringBuffer sb = new StringBuffer();

						sb.append(" delete  clinico.Cncapaespe ");
						sb.append(" where ccenclinic = :clinica ");
						sb.append(" and ccennumero = :numeroEspermograma ");
						Query query = session.createQuery(sb.toString());
						query.setParameter("clinica", espermograma.getCesnclinic());
						query.setParameter("numeroEspermograma", espermograma.getCesnnumero());
						query.executeUpdate();

						session.saveOrUpdate(espermograma);

						if (capacitacion != null) {
							session.saveOrUpdate(capacitacion);
						}
					}

					return espermograma;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando  Espermograma Fertilidad" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando  Espermograma Fertilidad" + e.getMessage(), e);
		}
	}

	/**
	 * @param numeroConsulta
	 * @return
	 * @throws ModelException
	 */
	public Chvacunacion getAdministracionVacuna(Long numeroConsulta) throws ModelException {
		List<Chvacunacion> resultList = null;
		List parametros = new ArrayList();
		try {
			if (numeroConsulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chva from " + Chvacunacion.class.getName()
						+ " chva  where chva.id.hvalconsulta = ? AND chva.id.hvactiposervi = ? ");
				parametros.add(numeroConsulta);
				parametros.add(IConstantes.TIPO_CONSULTA);

				resultList = (List<Chvacunacion>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Aplicacion Vacunacion:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Aplicacion Vacunacion:" + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroConsulta
	 * @return
	 * @throws ModelException
	 */
	public Chconfiservi getConfirmacionServicio(Long numeroConsulta) throws ModelException {
		List<Chconfiservi> resultList = null;
		List parametros = new ArrayList();
		try {
			if (numeroConsulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chcs from " + Chconfiservi.class.getName()
						+ " chcs  where chcs.comp_id.hcslconsulta = ? AND chcs.comp_id.hcsctiposervi = ? ");
				parametros.add(numeroConsulta);
				parametros.add(IConstantes.TIPO_CONSULTA);

				resultList = (List<Chconfiservi>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Confirmacion Servicio:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Confirmacion Servicio:" + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroConsulta
	 * @return
	 * @throws ModelException
	 */
	public Chespervasec getAdministracionEspermograma(Long numeroConsulta) throws ModelException {
		List<Chespervasec> resultList = null;
		List parametros = new ArrayList();
		try {
			if (numeroConsulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select ches from " + Chespervasec.class.getName() + " ches  where ches.hevlconsulta = ?  ");
				parametros.add(numeroConsulta);

				resultList = (List<Chespervasec>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Espermograma:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Espermograma:" + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroConsulta
	 * @return
	 * @throws ModelException
	 */
	public Cnespermog getEspermogramaFertilidad(Long numeroConsulta) throws ModelException {
		List<Cnespermog> resultList = null;
		List parametros = new ArrayList();
		try {
			if (numeroConsulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select cnes from " + Cnespermog.class.getName() + " cnes  where cnes.cesnconcli = ?  ");
				parametros.add(numeroConsulta);

				resultList = (List<Cnespermog>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}
			}
			return null;
		} catch (HibernateException e) {
			throw new ModelException("Error consultando Espermograma Fertilidad:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Espermograma Fertilidad:" + e.getMessage(), e);
		}
	}

	/**
	 * @param numeroEspermograma
	 * @return
	 * @throws ModelException
	 */
	public Cncapaespe getCapacitacionFertilidad(Integer clinica, Integer numeroEspermograma) throws ModelException {
		List<Cncapaespe> resultList = null;
		List parametros = new ArrayList();
		try {
			if (numeroEspermograma != null && clinica != null) {

				StringBuffer sb = new StringBuffer();
				sb.append(" select cnca from " + Cncapaespe.class.getName()
						+ " cnca  where cnca.id.ccenclinic = ? and cnca.id.ccennumero = ?  ");
				parametros.add(clinica);
				parametros.add(numeroEspermograma);

				resultList = (List<Cncapaespe>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}
			}
			return null;
		} catch (HibernateException e) {
			throw new ModelException("Error consultando Capacitacion Fertilidad:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Capacitacion Fertilidad:" + e.getMessage(), e);
		}
	}

	/**
	 * @param numeroConsulta
	 * @return
	 * @throws ModelException
	 */
	public Cpservicio getServicioXNumeroConsulta(final Long numeroConsulta) throws ModelException {
		Cpservicio pis = (Cpservicio) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				if (numeroConsulta != null) {
					StringBuffer sb = new StringBuffer();
					sb.append(" select cnco.ccocservic from  " + Cnconsclin.class.getName()
							+ " cnco  where cnco.cconnumero = :numeroConsulta   ");

					String hql = sb.toString();

					Query query = session.createQuery(hql);
					query.setParameter("numeroConsulta", numeroConsulta);

					Cpservicio pis;
					pis = (Cpservicio) query.uniqueResult();

					return pis;
				}
				return null;
			}
		});
		return pis;
	}

	/**
	 * @param violencia
	 * @throws ModelException
	 */
	public void saveViolenciaSivigila(Chvsolsivig violencia) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(violencia);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Violencia Sivigila" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Violencia Sivigila" + e.getMessage(), e);
		}
	}

	/**
	 * @param numeroConsulta
	 * @return
	 * @throws ModelException
	 */
	public Chvsolsivig getViolenciaSivigila(Long numeroConsulta) throws ModelException {
		List<Chvsolsivig> resultList = null;
		List parametros = new ArrayList();
		try {
			if (numeroConsulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(
						" select chvi from " + Chvsolsivig.class.getName() + " chvi  where chvi.id.hvslconsulta = ? ");
				parametros.add(numeroConsulta);

				resultList = (List<Chvsolsivig>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Violencia Sivigila:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Violencia Sivigila:" + e.getMessage(), e);
		}

	}

	/**
	 * @param fechaInicial
	 * @param fechaFinal
	 * @return
	 * @throws ModelException
	 */
	public List<Object[]> getReporteRadicacionFacturas(Date fechaInicial, Date fechaFinal) throws ModelException {
		List resultList = null;

		String HORA_INICIAL = " 00:00";
		String HORA_FINAL = " 23:59";
		String fechaI = null;
		String fechaF = null;
		if (fechaInicial != null && fechaFinal != null) {
			SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");

			fechaI = dateFormat.format(fechaInicial) + HORA_INICIAL;
			fechaF = dateFormat.format(fechaFinal) + HORA_FINAL;
		}

		try {
			if (fechaInicial != null && fechaFinal != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(
						" select  ccfs.CFSNNUMFAC NUMERO_FACTURA, ccfs.CFSNCLINIC CLINICA,cpcli.CCLCNOMBRE NOMBRE_CLINICA, ccfs.CFSDFECREG FECHA_FACTURA,  ");
				sb.append(
						" ccfs.CFSNCONTRA NUMERO_CONTRATO,ccfs.CFSAVALENT VALOR_ENTIDAD, ccfs.CFSAVALDON VALOR_DONANTE,ccfs.CFSASUBTOT VALOR_SUBTOTAL ,  ");
				sb.append(
						" ccfs.CFSAABONO VALOR_ABONO, ccfs.CFSADESCTO VALOR_DESCUENTO,ccfs.CFSAIVA VALOR_IVA,cpco.CCCNNUMCUE NUMERO_CUENTA_COBRO, ");
				sb.append(
						" cpco.CCCDFECCUE FECHA_CUENTA_COBRO,cpco.CCCDFECRAD FECHA_RADICACIOM,cpco.CCCCNUMRAD NUMERO_RADICACION,cpco.CICDFECFAC FECHA_FACTURA, ");
				sb.append(" NVL(cpco.CCCCFACSAP,'N') RADICADA ");
				sb.append(" from clinico.ccfactsap ccfs  ");
				sb.append(" LEFT JOIN clinico.CPCLINICA cpcli ON  cpcli.cclncodigo = ccfs.CFSNCLINIC ");
				sb.append(
						" LEFT JOIN ((select cccb.CCCNNUMERO, cccb.CCCNNUMCUE, cccb.CCCNCLINIC, cccb.CCCDFECCUE, cccb.CCCNCONTRA,cccb.CCCDFECINI,cccb.CCCDFECFIN, ");
				sb.append(
						" cccb.CCCAVALENT, cccb.CCCAVALCOP, cccb.CCCAVALIVA,cccb.CCCDFECRAD, cccb.CCCCNUMRAD, cccb.CCCDREGRAD, ccic.CICNNUMFAC, ccic.CICDFECFAC, cccb.CCCCFACSAP ");
				sb.append(" from  clinico.CCCUENCOB cccb, clinico.ccitemcuen ccic ");
				sb.append(
						" where ccic.CICNNUMERO = cccb.CCCNNUMERO and cccb.CCCNESTADO = 1)) cpco ON  cpco.CICNNUMFAC = ccfs.CFSNNUMFAC ");
				sb.append(
						" where CFSDFECREG between TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') and TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi')  ");
				sb.append(" and CFSNESTADO = 1 and  CFSCCLAFAC in ('BV','ZBVD') ");

				Query sqlquery = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
						.createQuery(sb.toString());
				sqlquery.setParameter("fechaI", fechaI);
				sqlquery.setParameter("fechaF", fechaF);

				resultList = sqlquery.list();

				if (!resultList.isEmpty()) {
					return resultList;
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Reporte Radicacion Facturas:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Reporte Radicacion Facturas: " + e.getMessage(), e);
		}

	}

	/**
	 * @param fechaInicial
	 * @param fechaFinal
	 * @return
	 * @throws ModelException
	 */
	public List<Object[]> getReporteFacturacionContrato(Date fechaInicial, Date fechaFinal, Integer contrato,
			Integer wclinica) throws ModelException {
		List resultList = null;

		String HORA_INICIAL = " 00:00";
		String HORA_FINAL = " 23:59";
		String fechaI = null;
		String fechaF = null;
		if (fechaInicial != null && fechaFinal != null) {
			SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");

			fechaI = dateFormat.format(fechaInicial) + HORA_INICIAL;
			fechaF = dateFormat.format(fechaFinal) + HORA_FINAL;
		}

		try {
			if (fechaInicial != null && fechaFinal != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" SELECT   ");
				sb.append(" CASE WHEN CCFA.CFSNESTADO = 1 THEN 'ACTIVA' ELSE 'ANULADA' END AS ESTADO, ");
				sb.append(
						" CCFA.CFSNNUMFAC AS NUMERO_FACTURA, CCDS.CDFCSERVIC AS COD_SERVICIO, CPSE.CSVCNOMBRE AS NOMBRE_SERVICIO, ");
				sb.append(
						" CCFA.CFSCTIPIDE AS TIPO_DOCUMENTO, CCFA.CFSANUMIDE AS NUMERO_DOCUMENTO, CCFA.CFSCPACIEN AS NOMBRES,  ");
				sb.append(
						" CCFA.CFSDFECREG AS FECHA_FACTURA, CCFA.CFSCCLAFAC AS CLASE_FACTURA, CCDS.CDFAVALENT AS VALOR_TOTAL, ");
				sb.append(" CCFA.CFSNCONTRA AS NUMERO_CONTRATO, CPCO.CCNCDESCRI AS NOMBRE_CONTRATO,  ");
				sb.append(" CCFA.CFSNCLINIC AS COD_CLINICA, CPCL.CCLCNOMBRE AS NOMBRE_CLINICA  ");
				sb.append(" FROM CLINICO.CCFACTSAP CCFA ");
				sb.append(" LEFT JOIN CLINICO.CCDETASAP CCDS ON CCFA.CFSNNUMFAC = CCDS.CDFNNUMERO ");
				sb.append(" LEFT JOIN CLINICO.CPSERVICIO CPSE ON CCDS.CDFCSERVIC = CPSE.CSVCCODIGO ");
				sb.append(" LEFT JOIN CLINICO.CVCONTRATO CPCO ON CCFA.CFSNCONTRA = CPCO.CCNNNUMERO ");
				sb.append("       AND (CCFA.CFSNCLINIC = CPCO.CCNNCLINIC OR CPCO.CCNNCLINIC = 9) ");
				sb.append(" LEFT JOIN CLINICO.CPCLINICA CPCL ON CCFA.CFSNCLINIC = CPCL.CCLNCODIGO  ");
				sb.append(" WHERE CCFA.CFSNCONTRA = :contrato   ");
				if (wclinica != null && wclinica.intValue() != 0) {
					sb.append(" AND CCFA.CFSNCLINIC = :wclinica   ");
				}
				sb.append(
						" AND CCFA.CFSDFECREG between TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') and TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi')  ");
				sb.append(" AND CCDS.CDFCSWPAQU = 'S' ");
				sb.append(" UNION ALL ");
				sb.append("  SELECT  ");
				sb.append("  CASE WHEN CCFA.CFSNESTADO = 1 THEN 'ACTIVA' ELSE 'ANULADA' END AS ESTADO, ");
				sb.append(
						"  CCFA.CFSNNUMFAC AS NUMERO_FACTURA, CCDS.CDFCSERVIC AS COD_SERVICIO, CPSE.CSVCNOMBRE AS NOMBRE_SERVICIO, ");
				sb.append(
						"  CCFA.CFSCTIPIDE AS TIPO_DOCUMENTO, CCFA.CFSANUMIDE AS NUMERO_DOCUMENTO, CCFA.CFSCPACIEN AS NOMBRES,  ");
				sb.append(
						"  CCFA.CFSDFECREG AS FECHA_FACTURA, CCFA.CFSCCLAFAC AS CLASE_FACTURA, CCDS.CDFAVALENT AS VALOR_TOTAL, ");
				sb.append("  CCFA.CFSNCONTRA AS NUMERO_CONTRATO, CPCO.CCNCDESCRI AS NOMBRE_CONTRATO, ");
				sb.append("  CCFA.CFSNCLINIC AS COD_CLINICA, CPCL.CCLCNOMBRE AS NOMBRE_CLINICA ");
				sb.append("  FROM CLINICO.CCFACTSAP CCFA ");
				sb.append("  LEFT JOIN CLINICO.CCDETASAP CCDS ON CCFA.CFSNNUMFAC = CCDS.CDFNNUMERO ");
				sb.append("  LEFT JOIN CLINICO.CPSERVICIO CPSE ON CCDS.CDFCSERVIC = CPSE.CSVCCODIGO ");
				sb.append("  LEFT JOIN CLINICO.CVCONTRATO CPCO ON CCFA.CFSNCONTRA = CPCO.CCNNNUMERO ");
				sb.append("       AND (CCFA.CFSNCLINIC = CPCO.CCNNCLINIC OR CPCO.CCNNCLINIC = 9) ");
				sb.append("  LEFT JOIN CLINICO.CPCLINICA CPCL ON CCFA.CFSNCLINIC = CPCL.CCLNCODIGO ");
				sb.append("  WHERE CCFA.CFSNCONTRA = :contrato  ");
				if (wclinica != null && wclinica.intValue() != 0) {
					sb.append(" AND CCFA.CFSNCLINIC = :wclinica   ");
				}
				sb.append(
						" AND CCFA.CFSDFECREG between TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') and TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi')  ");
				sb.append("  AND SUBSTR(CCDS.CDFCPAQUET,1,1) = 'S' AND CCDS.CDFCSWPAQU = 'N' ");
				sb.append("  UNION ALL ");
				sb.append(" SELECT  ");
				sb.append("  CASE WHEN CCFA.CFSNESTADO = 1 THEN 'ACTIVA' ELSE 'ANULADA' END AS ESTADO, ");
				sb.append(
						"  CCFA.CFSNNUMFAC AS NUMERO_FACTURA, CCDS.CDFCSERVIC AS COD_SERVICIO, CPSE.CSVCNOMBRE AS NOMBRE_SERVICIO, ");
				sb.append(
						" CCFA.CFSCTIPIDE AS TIPO_DOCUMENTO, CCFA.CFSANUMIDE AS NUMERO_DOCUMENTO, CCFA.CFSCPACIEN AS NOMBRES,  ");
				sb.append(
						" CCFA.CFSDFECREG AS FECHA_FACTURA, CCFA.CFSCCLAFAC AS CLASE_FACTURA, (CCDS.CDFAVALENT*CCDS.CDFNCANTID) AS VALOR_TOTAL, ");
				sb.append(" CCFA.CFSNCONTRA AS NUMERO_CONTRATO, CPCO.CCNCDESCRI AS NOMBRE_CONTRATO, ");
				sb.append(" CCFA.CFSNCLINIC AS COD_CLINICA, CPCL.CCLCNOMBRE AS NOMBRE_CLINICA ");
				sb.append("  FROM CLINICO.CCFACTSAP CCFA ");
				sb.append(" LEFT JOIN CLINICO.CCDETASAP CCDS ON CCFA.CFSNNUMFAC = CCDS.CDFNNUMERO  ");
				sb.append("  LEFT JOIN CLINICO.CPSERVICIO CPSE ON CCDS.CDFCSERVIC = CPSE.CSVCCODIGO ");
				sb.append(" LEFT JOIN CLINICO.CVCONTRATO CPCO ON CCFA.CFSNCONTRA = CPCO.CCNNNUMERO ");
				sb.append("       AND (CCFA.CFSNCLINIC = CPCO.CCNNCLINIC OR CPCO.CCNNCLINIC = 9) ");
				sb.append("  LEFT JOIN CLINICO.CPCLINICA CPCL ON CCFA.CFSNCLINIC = CPCL.CCLNCODIGO ");
				sb.append("  WHERE CCFA.CFSNCONTRA = :contrato   ");
				if (wclinica != null && wclinica.intValue() != 0) {
					sb.append(" AND CCFA.CFSNCLINIC = :wclinica   ");
				}
				sb.append(
						" AND CCFA.CFSDFECREG between TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') and TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi')  ");
				sb.append("  AND CCDS.CDFCSWPAQU = 'N' AND CCDS.CDFCPAQUET = '0' ");

				Query sqlquery = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
						.createQuery(sb.toString());
				sqlquery.setParameter("fechaI", fechaI);
				sqlquery.setParameter("fechaF", fechaF);
				sqlquery.setParameter("contrato", contrato);

				if (wclinica != null && wclinica.intValue() != 0) {
					sqlquery.setParameter("wclinica", wclinica);
				}

				resultList = sqlquery.list();

				if (!resultList.isEmpty()) {
					return resultList;
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Reporte Facturacion Contrato:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Reporte Facturacion Contrato: " + e.getMessage(), e);
		}

	}

	/**
	 * @param medicamento
	 * @return
	 * @throws ModelException
	 */
	public List<Chvademprof> getVademecumHistorias(Chvademprof medicamento) throws ModelException {
		List<Chvademprof> resultList = null;
		List parametros = new ArrayList();
		try {
			StringBuffer sb = new StringBuffer();
			sb.append(" select chvp from " + Chvademprof.class.getName()
					+ " chvp where  ((upper(chvp.hvpcprincactiv) like upper(?) OR upper(chvp.hvpccomercial) like upper(?)   )OR  chvp.hvpnconsecutiv = 0   )  ");

			parametros.add("%" + medicamento.getHvpcprincactiv() + "%");
			parametros.add("%" + medicamento.getHvpcprincactiv() + "%");

			if (medicamento != null) {

				if (medicamento.getHvpcprincactiv2() != null && !medicamento.getHvpcprincactiv2().equals("")) {

					if (medicamento.getHvpcopera1() != null && medicamento.getHvpcopera1().equals("OR")) {

						sb.append(
								"  OR (upper(chvp.hvpcprincactiv) like upper(?)   OR upper(chvp.hvpccomercial) like upper(?) OR  chvp.hvpnconsecutiv = 0) ");
						parametros.add("%" + medicamento.getHvpcprincactiv2() + "%");
						parametros.add("%" + medicamento.getHvpcprincactiv2() + "%");
					} else {

						sb.append(
								" and (upper(chvp.hvpcprincactiv)  like upper(?)  OR upper(chvp.hvpccomercial) like upper(?) OR  chvp.hvpnconsecutiv = 0)  ");
						parametros.add("%" + medicamento.getHvpcprincactiv2() + "%");
						parametros.add("%" + medicamento.getHvpcprincactiv2() + "%");
					}

				}

				if (medicamento.getHvpcprincactiv3() != null && !medicamento.getHvpcprincactiv3().equals("")) {

					if (medicamento.getHvpcopera2() != null && medicamento.getHvpcopera2().equals("OR")) {

						sb.append(
								" OR (upper(chvp.hvpcprincactiv) like upper(?)   OR upper(chvp.hvpccomercial) like upper(?)OR  chvp.hvpnconsecutiv = 0) ");
						parametros.add("%" + medicamento.getHvpcprincactiv3() + "%");

						parametros.add("%" + medicamento.getHvpcprincactiv3() + "%");
					} else {

						sb.append(
								" and (upper(chvp.hvpcprincactiv)  like upper(?)  OR upper(chvp.hvpccomercial) like upper(?) OR  chvp.hvpnconsecutiv = 0)  ");
						parametros.add("%" + medicamento.getHvpcprincactiv3() + "%");

						parametros.add("%" + medicamento.getHvpcprincactiv3() + "%");
					}

				}

			}

			sb.append(" order by  chvp.hvpccodigcomer desc ");

			resultList = (List<Chvademprof>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			if (!resultList.isEmpty()) {
				return resultList;
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Vademecum:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Vademecum:" + e.getMessage(), e);
		}

	}

	public List<Chvademecum> getVademecum(String esAnestesia) throws ModelException {
		List<Chvademecum> resultList = null;
		List parametros = new ArrayList();

		try {

			if (esAnestesia != null && !esAnestesia.equals("")) {
				StringBuffer sb = new StringBuffer();
				sb.append(
						" select chvd from " + Chvademecum.class.getName() + " chvd  where chvd.hvdcanestesia  = ?  ");
				sb.append(" order by  chvd.hvdcprincactiv ");
				parametros.add(esAnestesia);

				resultList = (List<Chvademecum>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList;
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Vademecum:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Vademecum:" + e.getMessage(), e);
		}

	}

	/**
	 * @param fechaInicial
	 * @param fechaFinal
	 * @return
	 * @throws ModelException
	 */
	public List<Object[]> getReporteServiciosSinFactura(Date fechaInicial, Date fechaFinal) throws ModelException {
		List resultList = null;

		String HORA_INICIAL = " 00:00";
		String HORA_FINAL = " 23:59";
		String fechaI = null;
		String fechaF = null;
		Date fechaCompara = new Date();
		if (fechaInicial != null && fechaFinal != null) {
			SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");

			fechaI = dateFormat.format(fechaInicial) + HORA_INICIAL;
			fechaF = dateFormat.format(fechaFinal) + HORA_FINAL;
		}

		fechaCompara = fechaInicial;

		try {
			if (fechaInicial != null && fechaFinal != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(
						" select cconclinic,ccodfeccon,EXTRACT(MONTH FROM ccodfeccon) ,ccontipdoc,cptd.CTDCDESCRI, cconnumdoc, ccocservic,cpse.CSVCNOMBRE, cconcantid, ccoavalser,ccocusureg    ");
				sb.append(" from clinico.cnconsclin cnco , clinico.CPSERVICIO cpse, clinico.CPTIPODOCU cptd  ");
				sb.append(" where cpse.CSVCCODIGO = ccocservic AND cptd.CTDNNUMERO = cnco.CCONTIPDOC  ");
				sb.append(
						" AND  CCODFECCON between TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') and TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi')    ");
				sb.append(" and CCONTIPDOC != 30 and CCOCETAPA = 'AT'  ");
				sb.append(
						" and CCONNUMDOC not in (select ccfs.CFSNNUMERO from clinico.ccfactsap ccfs where ccfs.CFSDFECREG >= :fechaCompara  ) ");

				Query sqlquery = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
						.createQuery(sb.toString());
				sqlquery.setParameter("fechaI", fechaI);
				sqlquery.setParameter("fechaF", fechaF);
				sqlquery.setParameter("fechaCompara", fechaCompara);

				resultList = sqlquery.list();

				if (!resultList.isEmpty()) {
					return resultList;
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Reporte Servicios Sin Factura:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Reporte Servicios Sin Factura: " + e.getMessage(), e);
		}

	}

	/**
	 * @param regcirpro
	 * @throws ModelException
	 */
	public void saveConsultaSinFactura(final Chregiconpro regcirpro, final Chusuario usuario, final Cpservicio servicio,
			final Cptipodocu tipodocu, final String userName) throws ModelException {
		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {
					Cnconsclin consulta = new Cnconsclin();

					if (regcirpro != null && regcirpro.getHrcnnumero() == null) {
						// Long hrcnconini = null;
						/*
						 * BigDecimal secuenciaConsulta = (BigDecimal)session.
						 * createQuery("SELECT cpco.connnumero FROM clinico.Cpconsec cpco where cpco.conncodigo = "
						 * + IConstantes.CCONCNCL + " FOR UPDATE nowait").uniqueResult();
						 * 
						 * session.
						 * createQuery("update clinico.Cpconsec set connnumero = connnumero + 1  where conncodigo = "
						 * + IConstantes.CCONCNCL + " ").executeUpdate();
						 * 
						 * if (secuenciaConsulta != null) { hrcnconini = secuenciaConsulta.longValue();
						 * }
						 */

						BigDecimal secuenciaCirugia = (BigDecimal) session.createQuery(
								"SELECT cpco.connnumero FROM clinico.Cpconsec cpco where cpco.conncodigo = "
										+ IConstantes.CCONCOSF + " FOR UPDATE nowait")
								.uniqueResult();

						session.createQuery(
								"update clinico.Cpconsec set connnumero = connnumero + 1  where conncodigo = "
										+ IConstantes.CCONCOSF + " ")
								.executeUpdate();

						if (secuenciaCirugia != null) {
							regcirpro.setHrcnnumero(secuenciaCirugia.longValue());
						}

						// consulta.setCconnumero(regcirpro.getHrcnconini().intValue());
						consulta.setCconclinic(regcirpro.getHrcnclinic().getCclncodigo());
						consulta.setCconclidoc(regcirpro.getHrcnclinic().getCclncodigo());
						consulta.setCconsalesp(new Integer(0));
						consulta.setCconconsul(new Integer(0));
						consulta.setCcontconcl(servicio.getCsvntipcon());
						consulta.setCcodfeccon(regcirpro.getHrcdfeccirpro());
						consulta.setCconhistor(new Integer(0));
						consulta.setCcoctipide(regcirpro.getHrcctipide());
						consulta.setCcoanumide(regcirpro.getHrcanumide());
						consulta.setCcocprinom(usuario.getHuscprimernomb());
						consulta.setCcocsegnom(usuario.getHuscsegundnomb());
						consulta.setCcocpriape(usuario.getHuscprimerapel());
						consulta.setCcocsegape(usuario.getHuscsegundapel());
						consulta.setCcontipdoc(tipodocu);
						consulta.setCconnumdoc(new BigDecimal(regcirpro.getHrcnnumero()));
						consulta.setCconprogra(regcirpro.getHrcnprogra());
						consulta.setCconcontra(regcirpro.getHrcntipusu());
						consulta.setCcocservic(servicio);
						consulta.setCconcantid(new Integer(1));
						consulta.setCcoavalser(new BigDecimal(0));
						consulta.setCcodfecreg(regcirpro.getHrctfecreg());
						consulta.setCcothorcon(regcirpro.getHrctfecreg());
						consulta.setCcocusureg(userName);
						consulta.setCcocetapa(IConstantes.CEN_SALA);
						consulta.setCcocestado(IConstantes.ESTADO_VIGENTE);
						consulta.setCcondonant(regcirpro.getHrcndonant());
						consulta.setCcocgenero(usuario.getHusesexo());
						consulta.setCcolusuario(regcirpro.getHrclusuario());
						consulta.setCcocintext("I");
						regcirpro.setHrccservic(servicio);
						session.saveOrUpdate(consulta);

					}

					regcirpro.setHrcnconini(consulta.getCconnumero());
					regcirpro.setHrcnconfac(new Integer(0));
					regcirpro.setHrcnnumfac(new BigDecimal(0));

					session.saveOrUpdate(regcirpro);

					return regcirpro;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		}
	}

	/**
	 * @param clinica
	 * @return
	 * @throws ModelException
	 */
	public List<Chregiconpro> getConsultaSinFacturaPorConfirmar(final Integer clinica) throws ModelException {
		List<Chregiconpro> pis = (List<Chregiconpro>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				if (clinica != null) {

					StringBuffer sb = new StringBuffer();
					sb.append(" select  chre from ");
					sb.append(Chregiconpro.class.getName()).append(" chre ");
					sb.append(" where chre.hrcnclinic = :clinica ");
					sb.append(" and chre.hrccetapa = :etapa ");
					sb.append(" and chre.hrccestado = :estado ");
					sb.append(" order by chre.hrcnnumero desc ");
					String hql = sb.toString();

					Query query = session.createQuery(hql);
					query.setParameter("etapa", IConstantes.ETAPA_PROGRAMADA_CIRUGIA);
					query.setParameter("estado", IConstantes.ESTADO_VIGENTE);
					query.setParameter("clinica", clinica);
					List<Chregiconpro> pis;
					pis = query.list();

					for (Chregiconpro ci : pis) {
						Cpservicio sv = ci.getHrccservic();
						Hibernate.initialize(sv);

						Chusuario usu = ci.getHrclusuario();
						Hibernate.initialize(usu);

					}

					return pis;
				}
				return null;
			}
		});
		return pis;
	}

	/**
	 * @param numero
	 * @return
	 * @throws ModelException
	 */
	public Cnconsclin getConsinfacByNumero(Long numero) throws ModelException {
		List<Cnconsclin> resultList = null;
		List parametros = new ArrayList();

		try {

			StringBuffer sb = new StringBuffer();
			sb.append(" select cnco from " + Cnconsclin.class.getName() + " cnco  where cnco.cconnumero  = ?  ");
			parametros.add(numero);

			resultList = (List<Cnconsclin>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			if (!resultList.isEmpty()) {
				return resultList.get(0);
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Consulta sin factura:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Consulta sin factura:" + e.getMessage(), e);
		}

	}

	/**
	 * @param fechaInicial
	 * @param fechaFinal
	 * @return
	 * @throws ModelException
	 */
	public List<Object[]> getReporteServiciosIppf(Date fechaInicial, Date fechaFinal, Integer wivefarser)
			throws ModelException {
		List resultList = null;

		String HORA_INICIAL = " 00:00";
		String HORA_FINAL = " 23:59";
		String fechaI = null;
		String fechaF = null;

		Date fechaCompara = new Date();
		if (fechaInicial != null && fechaFinal != null) {
			SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");

			fechaI = dateFormat.format(fechaInicial) + HORA_INICIAL;
			fechaF = dateFormat.format(fechaFinal) + HORA_FINAL;
		}

		fechaCompara = fechaInicial;
		try {
			if (fechaInicial != null && fechaFinal != null) {

				StringBuffer sb = new StringBuffer();
				sb.append(
						" SELECT servic, sexo, edad, max(fecreg), codigonue, nvl(prefser,CSPREFSER), case when codigonue = '1141110000000' "
								+ " or codigonue = '1142010000000' then null else CSSUFISERV end CSSUFISERV, clippf, case when cssumocue = 'S' "
								+ " then sum(cantid) else count(cantid) end cantid, nomser, nomcl, clncod, paquet, intext, CSSUMOCUE  FROM ( "
								+ " select distinct ccde.cdfnnumero, ccde.cdfcservic servic, chus.HUSESEXO sexo, ccfa.CFSDFECREG fecreg, "
								+ " EXTRACT(YEAR FROM ccfa.CFSDFECREG)-EXTRACT(YEAR FROM chus.HUSDFECHANACIM) edad, case when ccde.cdfcintext = 'E' "
								+ " then cpcl.CCLCIPPFMOV else cpcl.CCLCCODIPPF end clippf, ccde.CDFNCANTID cantid, cpse.CSVCNOMBRE nomser, "
								+ " cpcl.CCLCNOMBRE nomcl, nvl(clip.clncodigo,0) clncod, ccde.cdfcpaquet paquet, ccde.cdfcintext intext, null prefser "
								+ " from clinico.ccfactsap ccfa "
								+ " inner join clinico.ccdetasap ccde on ccde.cdfnnumero = ccfa.cfsnnumero "
								+ " inner join historia.chusuario chus on chus.HUSLNUMERO = ccfa.CFSLUSUARIO "
								+ " inner join clinico.cpservicio cpse on cpse.csvccodigo = ccde.cdfcservic "
								+ " inner join clinico.cpclinica cpcl on cpcl.cclncodigo = ccfa.cfsnclinic "
								+ " left join clinico.clippfgene clip on clip.clcgenero = chus.HUSESEXO "
								+ " and clip.clnedamin <= EXTRACT(YEAR FROM ccfa.CFSDFECREG)-EXTRACT(YEAR FROM chus.HUSDFECHANACIM) "
								+ " and clip.clnedamax >= EXTRACT(YEAR FROM ccfa.CFSDFECREG)-EXTRACT(YEAR FROM chus.HUSDFECHANACIM) "
								+ " where ccfa.CFSDFECREG between TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') and TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi') "
								+ " and ccfa.CFSNESTADO = 1 and cdfcswpaqu = 'N' and ccde.cdfcservic not like 'S75030%' and (ccde.cdfcpaquet,ccde.cdfcservic) "
								+ " not in (select cppa.cpecpaquet,cppa.cpecservic "
								+ " from clinico.cppaquserv cppa where cppa.cpecinsser is not null and cppa.cpecinsser <> '_') "
								+ " UNION ALL ");
				sb.append(
						" select distinct cfde.cdannumadm, cfde.cdacservic servic, chus.HUSESEXO sexo, cffa.cfdfechregi fecreg, "
								+ " EXTRACT(YEAR FROM cffa.cfdfechregi)-EXTRACT(YEAR FROM chus.HUSDFECHANACIM) edad, case when cfad.cacintext = 'E' "
								+ " then cpcl.CCLCIPPFMOV else cpcl.CCLCCODIPPF end clippf, cfde.CDANCANTID cantid, cpse.CSVCNOMBRE nomser, "
								+ " cpcl.CCLCNOMBRE nomcl, nvl(clip.clncodigo,0) clncod, cfde.cdacpaquet paquet, cfad.cacintext intext, null prefser "
								+ " from clinico.cffactura cffa "
								+ " inner join clinico.cfadmision cfad on cfad.cannumero  = cffa.cfnadmision "
								+ " inner join clinico.cpcontrato cpco on cpco.ccnnclinic = cfad.canclinic AND cpco.ccnnnumero = cfad.cancontra "
								+ " inner join clinico.cfdetaadmision cfde on cfde.cdannumadm = cfad.cannumero "
								+ " inner join historia.chusuario chus on chus.HUSLNUMERO = cfad.CANNUMPACI "
								+ " inner join clinico.cpservicio cpse on cpse.csvccodigo = cfde.cdacservic "
								+ " inner join clinico.cpclinica cpcl on cpcl.cclncodigo = cfad.canclinic "
								+ " left join clinico.clippfgene clip on clip.clcgenero = chus.HUSESEXO "
								+ " and clip.clnedamin <= EXTRACT(YEAR FROM cffa.cfdfechregi)-EXTRACT(YEAR FROM chus.HUSDFECHANACIM) "
								+ " and clip.clnedamax >= EXTRACT(YEAR FROM cffa.cfdfechregi)-EXTRACT(YEAR FROM chus.HUSDFECHANACIM) "
								+ " where cffa.cfdfechregi between TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') and TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi') "
								+ " and cffa.cfnestado = 'FA' AND (cpco.ccnctipofact = 'PGP' OR cpco.ccncfactagrup = 'S') "
								+ " and cfde.cdacswpaqu = 'N' and cfde.cdacservic not like 'S75030%' and (cfde.cdacpaquet,cfde.cdacservic) not in  "
								+ " (select cppa.cpecpaquet, cppa.cpecservic from clinico.cppaquserv cppa where cppa.cpecinsser is not null and cppa.cpecinsser <> '_') "
								+ " UNION ALL ");
				sb.append(
						" select distinct ccis.cianconsec, ccis.ciacservic servic, chus.HUSESEXO sexo, ccsa.CSCDFECREG fecreg, "
								+ " EXTRACT(YEAR FROM ccsa.CSCDFECREG)-EXTRACT(YEAR FROM chus.HUSDFECHANACIM) edad, cpcl.CCLCCODIPPF clippf, "
								+ " ccis.CIANCANTID cantid, cpse.CSVCNOMBRE nomser, cpcl.CCLCNOMBRE nomcl, nvl(clip.clncodigo,0) clncod, '0' paquet, 'I' intext, null prefser "
								+ " from clinico.ccsadicred ccsa "
								+ " inner join clinico.ccitemsacr ccis on ccis.cianconsec = ccsa.cscnconsec "
								+ " inner join historia.chusuario chus on chus.HUSLNUMERO = ccsa.CSCLUSUARIO "
								+ " inner join clinico.cpservicio cpse on cpse.csvccodigo = ccis.ciacservic "
								+ " inner join clinico.cpclinica cpcl on cpcl.cclncodigo = ccsa.cscnclinic "
								+ " left join clinico.clippfgene clip on clip.clcgenero = chus.HUSESEXO "
								+ " and clip.clnedamin <= EXTRACT(YEAR FROM ccsa.CSCDFECREG)-EXTRACT(YEAR FROM chus.HUSDFECHANACIM) "
								+ " and clip.clnedamax >= EXTRACT(YEAR FROM ccsa.CSCDFECREG)-EXTRACT(YEAR FROM chus.HUSDFECHANACIM) "
								+ " where ccsa.CSCDFECREG between TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') and TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi') "
								+ " and ccsa.CSCCESTADO = 'CF' and ccis.ciacservic not like 'S75030%' "
								+ " UNION ALL ");
				sb.append(
						" select distinct chco.hcolnumero, case when chvi.hviesufreviol = 'S' then 'VIOLENCIA' else 'NOVIOLENCIA' end servic, "
								+ " chus.HUSESEXO sexo, chco.HCODFECREGISTR fecreg, EXTRACT(YEAR FROM chco.HCODFECREGISTR)-EXTRACT(YEAR FROM chus.HUSDFECHANACIM) edad, "
								+ " cpcl.CCLCCODIPPF clippf, 1 cantid, case when chvi.hviesufreviol = 'S' then 'SI SUFRE VIOLENCIA' else 'NO SUFRE VIOLENCIA' "
								+ " end nomser, cpcl.CCLCNOMBRE nomcl, nvl(clip.clncodigo,0) clncod, '0' paquet, 'I' intext, null prefser "
								+ " from historia.chconsulta chco "
								+ " inner join historia.chviolencia chvi on chvi.hvilconsulta = chco.hcolnumero "
								+ " inner join historia.chusuario chus on chus.HUSLNUMERO = chco.hcolusuario "
								+ " inner join clinico.cpclinica cpcl on cpcl.cclncodigo = chco.hconclinica "
								+ " left join clinico.clippfgene clip on clip.clcgenero = chus.HUSESEXO "
								+ " and clip.clnedamin <= EXTRACT(YEAR FROM chco.HCODFECREGISTR)-EXTRACT(YEAR FROM chus.HUSDFECHANACIM) "
								+ " and clip.clnedamax >= EXTRACT(YEAR FROM chco.HCODFECREGISTR)-EXTRACT(YEAR FROM chus.HUSDFECHANACIM) "
								+ " where chco.HCODFECREGISTR between TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') and TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi') "
								+ " UNION ALL ");
				sb.append(" select distinct chco.hcolnumero, 'VIOLENCIA' servic, "
						+ " chus.HUSESEXO sexo, chco.HCODFECREGISTR fecreg, EXTRACT(YEAR FROM chco.HCODFECREGISTR)-EXTRACT(YEAR FROM chus.HUSDFECHANACIM) edad, "
						+ " cpcl.CCLCCODIPPF clippf, 1 cantid, case when chvi.hviesufreviol = 'S' then 'SI SUFRE VIOLENCIA' else 'NO SUFRE VIOLENCIA' "
						+ " end nomser, cpcl.CCLCNOMBRE nomcl, nvl(clip.clncodigo,0) clncod, '0' paquet, 'I' intext, 'REF' prefser "
						+ " from historia.chconsulta chco "
						+ " inner join historia.chviolencia chvi on chvi.hvilconsulta = chco.hcolnumero "
						+ " inner join historia.chusuario chus on chus.HUSLNUMERO = chco.hcolusuario "
						+ " inner join clinico.cpclinica cpcl on cpcl.cclncodigo = chco.hconclinica "
						+ " left join clinico.clippfgene clip on clip.clcgenero = chus.HUSESEXO "
						+ " and clip.clnedamin <= EXTRACT(YEAR FROM chco.HCODFECREGISTR)-EXTRACT(YEAR FROM chus.HUSDFECHANACIM) "
						+ " and clip.clnedamax >= EXTRACT(YEAR FROM chco.HCODFECREGISTR)-EXTRACT(YEAR FROM chus.HUSDFECHANACIM) "
						+ " where chco.HCODFECREGISTR between TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') and TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi') "
						+ " and chvi.hviesufreviol = 'S' " + " UNION ALL ");
				sb.append(
						" select distinct chco.hcolnumero, chco.hcocservicio servic, chus.HUSESEXO sexo, chco.HCODFECREGISTR fecreg, "
								+ " EXTRACT(YEAR FROM chco.HCODFECREGISTR)-EXTRACT(YEAR FROM chus.HUSDFECHANACIM) edad, "
								+ " cpcl.CCLCCODIPPF clippf, 1 cantid, cpse.csvcnombre nomser, "
								+ " cpcl.CCLCNOMBRE nomcl, nvl(clip.clncodigo,0) clncod, '0' paquet, 'I' intext, 'NEW' prefser "
								+ " from historia.chconsulta chco "
								+ " inner join historia.chexamediagn chex on chex.hedlconsulta = chco.hcolnumero "
								+ " inner join historia.chusuario chus on chus.HUSLNUMERO = chco.hcolusuario "
								+ " inner join clinico.cpclinica cpcl on cpcl.cclncodigo = chco.hconclinica "
								+ " inner join clinico.cpservicio cpse on cpse.csvccodigo = chco.hcocservicio "
								+ " left join clinico.clippfgene clip on clip.clcgenero = chus.HUSESEXO "
								+ " and clip.clnedamin <= EXTRACT(YEAR FROM chco.HCODFECREGISTR)-EXTRACT(YEAR FROM chus.HUSDFECHANACIM) "
								+ " and clip.clnedamax >= EXTRACT(YEAR FROM chco.HCODFECREGISTR)-EXTRACT(YEAR FROM chus.HUSDFECHANACIM) "
								+ " where chco.HCODFECREGISTR between TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') and TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi') "
								+ " and chex.hedcprimmet = 'S' " + " UNION ALL ");
				sb.append(
						" select distinct chco.hcolnumero, chco.hcocservicio servic, chus.HUSESEXO sexo, chco.hcodfecregistr fecreg, "
								+ " EXTRACT(YEAR FROM chco.hcodfecregistr)-EXTRACT(YEAR FROM chus.HUSDFECHANACIM) edad, cpcl.CCLCCODIPPF clippf, 1 cantid, "
								+ " cpse.csvcnombre nomser, cpcl.CCLCNOMBRE nomcl, nvl(clip.clncodigo,0) clncod, '0' paquet, 'I' intext, null prefser "
								+ " from historia.chconsulta chco "
								+ " inner join historia.chusuario chus on chus.HUSLNUMERO = chco.hcolusuario "
								+ " inner join clinico.cpclinica cpcl on cpcl.cclncodigo = chco.hconclinica "
								+ " inner join clinico.cpservicio cpse on cpse.csvccodigo = chco.hcocservicio "
								+ " left join clinico.clippfgene clip on clip.clcgenero = chus.HUSESEXO "
								+ " and clip.clnedamin <= EXTRACT(YEAR FROM chco.hcodfecregistr)-EXTRACT(YEAR FROM chus.HUSDFECHANACIM) "
								+ " and clip.clnedamax >= EXTRACT(YEAR FROM chco.hcodfecregistr)-EXTRACT(YEAR FROM chus.HUSDFECHANACIM) "
								+ " where chco.hcodfecregistr between TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') and TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi') "
								+ " and chco.hcocservicio like 'S75030%' ");
				sb.append(") LEFT JOIN clinico.clservippf on CSCODSERV = servic "
						+ " LEFT JOIN (select distinct cscodippf codigoant, cscodippf codigonue from clinico.clservippf union all "
						+ " select distinct codigoexis codigoant, codigonuevo codigonue from clinico.clcomserv) on codigoant = CSCODIPPF "
						+ "GROUP BY servic, sexo, edad, codigonue, prefser, CSPREFSER, CSSUFISERV, clippf, nomser, nomcl, clncod, paquet, intext, CSSUMOCUE ");

				Query sqlquery = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
						.createQuery(sb.toString());
				sqlquery.setParameter("fechaI", fechaI);
				sqlquery.setParameter("fechaF", fechaF);

				resultList = sqlquery.list();

				if (!resultList.isEmpty()) {
					return resultList;
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Reporte Servicios Ippf:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Reporte Servicios Ippf: " + e.getMessage(), e);
		}

	}

	/**
	 * @param edad
	 * @param genero
	 * @return
	 * @throws ModelException
	 */
	public String getCodigoUIDIppf(final BigDecimal edad, final String genero) throws ModelException {
		List<Clippfgene> resultList = null;
		List parametros = new ArrayList();

		try {
			if (edad != null && genero != null) {

				StringBuffer sb = new StringBuffer();
				sb.append(" select clip from " + Clippfgene.class.getName()
						+ " clip where clip.clcgenero = ? and clip.clnedamin <= ? and clip.clnedamax  >= ?  ");

				parametros.add(genero);
				parametros.add(edad);
				parametros.add(edad);

				resultList = (List<Clippfgene>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0).getClncodigo();
				}

			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Codigo UID IPPF" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Codigo UID IPPF" + e.getMessage(), e);
		}

	}

	public List<Object[]> getReporteInformacionAborto1(Date fechaInicial, Date fechaFinal, Integer wclinica)
			throws ModelException {
		List resultList = null;

		String HORA_INICIAL = " 00:00";
		String HORA_FINAL = " 23:59";
		String fechaI = null;
		String fechaF = null;
		if (fechaInicial != null && fechaFinal != null) {
			SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");

			fechaI = dateFormat.format(fechaInicial) + HORA_INICIAL;
			fechaF = dateFormat.format(fechaFinal) + HORA_FINAL;
		}

		try {
			if (fechaInicial != null && fechaFinal != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(
						"select extract(YEAR FROM sysdate) - EXTRACT(YEAR FROM chus.HUSDFECHANACIM)Edad, chmo.HMCCFACTOSANGRE, chmo.HMCCGRUPSANGRE Grupo_Sanguineo,  "
								+ "(CASE when chus.HUSNNUMECONTR is not null THEN 'Credito' when chus.HUSNNUMECONTR is null THEN 'Contado' END) Aseguramiento , "
								+ "chim.HIDNSEMANEMBAR Sem_Emb_ULT_MEST,  chim.HIDNSEMANAMENO Sema_Emb_Confir,chag.HAGNNUMGESTA Numero_Gestaciones, "
								+ "chag.HAGNNUMCESARE Numero_Cesarias, chag.HAGNNUMABORTO Numero_Abortos, chag.HAGNNUMPARTO Numero_Partos,  "
								+ "chme.HMPCDESCRIPCIO Metodo_Pnaifica_anterior, chre.HRICMETODPLANI Metodo_Pnaifica_Posterior,  "
								+ "chco.HCODFECREGISTR FECHA_PROCEDIMIENTO,EXTRACT(YEAR FROM chco.HCODFECREGISTR) ANNO_PROCEDIMIENTO, chco.HCONCLINICA COD_CLINI, "
								+ "cpcl.CCLCNOMBRE NOMBRE_CLINICA , chus.HUSEESTADCIVIL ESTADO_CIVIL "
								+ "from HISTORIA.chconsulta chco, HISTORIA.CHREMISILVE chre, HISTORIA.CHUSUARIO chus,   "
								+ "HISTORIA.CHMOTIVOCONS chmo, HISTORIA.CHIMPRDIAG chim, HISTORIA.CHANTEGINECO chag, HISTORIA.CHMETODOPLAN chme, clinico.CPCLINICA cpcl  "
								+ "where chco.HCOLNUMERO = chre.HRILCONSULTA   "
								+ "and chco.HCOLNUMERO = chmo.HMCLCONSULTA  "
								+ "and chco.HCOLNUMERO = chag.HAGLCONSULTA  "
								+ "and chco.HCOLNUMERO = chim.HIDLCONSULTA  "
								+ "and chco.HCOLUSUARIO = chus.HUSLNUMERO   "
								+ "and chme.HMPCCODIGO = chag.HAGCMETODOPLAN  "
								+ "and cpcl.CCLNCODIGO = chco.HCONCLINICA  "
								+ "and chco.HCODFECREGISTR between :fechaInicial and :fechaFinal ");

				if (wclinica != null && wclinica.intValue() != 0) {
					sb.append(" AND chco.HCONCLINICA = :wclinica   ");
				}
				Query sqlquery = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
						.createQuery(sb.toString());
				sqlquery.setParameter("fechaInicial", fechaInicial);
				sqlquery.setParameter("fechaFinal", fechaFinal);

				if (wclinica != null && wclinica.intValue() != 0) {
					sqlquery.setParameter("wclinica", wclinica);
				}

				resultList = sqlquery.list();

				if (!resultList.isEmpty()) {
					return resultList;
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Reporte Facturacion Contrato:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Reporte Facturacion Contrato: " + e.getMessage(), e);
		}

	}

	public List<Object[]> getReporteInformacionAborto2(Date fechaInicial, Date fechaFinal, Integer wclinica)
			throws ModelException {
		List resultList = null;

		String HORA_INICIAL = " 00:00";
		String HORA_FINAL = " 23:59";
		String fechaI = null;
		String fechaF = null;
		if (fechaInicial != null && fechaFinal != null) {
			SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");

			fechaI = dateFormat.format(fechaInicial) + HORA_INICIAL;
			fechaF = dateFormat.format(fechaFinal) + HORA_FINAL;
		}

		try {
			if (fechaInicial != null && fechaFinal != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(
						" select extract(YEAR FROM sysdate) - EXTRACT(YEAR FROM chus.HUSDFECHANACIM)Edad, chmo.HMCCFACTOSANGRE, chmo.HMCCGRUPSANGRE Grupo_Sanguineo, "
								+ "CASE when chus.HUSNNUMECONTR is not null THEN 'Credito' when chus.HUSNNUMECONTR is null THEN 'Contado' END Aseguramiento , chim.HIDNSEMANEMBAR Semanas_Embarazo_Consulta, chag.HAGNNUMGESTA Numero_de_Gestaciones, chag.HAGNNUMCESARE Numero_Cesarias, chag.HAGNNUMABORTO Numero_Abortos, chag.HAGNNUMPARTO Numero_Partos, "
								+ "chme.HMPCDESCRIPCIO Metodo_Pnaifica_anterior, chre.HRICMETODPLANI Metodo_Pnaifica_Posterior,  chco.HCODFECREGISTR FECHA_PROCEDIMIENTO, chco.HCONCLINICA COD_CLINI, cpcl.CCLCNOMBRE NOMBRE_CLINICA "
								+ "from HISTORIA.chconsulta chco, HISTORIA.CHREMISILVE chre, HISTORIA.CHUSUARIO chus,   "
								+ "HISTORIA.CHMOTIVOCONS chmo, HISTORIA.CHIMPRDIAG chim, HISTORIA.CHANTEGINECO chag, HISTORIA.CHMETODOPLAN chme, clinico.CPCLINICA cpcl  "
								+ "where chco.HCOLNUMERO = chre.HRILCONSULTA   "
								+ "and chco.HCOLNUMERO = chmo.HMCLCONSULTA  "
								+ "and chco.HCOLNUMERO = chag.HAGLCONSULTA  "
								+ "and chco.HCOLNUMERO = chim.HIDLCONSULTA  "
								+ "and chco.HCOLUSUARIO = chus.HUSLNUMERO   "
								+ "and chme.HMPCCODIGO = chag.HAGCMETODOPLAN  "
								+ "and cpcl.CCLNCODIGO = chco.HCONCLINICA  "
								+ "and chco.HCODFECREGISTR between :fechaInicial and :fechaFinal ");

				if (wclinica != null && wclinica.intValue() != 0) {
					sb.append(" AND chco.HCONCLINICA = :wclinica   ");
				}
				Query sqlquery = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
						.createQuery(sb.toString());
				sqlquery.setParameter("fechaInicial", fechaInicial);
				sqlquery.setParameter("fechaFinal", fechaFinal);

				if (wclinica != null && wclinica.intValue() != 0) {
					sqlquery.setParameter("wclinica", wclinica);
				}

				resultList = sqlquery.list();

				if (!resultList.isEmpty()) {
					return resultList;
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Reporte Facturacion Contrato:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Reporte Facturacion Contrato: " + e.getMessage(), e);
		}

	}

	/**
	 * Obtener Servicios de Control.
	 */
	public Cpservanex getCpservanex(String servicioOri, String servicioCtl) throws ModelException {
		Cpservanex servAnex = new Cpservanex();
		java.util.List resultList = null;
		try {
			Object[] param = new Object[2];
			param[0] = servicioOri;
			param[1] = servicioCtl;

			StringBuffer sb = new StringBuffer();
			sb.append("select a from Cpservanex as a where a.id.csacservic = ? and a.id.csacserane = ? ");

			resultList = this.getHibernateTemplate().find(sb.toString(), param);

			if (resultList.size() != 0)
				servAnex = (Cpservanex) resultList.get(0);
		} catch (HibernateException e) {
			throw new ModelException("Error consultando Servicios Anexos:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Servicios Anexos:" + e.getMessage(), e);
		}
		return servAnex;
	}

	/**
	 * Obtener Controles por servicio.
	 */
	public Integer getControlesPorServicio(Cnconsclin consclin, Chconsprogra control) throws ModelException {
		Integer cantidad = null;
		java.util.List resultList = null;
		try {

			StringBuffer sb = new StringBuffer();
			sb.append(" SELECT nvl(sum(hcpncantid),0) FROM HISTORIA.Chconsprogra "
					+ " WHERE ((hcpntipdoc = :tipdoc AND hcpnnumdoc = :numdoc) or (hcpntipdoc = :tipcns AND hcpnnumdoc = :numcns)) "
					+ " AND hcpcserori = :serori AND hcpcservicio = :servic AND hcplnumero <> :numctl ");

			Query sqlquery = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
					.createQuery(sb.toString());
			sqlquery.setParameter("tipdoc", consclin.getCcontipdoc().getCtdnnumero());
			sqlquery.setParameter("numdoc", consclin.getCconnumdoc());
			sqlquery.setParameter("tipcns", IConstantes.DOCUMENTO_CONSULTA_CLINICA);
			sqlquery.setParameter("numcns", consclin.getCconnumero());
			sqlquery.setParameter("serori", consclin.getCcocservic().getCsvccodigo());
			sqlquery.setParameter("servic", control.getHcpcservicio());
			if (control.getHcplnumero() == null) {
				sqlquery.setParameter("numctl", new BigDecimal(0));
			} else {
				sqlquery.setParameter("numctl", control.getHcplnumero());
			}

			resultList = sqlquery.list();

			if (resultList.size() != 0)
				cantidad = ((BigDecimal) resultList.get(0)).intValue();
		} catch (HibernateException e) {
			throw new ModelException("Error consultando cantidad controles por servicio:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando cantidad controles por servicio:" + e.getMessage(), e);
		}
		return cantidad;
	}

	/**
	 * @return
	 * @throws ModelException
	 */
	public List<Chconsprogra> getControlesConsulta(final Cnconsclin consclin) throws ModelException {
		List<Chconsprogra> pis = (List<Chconsprogra>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				StringBuffer sb = new StringBuffer();
				sb.append(" select chcp from " + Chconsprogra.class.getName()
						+ " chcp  where ((chcp.hcpntipdoc = :tipdoc and chcp.hcpnnumdoc = :numdoc)  "
						+ " or (chcp.hcpntipdoc = :tipcns and chcp.hcpnnumdoc = :numcns))  "
						+ " and chcp.hcpcserori = :serori and hcpeetapa = 'RG' ");
				String hql = sb.toString();
				Query query = session.createQuery(hql);
				query.setParameter("tipdoc", consclin.getCcontipdoc().getCtdnnumero());
				query.setParameter("numdoc", consclin.getCconnumdoc());
				query.setParameter("serori", consclin.getCcocservic());
				query.setParameter("tipcns", IConstantes.DOCUMENTO_CONSULTA_CLINICA);
				query.setParameter("numcns", consclin.getCconnumero());

				List<Chconsprogra> pis;
				pis = query.list();

				for (Chconsprogra co : pis) {
					String nombreServicio = "";
					String tipoDocumento = "";

					StringBuffer sb1 = new StringBuffer();
					sb1.append(
							" select (cpse.csvcnombre) from Clinico.cpservicio cpse where cpse.csvccodigo = :servicio ");
					sb1.append(" ");
					Query query1 = session.createQuery(sb1.toString());
					query1.setParameter("servicio", co.getHcpcservicio());
					nombreServicio = (String) query1.uniqueResult();
					co.setNombreServicio(nombreServicio);

					StringBuffer sb2 = new StringBuffer();
					sb2.append(
							" select (cpti.ctdcdescri) from Clinico.cptipodocu cpti where cpti.ctdnnumero = :tipodocu ");
					sb2.append(" ");
					Query query2 = session.createQuery(sb2.toString());
					query2.setParameter("tipodocu", co.getHcpntipdoc());
					tipoDocumento = (String) query2.uniqueResult();
					co.setTipoDocumento(tipoDocumento);

				}

				return pis;
			}
		});
		return pis;
	}

	/**
	 * Obtener Lista de Citologias para lectura.
	 */

	/**
	 * Obtener Lista de Citologias para lectura.
	 */
	public List getListaCirugiasHonorarios(Date fechaInicial, Date fechafinal, Integer codclinica)
			throws ModelException {

		List resultList = null;

		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		String fechaI = dateFormat.format(fechaInicial.getTime()) + HORA_INICIAL;
		String fechaF = dateFormat.format(fechafinal.getTime()) + HORA_FINAL;

		try {
			StringBuffer sb = new StringBuffer();

			sb.append(
					" select chdq.HDQLNUMERO NUMERO_DESCR, chdd.HDDNTIEMPOHORA TIEMPO_HORAS, chdd.HDDNTIEMPOMINU TIEMPO_MINUTOS,  ");
			sb.append(" chdd.HDDCANESTESIOL CODIGO_ANESTESIOLOGO, cppr.CPFCNOMBRE NOMBRE_ANESTESIOLOGO,  ");
			sb.append(
					" chdd.HDDCCIRUJANO CODIGO_CIRUJANO, cppr2.CPFCNOMBRE NOMBRE_CIRUJANO, SUBSTR(chdd.HDDCAYUDANTE1,1,4) CODIGO_AYUDANTE, cppr3.CPFCNOMBRE NOMBRE_AYUDANTE, ");
			sb.append(
					" chci.HCICOPERADOR, chdd.HDDDFECREGISTR, chcd.HCDCINTERVENCI, cpse.CSVCNOMBRE, chcd.HCDCINTERVEPRA, cpse2.CSVCNOMBRE, chdq.HDQLUSUARIO, chus.husanumeiden ");
			sb.append(" from HISTORIA.CHDETALDESCR chdd ");
			sb.append(" LEFT JOIN HISTORIA.CHDESCRQUIRU chdq ON chdq.HDQLNUMERO = chdd.HDDLNUMERO ");
			sb.append(
					" LEFT JOIN CLINICO.CPPROFESIO cppr ON cppr.CPFNCODIGO = chdd.HDDCANESTESIOL AND cppr.CPFNCLINIC = chdq.HDQNCLINICA ");
			sb.append(
					" LEFT JOIN CLINICO.CPPROFESIO cppr2 ON cppr2.CPFNCODIGO = chdd.HDDCCIRUJANO AND cppr2.CPFNCLINIC = chdq.HDQNCLINICA ");
			sb.append(
					" LEFT JOIN CLINICO.CPPROFESIO cppr3 ON cppr3.CPFNCODIGO = chdd.HDDCAYUDANTE1 AND cppr3.CPFNCLINIC = chdq.HDQNCLINICA ");
			sb.append(" LEFT JOIN HISTORIA.CHCIERREANEST chci ON  chdq.HDQLNUMERO = chci.HCILNUMERO ");
			sb.append(
					" LEFT JOIN HISTORIA.CHCIRDETDESC chcd ON chcd.HCDLNUMERO = chdd.hddlnumero AND chcd.hcdnconsec = chdd.hddnconsec ");
			sb.append(" LEFT JOIN CLINICO.CPSERVICIO cpse ON cpse.CSVCCODIGO = chcd.HCDCINTERVENCI ");
			sb.append(" LEFT JOIN CLINICO.CPSERVICIO cpse2 ON cpse2.CSVCCODIGO = chcd.HCDCINTERVEPRA ");
			sb.append(" LEFT JOIN CLINICO.CHUSUARIO chus ON chus.huslnumero = chdq.HDQLUSUARIO ");
			sb.append(" where chdq.HDQNCLINICA = :codclinica  ");
			sb.append(
					" AND (chdq.HDQDFECREGISTR BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))");

			Query sqlquery = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
					.createQuery(sb.toString());
			sqlquery.setParameter("fechaI", fechaI);
			sqlquery.setParameter("fechaF", fechaF);
			sqlquery.setParameter("codclinica", codclinica);
			resultList = sqlquery.list();

		} catch (HibernateException e) {
			throw new ModelException("Error consultando cirugias:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando cirugias:" + e.getMessage(), e);
		}

		return resultList;
	}

	/**
	 * 
	 * @param servicio
	 * @return
	 * @throws ModelException
	 */
	public List<Clcomserv> getCodigoServiIppf(final String servicio) throws ModelException {
		List<Clcomserv> resultList = null;
		List parametros = new ArrayList();

		try {
			if (servicio != null) {

				StringBuffer sb = new StringBuffer();
				sb.append(" select clco from " + Clcomserv.class.getName() + " clco where clco.codigoexis = ?   ");

				parametros.add(servicio);

				resultList = (List<Clcomserv>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList;
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Codigo IPPF" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Codigo IPPF" + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroUsuario
	 * @return
	 * @throws ModelException
	 */
	public List<Cnconsclin> getFoliosEspermogramaVasectomia(final Long numeroUsuario) throws ModelException {
		List<Cnconsclin> pis = (List<Cnconsclin>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				StringBuffer sb = new StringBuffer();
				sb.append("select cnco from ");
				sb.append(Cnconsclin.class.getName()).append(" cnco ");
				sb.append("WHERE cnco.ccolusuario =  ").append(numeroUsuario);
				sb.append(" AND cnco.ccocestado = 'VG' ");
				sb.append(" AND cnco.ccocservic in (select cpsv.csvccodigo from Cpservicio cpsv ");
				sb.append(" where cpsv.csvntiphis =  :whisespvasec) ");
				sb.append("  order by  cnco.ccodfeccon desc ");

				String hql = sb.toString();

				Query query = session.createQuery(hql);
				query.setParameter("whisespvasec", IConstantes.HISTORIA_CONTROL_VASECTOMIA);

				List<Cnconsclin> pis;
				pis = query.list();

				for (Cnconsclin co : pis) {
					Cpservicio servicio = co.getCcocservic();
					Hibernate.initialize(servicio);

					Chusuario usu = co.getCcolusuario();
					Hibernate.initialize(usu);

				}
				return pis;
			}
		});
		return pis;
	}

	public Cvcontrato getCvcontratoClinica(Integer clinica, Integer contrato) throws ModelException {
		List<Cvcontrato> resultList = null;
		List parametros = new ArrayList();

		try {

			StringBuffer sb = new StringBuffer();
			sb.append(" select cpco from " + Cvcontrato.class.getName()
					+ " cpco WHERE (cpco.id.ccnnclinic = ? OR cpco.id.ccnnclinic = 9)  "
					+ " and cpco.id.ccnnnumero = ? ");
			parametros.add(clinica);
			parametros.add(contrato);

			resultList = (List<Cvcontrato>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			if (!resultList.isEmpty()) {
				return resultList.get(0);
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Contratos clinica :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Contratos Clinica : " + e.getMessage(), e);
		}

	}

	/**
	 * @see ClinicoDaoImp#saveIdentificaRiesgo(identiriesgo) Salvar o modificar
	 *      Identififacion de Riesgos
	 */
	public

			void saveIdentificaRiesgo(Chidentiriesgo identiriesgo) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(identiriesgo);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Identififacion de Riesgos:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Identififacion de Riesgos :" + e.getMessage(), e);
		}
	}

	/*
	 * @param cie10
	 * 
	 * @return
	 * 
	 * @throws ModelException
	 */

	public List<Crdgncie10> getCriteriosIveCie10(Crdgncie10 cie10, boolean bloquearZ) throws ModelException {
		List resultList = null;
		List parametros = new ArrayList();
		try {
			StringBuffer sb = new StringBuffer();
			sb.append("SELECT cie FROM " + Crdgncie10.class.getName()
					+ " cie where cie.cdccestado = 'VG' and  cie.cdccdescri like ? ");
			parametros.add("%" + cie10.getCdccdescri().toUpperCase() + "%");

			if (bloquearZ) {
				sb.append(" and cie.cdcccodigo not like 'Z%'");
			}

			if (cie10.getCdcccodigo() != null && !cie10.getCdcccodigo().equals("")) {
				sb.append(" and cie.cdcccodigo like ?");
				parametros.add("%" + cie10.getCdcccodigo().toUpperCase() + "%");
			}

			if (cie10.getCdccdescri2() != null && !cie10.getCdccdescri2().equals("")) {
				if (cie10.getCdccopera1() != null && cie10.getCdccopera1().equals("OR")) {
					sb.append(" OR cie.cdccdescri like ? ");
					parametros.add("%" + cie10.getCdccdescri2().toUpperCase() + "%");
				} else {
					sb.append(" and cie.cdccdescri like ? ");
					parametros.add("%" + cie10.getCdccdescri2().toUpperCase() + "%");
				}

			}

			if (cie10.getCdccdescri3() != null && !cie10.getCdccdescri3().equals("")) {
				if (cie10.getCdccopera2() != null && cie10.getCdccopera2().equals("OR")) {
					sb.append(" OR cie.cdccdescri like ? ");
					parametros.add("%" + cie10.getCdccdescri3().toUpperCase() + "%");
				} else {
					sb.append(" and cie.cdccdescri like ? ");
					parametros.add("%" + cie10.getCdccdescri3().toUpperCase() + "%");
				}
			}

			resultList = this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

		} catch (HibernateException e) {
			throw new ModelException("Error consultando CIE10 por criterios:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando CIE10 por criterios:" + e.getMessage(), e);
		}
		return resultList;
	}

	/**
	 * @param codigo
	 * @return
	 * @throws ModelException
	 */
	public Crdgncie10 getCIE10IVEPorCodigo(String codigo, boolean bloquearW) throws ModelException {
		List<Crdgncie10> resultList = null;
		List parametros = new ArrayList();

		try {

			if (codigo != null && !codigo.equals("")) {

				StringBuffer sb = new StringBuffer();
				sb.append(" select cie from " + Crdgncie10.class.getName()
						+ " cie  where cie.cdccestado = 'VG' and cie.cdcccodigo = ?   ");

				if (bloquearW) {
					sb.append(" and cie.cdcccodigo not like 'Z%' ");
				}
				parametros.add(codigo);

				resultList = (List<Crdgncie10>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando descripcion CIE10:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando descripcion CIE10:" + e.getMessage(), e);
		}

	}

	/**
	 * @param consulta
	 * @return
	 * @throws ModelException
	 */
	public Chfertdato getFertilidadDatos(Long numeroConsulta) throws ModelException {
		List<Chfertdato> resultList = null;
		List parametros = new ArrayList();

		try {

			if (numeroConsulta != null) {

				StringBuffer sb = new StringBuffer();
				sb.append(" select dat from " + Chfertdato.class.getName() + " dat  where dat.hfdlconsulta = ?  ");
				parametros.add(numeroConsulta);

				resultList = (List<Chfertdato>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Dato de Fertilidad:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Dato de Fertilidad:" + e.getMessage(), e);
		}

	}

	/**
	 * @see ClinicoDaoImp#saveRegistroFertilidad(regferti) Salvar Registro de
	 *      Fertilidad
	 */
	public void saveRegistroFertilidad(Cnregferti regferti) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(regferti);
		} catch (HibernateException e) {
			throw new HibernateException("Error Insertando Registro de Fertilidad:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Registro de Fertilidad:" + e.getMessage(), e);
		}
	}

	/**
	 * @param fechaInicial
	 * @param fechaFinal
	 * @param contrato
	 * @param clinica
	 * @return
	 * @throws ModelException
	 */
	public List<Object[]> getDiagnosticosSrvHabilitados(Date fechaI, Date fechaF, Integer contrato, Integer clinica)
			throws ModelException {
		List resultList = null;

		try {
			if (fechaI != null && fechaF != null) {
				String HORA_INICIAL = " 00:00";
				String HORA_FINAL = " 23:59";

				SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
				String fechaInicial = dateFormat.format(fechaI) + HORA_INICIAL;
				String fechaFinal = dateFormat.format(fechaF) + HORA_FINAL;

				StringBuffer sb = new StringBuffer();
				sb.append(" select clinica, cod_hab, nom_hab, diagpr, nom_diag, total ");
				sb.append(" from (select clinica, cod_hab, nom_hab, ");
				sb.append(
						" row_number() over (partition by clinica, cod_hab, nom_hab order by sum(cantidad) desc, diagpr) elemento, ");
				sb.append(" diagpr, nom_diag, sum(cantidad) total ");
				sb.append(
						" from (select cacnclinic clinica, csvncodhab cod_hab, cchcnombre nom_hab, caccdiagpr diagpr, cdccdescri nom_diag, count(*) cantidad ");
				sb.append(
						" from clinico.crarcconsu, clinico.cnconsclin, clinico.cpservicio, clinico.cpcodihabi, clinico.crdgncie10  ");
				sb.append(
						" where cacdfeccon between TO_DATE(:fechaInicial,'dd/MM/yyyy hh24:mi') and TO_DATE(:fechaFinal,'dd/MM/yyyy hh24:mi') ");
				if (clinica != null && clinica.intValue() != 0) {
					sb.append(" AND cacnclinic = :clinica ");
				}
				sb.append(" and cconnumero = cacnconcli and ccocestado = 'VG' and ccocetapa = 'AT' ");
				if (contrato != null && contrato.intValue() != 0) {
					sb.append(" AND cconcontra = :contrato ");
				}
				sb.append(" and csvccodigo = ccocservic and cchncodigo = csvncodhab and cdcccodigo = caccdiagpr ");
				sb.append(" group by cacnclinic, csvncodhab, cchcnombre, caccdiagpr, cdccdescri ");
				sb.append(
						" union all select capnclinic clinica, csvncodhab cod_hab, cchcnombre nom_hab, capcdiagpr diagpr, cdccdescri nom_diag, count(*) cantidad ");
				sb.append(
						" from clinico.crarcproce, clinico.cnconsclin, clinico.cpservicio, clinico.cpcodihabi, clinico.crdgncie10 ");
				sb.append(
						" where capdfecpro between TO_DATE(:fechaInicial,'dd/MM/yyyy hh24:mi') and TO_DATE(:fechaFinal,'dd/MM/yyyy hh24:mi')  ");
				if (clinica != null && clinica.intValue() != 0) {
					sb.append(" AND capnclinic = :clinica ");
				}
				sb.append(" and cconnumero = capnconcli and ccocestado = 'VG' and ccocetapa = 'AT' ");
				if (contrato != null && contrato.intValue() != 0) {
					sb.append(" AND cconcontra = :contrato ");
				}
				sb.append(" and csvccodigo = ccocservic and cchncodigo = csvncodhab and cdcccodigo = capcdiagpr ");
				sb.append(" group by capnclinic, csvncodhab, cchcnombre, capcdiagpr, cdccdescri ");
				sb.append(
						" union all select cahnclinic clinica, csvncodhab cod_hab, cchcnombre nom_hab, cahcdiagin diagpr, cdccdescri nom_diag, count(*) cantidad ");
				sb.append(
						" from clinico.crarchospi, clinico.cnconsclin, clinico.cpservicio, clinico.cpcodihabi, clinico.crdgncie10 ");
				sb.append(
						" where cahdfecing between TO_DATE(:fechaInicial,'dd/MM/yyyy hh24:mi') and TO_DATE(:fechaFinal,'dd/MM/yyyy hh24:mi')  ");
				if (clinica != null && clinica.intValue() != 0) {
					sb.append(" AND cahnclinic = :clinica ");
				}
				sb.append(" and cconnumero = cahnconcli and ccocestado = 'VG' and ccocetapa = 'AT' ");
				if (contrato != null && contrato.intValue() != 0) {
					sb.append(" AND cconcontra = :contrato ");
				}
				sb.append(" and csvccodigo = ccocservic and cchncodigo = csvncodhab and cdcccodigo = cahcdiagin ");
				sb.append(" group by cahnclinic, csvncodhab, cchcnombre, cahcdiagin, cdccdescri ");
				sb.append(
						" union all select cannclinic clinica, csvncodhab cod_hab, cchcnombre nom_hab, cancdiagno diagpr, cdccdescri nom_diag, count(*) cantidad ");
				sb.append(
						" from clinico.crarcnacid, clinico.cnconsclin, clinico.cpservicio, clinico.cpcodihabi, clinico.crdgncie10  ");
				sb.append(
						" where candfecnac between TO_DATE(:fechaInicial,'dd/MM/yyyy hh24:mi') and TO_DATE(:fechaFinal,'dd/MM/yyyy hh24:mi')  ");
				if (clinica != null && clinica.intValue() != 0) {
					sb.append(" AND cannclinic = :clinica ");
				}
				sb.append(" and cconnumero = cannconcli and ccocestado = 'VG' and ccocetapa = 'AT' ");
				if (contrato != null && contrato.intValue() != 0) {
					sb.append(" AND cconcontra = :contrato ");
				}
				sb.append(" and csvccodigo = ccocservic and cchncodigo = csvncodhab and cdcccodigo = cancdiagno ");
				sb.append(" group by cannclinic, csvncodhab, cchcnombre, cancdiagno, cdccdescri ");

				sb.append(
						" union all select caunclinic clinica, csvncodhab cod_hab, cchcnombre nom_hab, caucdiagsa diagpr, cdccdescri nom_diag, count(*) cantidad ");
				sb.append(
						" from clinico.crarcurgen, clinico.cnconsclin, clinico.cpservicio, clinico.cpcodihabi, clinico.crdgncie10 ");
				sb.append(
						" where caudfecing between TO_DATE(:fechaInicial,'dd/MM/yyyy hh24:mi') and TO_DATE(:fechaFinal,'dd/MM/yyyy hh24:mi')  ");
				if (clinica != null && clinica.intValue() != 0) {
					sb.append(" AND caunclinic = :clinica ");
				}
				sb.append(" and cconnumero = caunconcli and ccocestado = 'VG' and ccocetapa = 'AT' ");
				if (contrato != null && contrato.intValue() != 0) {
					sb.append(" AND cconcontra = :contrato ");
				}
				sb.append(" and csvccodigo = ccocservic and cchncodigo = csvncodhab and cdcccodigo = caucdiagsa ");
				sb.append(" group by caunclinic, csvncodhab, cchcnombre, caucdiagsa, cdccdescri ");
				sb.append(" ) group by clinica, cod_hab, nom_hab, diagpr, nom_diag ");
				sb.append(" order by clinica, cod_hab, nom_hab, sum(cantidad) desc, diagpr, nom_diag ");
				sb.append(" ) where elemento <= 10 order by clinica, cod_hab, nom_hab, total desc ");
				Query sqlquery = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
						.createQuery(sb.toString());
				sqlquery.setParameter("fechaInicial", fechaInicial);
				sqlquery.setParameter("fechaFinal", fechaFinal);
				if (clinica != null && clinica.intValue() != 0) {
					sqlquery.setParameter("clinica", clinica);
				}
				if (contrato != null && contrato.intValue() != 0) {
					sqlquery.setParameter("contrato", contrato);
				}

				resultList = sqlquery.list();

				if (!resultList.isEmpty()) {
					return resultList;
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Reporte Diagnostico Servicio Habilitado:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Reporte Diagnostico Servicio Habilitado: " + e.getMessage(), e);
		}

	}

	/**
	 * @param fechaInicial
	 * @param fechaFinal
	 * @param clinica
	 * @return
	 * @throws ModelException
	 */
	public List<Object[]> getMedicamentoVacuna(Date fechaI, Date fechaF, Integer clinica) throws ModelException {
		List resultList = null;

		try {
			if (fechaI != null && fechaF != null) {
				String HORA_INICIAL = " 00:00";
				String HORA_FINAL = " 23:59";

				SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
				String fechaInicial = dateFormat.format(fechaI) + HORA_INICIAL;
				String fechaFinal = dateFormat.format(fechaF) + HORA_FINAL;

				StringBuffer sb = new StringBuffer();
				sb.append(" select hcodfecinicio, hconclinica, cclcnombre, husetipoiden, husanumeiden, hcocservicio, ");
				sb.append(
						" csvcnombre, hmecmedicament, hmecpresentaci, hmecviadministr, hmecviadminotr, hmeclotemedic, ");
				sb.append(" hmecsitioaplic, hmedfechavenci, hmecadosis, hmecoperador, hmecnomblabo, hthcdescripcio, ");
				sb.append(
						" hmecunidmedi, hmennumervacun, hmecobservac, hmecpresecompl, hmeccualreacc, hmeccualcompl, ");
				sb.append(" hmecpresereacc ");
				sb.append(" from historia.chconsulta, historia.chmedicament, historia.chusuario, clinico.cpclinica, ");
				sb.append(" clinico.cpservicio, historia.chtipohistor  ");
				sb.append(
						" where hcodfecinicio between TO_DATE(:fechaInicial,'dd/MM/yyyy hh24:mi') and TO_DATE(:fechaFinal,'dd/MM/yyyy hh24:mi') ");
				if (clinica != null && clinica.intValue() != 0) {
					sb.append(" AND hconclinica = :clinica ");
				}
				sb.append(" and hmelconsulta = hcolnumero and huslnumero = hcolusuario ");
				sb.append(
						" and cclncodigo = hconclinica and csvccodigo = hcocservicio and hthncodigo = hmentipohisto ");
				Query sqlquery = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
						.createQuery(sb.toString());
				sqlquery.setParameter("fechaInicial", fechaInicial);
				sqlquery.setParameter("fechaFinal", fechaFinal);
				if (clinica != null && clinica.intValue() != 0) {
					sqlquery.setParameter("clinica", clinica);
				}

				resultList = sqlquery.list();

				if (!resultList.isEmpty()) {
					return resultList;
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Reporte Medicamentos Vacunas:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Reporte Medicamentos Vacunas: " + e.getMessage(), e);
		}

	}

	/**
	 * Obtener Lista de Citologias enviadas para lectura.
	 */
	public List getEnvioCitologiaLectura(Integer numero) throws ModelException {

		List resultList = null;

		try {
			StringBuffer sb = new StringBuffer();

			sb.append(" SELECT cnci.ccinconsec, cnci.ccidfecreg, cnci.ccidfeccit, cnci.ccictipide, cnci.ccianumide,");
			sb.append("  cnci.ccicprinom, cnci.ccicsegnom, cnci.ccicpriape, cnci.ccicsegape, cnci.ccinnumero,");
			sb.append("  cnct.ctmcusureg, ccinconsec, ccinclinic, ccictipide, ccianumide, ");
			sb.append("  ccicprinom, ccicsegnom, ccicpriape, ccicsegape, ccinedad, ");
			sb.append("  ccictipafi, ccicasegur, ccidfeccit, ccinnumdoc, ccintipdoc, ");
			sb.append("  ccinnumdoc, ctmctomada, ctmcnomtom, ctmcesquem, ctmdultmen, ");
			sb.append("  ctmdultpar, ctmngestac, ctmnpartos, ctmnaborto, ctmcembara, ");
			sb.append("  ctmnedarel, ctmcmetpla,ctmcotrmet,ctmntiemet,ctmdultcit,");
			sb.append("  ctmcultres,ctmcotrhal,ctmcpningu,ctmcpcaute,ctmdpcaute,");
			sb.append("  ctmcphiste,ctmdphiste,ctmcpconiz, ctmdpconiz,ctmcpradio,");
			sb.append("  ctmdpradio,ctmcpbiops,ctmdpbiops,ctmcpcriot,ctmdpcriot, ");
			sb.append("  ctmcpata,ctmdpata,ctmcpotro,ctmdpotro,ctmcpdotro, ");
			sb.append("  ctmcpvapor,ctmdpvapor,ctmcphormo,ctmdphormo,ctmcaspcue, ");
			sb.append("  ctmcobstom,ctmccomvph,ctmclactan, ctmnnumero");
			sb.append(" FROM clinico.Cncitologi cnci, clinico.Cncitotoma cnct ");
			sb.append(" WHERE cnci.ccinconsec = cnct.ctmnconsec ");
			sb.append(
					" AND cnci.ccinconsec IN ( SELECT chde.hdencitologia FROM historia.Chdetaentcito chde where chde.HDELIDENTREGACITOL = ?) ORDER BY cnci.ccinconsec DESC");
			Query sqlquery = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
					.createQuery(sb.toString());
			sqlquery.setParameter(0, numero);
			resultList = sqlquery.list();

		} catch (HibernateException e) {
			throw new ModelException("Error consultando citologias enviadas:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando citologias enviadas:" + e.getMessage(), e);
		}

		return resultList;
	}

	/**
	 * @param dia
	 * @param codclinica
	 * @param idMedico
	 * @return
	 * @throws ModelException
	 */
	public List<Agendamiento> getMisConsultasDiaAgenda(final Date dia, final Integer codclinica,
			final BigDecimal idMedico) throws ModelException {
		List<Agendamiento> pis = (List<Agendamiento>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {
				String HORA_INICIAL = " 00:00";
				String HORA_FINAL = " 23:59";

				SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
				String fechaI = dateFormat.format(dia) + HORA_INICIAL;
				String fechaF = dateFormat.format(dia) + HORA_FINAL;

				StringBuffer sb = new StringBuffer();
				sb.append("SELECT agen from ");
				sb.append(Agendamiento.class.getName()).append(" agen ");
				sb.append(" WHERE agen.estado = 1 AND agen.estado_agenda = 1 ");
				sb.append(
						" AND (agen.fecha_agenda BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi')) ");
				sb.append(" AND agen.id_sede = :codclinica and agen.id_profesional = :idMedico ");
				sb.append(" order by agen.fecha_agenda, agen.hora_agenda, agen.subagenda  ");
				String hql = sb.toString();

				Query query = session.createQuery(hql);

				query.setParameter("fechaI", fechaI);
				query.setParameter("fechaF", fechaF);
				query.setParameter("idMedico", idMedico);
				query.setParameter("codclinica", codclinica);

				List<Agendamiento> pis;
				pis = query.list();

				for (Agendamiento pi : pis) {
					Cpservicio servicio = pi.getEspecialidad();
					Hibernate.initialize(servicio);
					Chusuario usuario = pi.getId_paciente();
					Hibernate.initialize(usuario);

				}

				return pis;
			}
		});
		return pis;
	}

	public Cnconsclin getConsultaFechaUsuario(final Date fecha, final Integer clinica, final String servicio,
			final Long numusuario) throws ModelException {
		Cnconsclin pis = (Cnconsclin) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				String HORA_INICIAL = " 00:00";
				String HORA_FINAL = " 23:59";

				SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");

				Calendar fechaHoy = Calendar.getInstance();
				fechaHoy.setTime(fecha);
				fechaHoy.add(Calendar.MONTH, -1);
				String fechaI = dateFormat.format(fechaHoy.getTime()) + HORA_INICIAL;
				String fechaF = dateFormat.format(fecha) + HORA_FINAL;

				StringBuffer sb = new StringBuffer();
				sb.append(" select cncl from ").append(Cnconsclin.class.getName());
				sb.append(" cncl  where  cncl.cconclinic = :clinica ");
				sb.append(" and cncl.ccocservic = :servicio  and cncl.ccolusuario = :numusuario ");
				sb.append(
						" AND (cncl.ccodfeccon BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi')) ");

				String hql = sb.toString();
				Query query = session.createQuery(hql);

				query.setParameter("fechaI", fechaI);
				query.setParameter("fechaF", fechaF);
				query.setParameter("clinica", clinica);
				query.setParameter("servicio", servicio);
				query.setParameter("numusuario", numusuario);

				Cnconsclin pis = new Cnconsclin();

				if (!query.list().isEmpty()) {
					pis = (Cnconsclin) query.list().get(0);
				}

				if (pis != null) {
					Cpservicio servicio = pis.getCcocservic();
					Hibernate.initialize(servicio);
					Chusuario usuario = pis.getCcolusuario();
					Hibernate.initialize(usuario);
				}

				return pis;
			}
		});
		return pis;

	}

	/**
	 * @param usuario
	 * @return
	 * @throws ModelException
	 */
	public List<Chregicomp> getRegistroComplementarioUsuario(final Chusuario usuario) throws ModelException {
		List<Chregicomp> pis = (List<Chregicomp>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				if (usuario != null && usuario.getHuslnumero() != null) {
					StringBuffer sb = new StringBuffer();
					sb.append(" select chrp from " + Chregicomp.class.getSimpleName());
					sb.append(" chrp  ");
					sb.append(" where chrp.hrclnumusu = :lnumusu  ");
					sb.append(" order by chrp.hrcdfecreg desc  ");

					String hql = sb.toString();

					Query query = session.createQuery(hql);
					query.setParameter("lnumusu", usuario.getHuslnumero());

					List<Chregicomp> pis;
					pis = query.list();

					if (pis != null && !pis.isEmpty()) {
						return pis;
					}

				}

				return null;
			}

		});
		return pis;
	}

	/**
	 * @param usuario
	 * @return
	 * @throws ModelException
	 */
	public List<Chregitelf> getRegistroTelefonicoUsuario(final Chusuario usuario) throws ModelException {
		List<Chregitelf> pis = (List<Chregitelf>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				if (usuario != null && usuario.getHuslnumero() != null) {
					StringBuffer sb = new StringBuffer();
					sb.append(" select chrt from " + Chregitelf.class.getSimpleName());
					sb.append(" chrt  ");
					sb.append(" where chrt.hrtlnumusu = :lnumusu  ");
					sb.append(" order by chrt.hrtdfecreg desc  ");

					String hql = sb.toString();

					Query query = session.createQuery(hql);
					query.setParameter("lnumusu", usuario.getHuslnumero());

					List<Chregicomp> pis;
					pis = query.list();

					if (pis != null && !pis.isEmpty()) {
						return pis;
					}

				}

				return null;
			}

		});
		return pis;
	}

	/**
	 * @param usuario
	 * @throws ModelException
	 */
	public void saveUsuarioRegistroComplementario(final Chusuario usuario, final String userName)
			throws ModelException {
		// Es el mismo c�digo de saveAsesoria, se separa a fin de no dejarlo acoplado en
		// las capas superiores
		saveUsuarioAsesoria(usuario, userName);
	}

	/**
	 * @param usuario
	 * @throws ModelException
	 */
	public void saveUsuarioRegistroTelefonico(final Chusuario usuario, final String userName) throws ModelException {
		// Es el mismo c�digo de saveAsesoria, se separa a fin de no dejarlo acoplado en
		// las capas superiores
		saveUsuarioAsesoria(usuario, userName);
	}

	/**
	 * @param registroComplementario
	 * @throws ModelException
	 */
	public void saveRegistroComplementario(Chregicomp registroComplementario) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(registroComplementario);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Registro Complementario:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Registro Complementario :" + e.getMessage(), e);
		}
	}

	/**
	 * @param registroTelefonico
	 * @throws ModelException
	 */
	public void saveRegistroTelefonico(Chregitelf registroTelefonico) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(registroTelefonico);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Registro Telefonico:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Registro Telefonico :" + e.getMessage(), e);
		}
	}

	/**
	 * @param numeroAdmision
	 * @return
	 * @throws ModelException
	 */
	public Cfadmision getAdmision(Long numeroAdmision) throws ModelException {
		Cfadmision admision = null;
		List resultList = new ArrayList();

		try {

			if (numeroAdmision != null) {

				StringBuffer sb = new StringBuffer();
				sb.append(" select adm from " + Cfadmision.class.getName() + "  adm where adm.cannumero = ?  ");

				resultList = this.getHibernateTemplate().find(sb.toString(), numeroAdmision);

			}

			if (!resultList.isEmpty()) {
				admision = (Cfadmision) resultList.get(0);
			}

		} catch (HibernateException e) {
			throw new ModelException("Error consultando la admision:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando la admision:" + e.getMessage(), e);
		}

		return admision;

	}

	public List<Cfdetaadmision> getDetalleAdmision(Long numeroAdmision) throws ModelException {
		List<Cfdetaadmision> resultList = null;

		try {

			if (numeroAdmision != null) {

				StringBuffer sb = new StringBuffer();
				sb.append(" select det from " + Cfdetaadmision.class.getName() + "  det where det.id.cdannumadm = ?  ");
				resultList = (List<Cfdetaadmision>) this.getHibernateTemplate().find(sb.toString(), numeroAdmision);

			}
			if (!resultList.isEmpty()) {
				return resultList;
			}

		} catch (HibernateException e) {
			throw new ModelException("Error consultando la admision:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando la admision:" + e.getMessage(), e);
		}
		return resultList;
	}

	public List<Object[]> getInsumosByServicio(String codigoServicio) throws ModelException {
		List<Object[]> resultList = null;

		try {

			if (codigoServicio != null) {

				StringBuffer sb = new StringBuffer();
				sb.append(" select canast.ccsccanasta, canast.ccscservic, serv.csvcnombre from ");
				sb.append(" clinico.Cpcanaserv canast , clinico.Cpservicio serv ");
				sb.append(" where canast.ccsccanasta = :codigoServicio ");
				sb.append(" and canast.ccscservic= serv.csvccodigo ");

				Query sqlquery = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
						.createQuery(sb.toString());
				sqlquery.setParameter("codigoServicio", codigoServicio);
				resultList = sqlquery.list();

			}
			if (!resultList.isEmpty()) {
				return resultList;
			}

		} catch (HibernateException e) {
			throw new ModelException("Error consultando la canastilla:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando la canastilla:" + e.getMessage(), e);
		}
		return resultList;
	}

	public List<Object[]> getRegistroInsumosBynumeroConsulta(Long numeroConsulta) throws ModelException {
		List<Object[]> resultList = null;

		try {

			if (numeroConsulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(
						" select insu.hrinconsulta, insu.hrinconsecuti, insu.hricservicio, insu.hricobserv, insu.hricutilizo,insu.hridfecregistr, serv.csvcnombre from ");
				sb.append(" historia.Chreginsumo insu , clinico.Cpservicio serv ");
				sb.append(" where insu.hrinconsulta = :numeroConsulta ");
				sb.append(" and insu.hricservicio = serv.csvccodigo ");

				Query sqlquery = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
						.createQuery(sb.toString());
				sqlquery.setParameter("numeroConsulta", numeroConsulta);
				resultList = sqlquery.list();

			}
			if (!resultList.isEmpty()) {
				return resultList;
			}

		} catch (HibernateException e) {
			throw new ModelException("Error consultando los insumos para la consulta :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando los insumos para la consulta:" + e.getMessage(), e);
		}
		return resultList;
	}

	public void saveRegistroInsumos(List<Chreginsumo> chreginsumoList) throws ModelException {
		try {
			if (!chreginsumoList.isEmpty()) {
				for (Chreginsumo chreginsumo : chreginsumoList) {
					this.getHibernateTemplate().saveOrUpdate(chreginsumo);
				}
			}

		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Registro de Insumos:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Registro de Insumos:" + e.getMessage(), e);
		}
	}

	public List<Chcauspaus> getListaCausasPausarConsulta() throws ModelException {
		List<Chcauspaus> resultList = null;
		List parametros = new ArrayList();

		try {

			StringBuffer sb = new StringBuffer();
			sb.append(" select caus from " + Chcauspaus.class.getName() + " caus  where caus.ccpcestado = 'VG'  ");

			resultList = (List<Chcauspaus>) this.getHibernateTemplate().find(sb.toString());

			if (!resultList.isEmpty()) {
				return resultList;
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando las causas de pausa de las consultas:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando las causas de pausa de las consultas:" + e.getMessage(), e);
		}

	}

	public void saveRegistroTiempoAtencion(Chtiempaten chtiempaten) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(chtiempaten);

		} catch (HibernateException e) {
			throw new ModelException("Error Insertando el registro:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando el registro:" + e.getMessage(), e);
		}
	}

	public List<Chtiempaten> validacionConsultasAbiertasDelDiaXMedico(Integer codigoMedico) throws ModelException {
		List<Chtiempaten> resultList = null;
		List parametros = new ArrayList();
		String abierto = "AB";

		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		String ftoday = dateFormat.format(new Date());

		try {
			StringBuffer sb = new StringBuffer();
			sb.append(" select tiemp from " + Chtiempaten.class.getName() + " tiemp  where tiemp.ctacetapa = ?  ");
			sb.append(" and tiemp.ctancodmed = ? ");
			sb.append(" and tiemp.ctacestado = 'VG' ");

			parametros.add(abierto);
			parametros.add(codigoMedico);

			resultList = (List<Chtiempaten>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			return resultList;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando las causas de pausa de las consultas:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando las causas de pausa de las consultas:" + e.getMessage(), e);
		}

	}

	public Chtiempaten consultarTiempoAtencionAbiertaXConsulta(Long numConsulta) throws ModelException {
		List<Chtiempaten> resultList = null;
		List parametros = new ArrayList();
		String abierto = "AB";

		try {
			StringBuffer sb = new StringBuffer();
			sb.append(" select tiemp from " + Chtiempaten.class.getName() + " tiemp  where tiemp.ctacetapa = ?  ");
			sb.append(" and tiemp.ctanconsulta = ? ");
			sb.append(" and tiemp.ctacestado = 'VG' ");

			parametros.add(abierto);
			parametros.add(numConsulta);

			resultList = (List<Chtiempaten>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			if (!resultList.isEmpty()) {
				return resultList.get(0);
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando los tiempos de atenci�n:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando los tiempos de atenci�n:" + e.getMessage(), e);
		}

	}

	public List<Chtiempaten> consultarTiempoAtencionVigentesXconsulta(Long numConsulta) throws ModelException {
		List<Chtiempaten> resultList = null;
		List parametros = new ArrayList();

		try {
			StringBuffer sb = new StringBuffer();
			sb.append(" select tiemp from " + Chtiempaten.class.getName() + " tiemp where tiemp.ctanconsulta = ?   ");
			sb.append(" and tiemp.ctacestado = 'VG' ");

			parametros.add(numConsulta);

			resultList = (List<Chtiempaten>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			return resultList;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando los tiempos de atenci�n:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando los tiempos de atenci�n:" + e.getMessage(), e);
		}

	}

	public Chtiempaten consultarTiempoAtencionVigenteXconsulta(Long numConsulta) throws ModelException {
		List<Chtiempaten> resultList = null;
		List parametros = new ArrayList();

		try {
			StringBuffer sb = new StringBuffer();
			sb.append(" select tiemp from " + Chtiempaten.class.getName() + " tiemp where tiemp.ctanconsulta = ?   ");
			sb.append(" and tiemp.ctacestado = 'VG' ");

			parametros.add(numConsulta);

			resultList = (List<Chtiempaten>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			if (!resultList.isEmpty()) {
				return resultList.get(0);
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando los tiempos de atenci�n:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando los tiempos de atenci�n:" + e.getMessage(), e);
		}

	}

	/**
	 * @param servicio
	 * @return
	 * @throws ModelException
	 */
	public List<Cpservicio> getControlesPorCriterios(Cpservicio servicio) throws ModelException {
		List<Cpservicio> resultList = null;
		List parametros = new ArrayList();
		try {

			if (servicio != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select cpse from " + Cpservicio.class.getName() + " cpse  where cpse.csvcestado = 'VG' ");
				/*
				 * + " AND c.csvcswpaqu = 'N'" + " AND c.csvnswtipo = 1 " +
				 * " AND c.csvcsexo IN (:listaSexo) "
				 */
				sb.append("and cpse.csvcswpaqu = 'N' ");
				sb.append("and cpse.csvnswtipo = 1 ");
				sb.append("and cpse.csvntipcon = 99");

				if (servicio.getCsvcsexo() != null && !servicio.getCsvcsexo().equals("")) {
					sb.append(" and cpse.csvcsexo in ('A', ?) ");
					parametros.add(servicio.getCsvcsexo().toUpperCase());
				}

				if (servicio.getCsvccodigo() != null && !servicio.getCsvccodigo().equals("")) {
					sb.append(" and cpse.csvccodigo like ? ");
					parametros.add("%" + servicio.getCsvccodigo().toUpperCase() + "%");
				}

				if (servicio.getCsvcnombre() != null && !servicio.getCsvcnombre().equals("")) {
					sb.append(" and cpse.csvcnombre like ? ");
					parametros.add("%" + servicio.getCsvcnombre().toUpperCase() + "%");
				}

				if (servicio.getCsvcnombre2() != null && !servicio.getCsvcnombre2().equals("")) {

					if (servicio.getCsvcopera1() != null && servicio.getCsvcopera1().equals("OR")) {

						sb.append(" OR cpse.csvcnombre like ? ");
						parametros.add("%" + servicio.getCsvcnombre2().toUpperCase() + "%");
					} else {

						sb.append(" and cpse.csvcnombre like ? ");
						parametros.add("%" + servicio.getCsvcnombre2().toUpperCase() + "%");
					}

				}

				if (servicio.getCsvcnombre3() != null && !servicio.getCsvcnombre3().equals("")) {

					if (servicio.getCsvcopera2() != null && servicio.getCsvcopera2().equals("OR")) {

						sb.append(" OR cpse.csvcnombre like ? ");
						parametros.add("%" + servicio.getCsvcnombre3().toUpperCase() + "%");
					} else {

						sb.append(" and cpse.csvcnombre like ? ");
						parametros.add("%" + servicio.getCsvcnombre3().toUpperCase() + "%");
					}

				}

				resultList = (List<Cpservicio>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList;
				}
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Cirugias:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Cirugias:" + e.getMessage(), e);
		}
	}

	/**
	 * @param servicio
	 * @return
	 * @throws ModelException
	 */
	public List<Cpservicio> getServiciosPorTipoConsulta(Long tipoConsulta) throws ModelException {
		List<Cpservicio> resultList = null;
		List parametros = new ArrayList();
		try {

			if (tipoConsulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select cpse from " + Cpservicio.class.getName() + " cpse  where cpse.csvcestado = 'VG' ");

				sb.append("and cpse.csvcswpaqu = 'N' ");
				sb.append("and cpse.csvnswtipo = 1 ");
				sb.append("and cpse.csvntipcon = ?");
				parametros.add(tipoConsulta);

				resultList = (List<Cpservicio>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList;
				}
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Cirugias:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Cirugias:" + e.getMessage(), e);
		}
	}

	/**
	 * @param numeroConsulta
	 * @return
	 * @throws ModelException
	 */
	public List<Chcontroladi> getControlAdicional(Long numeroConsulta) throws ModelException {
		List<Chcontroladi> resultList = null;
		try {
			if (numeroConsulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chca from " + Chcontroladi.class.getName()
						+ " chca where chca.comp_id.hcalnumero = ? ");
				resultList = (List<Chcontroladi>) this.getHibernateTemplate().find(sb.toString(), numeroConsulta);
			}
			return resultList;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Control Adicional:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Control Adicional: " + e.getMessage(), e);
		}

	}

	/**
	 * @param consclin
	 * @return
	 * @throws ModelException
	 */
	public List<Chcontroladi> getControlAdicional(Cnconsclin consclin) throws ModelException {
		List<Chcontroladi> resultList = null;
		try {
			if (consclin != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chca from " + Chcontroladi.class.getName()
						+ " chca where chca.comp_id.hcalnumero = ? ");
				resultList = (List<Chcontroladi>) this.getHibernateTemplate().find(sb.toString(), consclin.getCconnumero());
			}
			return resultList;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Control Adicional:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Control Adicional:" + e.getMessage(), e);
		}
	}

	public void saveControlAdicional(final Chcontroladi controlAdi) throws ModelException {
		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {
					session.saveOrUpdate(controlAdi);
					return controlAdi;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		}
	}

	/**
	 * @param codigosServicio
	 * @return List<Cpservicio>
	 * @throws ModelException
	 */
	public List<Cpservicio> getServiciosByCodigos(final List<String> codigosServicio) throws ModelException {
		List<Cpservicio> pis = (List<Cpservicio>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {
				StringBuffer sb = new StringBuffer();
				sb.append(" select cpsv from " + Cpservicio.class.getSimpleName());
				sb.append(" cpsv  where cpsv.csvccodigo in (:codigosServicio) ");
				String hql = sb.toString();
				Query query = session.createQuery(hql);
				query.setParameter("codigosServicio", codigosServicio);
				return query.list();
			}

		});
		return pis;
	}

	public List<Object[]> getListaServiciosFactura(Long admision) throws ModelException {
		List<Object[]> resultList = null;

		try {
			if (admision != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select detfac.cdfnnumitem,detfac.cdfnconsfact,detfac.cdfcservicio, ");
				sb.append(" detfac.cdfnorden,detfac.cdfcobserv,detfac.cdfclote,detfac.cdfndescuento, ");
				sb.append(" detfac.cdfniva,detfac.cdfncliente,detfac.cdfnestado,detfac.cdfcpaquet, ");
				sb.append(" detfac.cdfctipdscto,detfac.cdfnvalsrv,detfac.cdfncantidad,detfac.cdfcetapa, ");
				sb.append(
						" detfac.cdfcusuamodi,detfac.cdfdfechmodi,detfac.cdfnconsuclin,detfac.cdfcswitpaq,serv.csvcnombre");
				sb.append(" from clinico.cfdetafactura detfac,cpservicio serv  ");
				sb.append(
						" where serv.csvccodigo = detfac.cdfcservicio and detfac.cdfcswitpaq = 'N' and detfac.cdfnconsfact = (select fac.cfnconsfact from clinico.cffactura fac where fac.cfnadmision = :admision) ");

				Query sqlquery = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
						.createQuery(sb.toString());
				sqlquery.setParameter("admision", admision);
				resultList = sqlquery.list();

			}
			return resultList;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando los servicios de la factura:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando los servicios de la factura:" + e.getMessage(), e);
		}

	}

	public Cnconsclin generarConsultaClinica(final Cnconsclin consulta) throws ModelException {
		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) throws HibernateException {
					BigDecimal secuenciaConsultaClinica = (BigDecimal) session
							.createQuery("SELECT cpco.connnumero FROM clinico.Cpconsec cpco where cpco.conncodigo = "
									+ IConstantes.CCONCOSF + " FOR UPDATE nowait")
							.uniqueResult();

					session.createQuery(
							"update clinico.Cpconsec set connnumero = connnumero + 1  where conncodigo = "
									+ IConstantes.CCONCOSF + " ")
							.executeUpdate();

					if (secuenciaConsultaClinica != null) {
						consulta.setCconnumero(secuenciaConsultaClinica.intValue());
						session.saveOrUpdate(consulta);
					}
					return consulta;
				}
			});
			return consulta;
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		}

	}

	public void saveDetalleFactura(final List<Cfdetafactura> cfdetafacturaList, final Long numeroAdmision)
			throws ModelException {
		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {
					for (Cfdetafactura detalle : cfdetafacturaList) {
						if (detalle.getCdfnconsuclin() != null) {
							StringBuffer sbAda = new StringBuffer();
							sbAda.append(
									" update clinico.CFDETAFACTURA ccdf1  set ccdf1.CDFNCONSUCLIN = :numeroConsultaClinica ");
							sbAda.append(" where (ccdf1.CDFNCONSFACT, ccdf1.CDFNNUMITEM) in( ");
							sbAda.append(" select ccdf.CDFNCONSFACT, ccdf.CDFNNUMITEM ");
							sbAda.append(" from clinico.CFFACTURA ccfa, clinico.CFDETAFACTURA ccdf ");
							sbAda.append(" where ccfa.CFNCONSFACT = ccdf.CDFNCONSFACT ");
							sbAda.append(" and ccfa.CFNADMISION = :wadmision ");
							sbAda.append(" and ccdf.CDFCSERVICIO = :wservicio ) ");

							Query queryAda = session.createQuery(sbAda.toString());
							queryAda.setParameter("wadmision", numeroAdmision);
							queryAda.setParameter("wservicio", detalle.getCdfcservicio());
							queryAda.setParameter("numeroConsultaClinica", detalle.getCdfnconsuclin());
							queryAda.executeUpdate();
						}
					}
					return cfdetafacturaList;

				}
			});

		} catch (HibernateException e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		}

	}

	public List<Cpprofesio> getProfesionalXClinica(final Long clinica) throws ModelException {
		List<Cpprofesio> lista = (List<Cpprofesio>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {
				StringBuffer sb = new StringBuffer();
				sb.append(" select prof from " + Cpprofesio.class.getSimpleName());
				sb.append(" prof  where prof.id.cpfnclinic = :clinica ");
				sb.append(" and prof.cpfcestado ='VG' ");
				String hql = sb.toString();
				Query query = session.createQuery(hql);
				query.setParameter("clinica", clinica);
				return query.list();
			}
		});
		return lista;
	}

	public Chgeslabor getLaboratorioXClinica(final Long clinica) throws ModelException {
		List<Chgeslabor> lista = (List<Chgeslabor>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {
				StringBuffer sb = new StringBuffer();
				sb.append(" select lbt from " + Chgeslabor.class.getName());
				sb.append(" lbt  where lbt.hglnclinica = :clinica ");
				sb.append(" and lbt.hglcestado ='VG' ");
				String hql = sb.toString();
				Query query = session.createQuery(hql);
				query.setParameter("clinica", clinica);
				return query.list();
			}
		});

		if (!lista.isEmpty()) {
			return lista.get(0);
		} else {
			return null;
		}
	}

	public void saveLaboratorio(final Chgeslabor chgeslabor) throws ModelException {
		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {
					session.saveOrUpdate(chgeslabor);
					return chgeslabor;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		}
	}

	public List<Cnconsclin> getConsultasDiaXNumIden(final Integer codclinica, final BigDecimal idMedico,
			final String numIden) throws ModelException {
		List<Cnconsclin> pis = (List<Cnconsclin>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {
				String HORA_INICIAL = " 00:00";
				String HORA_FINAL = " 23:59";

				Date fechaInicial = new Date();
				Date fechaFinal = new Date();

				Calendar cal = Calendar.getInstance();
				cal.setTime(fechaFinal);
				cal.add(Calendar.MONTH, -2);
				fechaInicial = cal.getTime();

				SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
				String fechaI = dateFormat.format(fechaInicial) + HORA_INICIAL;
				String fechaF = dateFormat.format(fechaFinal) + HORA_FINAL;

				Chprioxmedi wprioaux = null;
				boolean wprior = false;

				// VERIFICAMOS QUE EL USUARIO ATIENDE SOLO CONSULTAS PRIORITARIAS
				StringBuffer sb0 = new StringBuffer();
				sb0.append("SELECT chpm from ");
				sb0.append(Chprioxmedi.class.getName()).append(" chpm ");
				sb0.append("WHERE chpm.id.hpmncodigprofe = ? ");
				sb0.append(" AND chpm.id.hpmncodigclini = ? ");

				String hql1 = sb0.toString();

				Query query0 = session.createQuery(hql1);
				query0.setParameter(0, idMedico);
				query0.setParameter(1, codclinica);

				wprioaux = (Chprioxmedi) query0.uniqueResult();

				if (wprioaux != null) {
					wprior = true;
				}

				StringBuffer sb = new StringBuffer();
				sb.append("SELECT cncl from ");
				sb.append(Cnconsclin.class.getName()).append(" cncl ");
				sb.append(" WHERE cncl.ccocestado = 'VG' AND cncl.ccocetapa IN ('ES','EC')");
				sb.append(
						" AND (cncl.ccodfeccon BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))");
				sb.append(" AND cncl.cconclinic = :codclinica ");
				sb.append(" AND cncl.ccoanumide = :numIden ");
				sb.append(" AND cncl.ccontipdoc not in (30) ");
				sb.append(" AND cncl.ccocservic.csvccodigo not in ('S898001.0','S898001.1','S898001.4')");
				sb.append(" AND cncl.ccocservic.csvntiphis not in (0,10,25,60)");
				sb.append(" AND cncl.ccocservic.csvntipcon  in (1,3,4,5,12,98,99) ");
				sb.append(
						" AND cncl.cconnumero not in (select cnpc.id.cpnnconcli from Cnprofxcon cnpc where cnpc.id.cpnnconcli =  cncl.cconnumero and cnpc.cpnnclinic = :codclinica and cnpc.cpncestado!= 'XX'  ) ");
				sb.append(
						" AND cncl.cconnumero not in (select chco.hcolconsuclini from Chconsulta chco where chco.hcolconsuclini =  cncl.cconnumero and chco.hconclinica = :codclinica and chco.hcoeetapa = 'CE') ");
				sb.append(" AND cncl.ccocservic.csvccodigo in  (SELECT cptp.id.ctacservic from ");
				sb.append(Cptarxprof.class.getName()).append(
						" cptp where cptp.id.ctanprofes = :idMedico and cptp.id.ctanclinic  = :codclinica and cptp.ctacestado = :tarxEstado ");
				if (wprior) {
					sb.append(" AND  cptp.ctacpriori  = 'S'  ");
				}
				sb.append(" ) ");

				sb.append(" order by cncl.ccothorcon asc  ");

				String hql = sb.toString();

				Query query = session.createQuery(hql);

				query.setParameter("fechaI", fechaI);
				query.setParameter("fechaF", fechaF);
				query.setParameter("codclinica", codclinica);
				query.setParameter("idMedico", idMedico);
				query.setParameter("codclinica", codclinica);
				query.setParameter("tarxEstado", IConstantes.ESTADO_VIGENTE);
				query.setParameter("numIden", numIden);

				List<Cnconsclin> pis;
				pis = query.list();

				StringBuffer sb2 = new StringBuffer();
				sb2.append("SELECT cncl from ");
				sb2.append(Cnconsclin.class.getName()).append(" cncl ");
				sb2.append(" WHERE cncl.ccocestado = 'VG' AND cncl.ccocetapa IN ('ES','EC')");
				sb2.append(
						" AND (cncl.ccodfeccon BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))");
				sb2.append(" AND cncl.cconclinic = :codclinica ");
				sb.append("  AND cncl.ccoanumide = :numIden ");
				sb2.append(" AND cncl.ccontipdoc not in (30) ");
				sb2.append(" AND cncl.ccocservic.csvccodigo not in ('S898001.0','S898001.1','S898001.4')");
				sb2.append(" AND cncl.ccocservic.csvntiphis  in (60)");
				sb2.append(" AND cncl.ccocservic.csvntipcon  in (1,3,4,5,12,98,99) ");
				sb2.append(" AND cncl.cconnumdoc  in (select cnco1.cconnumdoc from ");
				sb2.append(Cnconsclin.class.getName()).append(" cnco1 ");
				sb2.append(" WHERE cnco1.ccocestado = 'VG' AND cnco1.ccocetapa IN ('ES','EC')");
				sb2.append(" AND cnco1.ccocservic.csvntiphis  in (26)");
				sb2.append(" AND cnco1.ccoanumide = :numIden ");
				sb2.append(
						" AND (cnco1.ccodfeccon BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi')))");
				sb2.append(
						" AND cncl.cconnumero not in (select cnpc.id.cpnnconcli from Cnprofxcon cnpc where cnpc.id.cpnnconcli =  cncl.cconnumero and cnpc.cpnnclinic = :codclinica and cnpc.cpncestado!= 'XX'  ) ");
				sb2.append(
						" AND cncl.cconnumero not in (select chco.hcolconsuclini from Chconsulta chco where chco.hcolconsuclini =  cncl.cconnumero and chco.hconclinica = :codclinica and chco.hcoeetapa = 'CE') ");
				sb2.append(" AND cncl.ccocservic.csvccodigo in  (SELECT cptp.id.ctacservic from ");
				sb2.append(Cptarxprof.class.getName()).append(
						" cptp where cptp.id.ctanprofes = :idMedico and cptp.id.ctanclinic  = :codclinica and cptp.ctacestado = :tarxEstado ");

				if (wprior) {
					sb.append(" AND  cptp.ctacpriori  = 'S'  ");
				}
				sb2.append(" ) ");

				sb2.append(" order by cncl.ccothorcon asc  ");

				String hq2 = sb2.toString();

				Query query2 = session.createQuery(hq2);

				query2.setParameter("fechaI", fechaI);
				query2.setParameter("fechaF", fechaF);
				query2.setParameter("codclinica", codclinica);
				query2.setParameter("idMedico", idMedico);
				query2.setParameter("codclinica", codclinica);
				query2.setParameter("tarxEstado", IConstantes.ESTADO_VIGENTE);
				query2.setParameter("numIden", numIden);

				List<Cnconsclin> pis2;
				pis2 = query2.list();
				for (Cnconsclin pi : pis) {
					Cpservicio servicio = pi.getCcocservic();
					Hibernate.initialize(servicio);
					Cptipodocu tipo = pi.getCcontipdoc();
					Hibernate.initialize(tipo);

				}
				if (pis != null && !pis.isEmpty() && pis2 != null && !pis2.isEmpty()) {
					for (Cnconsclin pi : pis2) {
						Cpservicio servicio = pi.getCcocservic();
						Hibernate.initialize(servicio);
						Cptipodocu tipo = pi.getCcontipdoc();
						Hibernate.initialize(tipo);
					}
					pis.addAll(pis2);
				}

				return pis;
			}
		});
		return pis;
	}

	public void updateConsultaClinicaAgendamiento(final Agendamiento agendamiento) throws ModelException {
		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {

					if (agendamiento != null) {
						session.update(agendamiento);
					}
					return agendamiento;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		}
	}

	/**
	 * @param lectura
	 * @throws ModelException
	 */
	public void saveLecturaVph(final Cncitovphlect lectura, final Cnconsclin consulta, final String userName,
			final String codigoProfesional) throws ModelException {
		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {
					Date fechaConsClin;
					Calendar calendar = Calendar.getInstance();
					fechaConsClin = calendar.getTime();
					session.saveOrUpdate(lectura);
					if (consulta != null) {
						consulta.setCcothorate(new Date());
						consulta.setCcocetapa(IConstantes.ETAPA_ATENDIDO);
						consulta.setCcocusumod(userName);
						// Cambiamos el estado de la consulta x clinica a atendida
						session.update(consulta);

						List lstHonorarios = null;
						if (consulta != null) {
							consulta.setCcothorate(new Date());
							consulta.setCcocetapa(IConstantes.ETAPA_ATENDIDO);
							consulta.setCcocusumod(userName);
							// Cambiamos el estado de la consulta x clinica a atendida
							session.update(consulta);

							if (consulta != null) {

								StringBuffer sb5 = new StringBuffer();
								sb5.append(" select cnpc from " + Cnprofxcon.class.getName()
										+ " cnpc  where cnpc.id.cpnnconcli = :cpnnconcli AND cnpc.cpncestado != 'XX'  ");
								Query query5 = session.createQuery(sb5.toString());
								query5.setParameter("cpnnconcli", consulta.getCconnumero());

								lstHonorarios = query5.list();

							}

							if (consulta != null && lstHonorarios != null && lstHonorarios.size() == 0) {
								consulta.setCcodfeccon(fechaConsClin);

								generarHonorariosProfesionalVPH(session, consulta, userName, null);

							}

						}

					}
					return lectura;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Lectura Vph:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Lectura Vph:" + e.getMessage(), e);
		}
	}

	/**
	 * @param lectura
	 * @throws ModelException
	 */
	public void saveLecturaVphCitologia(Cncitovphlect lectura) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(lectura);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Lectura Vph Citolog�a:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Lectura Vph Citolog�a:" + e.getMessage(), e);
		}
	}

	/**
	 * @param consecutivo
	 * @return
	 * @throws ModelException
	 */
	public Chvphlect getLecturaVph(Integer consecutivo) throws ModelException {
		List<Chvphlect> resultList = null;
		List parametros = new ArrayList();

		try {
			if (consecutivo != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chvl from " + Chvphlect.class.getName() + " chvl  where chvl.hvlnconsec = ?  ");
				parametros.add(consecutivo);
				resultList = (List<Chvphlect>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

				return null;
			} else {
				return null;
			}

		} catch (HibernateException e) {
			throw new ModelException("Error Obteniendo Lectura VPH :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Obteniendo Lectura VPH:" + e.getMessage(), e);
		}

	}

	/**
	 * @param consecutivo
	 * @return
	 * @throws ModelException
	 */
	public Chvphcitolect getLecturaVphCitologia(Integer consecutivo) throws ModelException {
		List<Chvphcitolect> resultList = null;
		List parametros = new ArrayList();

		try {
			if (consecutivo != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chvc from " + Chvphcitolect.class.getName() + " chvc  where chvc.hvcnconsec = ?  ");
				parametros.add(consecutivo);
				resultList = (List<Chvphcitolect>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

				return null;
			} else {
				return null;
			}

		} catch (HibernateException e) {
			throw new ModelException("Error Obteniendo Lectura VPH :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Obteniendo Lectura VPH:" + e.getMessage(), e);
		}

	}

	/**
	 * @param consulta
	 * @throws ModelException
	 */
	public void closeLecturaVph(Chconsulta consulta) throws ModelException {
		boolean wexito = true;
		if (consulta != null && consulta.getHcolnumero() != null) {
			consulta.setHcoeetapa(IConstantes.ETAPA_CERRADA);
			consulta.setHcodfeccierre(new Date());
		} else {
			wexito = false;
		}

		if (wexito) {
			// Cambiamos el estado de la consulta a cerrado
			this.getHibernateTemplate().update(consulta);

		}
	}

	/**
	 * @param consecutivo
	 * @return
	 * @throws ModelException
	 */
	public Chdatosvph getEncabezadoVph(Integer consecutivo) throws ModelException {
		List<Chdatosvph> resultList = null;
		List parametros = new ArrayList();

		try {
			if (consecutivo != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chdv from " + Chdatosvph.class.getName() + " chdv  where chdv.hdvnconsec = ?  ");
				parametros.add(consecutivo);
				resultList = (List<Chdatosvph>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

				return null;
			} else {
				return null;
			}

		} catch (HibernateException e) {
			throw new ModelException("Error Obteniendo Encabezado Vph :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Obteniendo Encabezado Vph:" + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroUsuario
	 * @return
	 * @throws ModelException
	 */
	public List getCopiaVph(Long numeroUsuario) throws ModelException {

		List resultList = null;

		try {
			if (numeroUsuario != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(
						" select cnci.ccinconsec, cnci.ccinnumero, cnci.ccictipide, cnci.ccianumide, cnci.ccicprinom, NVL(cnci.ccicsegnom,'--'), cnci.ccicpriape, NVL(cnci.ccicsegape,'--'),cnct.ctmdfectom,cncl.ccvdfecreg   ");
				sb.append(" from clinico.cncitologi cnci ");
				sb.append(" LEFT JOIN clinico.cncitotoma cnct  ON  cnci.ccinconsec = cnct.ctmnconsec  ");
				sb.append(" LEFT JOIN  clinico.cncitovphlect cncl ON cnci.ccinconsec = cncl.ccvnconsec  ");
				sb.append(" where ccilusuario = ? ");
				sb.append(" AND ccintiphis in (50,53)");
				sb.append(" order by cnct.ctmdfectom desc  ");

				Query query = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
						.createQuery(sb.toString());
				query.setParameter(0, numeroUsuario);

				resultList = query.list();

				if (!resultList.isEmpty()) {
					return resultList;
				}

				return null;
			} else {
				return null;
			}
		} catch (HibernateException e) {
			throw new ModelException("Error obteniendo copia de vph :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error obteniendo copia de vph:" + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroUsuario
	 * @return
	 * @throws ModelException
	 */
	public List<Chconsulta> getVphLectura(final Long numeroUsuario) throws ModelException {
		List<Chconsulta> pis = (List<Chconsulta>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				StringBuffer sb = new StringBuffer();
				sb.append("select chco from ");
				sb.append(Chconsulta.class.getName()).append(" chco ");
				sb.append("WHERE chco.hcoeetapa = 'AB' and chco.hcolusuario.huslnumero =  ").append(numeroUsuario);
				sb.append(" and chco.hcocservicio.csvntiphis = 49 ");
				sb.append("  order by  chco.hcodfecregistr ");

				String hql = sb.toString();

				Query query = session.createQuery(hql);
				List<Chconsulta> pis;
				pis = query.list();

				for (Chconsulta co : pis) {
					Cpservicio servicio = co.getHcocservicio();
					Hibernate.initialize(servicio);

					Chusuario usu = co.getHcolusuario();
					Hibernate.initialize(usu);
				}

				return pis;
			}
		});
		return pis;
	}

	public List<Chconsulta> getVphLecturaMod(final Long numeroUsuario) throws ModelException {
		List<Chconsulta> pis = (List<Chconsulta>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				StringBuffer sb = new StringBuffer();
				sb.append("select chco from ");
				sb.append(Chconsulta.class.getName()).append(" chco ");
				sb.append("WHERE chco.hcoeetapa = 'AB' and chco.hcolusuario.huslnumero =  ").append(numeroUsuario);
				sb.append(" and chco.hcocservicio.csvntiphis = 49 ");
				sb.append("  order by  chco.hcodfecregistr ");

				String hql = sb.toString();

				Query query = session.createQuery(hql);
				List<Chconsulta> pis;
				pis = query.list();

				for (Chconsulta co : pis) {
					Cpservicio servicio = co.getHcocservicio();
					Hibernate.initialize(servicio);

					Chusuario usu = co.getHcolusuario();
					Hibernate.initialize(usu);
				}

				return pis;
			}
		});
		return pis;
	}

	/**
	 * @param usuario
	 * @return
	 * @throws ModelException
	 */
	public List<Chdatosvph> getUsuariosVph(final Chusuario usuario) throws ModelException {
		List<Chdatosvph> pis = (List<Chdatosvph>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				StringBuffer sb = new StringBuffer();
				sb.append(" select chdv from " + Chdatosvph.class.getName() + " chdv where chdv.hdvlusuario!= 0 ");

				if (usuario.getHusetipoiden() != null && !usuario.getHusetipoiden().equals("")) {
					sb.append(" AND chdv.hdvlusuario.husetipoiden =  ").append("'" + usuario.getHusetipoiden() + "'");

				}

				if (usuario.getHusanumeiden() != null && !usuario.getHusanumeiden().equals("")) {
					sb.append(" and chdv.hdvlusuario.husanumeiden = ").append(usuario.getHusanumeiden());

				}

				if (usuario.getHuscprimernomb() != null && !usuario.getHuscprimernomb().equals("")) {
					sb.append(" and chdv.hdvlusuario.huscprimernomb like   ")
							.append("'%" + usuario.getHuscprimernomb().toUpperCase() + "%'");
				}

				if (usuario.getHuscsegundnomb() != null && !usuario.getHuscsegundnomb().equals("")) {
					sb.append(" and chdv.hdvlusuario.huscsegundnomb like   ")
							.append("'%" + usuario.getHuscsegundnomb().toUpperCase() + "%'");
				}

				if (usuario.getHuscprimerapel() != null && !usuario.getHuscprimerapel().equals("")) {
					sb.append(" and chdv.hdvlusuario.huscprimerapel like   ")
							.append("'%" + usuario.getHuscprimerapel().toUpperCase() + "%'");
				}

				if (usuario.getHuscsegundapel() != null && !usuario.getHuscsegundapel().equals("")) {
					sb.append(" and chdv.hdvlusuario.huscsegundapel like   ")
							.append("'%" + usuario.getHuscsegundapel().toUpperCase() + "%'");
				}

				sb.append(" order by chdv.hdvdfecreg desc ");

				String hql = sb.toString();

				Query query = session.createQuery(hql);
				List<Cncitologi> pis;
				pis = query.list();

				for (Cncitologi co : pis) {
					Chusuario usu = co.getCcilusuario();
					Hibernate.initialize(usu);
				}

				return pis;
			}
		});
		return pis;
	}

	/**
	 * @param consulta
	 * @return
	 * @throws ModelException
	 */
	public Chdatosvph getUsuarioVph(Chconsulta consulta) throws ModelException {
		List<Chdatosvph> resultList = null;
		List parametros = new ArrayList();

		try {
			if (consulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chdv from " + Chdatosvph.class.getName() + " chdv  where chdv.hdvlconcli = ?  ");
				parametros.add(consulta.getHcolnumero());
				resultList = (List<Chdatosvph>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

				return null;
			} else {
				return null;
			}

		} catch (HibernateException e) {
			throw new ModelException("Error Obteniendo Usuario Citologia :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Obteniendo Usuario Citologia:" + e.getMessage(), e);
		}

	}

	public List<Cpparametr> getListaDescripcionesParametro(String cpccampo) throws ModelException {
		List<Cpparametr> resultList = null;
		List parametros = new ArrayList();
		try {

			StringBuffer sb = new StringBuffer();
			sb.append(" select cppm from " + Cpparametr.class.getName()
					+ " cppm where cppm.comp_id.cpccampo = ? and cppm.cpcestado = ? ");
			parametros.add(cpccampo);
			parametros.add(IConstantes.ESTADO_VIGENTE);

			resultList = (List<Cpparametr>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			if (!resultList.isEmpty()) {
				return resultList;
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Descripciones Parametros:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Descripciones Parametros:" + e.getMessage(), e);
		}

	}

	/**
	 * Obtener Lista de Vphs para lectura.
	 */
	public List getVphLectura(Date fechaInicial, Date fechafinal, int codCentro, String tipoLectura)
			throws ModelException {

		List resultList = null;

		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		String fechaI = dateFormat.format(fechaInicial.getTime()) + HORA_INICIAL;
		String fechaF = dateFormat.format(fechafinal.getTime()) + HORA_FINAL;

		try {
			StringBuffer sb = new StringBuffer();

			sb.append(" SELECT chdv.hdvnconsec, chdv.hdvdfecreg, chdv.hdvdfecdvt, chdv.hdvctipide, chdv.hdvanumide,");
			sb.append("  chdv.hdvcprinom, chdv.hdvcsegnom, chdv.hdvcpriape, chdv.hdvcsegape, chdv.hdvnnumero,");
			sb.append("  chvt.hvtcusureg, chdv.hdvnconsec, chdv.hdvnclinic, chdv.hdvctipide, chdv.hdvanumide, ");
			sb.append("  chdv.hdvcprinom, chdv.hdvcsegnom, chdv.hdvcpriape, chdv.hdvcsegape, chdv.hdvnedad, ");
			sb.append("  chdv.hdvctipafi, chdv.hdvcasegur, chdv.hdvdfecdvt, chdv.hdvnnumdoc, chdv.hdvntipdoc, ");
			sb.append("  chdv.hdvnnumdoc, chvt.hvtctomada, chvt.hvtcnomtom, chvt.hvtcesquem, chvt.hvtdultmen, ");
			sb.append("  chvt.hvtdultpar, chvt.hvtngestac, chvt.hvtnpartos, chvt.hvtnaborto, chvt.hvtcembara, ");
			sb.append("  chvt.hvtnedarel, chvt.hvtcmetpla, chvt.hvtcotrmet, chvt.hvtntiemet, chvt.hvtdultcit,");
			sb.append("  chvt.hvtcultres, chvt.hvtcotrhal, chvt.hvtcpningu, chvt.hvtcpcaute, chvt.hvtdpcaute,");
			sb.append("  chvt.hvtcphiste, chvt.hvtdphiste, chvt.hvtcpconiz, chvt.hvtdpconiz, chvt.hvtcpradio,");
			sb.append("  chvt.hvtdpradio, chvt.hvtcpbiops, chvt.hvtdpbiops, chvt.hvtcpcriot, chvt.hvtdpcriot, ");
			sb.append("  chvt.hvtcpata, chvt.hvtdpata, chvt.hvtcpotro, chvt.hvtdpotro, chvt.hvtcpdotro, ");
			sb.append("  chvt.hvtcpvapor, chvt.hvtdpvapor, chvt.hvtcphormo, chvt.hvtdphormo, chvt.hvtcaspcue, ");
			sb.append("  chvt.hvtcobstom, chvt.hvtccomvph, chvt.hvtclactan,  chvt.hvtnnumero");
			sb.append(" FROM historia.chdatosvph chdv, historia.chvphtoma chvt ");

			sb.append(" WHERE chdv.hdvnconsec = chvt.hvtnconsec ");
			sb.append(
					" AND (chdv.hdvdfecreg BETWEEN TO_DATE(?,'dd/MM/yyyy hh24:mi') AND TO_DATE(?,'dd/MM/yyyy hh24:mi'))  AND chdv.hdvnclinic = ? ");

			sb.append(
					" AND chdv.hdvnconsec NOT IN ( SELECT chde.hdenvph FROM historia.Chdetaentvph chde) ORDER BY chdv.hdvnconsec DESC");

			Query sqlquery = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
					.createQuery(sb.toString());
			sqlquery.setParameter(0, fechaI);
			sqlquery.setParameter(1, fechaF);
			sqlquery.setParameter(2, codCentro);
			resultList = sqlquery.list();

		} catch (HibernateException e) {
			throw new ModelException("Error consultando vphs:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando vphs:" + e.getMessage(), e);
		}

		return resultList;
	}

	/**
	 * @see ClinicoDaoImp#saveListaEntregVph(entregavph) Salvar o modificar listado
	 *      de citologias a entregar
	 */
	public Long saveListaEntregaVph(Chentregavph entregavph) throws ModelException {
		this.getHibernateTemplate().getSessionFactory();
		SessionFactory sessionFactory = this.getHibernateTemplate().getSessionFactory();
		Session session = sessionFactory.openSession();
		Transaction tx = session.beginTransaction();

		Long secuenciaActual = 0L;

		try {

			if (entregavph.getHevlidentificador() == null) {
				session.saveOrUpdate(entregavph);
				StringBuffer sb = new StringBuffer();
				sb.append("SELECT HISTORIA.SEC_CHENTREGAVPH.CURRVAL FROM DUAL");
				String hql = sb.toString();
				Query query = session.createQuery(hql);
				secuenciaActual = ((BigDecimal) query.uniqueResult()).longValue();
			} else {
				StringBuffer sb = new StringBuffer();
				sb.append("DELETE FROM historia.chdetaentvph chde WHERE chde.hdelidentregavph = :id");
				Query query = session.createQuery(sb.toString());
				query.setLong("id", entregavph.getHevlidentificador());
				int rowCount = query.executeUpdate();
				session.saveOrUpdate(entregavph);
				secuenciaActual = entregavph.getHevlidentificador();
			}
			for (Chdetaentvph chdetaentvph : (Set<Chdetaentvph>) entregavph.getChdetaentvphs()) {
				chdetaentvph.getComp_id().setHdelidentregavph(secuenciaActual);
				session.saveOrUpdate(chdetaentvph);
			}

		} catch (HibernateException e) {
			tx.rollback();
			throw new ModelException("Error Registrando Listado de Entrega:" + e.getMessage(), e);
		} catch (Exception e) {
			tx.rollback();
			throw new ModelException("Error Registrando Listado de Entrega:" + e.getMessage(), e);
		} finally {
			try {
				tx.commit();
			} catch (Exception e) {
				throw new ModelException("Error confirmando Transaccion" + e.getMessage(), e);
			} finally {
				session.close();
			}
		}

		return secuenciaActual;
	}

	/**
	 * @param citologia
	 * @return
	 * @throws ModelException
	 */
	public List<Chdatosvph> getVphsParaEntregar(Chdatosvph chdatosvph) throws ModelException {
		List<Chdatosvph> resultList = null;
		List parametros = new ArrayList();

		try {
			if (chdatosvph != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chdv from " + Chdatosvph.class.getName() + " chdv  where chdv.hdvcentreg = 'N'  ");
				if (chdatosvph != null) {

					if (chdatosvph.getHdvanumide() != null) {
						sb.append(" and chdv.hdvanumide = ? ");
						parametros.add(chdatosvph.getHdvanumide());
					}

					if (chdatosvph.getHdvctipide() != null && !chdatosvph.getHdvctipide().equals("")) {
						sb.append(" and chdv.hdvctipide = ? ");
						parametros.add(chdatosvph.getHdvctipide());
					}

					if (chdatosvph.getHdvnconsec() != null) {
						sb.append(" and chdv.hdvnconsec = ? ");
						parametros.add(chdatosvph.getHdvnconsec());
					}

					sb.append(" order by chdv.hdvdfecreg desc  ");

				}

				resultList = (List<Chdatosvph>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {

					for (Chdatosvph vph : resultList) {
						Chusuario usuario = vph.getHdvlusuario();
						Hibernate.initialize(usuario);
					}

					return resultList;
				}

				return null;
			} else {
				return null;
			}

		} catch (HibernateException e) {
			throw new ModelException("Error Obteniendo Vph para Entregar :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Obteniendo Vph para Entregar :" + e.getMessage(), e);
		}

	}

	/**
	 * @param vph
	 * @throws ModelException
	 */
	public void entregarVph(final Chdatosvph chdatosvph, final Chlibrovph libro) throws ModelException {
		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {

					if (chdatosvph != null) {
						chdatosvph.setHdvdfecent(new Date());
						chdatosvph.setHdvcentreg("S");
					}

					session.update(chdatosvph);
					session.saveOrUpdate(libro);

					return chdatosvph;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		}
	}

	/**
	 * @param consecutivo
	 * @return
	 * @throws ModelException
	 */
	public Chlibrovph getLibroVph(Integer consecutivo) throws ModelException {
		List<Chlibrovph> resultList = null;
		List parametros = new ArrayList();

		try {
			if (consecutivo != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chlv from " + Chlibrovph.class.getName() + " chlv where chlv.hlvnconsec = ?  ");
				parametros.add(consecutivo);
				resultList = (List<Chlibrovph>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

				return null;
			} else {
				return null;
			}

		} catch (HibernateException e) {
			throw new ModelException("Error Obteniendo Libro Vph :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Obteniendo Libro Vph:" + e.getMessage(), e);
		}

	}

	/**
	 * @return
	 * @throws ModelException
	 */
	public List<Cpparentes> getParentescos() throws ModelException {
		List resultList = null;
		try {
			resultList = this.getSession()
					.createQuery(
							"SELECT c " + "FROM Cpparentes AS c where c.cpacestado = 'CF' " + "ORDER BY c.cpacdescrip ")
					.list();
		} catch (HibernateException e) {
			throw new ModelException("Error consultando estados civiles:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando estados civiles:" + e.getMessage(), e);
		}
		return resultList;
	}

	/**
	 * @return
	 * @throws ModelException
	 */
	public List<Cpestadciv> getEstadosCiviles() throws ModelException {
		List resultList = null;
		try {
			resultList = this.getSession()
					.createQuery(
							"SELECT c " + "FROM Cpestadciv AS c where c.ceccestado = 'VG' " + "ORDER BY c.ceccdescri ")
					.list();
		} catch (HibernateException e) {
			throw new ModelException("Error consultando estados civiles:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando estados civiles:" + e.getMessage(), e);
		}
		return resultList;
	}

	public void saveNovedadAdmision(final Cfdetaadmision detaadmision, final Cfdetafactura detafactura,
			final Chconfiservi confirmacion) throws ModelException {
		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {

					if (detaadmision != null) {
						session.saveOrUpdate(detaadmision);
					}
					if (detafactura != null) {
						session.saveOrUpdate(detafactura);
					}
					if (confirmacion != null) {
						session.saveOrUpdate(confirmacion);
					}
					return detafactura;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Novedad:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Novedad :" + e.getMessage(), e);
		}
	}

	public void updateCnconsclin(final Cnconsclin consclin) throws ModelException {
		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {

					if (consclin != null) {
						session.update(consclin);
					}
					return consclin;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		}
	}

	public List<Cnconsclin> getMisConsultasDiaXNumIden(final Integer codclinica, final BigDecimal idMedico,
			final String numIden) throws ModelException {
		List<Cnconsclin> pis = (List<Cnconsclin>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {
				String HORA_INICIAL = " 00:00";
				String HORA_FINAL = " 23:59";

				Date fechaInicial = new Date();
				Date fechaFinal = new Date();

				Calendar cal = Calendar.getInstance();
				cal.setTime(fechaFinal);
				cal.add(Calendar.MONTH, -2);
				fechaInicial = cal.getTime();

				SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
				String fechaI = dateFormat.format(fechaInicial) + HORA_INICIAL;
				String fechaF = dateFormat.format(fechaFinal) + HORA_FINAL;

				StringBuffer sb = new StringBuffer();
				sb.append("SELECT cncl from ");
				sb.append(Cnconsclin.class.getName()).append(" cncl ");
				sb.append(" WHERE cncl.ccocestado = 'VG' AND cncl.ccocetapa IN ('ES','EC')");
				sb.append(
						" AND (cncl.ccodfeccon BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))");
				sb.append(" AND cncl.cconclinic = :codclinica ");
				sb.append(" AND cncl.ccoanumide = :numIden ");
				sb.append(" AND cncl.ccocservic.csvccodigo not in ('S898001.0','S898001.1','S898001.4') ");
				sb.append(" AND cncl.ccocservic.csvntiphis not in (0,10,25,60)");
				sb.append(
						" AND cncl.cconnumero  in (select cnpc.id.cpnnconcli from Cnprofxcon cnpc where cnpc.id.cpnnconcli =  cncl.cconnumero and cnpc.cpnnclinic = :codclinica and cnpc.id.cpnnprofes = :idMedico AND cnpc.cpncestado != 'XX' ) ");
				sb.append(
						" AND cncl.cconnumero not in (select chco.hcolconsuclini from Chconsulta chco where chco.hcolconsuclini =  cncl.cconnumero and chco.hconclinica = :codclinica and chco.hcoeetapa = 'CE') ");
				sb.append(" AND cncl.ccocservic.csvccodigo in  (SELECT cptp.id.ctacservic from ");
				sb.append(Cptarxprof.class.getName()).append(
						" cptp where cptp.id.ctanprofes = :idMedico and cptp.id.ctanclinic  = :codclinica and cptp.ctacestado = :tarxEstado ");
				sb.append(" ) ");
				sb.append(" order by cncl.ccothorcon asc  ");
				String hql = sb.toString();

				Query query = session.createQuery(hql);

				query.setParameter("fechaI", fechaI);
				query.setParameter("fechaF", fechaF);
				query.setParameter("codclinica", codclinica);
				query.setParameter("idMedico", idMedico);
				query.setParameter("codclinica", codclinica);
				query.setParameter("tarxEstado", IConstantes.ESTADO_VIGENTE);
				query.setParameter("numIden", numIden);

				List<Cnconsclin> pis;
				pis = query.list();

				for (Cnconsclin pi : pis) {
					Cpservicio servicio = pi.getCcocservic();
					Hibernate.initialize(servicio);
					Cptipodocu tipo = pi.getCcontipdoc();
					Hibernate.initialize(tipo);

					Chusuario ccolusuario = pi.getCcolusuario();
					Hibernate.initialize(ccolusuario);

				}

				StringBuffer sb2 = new StringBuffer();
				sb2.append("SELECT cncl from ");
				sb2.append(Cnconsclin.class.getName()).append(" cncl ");
				sb2.append(" WHERE cncl.ccocestado = 'VG' AND cncl.ccocetapa IN ('ES','EC')");
				sb2.append(
						" AND (cncl.ccodfeccon BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))");
				sb2.append(" AND cncl.cconclinic = :codclinica ");
				sb.append("  AND cncl.ccoanumide = :numIden ");
				sb2.append(" AND cncl.ccocservic.csvccodigo not in ('S898001.0','S898001.1','S898001.4')");
				sb2.append(" AND cncl.ccocservic.csvntiphis  in (60)");
				sb2.append(" AND cncl.cconnumdoc  in (select cnco1.cconnumdoc from ");
				sb2.append(Cnconsclin.class.getName()).append(" cnco1 ");
				sb2.append(" WHERE cnco1.ccocestado = 'VG' AND cnco1.ccocetapa IN ('ES','EC')");
				sb2.append(" AND cnco1.ccocservic.csvntiphis  in (26)");
				sb2.append(" AND cnco1.ccoanumide = :numIden ");
				sb2.append(
						" AND (cnco1.ccodfeccon BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi')))");
				sb2.append(
						" AND cncl.cconnumero  in (select cnpc.id.cpnnconcli from Cnprofxcon cnpc where cnpc.id.cpnnconcli =  cncl.cconnumero and cnpc.cpnnclinic = :codclinica and cnpc.cpncestado!= 'XX'  ) ");
				sb2.append(
						" AND cncl.cconnumero not in (select chco.hcolconsuclini from Chconsulta chco where chco.hcolconsuclini =  cncl.cconnumero and chco.hconclinica = :codclinica and chco.hcoeetapa = 'CE') ");
				sb2.append(" AND cncl.ccocservic.csvccodigo in  (SELECT cptp.id.ctacservic from ");
				sb2.append(Cptarxprof.class.getName()).append(
						" cptp where cptp.id.ctanprofes = :idMedico and cptp.id.ctanclinic  = :codclinica and cptp.ctacestado = :tarxEstado ");
				sb2.append(" ) ");
				sb2.append(" order by cncl.ccothorcon asc  ");

				String hq2 = sb2.toString();

				Query query2 = session.createQuery(hq2);

				query2.setParameter("fechaI", fechaI);
				query2.setParameter("fechaF", fechaF);
				query2.setParameter("codclinica", codclinica);
				query2.setParameter("idMedico", idMedico);
				query2.setParameter("codclinica", codclinica);
				query2.setParameter("tarxEstado", IConstantes.ESTADO_VIGENTE);
				query2.setParameter("numIden", numIden);

				List<Cnconsclin> pis2;
				pis2 = query2.list();

				if (pis != null && pis2 != null && !pis2.isEmpty()) {
					for (Cnconsclin pi : pis2) {
						Cpservicio servicio = pi.getCcocservic();
						Hibernate.initialize(servicio);
						Cptipodocu tipo = pi.getCcontipdoc();
						Hibernate.initialize(tipo);
						Chusuario ccolusuario = pi.getCcolusuario();
						Hibernate.initialize(ccolusuario);
					}
					pis.addAll(pis2);
				}

				return pis;
			}
		});
		return pis;
	}

	/**
	 * @param fechaInicial
	 * @param fechaFinal
	 * @return
	 * @throws ModelException
	 */
	public List<Object[]> getReporteUsuariosIppf(Date fechaInicial, Date fechaFinal, String periodo)
			throws ModelException {
		List resultList = null;

		String HORA_INICIAL = " 00:00";
		String HORA_FINAL = " 23:59";
		String fechaI = null;
		String fechaF = null;

		Date fechaCompara = new Date();
		if (fechaInicial != null && fechaFinal != null) {
			SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");

			fechaI = dateFormat.format(fechaInicial) + HORA_INICIAL;
			fechaF = dateFormat.format(fechaFinal) + HORA_FINAL;
		}

		fechaCompara = fechaInicial;
		try {
			if (fechaInicial != null && fechaFinal != null) {

				StringBuffer sb = new StringBuffer();
				if (periodo.equals("M")) {
					sb.append("SELECT distinct EXTRACT(YEAR FROM TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi')) anoreg, "
							+ "EXTRACT(MONTH FROM TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi')) mesreg, codigonue, usuario, clncod, codigonue, clippf FROM ( ");
				} else {
					sb.append("SELECT distinct EXTRACT(YEAR FROM TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi')) anoreg, "
							+ "0 mesreg, codigonue, usuario, clncod, codigonue, clippf  FROM ( ");
				}
				sb.append(
						"  select ccfa.cfslusuario usuario, ccde.cdfcservic servic, chus.HUSESEXO sexo, EXTRACT(YEAR FROM "
								+ "  TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))-EXTRACT(YEAR FROM chus.HUSDFECHANACIM) edad, nvl(clip.clncodigo,0) clncod, "
								+ "  case when ccde.cdfcintext = 'E' then cpcl.CCLCIPPFMOV else cpcl.CCLCCODIPPF end clippf "
								+ "  from clinico.ccfactsap ccfa "
								+ "  inner join clinico.cpcontrato cpco on cpco.ccnnclinic = ccfa.cfsnclinic AND cpco.ccnnnumero = ccfa.cfsncontra "
								+ "  inner join clinico.ccdetasap ccde on ccde.cdfnnumero = ccfa.cfsnnumero and ccde.cdfcswpaqu = 'N' "
								+ "  inner join historia.chusuario chus on chus.HUSLNUMERO = ccfa.CFSLUSUARIO "
								+ "  inner join clinico.cpclinica cpcl on cpcl.cclncodigo = ccfa.cfsnclinic "
								+ "  left join clinico.clippfgene clip on clip.clcgenero = chus.HUSESEXO "
								+ "  and clip.clnedamin <= EXTRACT(YEAR FROM TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))-EXTRACT(YEAR FROM chus.HUSDFECHANACIM) "
								+ "  and clip.clnedamax >= EXTRACT(YEAR FROM TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))-EXTRACT(YEAR FROM chus.HUSDFECHANACIM) "
								+ "  where ccfa.CFSDFECREG between TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') and TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi') and "
								+ "  ccfa.CFSNESTADO = 1 AND cpco.ccnctipofact <> 'PGP' AND cpco.ccncfactagrup <> 'S' and ccde.cdfcservic not like 'S75030%' "
								+ "  and (ccde.cdfcpaquet,ccde.cdfcservic) not in (select cppa.cpecpaquet,cppa.cpecservic from clinico.cppaquserv cppa "
								+ "  where cppa.cpecinsser is not null and cppa.cpecinsser <> '_') " + "  UNION ALL "
								+ "  select cfad.cannumpaci usuario, cfde.cdacservic servic, chus.HUSESEXO sexo, EXTRACT(YEAR FROM "
								+ "  TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))-EXTRACT(YEAR FROM chus.HUSDFECHANACIM) edad, nvl(clip.clncodigo,0) clncod, "
								+ "  case when cfad.cacintext = 'E' then cpcl.CCLCIPPFMOV else cpcl.CCLCCODIPPF end clippf "
								+ "  from clinico.cffactura cffa "
								+ "  inner join clinico.cfadmision cfad on cfad.cannumero  = cffa.cfnadmision "
								+ "  inner join clinico.cpcontrato cpco on cpco.ccnnclinic = cfad.canclinic AND cpco.ccnnnumero = cfad.cancontra "
								+ "  inner join clinico.cfdetaadmision cfde on cfde.cdannumadm = cfad.cannumero and cfde.cdacswpaqu = 'N' "
								+ "  inner join historia.chusuario chus on chus.HUSLNUMERO = cfad.CANNUMPACI "
								+ "  inner join clinico.cpclinica cpcl on cpcl.cclncodigo = cfad.canclinic "
								+ "  left join clinico.clippfgene clip on clip.clcgenero = chus.HUSESEXO "
								+ "  and clip.clnedamin <= EXTRACT(YEAR FROM TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))-EXTRACT(YEAR FROM chus.HUSDFECHANACIM) "
								+ "  and clip.clnedamax >= EXTRACT(YEAR FROM TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))-EXTRACT(YEAR FROM chus.HUSDFECHANACIM) "
								+ "  where cffa.cfdfechregi between TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') and TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi') "
								+ "  and cffa.cfnestado = 'FA' AND (cpco.ccnctipofact = 'PGP' OR cpco.ccncfactagrup = 'S') and cfde.cdacservic not like "
								+ "  'S75030%' and (cfde.cdacpaquet,cfde.cdacservic) not in (select cppa.cpecpaquet, cppa.cpecservic from clinico.cppaquserv "
								+ "  cppa where cppa.cpecinsser is not null and cppa.cpecinsser <> '_') "
								+ "  UNION ALL "
								+ "  select ccsa.csclusuario usuario, ccis.ciacservic servic, chus.HUSESEXO sexo, EXTRACT(YEAR FROM "
								+ "  TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))-EXTRACT(YEAR FROM chus.HUSDFECHANACIM) edad, nvl(clip.clncodigo,0) clncod, "
								+ "  cpcl.CCLCCODIPPF clippf " + "  from clinico.ccsadicred ccsa "
								+ "  inner join clinico.ccitemsacr ccis on ccis.cianconsec = ccsa.cscnconsec "
								+ "  inner join historia.chusuario chus on chus.HUSLNUMERO = ccsa.CSCLUSUARIO "
								+ "  inner join clinico.cpclinica cpcl on cpcl.cclncodigo = ccsa.cscnclinic "
								+ "  left join clinico.clippfgene clip on clip.clcgenero = chus.HUSESEXO "
								+ "  and clip.clnedamin <= EXTRACT(YEAR FROM TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))-EXTRACT(YEAR FROM chus.HUSDFECHANACIM) "
								+ "  and clip.clnedamax >= EXTRACT(YEAR FROM TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))-EXTRACT(YEAR FROM chus.HUSDFECHANACIM) "
								+ "  where ccsa.CSCDFECREG between TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') and TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi') "
								+ "  and ccsa.CSCCESTADO = 'CF' and ccis.ciacservic not like 'S75030%' "
								+ "  UNION ALL "
								+ "  select chco.hcolusuario usuario, case when chvi.hviesufreviol = 'S' then 'VIOLENCIA' else 'NOVIOLENCIA' end servic, "
								+ "  chus.HUSESEXO sexo, EXTRACT(YEAR FROM TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))-EXTRACT(YEAR FROM chus.HUSDFECHANACIM) edad, "
								+ "  nvl(clip.clncodigo,0) clncod, cpcl.CCLCCODIPPF clippf "
								+ "  from historia.chconsulta chco "
								+ "  inner join historia.chviolencia chvi on chvi.hvilconsulta = chco.hcolnumero "
								+ "  inner join historia.chusuario chus on chus.HUSLNUMERO = chco.hcolusuario "
								+ "  inner join clinico.cpclinica cpcl on cpcl.cclncodigo = chco.hconclinica "
								+ "  left join clinico.clippfgene clip on clip.clcgenero = chus.HUSESEXO "
								+ "  and clip.clnedamin <= EXTRACT(YEAR FROM TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))-EXTRACT(YEAR FROM chus.HUSDFECHANACIM) "
								+ "  and clip.clnedamax >= EXTRACT(YEAR FROM TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))-EXTRACT(YEAR FROM chus.HUSDFECHANACIM) "
								+ "  where chco.HCODFECREGISTR between TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') and TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi') "
								+ "  UNION ALL "
								+ "  select chco.hcolusuario usuario, 'VIOLENCIA' servic, chus.HUSESEXO sexo, EXTRACT(YEAR FROM "
								+ "  TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))-EXTRACT(YEAR FROM chus.HUSDFECHANACIM) edad, nvl(clip.clncodigo,0) clncod, "
								+ "  cpcl.CCLCCODIPPF clippf " + "  from historia.chconsulta chco "
								+ "  inner join historia.chviolencia chvi on chvi.hvilconsulta = chco.hcolnumero "
								+ "  inner join historia.chusuario chus on chus.HUSLNUMERO = chco.hcolusuario "
								+ "  inner join clinico.cpclinica cpcl on cpcl.cclncodigo = chco.hconclinica "
								+ "  left join clinico.clippfgene clip on clip.clcgenero = chus.HUSESEXO "
								+ "  and clip.clnedamin <= EXTRACT(YEAR FROM TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))-EXTRACT(YEAR FROM chus.HUSDFECHANACIM) "
								+ "  and clip.clnedamax >= EXTRACT(YEAR FROM TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))-EXTRACT(YEAR FROM chus.HUSDFECHANACIM) "
								+ "  where chco.HCODFECREGISTR between TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') and TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi') "
								+ "  and chvi.hviesufreviol = 'S' " + "  UNION ALL "
								+ "  select chco.hcolusuario usuario, chco.hcocservicio servic, chus.HUSESEXO sexo, EXTRACT(YEAR FROM "
								+ "  TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))-EXTRACT(YEAR FROM chus.HUSDFECHANACIM) edad, nvl(clip.clncodigo,0) clncod, "
								+ "  cpcl.CCLCCODIPPF clippf " + "  from historia.chconsulta chco "
								+ "  inner join historia.chusuario chus on chus.HUSLNUMERO = chco.hcolusuario "
								+ "  inner join clinico.cpclinica cpcl on cpcl.cclncodigo = chco.hconclinica "
								+ "  left join clinico.clippfgene clip on clip.clcgenero = chus.HUSESEXO "
								+ "  and clip.clnedamin <= EXTRACT(YEAR FROM TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))-EXTRACT(YEAR FROM chus.HUSDFECHANACIM) "
								+ "  and clip.clnedamax >= EXTRACT(YEAR FROM TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))-EXTRACT(YEAR FROM chus.HUSDFECHANACIM) "
								+ "  where chco.hcodfecregistr between TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') and TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi') "
								+ "  and chco.hcocservicio like 'S75030%' "
								+ ") LEFT JOIN clinico.clservippf on CSCODSERV = servic "
								+ " LEFT JOIN (select distinct cscodippf codigoant, cscodippf codigonue from clinico.clservippf union all "
								+ " select distinct codigoexis codigoant, codigonuevo codigonue from clinico.clcomserv) on codigoant = CSCODIPPF ");
				Query sqlquery = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
						.createQuery(sb.toString());
				sqlquery.setParameter("fechaI", fechaI);
				sqlquery.setParameter("fechaF", fechaF);

				resultList = sqlquery.list();

				if (!resultList.isEmpty()) {
					return resultList;
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Reporte Servicios Ippf:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Reporte Servicios Ippf: " + e.getMessage(), e);
		}

	}

	/**
	 * Obtener una Clcateippf.
	 */
	public Clcateippf getClcateippf(Integer ccincodigo) throws ModelException {
		Clcateippf cateippf = new Clcateippf();
		java.util.List resultList = null;
		try {
			StringBuffer sb = new StringBuffer();
			sb.append("select a from Clcateippf as a where a.ccincodigo = ? ");

			resultList = this.getHibernateTemplate().find(sb.toString(), ccincodigo);

			if (resultList.size() != 0)
				cateippf = (Clcateippf) resultList.get(0);
		} catch (HibernateException e) {
			throw new ModelException("Error consultando categoria ippf:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando categoria ippf:" + e.getMessage(), e);
		}
		return cateippf;
	}

	/**
	 * @return
	 * @throws ModelException
	 */
	public List<Clcomserv> getClcomservAll() throws ModelException {
		List resultList = null;
		try {
			resultList = this.getSession().createQuery("SELECT x FROM Clcomserv AS x ").list();

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Clcomserv:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Clcomserv" + e.getMessage(), e);
		}
		return resultList;
	}

	/**
	 * @param numeroUsuario
	 * @return
	 * @throws ModelException
	 */
	public List<Cnconsclin> getCnconsclinLectura(final Long numeroUsuario, final int codigoClinica,
			final String codigoEtapa, List<Integer> listaTipoHistoria) throws ModelException {
		final String tiposHistoria = getStringFromIntegerList(listaTipoHistoria);
		List<Cnconsclin> pis = (List<Cnconsclin>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				StringBuffer sb = new StringBuffer();
				sb.append("select cncc from ");
				sb.append("Cnconsclin cncc, Chusuario chus, Cpservicio cpsr ");
				sb.append("WHERE ");
				sb.append(" cncc.ccocetapa =  'ES' and ");
				sb.append(" cncc.ccocestado = 'VG' and ");
				sb.append(" chus.huslnumero = cncc.ccolusuario ");
				sb.append(" and cncc.cconclinic = :wcodclinica ");
				sb.append(" and chus.huslnumero = :wnumusu ");
				sb.append(" and cpsr.csvccodigo = cncc.ccocservic ");
				sb.append(" and cpsr.csvntiphis IN (:wtipleccon) ");
				sb.append("  order by  cncc.ccodfecreg  desc  ");

				String hql = sb.toString();
				System.out.println("hql:" + hql);

				Query query = session.createQuery(hql);
				query.setParameter("wtipleccon", IConstantes.HISTORIA_LECTURA_CITOLOGIA_CONVENCIONAL);
				query.setParameter("wcodclinica", codigoClinica);
				query.setParameter("wnumusu", numeroUsuario);

				StringBuffer sb2 = new StringBuffer();
				sb2.append("select cncc from ");
				sb2.append("Cnconsclin cncc, Chusuario chus, Cpservicio cpsr ");
				sb2.append("WHERE ");
				sb2.append(" cncc.ccocetapa = 'ES' and ");
				sb2.append(" cncc.ccocestado = 'VG' and ");
				sb2.append(" chus.huslnumero = cncc.ccolusuario ");
				sb2.append(" and chus.huslnumero = :wnumusu ");
				sb2.append(" and cpsr.csvccodigo = cncc.ccocservic ");
				sb2.append(" and cpsr.csvntiphis IN (:wtiplecvph,:wtiplecbasliq) ");
				sb2.append("  order by  cncc.ccodfecreg  desc  ");

				String hq2 = sb2.toString();

				Query query2 = session.createQuery(hq2);
				query2.setParameter("wtiplecvph", IConstantes.HISTORIA_LECTURA_VPH_BASE_LIQUIDA);
				query2.setParameter("wtiplecbasliq", IConstantes.HISTORIA_LECTURA_CITOLOGIA_BASE_LIQUIDA);
				query2.setParameter("wnumusu", numeroUsuario);

				List<Cnconsclin> pis;
				pis = query.list();

				List<Cnconsclin> pis2;
				pis2 = query2.list();

				if (pis2 != null && !pis2.isEmpty()) {
					pis.addAll(pis2);
				}

				for (Cnconsclin co : pis) {
					Cpservicio servicio = co.getCcocservic();
					Hibernate.initialize(servicio);

					Chusuario usu = co.getCcolusuario();
					Hibernate.initialize(usu);
				}

				return pis;
			}
		});
		return pis;
	}

	public List<Cnconsclin> getCnconsclinLecturaMod(final Long numeroUsuario, final int codigoClinica,
			final String codigoEtapa, List<Integer> listaTipoHistoria) throws ModelException {
		final String tiposHistoria = getStringFromIntegerList(listaTipoHistoria);
		List<Cnconsclin> pis = (List<Cnconsclin>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				StringBuffer sb = new StringBuffer();
				sb.append("select cncc from ");
				sb.append("Cnconsclin cncc, Chusuario chus, Cpservicio cpsr ");
				sb.append("WHERE ");
				sb.append(" cncc.ccocetapa =  'AT' and ");
				// sb.append(" cncc.ccocestado = 'VG' and ");
				sb.append(" chus.huslnumero = cncc.ccolusuario ");
				sb.append(" and cncc.cconclinic = :wcodclinica ");
				sb.append(" and chus.huslnumero = :wnumusu ");
				sb.append(" and cpsr.csvccodigo = cncc.ccocservic ");
				sb.append(" and cpsr.csvntiphis IN (:wtipleccon,:wtiplecbasliq) ");
				sb.append("  order by  cncc.ccodfecreg  desc  ");

				String hql = sb.toString();
				System.out.println("hql:" + hql);

				Query query = session.createQuery(hql);
				query.setParameter("wtipleccon", IConstantes.HISTORIA_LECTURA_CITOLOGIA_CONVENCIONAL);
				query.setParameter("wtiplecbasliq", IConstantes.HISTORIA_LECTURA_CITOLOGIA_BASE_LIQUIDA);
				query.setParameter("wcodclinica", codigoClinica);
				query.setParameter("wnumusu", numeroUsuario);

				List<Cnconsclin> pis;
				pis = query.list();

				for (Cnconsclin co : pis) {
					Cpservicio servicio = co.getCcocservic();
					Hibernate.initialize(servicio);

					Chusuario usu = co.getCcolusuario();
					Hibernate.initialize(usu);
				}

				return pis;
			}
		});
		return pis;
	}

	private String getStringFromIntegerList(List<Integer> lista) {
		String string = null;
		if (lista != null && !lista.isEmpty()) {
			StringBuilder sb = new StringBuilder();
			for (Integer tipoHistoria : lista) {
				sb.append(tipoHistoria).append(",");
			}
			string = sb.deleteCharAt(sb.length() - 1).toString();
		}
		return string;
	}

	public List getCitologiaExtendedEntregableBetweenFechaClinica(Date fechaInicial, Date fechaFinal, int codigoClinica,
			final List<Integer> listaTipoHistoria) throws ModelException {

		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		String fechaI = dateFormat.format(fechaInicial) + " 00:00";
		String fechaF = dateFormat.format(fechaFinal) + " 23:59";

		String tiposHistoria = getStringFromIntegerList(listaTipoHistoria);

		final String hql = " SELECT chus, cnci"
				+ " FROM Cncitologi cnci, Cnconsclin cncc, Cpservicio cpsr, Chusuario chus" + " WHERE "
				+ "  cncc.cconnumero = cnci.ccilconcli " + "  AND cpsr.csvccodigo = cncc.ccocservic "
				+ "  AND chus.huslnumero = cnci.ccilusuario " + "  AND cnci.ccinclinic = " + codigoClinica + " "
				+ "  AND cpsr.csvntiphis IN (" + tiposHistoria + ") " + "  AND (cnci.ccidfecreg BETWEEN TO_DATE('"
				+ fechaI + "','dd/MM/yyyy hh24:mi') AND TO_DATE('" + fechaF + "','dd/MM/yyyy hh24:mi') ) "
				+ "  AND cnci.ccinconsec NOT IN (SELECT chde.comp_id.hdencitologia FROM Chdetaentcito chde) ORDER BY cnci.ccinconsec DESC";
		System.out.println("hql:" + hql);
		try {
			List pis = (List) this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) throws HibernateException {
					Query query = session.createQuery(hql);
					return query.list();
				}
			});
			return pis;
		} catch (HibernateException e) {
			e.printStackTrace();
			throw new ModelException("Error consultando Citolog�as:" + e.getMessage(), e);
		} catch (Exception e) {
			e.printStackTrace();
			throw new ModelException("Error consultando Citolog�as:" + e.getMessage(), e);
		}
	}

	/**
	 * @param consecutivo
	 * @return
	 * @throws ModelException
	 */
	public Cncitovphlect getLecturaCitologiaVph(Integer consecutivo) throws ModelException {
		List<Cncitovphlect> resultList = null;
		List parametros = new ArrayList();

		try {
			if (consecutivo != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select cncv from " + Cncitovphlect.class.getName() + " cncv  where cncv.ccvnconsec = ?  ");
				parametros.add(consecutivo);
				resultList = (List<Cncitovphlect>) this.getHibernateTemplate().find(sb.toString(),
						parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

				return null;
			} else {
				return null;
			}

		} catch (HibernateException e) {
			throw new ModelException("Error Obteniendo Lectura Citolog�a Vph:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Obteniendo Lectura Citolog�a Vph:" + e.getMessage(), e);
		}

	}

	/**
	 * @param lectura
	 * @throws ModelException
	 */
	public void saveLecturaCitologiaVph(Cncitovphlect lectura) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(lectura);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Lectura Citolog�a Vph:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Lectura Citolog�a Vph:" + e.getMessage(), e);
		}
	}

	public Chconsulta saveChconsulta(final Cnconsclin cnconsclin, final String estado, final String codigoFuncionario)
			throws ModelException {
		if (cnconsclin != null && cnconsclin.getCconnumero() != null && cnconsclin.getCcolusuario() != null) {
			try {
				return (Chconsulta) this.getHibernateTemplate().execute(new HibernateCallback() {
					public Object doInHibernate(Session session) {
						String selectChconsulta = "" + "SELECT chco From Chconsulta chco " + " WHERE chco.hcolnumero = "
								+ cnconsclin.getCconnumero();
						Query queryChconsulta = session.createQuery(selectChconsulta);
						Chconsulta chconsulta = (Chconsulta) queryChconsulta.uniqueResult();

						String selectChusuario = "" + "SELECT chus From Chusuario chus " + " WHERE chus.huslnumero = "
								+ cnconsclin.getCcolusuario().getHuslnumero();
						Query queryChusuario = session.createQuery(selectChusuario);
						Chusuario usuario = (Chusuario) queryChusuario.uniqueResult();

						if (chconsulta == null) {
							chconsulta = new Chconsulta();
							chconsulta.setHcodfecinicio(new Date());
						}

						if (cnconsclin != null && usuario != null) {
							chconsulta.setHcocentidadadm(usuario.getHuscentidadadm());
							chconsulta.setHcocnombacompa(usuario.getHuscnomacompana());
							chconsulta.setHcocnombrespo(usuario.getHuscnomresponsa());
							chconsulta.setHcocoperador(codigoFuncionario);
							chconsulta.setHcocservicio(cnconsclin.getCcocservic());
							chconsulta.setHcocteleacompa(usuario.getHusctelacompana());
							chconsulta.setHcoctelerespo(usuario.getHusctelresponsa());
							chconsulta.setHcodfecregistr(new Date());
							chconsulta.setHcoeetapa(estado);
							chconsulta.setHconfolio(usuario.getHusnfolioactua());
							chconsulta.setHcontipoconsu(cnconsclin.getCcontconcl());
							chconsulta.setHcolusuario(usuario);
							chconsulta.setHconclinica(cnconsclin.getCconclinic());
							chconsulta.setHcoctiposervi(IConstantes.TIPO_CONSULTA);
							/*
							 * if (codigoAgenda != null) { chconsulta.setHconcodagen(codigoAgenda); }
							 */

							if (cnconsclin.getCconnumero() != null) {
								chconsulta.setHcolconsuclini(new Long(cnconsclin.getCconnumero()));
								chconsulta.setHcolnumero(new Long(cnconsclin.getCconnumero()));
							}
							session.saveOrUpdate(cnconsclin);
							session.saveOrUpdate(chconsulta);
						}
						return chconsulta;
					}
				});
			} catch (HibernateException e) {
				throw new ModelException("Error Insertando :" + e.getMessage(), e);
			} catch (Exception e) {
				throw new ModelException("Error Insertando :" + e.getMessage(), e);
			}
		}
		return null;

	}

	/**
	 * @param dia
	 * @return
	 * @throws ModelException
	 */
	public List<Cnconsclin> getConsultasDiaNotaEnfermeria(final Date dia, final Integer codclinica)
			throws ModelException {
		List<Cnconsclin> pis = (List<Cnconsclin>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {
				String HORA_INICIAL = " 00:00";
				String HORA_FINAL = " 23:59";

				SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
				String fechaI = dateFormat.format(dia) + HORA_INICIAL;
				String fechaF = dateFormat.format(dia) + HORA_FINAL;

				StringBuffer sb = new StringBuffer();
				sb.append("SELECT cncl from ");
				sb.append(Cnconsclin.class.getName()).append(" cncl ");
				sb.append(" WHERE cncl.ccocestado = 'VG' ");
				sb.append(
						" AND (cncl.ccodfeccon BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))");
				sb.append(" AND cncl.cconclinic = :codclinica ");
				sb.append(" AND cncl.ccocservic.csvntipcon  in (3) ");
				sb.append(" AND cncl.ccocservic.csvntiphis  in (35) ");
				sb.append(
						" AND cncl.cconnumero not in (select chco.hcolconsuclini from Chconsulta chco where chco.hcolconsuclini =  cncl.cconnumero and chco.hconclinica = :codclinica and chco.hcoccieringr is not null) ");

				sb.append(" order by cncl.ccothorcon asc  ");

				String hql = sb.toString();

				Query query = session.createQuery(hql);

				query.setParameter("fechaI", fechaI);
				query.setParameter("fechaF", fechaF);
				query.setParameter("codclinica", codclinica);

				List<Cnconsclin> pis;
				pis = query.list();

				for (Cnconsclin pi : pis) {
					Cpservicio servicio = pi.getCcocservic();
					Hibernate.initialize(servicio);
					Cptipodocu tipo = pi.getCcontipdoc();
					Hibernate.initialize(tipo);

				}

				return pis;
			}
		});
		return pis;
	}

	public List<Cnconsclin> getConsultasDiaNotaEnfermeriaXNumIden(final Integer codclinica, final String numIden)
			throws ModelException {
		List<Cnconsclin> pis = (List<Cnconsclin>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {
				String HORA_INICIAL = " 00:00";
				String HORA_FINAL = " 23:59";

				Date fechaInicial = new Date();
				Date fechaFinal = new Date();

				Calendar cal = Calendar.getInstance();
				cal.setTime(fechaFinal);
				cal.add(Calendar.MONTH, -2);
				fechaInicial = cal.getTime();

				SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
				String fechaI = dateFormat.format(fechaInicial) + HORA_INICIAL;
				String fechaF = dateFormat.format(fechaFinal) + HORA_FINAL;

				StringBuffer sb = new StringBuffer();
				sb.append("SELECT cncl from ");
				sb.append(Cnconsclin.class.getName()).append(" cncl ");
				sb.append(" WHERE cncl.ccocestado = 'VG'");
				sb.append(
						" AND (cncl.ccodfeccon BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))");
				sb.append(" AND cncl.cconclinic = :codclinica ");
				sb.append(" AND cncl.ccoanumide = :numIden ");
				sb.append(" AND cncl.ccocservic.csvntipcon  in (3) ");
				sb.append(" AND cncl.ccocservic.csvntiphis  in (35) ");
				sb.append(
						" AND cncl.cconnumero not in (select chco.hcolconsuclini from Chconsulta chco where chco.hcolconsuclini =  cncl.cconnumero and chco.hconclinica = :codclinica and chco.hcoccieringr is not null) ");

				sb.append(" order by cncl.ccothorcon asc  ");

				String hql = sb.toString();

				Query query = session.createQuery(hql);

				query.setParameter("fechaI", fechaI);
				query.setParameter("fechaF", fechaF);
				query.setParameter("codclinica", codclinica);
				query.setParameter("numIden", numIden);

				List<Cnconsclin> pis;
				pis = query.list();

				for (Cnconsclin pi : pis) {
					Cpservicio servicio = pi.getCcocservic();
					Hibernate.initialize(servicio);
					Cptipodocu tipo = pi.getCcontipdoc();
					Hibernate.initialize(tipo);

				}

				return pis;
			}
		});
		return pis;
	}

	public Chingresoenf getIngresoEnfermeriaProcedimiento(Long hielnumero) throws ModelException {
		List<Chingresoenf> resultList = null;
		List parametros = new ArrayList<Chformulamed>();

		try {

			if (hielnumero != null) {

				StringBuffer sb = new StringBuffer();
				sb.append(" select chie from " + Chingresoenf.class.getName()
						+ " chie  where chie.id.hielnumero = ? AND chie.id.hiectiposervi = ? ");
				parametros.add(hielnumero);
				parametros.add(IConstantes.TIPO_PROCEDIMIENTO);

				resultList = (List<Chingresoenf>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Ingreso de Enfermeria:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Ingreso de Enfermeria: " + e.getMessage(), e);
		}

	}

	/**
	 * @param
	 * @return
	 * @throws ModelException
	 */
	public
	/*
	 * public List getConsultasImprimirFolios() throws ModelException {
	 * java.util.List resultList = null; try { StringBuffer sb = new StringBuffer();
	 * sb.
	 * append("select chcn.cifnconsulta from historia.chcnsimpfol chcn, clinico.cnconsclin cnco "
	 * +
	 * " where cnco.cconnumero = chcn.cifnconsulta and cnco.cconclinic in (1,2,3,4,6,7,34,37,40,53,54,91) "
	 * );
	 * 
	 * Query query =
	 * this.getHibernateTemplate().getSessionFactory().getCurrentSession().
	 * createQuery(sb.toString());
	 * 
	 * resultList = query.list();
	 * 
	 * } catch (HibernateException e) { throw new
	 * ModelException("Error consultando categoria ippf:" + e.getMessage(), e); }
	 * catch (Exception e) { throw new
	 * ModelException("Error consultando categoria ippf:" + e.getMessage(), e); }
	 * return resultList; }
	 * 
	 * public Chconsulta getCirugiaUsuarioServicio(final Long usuario, final String
	 * servicio) throws ModelException { List resultList = null; List parametros =
	 * new ArrayList(); Chconsulta consulta = null;
	 * 
	 * try {
	 * 
	 * StringBuffer sb = new StringBuffer(); sb.append(" select chco from " +
	 * Chconsulta.class.getName() + " chco  where chco.hcolusuario = ? " +
	 * " and chco.hcocservicio = ? AND chco.hcoctiposervi = 'H' ");
	 * parametros.add(usuario); parametros.add(servicio);
	 * 
	 * resultList = this.getHibernateTemplate().find(sb.toString(),
	 * parametros.toArray());
	 * 
	 * if (!resultList.isEmpty()) { consulta = (Chconsulta)resultList.get(0); }
	 * 
	 * } catch (HibernateException e) { throw new
	 * ModelException("Error obteniendo Consultas :" + e.getMessage(), e); } catch
	 * (Exception e) { throw new ModelException("Error obteniendo consultas : " +
	 * e.getMessage(), e); } return consulta; }
	 * 
	 * public Cpcontrato getCpcontrato(Integer clinica, Integer numero) throws
	 * ModelException { List resultList = null; List parametros = new ArrayList();
	 * Cpcontrato contrato = null;
	 * 
	 * try {
	 * 
	 * StringBuffer sb = new StringBuffer(); sb.append(" select cpco from " +
	 * Cpcontrato.class.getName() + " cpco  where cpco.id.ccnnnumero = ? ");
	 * sb.append("AND (cpco.id.ccnnclinic = ? OR cpco.id.ccnnclinic = 9)  ");
	 * sb.append(" order by cpco.id.ccnnclinic, cpco.id.ccnnnumero ");
	 * parametros.add(numero); parametros.add(clinica);
	 * 
	 * resultList = this.getHibernateTemplate().find(sb.toString(),
	 * parametros.toArray());
	 * 
	 * if (!resultList.isEmpty()) { contrato = (Cpcontrato)resultList.get(0); }
	 * 
	 * } catch (HibernateException e) { throw new
	 * ModelException("Error consultando Tipos de Usuarios :" + e.getMessage(), e);
	 * } catch (Exception e) { throw new
	 * ModelException("Error consultando Tipos de Usuarios : " + e.getMessage(), e);
	 * } return contrato;
	 * 
	 * }
	 */
	List<Cnconsclin> getCnconsclinLecturaXAdmision(final Long numeroUsuario, final BigDecimal admision)
			throws ModelException {
		List<Cnconsclin> pis = (List<Cnconsclin>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				StringBuffer sb = new StringBuffer();
				sb.append("select cncc from ");
				sb.append("Cnconsclin cncc, Chusuario chus, Cpservicio cpsr ");
				sb.append("WHERE ");
				sb.append(" cncc.ccocetapa =  'ES' and ");
				sb.append(" cncc.ccocestado = 'VG' and ");
				sb.append(" chus.huslnumero = cncc.ccolusuario ");
				sb.append(" and cncc.cconnumdoc = :admision ");
				sb.append(" and chus.huslnumero = :wnumusu ");
				sb.append(" and cpsr.csvccodigo = cncc.ccocservic ");
				sb.append(" and cpsr.csvntiphis IN (:wtipleccon,:wtiplecbasliq,:wtiplecvph) ");
				sb.append("  order by  cncc.ccodfecreg  desc  ");

				String hql = sb.toString();
				System.out.println("hql:" + hql);

				Query query = session.createQuery(hql);
				query.setParameter("wtipleccon", IConstantes.HISTORIA_LECTURA_CITOLOGIA_CONVENCIONAL);
				query.setParameter("wtiplecbasliq", IConstantes.HISTORIA_LECTURA_CITOLOGIA_BASE_LIQUIDA);
				query.setParameter("wtiplecvph", IConstantes.HISTORIA_LECTURA_VPH_BASE_LIQUIDA);
				query.setParameter("wnumusu", numeroUsuario);
				query.setParameter("admision", admision);

				List<Cnconsclin> pis;
				pis = query.list();

				for (Cnconsclin co : pis) {
					Cpservicio servicio = co.getCcocservic();
					Hibernate.initialize(servicio);

					Chusuario usu = co.getCcolusuario();
					Hibernate.initialize(usu);
				}

				return pis;
			}
		});
		return pis;
	}

	public List<Object[]> getListaServiciosXAdmision(Long admision, String opcion) throws ModelException {
		List<Object[]> resultList = null;

		try {
			if (admision != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select detfac.cdfnnumitem,detfac.cdfnconsfact,detfac.cdfcservicio, ");
				sb.append(" detfac.cdfnorden,detfac.cdfcobserv,detfac.cdfclote,detfac.cdfndescuento, ");
				sb.append(" detfac.cdfniva,detfac.cdfncliente,detfac.cdfnestado,detfac.cdfcpaquet, ");
				sb.append(" detfac.cdfctipdscto,detfac.cdfnvalsrv,detfac.cdfncantidad,detfac.cdfcetapa, ");
				sb.append(
						" detfac.cdfcusuamodi,detfac.cdfdfechmodi,detfac.cdfnconsuclin,detfac.cdfcswitpaq,serv.csvcnombre");
				sb.append(" from clinico.cfdetafactura detfac,cpservicio serv  ");
				sb.append(
						" where serv.csvccodigo = detfac.cdfcservicio and detfac.cdfcswitpaq = 'N' and detfac.cdfnconsfact = (select fac.cfnconsfact from clinico.cffactura fac where fac.cfnadmision = :admision) ");
				if (opcion.equals(IConstantes.OPCIONCIRUGIAYPROCEDIMIENTO)) {
					sb.append(" and serv.csvntipcon in(2,3) ");
				} else if (opcion.equals(IConstantes.OPCIONINTERCONSULTA)) {
					sb.append(" and serv.csvntipcon in(1) ");
				}

				Query sqlquery = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
						.createQuery(sb.toString());
				sqlquery.setParameter("admision", admision);

				resultList = sqlquery.list();

			}
			return resultList;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando los servicios de la factura:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando los servicios de la factura:" + e.getMessage(), e);
		}

	}

	public List<Object[]> getListaServiciosDobleConUnaAtencion(Long admision, String servicio) throws ModelException {
		List<Object[]> resultList = null;

		try {
			if (admision != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select detfac.cdfnnumitem,detfac.cdfnconsfact,detfac.cdfcservicio, ");
				sb.append(" detfac.cdfnorden,detfac.cdfcobserv,detfac.cdfclote,detfac.cdfndescuento, ");
				sb.append(" detfac.cdfniva,detfac.cdfncliente,detfac.cdfnestado,detfac.cdfcpaquet, ");
				sb.append(" detfac.cdfctipdscto,detfac.cdfnvalsrv,detfac.cdfncantidad,detfac.cdfcetapa, ");
				sb.append(
						" detfac.cdfcusuamodi,detfac.cdfdfechmodi,detfac.cdfnconsuclin,detfac.cdfcswitpaq,serv.csvcnombre,serv.csvntiphis");
				sb.append(" from clinico.cfdetafactura detfac,clinico.cpservicio serv  ");
				sb.append(
						" where serv.csvccodigo = detfac.cdfcservicio and detfac.cdfcswitpaq = 'N' and detfac.cdfnconsfact = (select fac.cfnconsfact from clinico.cffactura fac where fac.cfnadmision = :admision) ");
				sb.append(" and detfac.cdfcservicio != :servicio");
				sb.append(" and (serv.csvntiphis = :tipoHistoria1 or serv.csvntiphis = :tipoHistoria2) ");

				Query sqlquery = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
						.createQuery(sb.toString());
				sqlquery.setParameter("admision", admision);
				sqlquery.setParameter("servicio", servicio);
				sqlquery.setParameter("tipoHistoria1", IConstantes.HISTORIA_PROCEDIMIENTO_ASOCIADO);
				sqlquery.setParameter("tipoHistoria2", IConstantes.HISTORIA_ANTICONCEPCION_RETIRO);
				resultList = sqlquery.list();

			}
			if (resultList == null || resultList.isEmpty()) {
				return null;
			}

			return resultList;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando los servicios de la factura:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando los servicios de la factura:" + e.getMessage(), e);
		}

	}

	public void closeConsultaProcedimientoAsociado(final Chusuario usuario, final Long consulta,
			final Chconsulta chconsulta, final Chimprdiag impresion, final String userName) throws ModelException {

		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {
					Cnconsclin consultaProcedimientoAsociado = null;
					Chconsulta chconsultaProcedimientoAsociado = new Chconsulta();
					List lstHonorariosProcedimientoAsociado = null;

					StringBuffer sbpa = new StringBuffer();
					sbpa.append(" select cncl from Cnconsclin " + " cncl  where cncl.cconnumero = :numero ");
					Query querypa = session.createQuery(sbpa.toString());
					querypa.setParameter("numero", consulta);

					consultaProcedimientoAsociado = (Cnconsclin) querypa.uniqueResult();

					StringBuffer sbAda2 = new StringBuffer();
					sbAda2.append(" update clinico.CFDETAFACTURA ccdf1  set ccdf1.CDFCETAPA = 'AT' ");
					sbAda2.append(" where (ccdf1.CDFNCONSFACT, ccdf1.CDFNNUMITEM) in( ");
					sbAda2.append(" select ccdf.CDFNCONSFACT, ccdf.CDFNNUMITEM ");
					sbAda2.append(" from clinico.CFFACTURA ccfa, clinico.CFDETAFACTURA ccdf ");
					sbAda2.append(" where ccfa.CFNCONSFACT = ccdf.CDFNCONSFACT ");
					sbAda2.append(" and ccfa.CFNADMISION = :wadmision ");
					sbAda2.append(" and ccdf.CDFCSERVICIO = :wservicio ) ");

					Query queryAda2 = session.createQuery(sbAda2.toString());
					queryAda2.setParameter("wadmision", consultaProcedimientoAsociado.getCconnumdoc());
					queryAda2.setParameter("wservicio", consultaProcedimientoAsociado.getCcocservic().getCsvccodigo());
					queryAda2.executeUpdate();

					// Agreagamos los RIPS

					generarRipsConsultaProcedimientoAsociado(session, consultaProcedimientoAsociado, userName,
							chconsulta);

					// VERIFICAMOS SI EXISTE MAS DE UN PROFESIONAL ASIGNADO A LA CONSULTA NO
					// CAMBIAMOS LA FECHA DE LA CONSULTA,. NI ACTUALIZAMOS LA FECHA DE LA CONSULTA

					if (consultaProcedimientoAsociado != null) {

						StringBuffer sb6 = new StringBuffer();
						sb6.append(" select cnpc from " + Cnprofxcon.class.getName()
								+ " cnpc  where cnpc.id.cpnnconcli = :cpnnconcli AND cnpc.cpncestado != 'XX'  ");
						Query query6 = session.createQuery(sb6.toString());
						query6.setParameter("cpnnconcli", consultaProcedimientoAsociado.getCconnumero());

						lstHonorariosProcedimientoAsociado = query6.list();

					}

					if (consultaProcedimientoAsociado != null && lstHonorariosProcedimientoAsociado != null
							&& lstHonorariosProcedimientoAsociado.size() <= 1) {
						consultaProcedimientoAsociado.setCcodfeccon(new Date());
						generarHonorariosProfesional(session, consultaProcedimientoAsociado, chconsulta, userName,
								null);

					}

					if (consultaProcedimientoAsociado != null) {
						consultaProcedimientoAsociado.setCcothorate(new Date());
						consultaProcedimientoAsociado.setCcocetapa(IConstantes.ETAPA_ATENDIDO);
						consultaProcedimientoAsociado.setCcocusumod(userName);

						// Cambiamos el estado de la consulta x clinica a atendida
						session.update(consultaProcedimientoAsociado);

						chconsultaProcedimientoAsociado
								.setHcolnumero(consultaProcedimientoAsociado.getCconnumero().longValue());
						chconsultaProcedimientoAsociado
								.setHcolconsuclini(consultaProcedimientoAsociado.getCconnumero().longValue());
						chconsultaProcedimientoAsociado.setHcocservicio(consultaProcedimientoAsociado.getCcocservic());
						chconsultaProcedimientoAsociado.setHcoeetapa(IConstantes.ETAPA_PROCEDIMIENTO_ASOCIADO);
						chconsultaProcedimientoAsociado.setHcoctiposervi(chconsulta.getHcoctiposervi());
						chconsultaProcedimientoAsociado.setHcocentidadadm(chconsulta.getHcocentidadadm());
						chconsultaProcedimientoAsociado.setHcolusuario(chconsulta.getHcolusuario());
						chconsultaProcedimientoAsociado.setHconfolio(chconsulta.getHconfolio());
						chconsultaProcedimientoAsociado.setHcontipoconsu(chconsulta.getHcontipoconsu());
						chconsultaProcedimientoAsociado.setHcodfeccierre(chconsulta.getHcodfeccierre());
						chconsultaProcedimientoAsociado.setHcodfecinicio(chconsulta.getHcodfecinicio());
						chconsultaProcedimientoAsociado.setHcocnombacompa(chconsulta.getHcocnombacompa());
						chconsultaProcedimientoAsociado.setHcocteleacompa(chconsulta.getHcocteleacompa());
						chconsultaProcedimientoAsociado.setHcocnombrespo(chconsulta.getHcocnombrespo());
						chconsultaProcedimientoAsociado.setHcoctelerespo(chconsulta.getHcoctelerespo());
						chconsultaProcedimientoAsociado.setHcocoperador(chconsulta.getHcocoperador());
						chconsultaProcedimientoAsociado.setHcodfecregistr(chconsulta.getHcodfecregistr());
						chconsultaProcedimientoAsociado.setHconclinica(chconsulta.getHconclinica());
						chconsultaProcedimientoAsociado.setHconcodagen(chconsulta.getHconcodagen());

						// Guardamos Chconsulta del procedimiento asociado
						session.save(chconsultaProcedimientoAsociado);
					}

					return chconsulta;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		}
	}

	public List<Object[]> getRegistrosSegTelefonico(Long clinica, Date fechaInicial, Date fechafinal)
			throws ModelException {
		List<Object[]> resultList = null;
		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		String fechaI = dateFormat.format(fechaInicial.getTime()) + HORA_INICIAL;
		String fechaF = dateFormat.format(fechafinal.getTime()) + HORA_FINAL;

		try {
			StringBuffer sb = new StringBuffer();
			sb.append(
					"select cirp.hcpdfechacirug,seg.hstdfecregistr,clc.cclcnombre,dtacp.hdccservicio,serv.csvcnombre,usua.huscprimernomb,usua.huscsegundnomb,usua.huscprimerapel,"
							+ "usua.huscsegundapel,usua.husetipoiden,usua.husanumeiden,usua.husccelular,usua.husctelefono, seg.*  ");
			sb.append(
					" from historia.chsegutelefo seg,historia.chcirugprogr cirp, historia.chdetacirpro dtacp,clinico.cpservicio serv,historia.chusuario usua,clinico.cpclinica clc");
			sb.append(" where seg.hstlnumero = cirp.hcplnumero ");
			sb.append(" and cirp.hcplnumero = dtacp.hdclconsuprinc ");
			sb.append(" and dtacp.hdccservicio = serv.csvccodigo");
			sb.append(" and cirp.hcplusuario = usua.huslnumero");
			sb.append(" and cirp.hcpnclinica = clc.cclncodigo");
			sb.append(
					" and cirp.hcpdfechacirug  BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi') ");
			if (clinica != 0) {
				sb.append(" and cirp.hcpnclinica = :clinica");
			}

			Query sqlquery = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
					.createQuery(sb.toString());
			if (clinica != 0) {
				sqlquery.setParameter("clinica", clinica);
			}
			sqlquery.setParameter("fechaI", fechaI);
			sqlquery.setParameter("fechaF", fechaF);
			resultList = sqlquery.list();

			return resultList;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando el registro de seguimiento telefonico:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando el registro de seguimiento telefonico:" + e.getMessage(), e);
		}

	}

	public List<Object[]> getListaLaboratorioFacturados(Long admision) throws ModelException {
		List<Object[]> resultList = null;

		try {
			if (admision != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select detfac.cdfnnumitem,detfac.cdfnconsfact,detfac.cdfcservicio, ");
				sb.append(" detfac.cdfnorden,detfac.cdfcobserv,detfac.cdfclote,detfac.cdfndescuento, ");
				sb.append(" detfac.cdfniva,detfac.cdfncliente,detfac.cdfnestado,detfac.cdfcpaquet, ");
				sb.append(" detfac.cdfctipdscto,detfac.cdfnvalsrv,detfac.cdfncantidad,detfac.cdfcetapa, ");
				sb.append(
						" detfac.cdfcusuamodi,detfac.cdfdfechmodi,detfac.cdfnconsuclin,detfac.cdfcswitpaq,serv.csvcnombre");
				sb.append(" from clinico.cfdetafactura detfac,clinico.cpservicio serv  ");
				sb.append(
						" where serv.csvccodigo = detfac.cdfcservicio and detfac.cdfcswitpaq = 'N' and detfac.cdfnconsfact = (select fac.cfnconsfact from clinico.cffactura fac where fac.cfnadmision = :admision) ");
				sb.append(" and serv.csvnsubgru in (4,6) ");
				sb.append(" and serv.csvcestado in ('VG','XX') ");
				sb.append(" and serv.csvngrupo = 81 ");
				sb.append(" and serv.csvccups = 'S'  ");

				Query sqlquery = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
						.createQuery(sb.toString());
				sqlquery.setParameter("admision", admision);
				resultList = sqlquery.list();

			}
			return resultList;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando los servicios de la factura:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando los servicios de la factura:" + e.getMessage(), e);
		}

	}

	public void saveOrdenCirugiaLiberacion(final List<Cnconsclin> listadeConsultasClinicas,
			final List<Cfdetafactura> cfdetafacturaList, final Long numeroAdmision, final Chordecirugi orden)
			throws ModelException {

		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {
					try {
						boolean confirmacion = false;
						for (Cfdetafactura deta : cfdetafacturaList) {
							for (Cnconsclin consclin : listadeConsultasClinicas) {
								if (deta.getCdfcservicio().equals(consclin.getCcocservic().getCsvccodigo())) {

									consclin = generarConsultaClinica(consclin);

									if (consclin != null) {
										deta.setCdfnconsuclin(consclin.getCconnumero().longValue());
										confirmacion = true;
									}
								}
							}
						}
						if (confirmacion) {
							saveDetalleFactura(cfdetafacturaList, numeroAdmision);
						}

						saveOrdenCirugia(orden);
					} catch (Exception e) {
						e.getMessage();
					}
					return orden;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		}
	}

	public void saveListRemisionInterconsultaCirugiaLiberacion(final List<Chremision> lstRemision,
			final Long numeroConsulta, final String tipoServicio, final Integer consecutivo,
			final List<Cnconsclin> listadeConsultasClinicas, final List<Cfdetafactura> cfdetafacturaList,
			final Long numeroAdmision) throws ModelException {
		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {
					try {
						boolean confirmacion = false;
						for (Cfdetafactura deta : cfdetafacturaList) {
							for (Cnconsclin consclin : listadeConsultasClinicas) {
								if (deta.getCdfcservicio().equals(consclin.getCcocservic().getCsvccodigo())) {

									consclin = generarConsultaClinica(consclin);

									if (consclin != null) {
										deta.setCdfnconsuclin(consclin.getCconnumero().longValue());
										confirmacion = true;
									}
								}
							}
						}
						if (confirmacion) {
							saveDetalleFactura(cfdetafacturaList, numeroAdmision);
						}
						saveListRemisionInterconsultaCirugia(lstRemision, numeroConsulta, tipoServicio, consecutivo);

					} catch (Exception e) {
						e.getMessage();
					}
					return lstRemision;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		}

	}

	public void saveListExamenesLaboratorioCirugiaLiberacion(final List<Chexamelabor> lstRemision,
			final Long numeroConsulta, final String tipoServicio, final Integer consecutivo,
			final String descripcionRemision, final List<Cnconsclin> listadeConsultasClinicas,
			final List<Cfdetafactura> cfdetafacturaList, final Long numeroAdmision) throws ModelException {
		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {
					try {
						boolean confirmacion = false;
						for (Cfdetafactura deta : cfdetafacturaList) {
							for (Cnconsclin consclin : listadeConsultasClinicas) {
								if (deta.getCdfcservicio().equals(consclin.getCcocservic().getCsvccodigo())) {

									consclin = generarConsultaClinica(consclin);

									if (consclin != null) {
										deta.setCdfnconsuclin(consclin.getCconnumero().longValue());
										confirmacion = true;
									}
								}
							}
						}
						if (confirmacion) {
							saveDetalleFactura(cfdetafacturaList, numeroAdmision);
						}
						saveListExamenesLaboratorioCirugia(lstRemision, numeroConsulta, tipoServicio, consecutivo,
								descripcionRemision);

					} catch (Exception e) {
						e.getMessage();
					}
					return lstRemision;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		}

	}

	public List<Cpservicio> getExamenesLaboratorioFertilidadPorCriterios(Cpservicio servicio) throws ModelException {
		List<Cpservicio> resultList = null;
		List parametros = new ArrayList();
		try {

			if (servicio != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select cpse from " + Cpservicio.class.getName()
						+ " cpse  where cpse.csvngrupo = 81  and cpse.csvccups = 'S'  "
						+ " and cpse.csvnsubgru in (4,6)  and cpse.csvcestado in ('VG','XX') ");

				if (servicio != null) {

					if (servicio.getCsvccodigo() != null && !servicio.getCsvccodigo().equals("")) {
						sb.append(" and cpse.csvccodigo like ? ");
						parametros.add("%" + servicio.getCsvccodigo().toUpperCase() + "%");
					}

					if (servicio.getCsvcnombre() != null && !servicio.getCsvcnombre().equals("")) {
						sb.append(" and cpse.csvcnombre like ? ");
						parametros.add("%" + servicio.getCsvcnombre().toUpperCase() + "%");
					}

					if (servicio.getCsvcnombre2() != null && !servicio.getCsvcnombre2().equals("")) {

						if (servicio.getCsvcopera1() != null && servicio.getCsvcopera1().equals("OR")) {

							sb.append(" OR cpse.csvcnombre like ? ");
							parametros.add("%" + servicio.getCsvcnombre2().toUpperCase() + "%");
						} else {

							sb.append(" and cpse.csvcnombre like ? ");
							parametros.add("%" + servicio.getCsvcnombre2().toUpperCase() + "%");
						}

					}

					if (servicio.getCsvcnombre3() != null && !servicio.getCsvcnombre3().equals("")) {

						if (servicio.getCsvcopera2() != null && servicio.getCsvcopera2().equals("OR")) {

							sb.append(" OR cpse.csvcnombre like ? ");
							parametros.add("%" + servicio.getCsvcnombre3().toUpperCase() + "%");
						} else {

							sb.append(" and cpse.csvcnombre like ? ");
							parametros.add("%" + servicio.getCsvcnombre3().toUpperCase() + "%");
						}

					}

				}

				resultList = (List<Cpservicio>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList;
				}
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Examenes Laboratorio:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Examenes Laboratorio:" + e.getMessage(), e);
		}

	}

	public List<Cnconsclin> getConsultasLaboratorioXFactura(final Integer tipoDcoumento,
			final BigDecimal numeroDocumento) throws ModelException {
		List<Cnconsclin> pis = (List<Cnconsclin>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				StringBuffer sb = new StringBuffer();
				sb.append("SELECT cncl from ");
				sb.append(Cnconsclin.class.getName()).append(" cncl ");
				sb.append(" WHERE cncl.ccocestado = 'VG' AND cncl.ccocetapa IN ('ES','EC')");
				sb.append(" AND cncl.ccontipdoc not in (30) ");
				sb.append(" AND cncl.ccocservic.csvngrupo = 81  and cncl.ccocservic.csvnsubgru = 4    ");
				sb.append(" and cncl.ccontipdoc.ctdnnumero = :tipoDcoumento and cncl.cconnumdoc = :numeroDocumento ");

				sb.append(" order by cncl.ccothorcon asc  ");

				String hql = sb.toString();

				Query query = session.createQuery(hql);

				query.setParameter("tipoDcoumento", tipoDcoumento);
				query.setParameter("numeroDocumento", numeroDocumento);

				List<Cnconsclin> pis;
				pis = query.list();

				for (Cnconsclin pi : pis) {
					Cpservicio servicio = pi.getCcocservic();
					Hibernate.initialize(servicio);
					Cptipodocu tipo = pi.getCcontipdoc();
					Hibernate.initialize(tipo);

					Chusuario usuaaux = pi.getCcolusuario();
					Hibernate.initialize(usuaaux);

				}

				return pis;
			}
		});
		return pis;
	}

	public void closeLaboratorio(final List<Cnconsclin> lstconsulta, final String userName) throws ModelException {
		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {

					for (Cnconsclin consulta : lstconsulta) {

						if (consulta != null && consulta.getServicioAtendido() != null
								&& consulta.getServicioAtendido().equals("S")) {
							StringBuffer sbAda = new StringBuffer();
							sbAda.append(" update clinico.CFDETAFACTURA ccdf1  set ccdf1.CDFCETAPA = 'AT' ");
							sbAda.append(" where (ccdf1.CDFNCONSFACT, ccdf1.CDFNNUMITEM) in( ");
							sbAda.append(" select ccdf.CDFNCONSFACT, ccdf.CDFNNUMITEM ");
							sbAda.append(" from clinico.CFFACTURA ccfa, clinico.CFDETAFACTURA ccdf ");
							sbAda.append(" where ccfa.CFNCONSFACT = ccdf.CDFNCONSFACT ");
							sbAda.append(" and ccfa.CFNADMISION = :wadmision ");
							sbAda.append(" and ccdf.CDFCSERVICIO = :wservicio ) ");

							Query queryAda = session.createQuery(sbAda.toString());
							queryAda.setParameter("wadmision", consulta.getCconnumdoc());
							queryAda.setParameter("wservicio", consulta.getCcocservic().getCsvccodigo());
							queryAda.executeUpdate();

							if (consulta != null) {
								consulta.setCcothorate(new Date());
								consulta.setCcodfeccon(new Date());
								consulta.setCcocetapa(IConstantes.ETAPA_ATENDIDO);
								consulta.setCcocusumod(userName);
								// Cambiamos el estado de la consulta x clinica a atendida
								session.update(consulta);

								generarHonorariosLaboratorio(session, consulta, userName);
							}

						}
					}

					return lstconsulta;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		}
	}

	private void generarHonorariosLaboratorio(Session session, Cnconsclin consulta, String userName) {
		// Ingresamos los honorarios del profesional

		Cnprofxcon honorarios = null;
		Cptarxprof tarifas = null;
		Cpcontrato contrato = null;
		Integer wswcont = null;
		BigDecimal wtarpar = null;
		BigDecimal wtarcre = null;

		Cpprofesio profesional = null;
		String wregnod = null;
		BigDecimal wvalpag = null;
		BigDecimal wvalser = null;
		wvalpag = new BigDecimal("0");

		if (consulta != null && userName != null && consulta.getCconclinic() != null) {

			BigDecimal codigoCentroLectura = null;

			StringBuffer sb11 = new StringBuffer();
			sb11.append(" select max(chpl.comp_id.hplncodprofes) from " + Chproflabo.class.getName()
					+ " chpl  where chpl.comp_id.hplnclinica = :hplnclinprof AND chpl.hplcestado  = 'VG' " + "  ");
			Query query11 = session.createQuery(sb11.toString());
			query11.setParameter("hplnclinprof", consulta.getCconclinic());
			codigoCentroLectura = (BigDecimal) query11.uniqueResult();

			if (codigoCentroLectura != null) {
				StringBuffer sb4 = new StringBuffer();
				sb4.append(" select cppr from " + Cpprofesio.class.getName()
						+ " cppr  where cppr.id.cpfnclinic = :cpfnclinic " + " and cppr.id.cpfncodigo = :codigo ");
				Query query4 = session.createQuery(sb4.toString());
				query4.setParameter("cpfnclinic", consulta.getCconclinic());
				query4.setParameter("codigo", codigoCentroLectura);

				profesional = (Cpprofesio) query4.uniqueResult();
			}

		}

		if (profesional != null) {

			if (consulta != null) {

				StringBuffer sb5 = new StringBuffer();
				sb5.append(" select cnpc from " + Cnprofxcon.class.getName()
						+ " cnpc  where cnpc.id.cpnnconcli = :cpnnconcli AND cnpc.id.cpnnprofes = :cpnnprofes  ");
				Query query5 = session.createQuery(sb5.toString());
				query5.setParameter("cpnnconcli", consulta.getCconnumero());
				query5.setParameter("cpnnprofes", profesional.getId().getCpfncodigo());

				honorarios = (Cnprofxcon) query5.uniqueResult();

			}

			if (consulta != null && profesional != null && profesional.getId() != null && consulta != null
					&& consulta.getCcocservic() != null) {

				StringBuffer sb6 = new StringBuffer();
				sb6.append(" SELECT cpta from " + Cptarxprof.class.getName()
						+ " cpta  WHERE cpta.id.ctanclinic = :ctanclinic ");
				sb6.append(" AND cpta.id.ctanprofes = :ctanprofes  ");
				sb6.append(" AND cpta.id.ctacservic = :ctacservic  ");
				Query query6 = session.createQuery(sb6.toString());
				query6.setParameter("ctanclinic", consulta.getCconclinic());
				query6.setParameter("ctanprofes", profesional.getId().getCpfncodigo());
				query6.setParameter("ctacservic", consulta.getCcocservic().getCsvccodigo());
				tarifas = (Cptarxprof) query6.uniqueResult();
			}

			if (consulta != null) {

				List lstConsulta;
				StringBuffer sb7 = new StringBuffer();
				sb7.append(" SELECT cpco from " + Cpcontrato.class.getName()).append(" cpco  ");
				sb7.append(" WHERE cpco.id.ccnnnumero = :ccnnnumero  ");
				sb7.append(" AND cpco.id.ccnnclinic = :ccnnclinic  ");
				Query query7 = session.createQuery(sb7.toString());
				query7.setParameter("ccnnnumero", consulta.getCconcontra());
				query7.setParameter("ccnnclinic", consulta.getCconclinic());
				lstConsulta = query7.list();

				if (lstConsulta != null && !lstConsulta.isEmpty()) {
					contrato = (Cpcontrato) lstConsulta.get(0);
				}
			}

			if (tarifas != null && contrato != null) {
				wswcont = contrato.getCcnnswcont();

				wtarpar = tarifas.getCtaatarpar();

				wtarcre = tarifas.getCtaatarcre();

				wvalser = consulta.getCcoavalser();

				if (wswcont == 0 || contrato.getId().getCcnnnumero().intValue() == 1000) {
					wvalpag = (wtarpar);
				} else {
					wvalpag = (wtarcre);
				}

				if (wvalpag != null && wvalpag.floatValue() < 1) {
					if (wvalser != null) {
						wvalpag = wvalser.multiply(wvalpag);
					}

				}

				if (honorarios == null) {
					honorarios = new Cnprofxcon();
				}
				Cptipocont tipocon;

				tipocon = null;
				boolean wok_funcion;
				wok_funcion = true;

				wregnod = cfpagnod(session, profesional.getCpfnclinic(), profesional.getCpfncodigo(),
						consulta.getCcocservic().getCsvccodigo());

				honorarios.setCpnnconcli(consulta.getCconnumero());
				if (profesional != null && profesional.getId() != null) {
					honorarios.setCpnnprofes(profesional.getId().getCpfncodigo());

					honorarios.setCpncregnod(wregnod);
					honorarios.setCpncmodnod(" ");
					honorarios.setCpnccalnod(" ");
					honorarios.setCpnctomnod(wregnod);
					honorarios.setCpncpagada("N");
					honorarios.setCpnavalpag(wvalpag);
					honorarios.setCpndfeccon(consulta.getCcodfeccon());
					honorarios.setCpndfecreg(new Date());
					honorarios.setCpndfecmod(null);
					honorarios.setCpndfeccal(null);
					honorarios.setCpncusureg(userName);
					honorarios.setCpncusumod(null);
					honorarios.setCpncusucal(null);
					honorarios.setCpnnclinic(consulta.getCconclinic());
					honorarios.setCpncestado(IConstantes.ESTADO_VIGENTE);
					session.saveOrUpdate(honorarios);

				}

			}
		}

	}

	public Cncitologi getCitologiaByAdmisionAndTipoHistoria(Cnconsclin consulta, Integer tipoHistoria)
			throws ModelException {
		List<Cncitologi> resultList = null;
		List parametros = new ArrayList();

		try {
			if (consulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select cnci from " + Cncitologi.class.getName() + " cnci  where cnci.ccintipdoc = ?  ");
				sb.append(" and cnci.ccinnumdoc = ? ");
				sb.append(" and cnci.ccintiphis = ? ");

				parametros.add(consulta.getCcontipdoc());
				parametros.add(consulta.getCconnumdoc());
				parametros.add(tipoHistoria);
				resultList = (List<Cncitologi>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					Cncitotoma toma = getTomaCitologia(resultList.get(0).getCcinconsec().intValue());
					if (toma != null) {
						return resultList.get(0);
					} else {
						return null;
					}
				}

				return null;
			} else {
				return null;
			}

		} catch (HibernateException e) {
			throw new ModelException("Error Obteniendo Usuario Citologia :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Obteniendo Usuario Citologia:" + e.getMessage(), e);
		}

	}

	public List<Cfdetafactura> validacionTomaPaquete(Integer consultaClinica) throws ModelException {
		List<Cfdetafactura> resultList1 = null;
		List<Cfdetafactura> resultList2 = null;
		Cfdetafactura detafactura = null;
		List parametros = new ArrayList();

		try {

			if (consultaClinica != null) {

				StringBuffer sb = new StringBuffer();
				sb.append(" select det from " + Cfdetafactura.class.getName() + "  det where det.cdfnconsuclin = ?  ");
				resultList1 = (List<Cfdetafactura>) this.getHibernateTemplate().find(sb.toString(), consultaClinica);

			}
			if (resultList1 != null && !resultList1.isEmpty()) {
				detafactura = resultList1.get(0);
				StringBuffer sb2 = new StringBuffer();
				sb2.append(" select cf from " + Cfdetafactura.class.getName()).append(" cf ");
				sb2.append(",");
				sb2.append(Cpservicio.class.getName()).append(" cp ");
				sb2.append("  where cf.comp_id.cdfnconsfact = ? "
						+ "  and cf.cdfcpaquet = ? and cp.csvccodigo = cf.cdfcservicio "
						+ "  and cp.csvntiphis in (50,51) and cf.cdfnconsuclin != ?");

				parametros.add(detafactura.getComp_id().getCdfnconsfact());
				parametros.add(detafactura.getCdfcpaquet());
				parametros.add(detafactura.getCdfnconsuclin());
				resultList2 = (List<Cfdetafactura>) this.getHibernateTemplate().find(sb2.toString(),
						parametros.toArray());

				return resultList2;

			} else {
				return null;
			}

		} catch (HibernateException e) {
			throw new ModelException("Error consultando detalle factura:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando detalle factura:" + e.getMessage(), e);
		}
	}

	public List<Cfdetafactura> validacionTomaPaquete(Long numAdmision, String codServicio, Long numConsulta)
			throws ModelException {
		List<Cfdetafactura> resultList1 = null;
		List<Cfdetafactura> resultList2 = null;
		Cfdetafactura detafactura = null;
		List parametros = new ArrayList();
		List parametros1 = new ArrayList();

		try {
			if (numAdmision != null && codServicio != null && !codServicio.trim().equals("") && numConsulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select det from " + Cffactura.class.getName() + " fac, " + Cfdetafactura.class.getName()
						+ " det where fac.cfnadmision = ? and det.comp_id.cdfnconsfact = fac.cfnconsfact "
						+ " and (det.cdfcservicio = ? or det.cdfnconsuclin = ?) order by det.comp_id.cdfnnumitem ");
				parametros.add(numAdmision);
				parametros.add(codServicio);
				parametros.add(numConsulta);
				resultList1 = (List<Cfdetafactura>) this.getHibernateTemplate().find(sb.toString(),
						parametros.toArray());
			}
			if (resultList1 != null && !resultList1.isEmpty()) {
				detafactura = resultList1.get(0);
				StringBuffer sb2 = new StringBuffer();
				sb2.append(" select cf from " + Cfdetafactura.class.getName()).append(" cf, ");
				sb2.append(Cpservicio.class.getName()).append(" cp "
						+ " where cf.comp_id.cdfnconsfact = ? and cf.cdfcpaquet = ? and cp.csvccodigo = cf.cdfcservicio "
						+ " and cp.csvntiphis in (50,51) and cf.comp_id.cdfnnumitem != ? ");
				parametros1.add(detafactura.getComp_id().getCdfnconsfact());
				parametros1.add(detafactura.getCdfcpaquet());
				parametros1.add(detafactura.getComp_id().getCdfnnumitem());
				resultList2 = (List<Cfdetafactura>) this.getHibernateTemplate().find(sb2.toString(),
						parametros1.toArray());

				return resultList2;
			} else {
				return null;
			}

		} catch (HibernateException e) {
			throw new ModelException("Error consultando detalle factura:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando detalle factura:" + e.getMessage(), e);
		}
	}

	/**
	 * @param consultaClinica
	 * @return
	 * @throws ModelException
	 */
	public List<Cfdetafactura> validacionPaqueteLectura(Integer consultaClinica) throws ModelException {
		List<Cfdetafactura> resultList = null;
		List parametros = new ArrayList();

		try {

			if (consultaClinica != null) {

				StringBuffer sb = new StringBuffer();
				sb.append(" select det from " + Cfdetafactura.class.getName()
						+ "  det where det.cdfnconsuclin = ? and det.cdfcpaquet in ('PQ908436.0','PQ898030') ");
				resultList = (List<Cfdetafactura>) this.getHibernateTemplate().find(sb.toString(), consultaClinica);

			}
			if (resultList != null && !resultList.isEmpty()) {
				return resultList;
			} else {
				return null;
			}

		} catch (HibernateException e) {
			throw new ModelException("Error consultando detalle factura:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando detalle factura:" + e.getMessage(), e);
		}
	}

	public Agendamiento getPrimerAgendaUsuarioServicioFecha(final Date fecha, final Integer clinica,
			final Integer tipoagenda, final Long numusuario) throws ModelException {
		Agendamiento pis = (Agendamiento) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				StringBuffer sb = new StringBuffer();
				sb.append(" select age from ").append(Agendamiento.class.getName());
				sb.append(" age where age.fecha_agenda = trunc(:fecha) "
						+ "and age.id_sede = :clinica and age.id_paciente = :numusuario "
						+ "and age.estado_agenda = 1 and age.consulta_cln is null "
						+ "and age.especialidad in (select ser.csvccodigo from ").append(Cpservicio.class.getName());
				sb.append(" ser where ser.csvntipage = :tipoagenda) " + "ORDER BY age.fecha_agenda, age.hora_agenda ");
				String hql = sb.toString();
				Query query = session.createQuery(hql);

				query.setParameter("fecha", fecha);
				query.setParameter("clinica", clinica);
				query.setParameter("tipoagenda", tipoagenda);
				query.setParameter("numusuario", numusuario);

				Agendamiento pis = new Agendamiento();

				if (!query.list().isEmpty()) {
					pis = (Agendamiento) query.list().get(0);
				}

				return pis;
			}
		});
		return pis;

	}

	/**
	 * @param interconsulta
	 * @return
	 * @throws ModelException
	 */
	public List<Chtipointerc> getInterconsultaPorCriterios(Chtipointerc interconsulta) throws ModelException {
		List<Chtipointerc> resultList = null;
		List parametros = new ArrayList();
		try {

			if (interconsulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(
						" select chti from " + Chtipointerc.class.getName() + " chti  where chti.hticestado = 'VG'  ");

				if (interconsulta.getHticcodigo() != null) {
					sb.append(" and chti.hticcodigo like ? ");
					parametros.add("%" + interconsulta.getHticcodigo().toUpperCase() + "%");

				}

				if (interconsulta.getHticdescripcio() != null) {
					sb.append(" and chti.hticdescripcio like ? ");
					parametros.add("%" + interconsulta.getHticdescripcio().toUpperCase() + "%");
				}

				resultList = (List<Chtipointerc>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList;
				}
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Contratos:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Contratos:" + e.getMessage(), e);
		}

	}

	/**
	 * @param interconsulta
	 * @return
	 * @throws ModelException
	 */
	public Chtipointerc getInterconsultaPorCriterios(String interconsulta) throws ModelException {
		List<Chtipointerc> resultList = null;
		List parametros = new ArrayList();
		try {

			if (interconsulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chti from " + Chtipointerc.class.getName() + " chti  where chti.hticcodigo = ?  ");
				parametros.add(interconsulta);

				resultList = (List<Chtipointerc>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Interconsulta:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Interconsulta:" + e.getMessage(), e);
		}

	}

	public Cfdetafactura validacionServicioEntregaResultado(Integer consultaClinica) throws ModelException {
		List<Cfdetafactura> resultList = null;
		List<Cfdetafactura> resultList2 = null;
		List parametros = new ArrayList();
		Cfdetafactura detafactura = null;

		try {

			if (consultaClinica != null) {

				StringBuffer sb = new StringBuffer();
				sb.append(" select det from ");
				sb.append(Cfdetafactura.class.getName()).append(" det ");
				sb.append(" where det.cdfnconsuclin = ? ");
				resultList = (List<Cfdetafactura>) this.getHibernateTemplate().find(sb.toString(), consultaClinica);

				if (resultList != null && !resultList.isEmpty()) {
					detafactura = resultList.get(0);
					StringBuffer sb2 = new StringBuffer();
					sb2.append(" select cf from " + Cfdetafactura.class.getName()).append(" cf ");
					sb2.append(",");
					sb2.append(Cpservicio.class.getName()).append(" cp ");
					sb2.append("  where cf.comp_id.cdfnconsfact = ? "
							+ "  and cf.cdfcpaquet = ? and cp.csvccodigo = cf.cdfcservicio "
							+ "  and cp.csvntiphis = ? ");

					parametros.add(detafactura.getComp_id().getCdfnconsfact());
					parametros.add(detafactura.getCdfcpaquet());
					parametros.add(IConstantes.HISTORIA_ENTREGA_RESULTADO);
					resultList2 = (List<Cfdetafactura>) this.getHibernateTemplate().find(sb2.toString(),
							parametros.toArray());

					if (resultList2 != null && !resultList2.isEmpty()) {
						return resultList2.get(0);
					} else {
						return null;
					}
				}

			} else {
				return null;
			}

			return null;
		} catch (HibernateException e) {
			throw new ModelException("Error consultando Servicio en factura:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Servicio en factura:" + e.getMessage(), e);
		}
	}

	public void saveDetalleFactura(final Cfdetafactura detafactura) throws ModelException {
		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {
					session.saveOrUpdate(detafactura);
					return detafactura;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		}
	}

	/**
	 * @return
	 * @throws ModelException
	 */
	public List<Chtipoantece> getTipoAntecedentesIve(String tipoAntecedente) throws ModelException {
		List<Chtipoantece> resultList = null;
		List parametros = new ArrayList();
		try {

			StringBuffer sb = new StringBuffer();
			sb.append(" select chta from " + Chtipoantece.class.getName()
					+ " chta  where chta.htacclaseantec = ?  order by  chta.htanorden asc ");
			parametros.add(tipoAntecedente);

			resultList = (List<Chtipoantece>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			if (!resultList.isEmpty()) {
				return resultList;
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando tipos de Antecedentes Generales Ive:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando tipos de Antecedentes Generales Ive :" + e.getMessage(), e);
		}

	}

	/**
	 * @param antecedentes
	 * @param numeroConsulta
	 * @throws ModelException
	 */
	public void saveAntecedentesIve(final Long numeroConsulta, final Chantecdetal antecedentesDetallado)
			throws ModelException {
		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {

					if (numeroConsulta != null) {
						if (antecedentesDetallado != null && antecedentesDetallado.getHadcgrupsang() != null) {
							antecedentesDetallado.setHaddfecregistr(new Date());
							ChantecdetalPK chantecdetalPK = new ChantecdetalPK();
							chantecdetalPK.setHadlconsulta(numeroConsulta);
							chantecdetalPK.setHadnconsecuti(1);
							antecedentesDetallado.setComp_id(chantecdetalPK);

							session.saveOrUpdate(antecedentesDetallado);
						}
					}

					return antecedentesDetallado;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		}
	}

	/**
	 * @param numeroConsulta
	 * @return
	 * @throws ModelException
	 */
	public Chantecdetal getAntecedentesDetallado(Long numeroConsulta) throws ModelException {
		List<Chantecdetal> resultList = null;
		List parametros = new ArrayList();
		try {
			if (numeroConsulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chandet from " + Chantecdetal.class.getName()
						+ " chandet  where chandet.id.hadlconsulta = ? ");
				parametros.add(numeroConsulta);

				resultList = (List<Chantecdetal>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Antecedentes Detallados:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Antecedentes Detallados :" + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroUsuario
	 * @return
	 * @throws ModelException
	 */
	public List getCopiaVphXconsecutivo(Long numeroUsuario, Integer consecutivoCito) throws ModelException {

		List resultList = null;

		try {
			if (numeroUsuario != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(
						" select cnci.ccinconsec, cnci.ccinnumero, cnci.ccictipide, cnci.ccianumide, cnci.ccicprinom, NVL(cnci.ccicsegnom,'--'), cnci.ccicpriape, NVL(cnci.ccicsegape,'--'),cnct.ctmdfectom,cncl.ccvdfecreg   ");
				sb.append(" from clinico.cncitologi cnci ");
				sb.append(" LEFT JOIN clinico.cncitotoma cnct  ON  cnci.ccinconsec = cnct.ctmnconsec  ");
				sb.append(" LEFT JOIN  clinico.cncitovphlect cncl ON cnci.ccinconsec = cncl.ccvnconsec  ");
				sb.append(" where ccilusuario = ? ");
				sb.append(" AND ccintiphis in (50,53)");
				sb.append(" AND cnci.ccinconsec = ? ");
				sb.append(" order by cnct.ctmdfectom desc  ");

				Query query = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
						.createQuery(sb.toString());
				query.setParameter(0, numeroUsuario);
				query.setParameter(1, consecutivoCito);

				resultList = query.list();

				if (!resultList.isEmpty()) {
					return resultList;
				}

				return null;
			} else {
				return null;
			}
		} catch (HibernateException e) {
			throw new ModelException("Error obteniendo copia de vph :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error obteniendo copia de vph:" + e.getMessage(), e);
		}

	}

	/**
	 * @param fechaInicial
	 * @param clinica
	 * @return
	 * @throws ModelException
	 */
	public List<Object[]> getTomaVphXclinicaAndFecha(Date fechaInicial, Date fechaFinal, Integer clinica)
			throws ModelException {
		List resultList = null;

		String HORA_INICIAL = " 00:00";
		String HORA_FINAL = " 23:59";
		String fechaI = null;
		String fechaF = null;
		if (fechaInicial != null) {
			SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");

			fechaI = dateFormat.format(fechaInicial) + HORA_INICIAL;
			fechaF = dateFormat.format(fechaFinal) + HORA_FINAL;
		}

		try {
			if (fechaInicial != null && clinica != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(
						" select cito.ccinconsec,cito.ccicprinom,cito.ccicpriape,cito.ccictipide,cito.ccianumide,toma.ctmdfecreg,toma.ctmnclinic ");
				sb.append(" from clinico.cncitologi cito ,clinico.cncitotoma toma ");
				sb.append(" where cito.ccinconsec = toma.ctmnconsec ");
				sb.append(" and toma.ctmnclinic =:clinica ");
				sb.append(" and toma.ctmntiphis =:tipoHistoria ");
				sb.append(
						" and (toma.ctmdfecreg BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))  ");

				Query sqlquery = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
						.createQuery(sb.toString());
				sqlquery.setParameter("fechaI", fechaI);
				sqlquery.setParameter("fechaF", fechaF);
				sqlquery.setParameter("clinica", clinica);
				sqlquery.setParameter("tipoHistoria", IConstantes.HISTORIA_PROCEDIMIENTO_VPH_TOMA);

				resultList = sqlquery.list();

				if (!resultList.isEmpty()) {
					return resultList;
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando la toma de citolog�a :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando la toma de citolog�a : " + e.getMessage(), e);
		}

	}

	/**
	 * @param antecedente
	 * @throws ModelException
	 */
	public void saveAntecedenteObstetricopr(Chanteobstpr antecedente) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(antecedente);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Antecedente Obstetrico Prenatal:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Antecedente Obstetrico Prenatal :" + e.getMessage(), e);
		}
	}

	/**
	 * @param numeroConsulta
	 * @return
	 * @throws ModelException
	 */
	public Chanteobstpr getAntecedenteObstetricopr(Long numeroConsulta) throws ModelException {
		List<Chanteobstpr> resultList = null;
		List parametros = new ArrayList();

		try {
			if (numeroConsulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chao from " + Chanteobstpr.class.getName()
						+ " chao  where chao.id.haolconsulta = ? AND chao.id.haoctiposervi = ? ");
				parametros.add(numeroConsulta);
				parametros.add(IConstantes.TIPO_CONSULTA);

				resultList = (List<Chanteobstpr>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Antecedentes Obstetricos:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Antecedentes Obstetricos:" + e.getMessage(), e);
		}

	}

	public Chanteginecopre getAntecedentesGinecologicospre(Long numeroUsuario) throws ModelException {
		List<Chanteginecopre> resultList = null;
		List parametros = new ArrayList();
		try {
			StringBuffer sb = new StringBuffer();
			sb.append(" select chag from " + Chanteginecopre.class.getName() + " chag  where chag.haglconsulta = ?");
			parametros.add(numeroUsuario);

			resultList = (List<Chanteginecopre>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			if (!resultList.isEmpty()) {
				return resultList.get(0);
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Antecedentes Ginecologico:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Antecedentes Ginecologicos:" + e.getMessage(), e);
		}

	}

	/**
	 * @see ClinicoDaoImp#saveAntecedenteGinecopre(antecedente) Salvar o modificar
	 *      los antecedentes Ginecologicos prenatal
	 */
	public void saveAntecedenteGinecopre(Chanteginecopre antecedente) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(antecedente);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Antecedentes Ginecologicos:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Antecedentes Ginecologicos :" + e.getMessage(), e);
		}
	}

	/**
	 * @param numeroUsuario
	 * @return
	 * @throws ModelException
	 */
	public Chanteginecopre getUltimoAntecedentesGinecologicospre(Long numeroUsuario) throws ModelException {
		List<Chanteginecopre> resultList = null;
		List parametros = new ArrayList();
		try {
			if (numeroUsuario != null) {

				StringBuffer sb = new StringBuffer();
				sb.append(" select chag from ").append(Chanteginecopre.class.getName()).append(" chag, ");
				sb.append(Chconsulta.class.getName()).append(" chco ");
				sb.append(" where chag.haglconsulta = chco.hcolnumero ");
				sb.append(" and  chag.hagdfecregistr =  ").append(" (select max(chag1.hagdfecregistr)");
				sb.append(" from ").append(Chanteginecopre.class.getName()).append(" chag1, ");
				sb.append(Chconsulta.class.getName()).append(" chco1 ");
				sb.append(" where chag1.haglconsulta = chco1.hcolnumero ");
				sb.append(" and chco1.hcolnumero = ? ) ");
				parametros.add(numeroUsuario);

				resultList = (List<Chanteginecopre>) this.getHibernateTemplate().find(sb.toString(),
						parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Ultimo Examen Fisico Usuario :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Ultimo Examen Fisico Usuario :" + e.getMessage(), e);
		}

	}

	/**
	 * @param consclin
	 * @return
	 * @throws ModelException
	 */
	public Chanteginecopre getAntecedentesGinecologicospre(Cnconsclin consclin) throws ModelException {
		List<Chanteginecopre> resultList = null;
		List parametros = new ArrayList();
		try {

			if (consclin != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(
						" select chag from " + Chanteginecopre.class.getName() + " chag  where chag.haglconsulta = ? ");
				parametros.add(consclin.getCconnumero());

				resultList = (List<Chanteginecopre>) this.getHibernateTemplate().find(sb.toString(),
						parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Antecedentes Ginecologico Prenatal:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Antecedentes Ginecologicos Prenatal:" + e.getMessage(), e);
		}

	}

	/**
	 * @param valoracion
	 * @throws ModelException
	 */
	public void saveValoracionBiopsicosocial(Chvalorabiopsi valoracion) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(valoracion);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Valoracion Biopsicosocial:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Valoracion Biopsicosocial:" + e.getMessage(), e);
		}
	}

	/**
	 * @param numeroConsulta
	 * @return
	 * @throws ModelException
	 */
	public Chvalorabiopsi getValoracionBiopsicosocial(Long numeroConsulta) throws ModelException {
		List<Chvalorabiopsi> resultList = null;
		List parametros = new ArrayList();

		try {
			if (numeroConsulta != null) {
				StringBuffer sb = new StringBuffer();

				sb.append(
						" select chvb from " + Chvalorabiopsi.class.getName() + " chvb  where chvb.hvbnconsulta = ? ");
				parametros.add(numeroConsulta);

				resultList = (List<Chvalorabiopsi>) this.getHibernateTemplate().find(sb.toString(),
						parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando valoracion biopsicosocial:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando valoracion biopsicosocial:" + e.getMessage(), e);
		}

	}

	/**
	 * @param consulta Clinica
	 * @return
	 * @throws ModelException
	 */
	public Chasesoriaive getAsesoriaIve(Long consulta) throws ModelException {
		List<Chasesoriaive> resultList = null;
		List parametros = new ArrayList();
		try {

			if (consulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chas from " + Chasesoriaive.class.getName() + " chas  where chas.hailconsulta = ? ");
				parametros.add(consulta);

				resultList = (List<Chasesoriaive>) this.getHibernateTemplate().find(sb.toString(),
						parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Asesoria IVE:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Asesoria IVE:" + e.getMessage(), e);
		}

	}

	/**
	 * @param asesoria
	 * @throws ModelException
	 */
	public void saveAsesoriaIve(Chasesoriaive asesoria) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(asesoria);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Asesoria Ive:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Asesoria Ive:" + e.getMessage(), e);
		}
	}

	/**
	 * @param sexo
	 * @return
	 * @throws ModelException
	 */
	public List<Chmetodoplan> getMetodosPlanificacionIve(String sexo) throws ModelException {
		List<Chmetodoplan> resultList = null;
		List parametros = new ArrayList();

		try {

			if (sexo != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(
						" select chmp from " + Chmetodoplan.class.getName() + " chmp where chmp.hmpcsexoaplic in (?,?) "
								+ " and chmp.hmpcestado = 'VG' and chmp.hmpccodigo not in('9999','662200.0')"
								+ "order by chmp.hmpcdescripcio ");
				parametros.add(sexo);
				parametros.add(IConstantes.SEXO_AMBOS);

				resultList = (List<Chmetodoplan>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList;
				}
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Metodos de planificacion:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Metodos de planificacion :" + e.getMessage(), e);
		}
	}

	/**
	 * @param orden
	 * @throws ModelException
	 */
	public void saveLstRegistroOrdenCE(final List<Chcontroorden> orden) throws ModelException {
		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {
					if (orden != null && !orden.isEmpty()) {
						for (Chcontroorden ordenAux : orden) {
							StringBuffer sb = new StringBuffer();
							if (ordenAux.getHcodhorafinoxi() != null) {
								sb.append(" update historia.Chcontroorden" + " set hcocetapa = :etapa , "
										+ " hcocobserva = :observa , " + " hcocoperaadmi = :operador , "
										+ " hcodfechaadmi = :fecha ," + " hcoccestadoadminox = :estadoOxigeno , "
										+ " hcodhorainioxi = :fechaadminOxi , " + " hcodhorafinoxi = :fechaadminOxifin "
										+ " where hcolnumero = :consulta " + " and hconconsecutiv = :consec ");
							} else if (ordenAux.getHcodhorainioxi() != null) {
								sb.append(" update historia.Chcontroorden" + " set hcocetapa = :etapa , "
										+ " hcocobserva = :observa , " + " hcocoperaadmi = :operador , "
										+ " hcodfechaadmi = :fecha ," + " hcoccestadoadminox = :estadoOxigeno , "
										+ " hcodhorainioxi = :fechaadminOxi  " + " where hcolnumero = :consulta "
										+ " and hconconsecutiv = :consec ");
							} else {
								sb.append(" update historia.Chcontroorden" + " set hcocetapa = :etapa , "
										+ " hcocobserva = :observa , " + " hcocoperaadmi = :operador , "
										+ " hcodfechaadmi = :fecha " + " where hcolnumero = :consulta "
										+ " and hconconsecutiv = :consec ");

							}
							Query query = session.createQuery(sb.toString());
							query.setParameter("etapa", ordenAux.getHcocetapa());
							query.setParameter("observa", ordenAux.getHcocobserva());
							query.setParameter("operador", ordenAux.getHcocoperaadmi());
							query.setParameter("fecha", ordenAux.getHcodfechaadmi());
							if (ordenAux.getHcoccestadoadminox() != null) {
								query.setParameter("estadoOxigeno", ordenAux.getHcoccestadoadminox());
							}
							if (ordenAux.getHcodhorainioxi() != null) {
								query.setParameter("fechaadminOxi", ordenAux.getHcodhorainioxi());
							}
							if (ordenAux.getHcodhorafinoxi() != null) {
								query.setParameter("fechaadminOxifin", ordenAux.getHcodhorafinoxi());
							}
							query.setParameter("consulta", ordenAux.getId().getHcolnumero());
							query.setParameter("consec", ordenAux.getId().getHconconsecutiv());
							query.executeUpdate();
						}
					}
					return orden;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		}
	}

	public List<Object[]> getListaServiciosValidacionRetiro(Long admision, String servicio) throws ModelException {
		List<Object[]> resultList = null;

		try {
			if (admision != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select detfac.cdfnnumitem,detfac.cdfnconsfact,detfac.cdfcservicio, ");
				sb.append(" detfac.cdfnorden,detfac.cdfcobserv,detfac.cdfclote,detfac.cdfndescuento, ");
				sb.append(" detfac.cdfniva,detfac.cdfncliente,detfac.cdfnestado,detfac.cdfcpaquet, ");
				sb.append(" detfac.cdfctipdscto,detfac.cdfnvalsrv,detfac.cdfncantidad,detfac.cdfcetapa, ");
				sb.append(
						" detfac.cdfcusuamodi,detfac.cdfdfechmodi,detfac.cdfnconsuclin,detfac.cdfcswitpaq,serv.csvcnombre,serv.csvntiphis");
				sb.append(" from clinico.cfdetafactura detfac,clinico.cpservicio serv  ");
				sb.append(
						" where serv.csvccodigo = detfac.cdfcservicio and detfac.cdfcswitpaq = 'N' and detfac.cdfnconsfact = (select fac.cfnconsfact from clinico.cffactura fac where fac.cfnadmision = :admision) ");
				sb.append(" and detfac.cdfcservicio != :servicio");
				sb.append(" and (serv.csvntiphis = :tipoHistoria1 or serv.csvntiphis = :tipoHistoria2) ");

				Query sqlquery = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
						.createQuery(sb.toString());
				sqlquery.setParameter("admision", admision);
				sqlquery.setParameter("servicio", servicio);
				sqlquery.setParameter("tipoHistoria1", IConstantes.HISTORIA_PROCEDIMIENTO_ASOCIADO);
				sqlquery.setParameter("tipoHistoria2", IConstantes.HISTORIA_ANTICONCEPCION_INSERCION);
				resultList = sqlquery.list();

			}
			if (resultList == null || resultList.isEmpty()) {
				return null;
			}

			return resultList;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando los servicios de la factura:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando los servicios de la factura:" + e.getMessage(), e);
		}

	}

	/**
	 * @param liquidos
	 * @param numero
	 * @throws ModelException
	 */
	public void saveLstRegistroLiquidosNota(final List<Chcontroliqu> liquidos, final Long numero,
			final List<Chformulaliq> lstFormulados, final List<Chnotaenferm> listaChnotaenferm) throws ModelException {
		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {

					if (lstFormulados != null && !lstFormulados.isEmpty()) {
						for (Chformulaliq liqfor : lstFormulados) {
							liqfor.setHflcestado(IConstantes.ETAPA_ATENDIDO);

							session.update(liqfor);
						}
					}

					if (liquidos != null && !liquidos.isEmpty()) {
						Integer consecutivo;
						consecutivo = null;

						StringBuffer sb = new StringBuffer();
						sb.append(" select max(chcl.id.hclnconsecutiv) from " + Chcontroliqu.class.getName()
								+ " chcl  where chcl.id.hcllnumero = :hcllnumero AND chcl.id.hclctiposervi = :hclctiposervi ");
						Query query1 = session.createQuery(sb.toString());
						query1.setParameter("hcllnumero", numero);
						query1.setParameter("hclctiposervi", IConstantes.TIPO_HOSPITALIZACION);

						Integer secuenciaActual = (Integer) query1.uniqueResult();

						if (secuenciaActual != null) {
							consecutivo = secuenciaActual.intValue() + 1;
						} else {
							consecutivo = 1;
						}

						if (liquidos != null && !liquidos.isEmpty()) {
							Iterator it = liquidos.iterator();
							while (it.hasNext()) {
								Chcontroliqu controlAux;
								controlAux = null;
								controlAux = (Chcontroliqu) it.next();
								controlAux.getId().setHclnconsecutiv(consecutivo);
								consecutivo++;
								session.saveOrUpdate(controlAux);
							}
						}

					}

					for (Chnotaenferm nota : listaChnotaenferm) {
						if (nota != null && nota.getId() != null && nota.getId().getHnelconsecutiv() == null) {
							Integer wconsec = null;
							StringBuffer sb = new StringBuffer();
							sb.append(" select max(chne.id.hnelconsecutiv) from  ");
							sb.append(" from Chnotaenferm chne ");
							sb.append(
									" where chne.id.hnelnumero = :hnelnumero AND  chne.id.hnectiposervi = :hnectiposervi   ");

							Query query = session.createQuery(sb.toString());
							query.setParameter("hnelnumero", nota.getId().getHnelnumero());
							query.setParameter("hnectiposervi", nota.getId().getHnectiposervi());

							Integer secuenciaActual = (Integer) query.uniqueResult();

							if (secuenciaActual != null) {
								wconsec = secuenciaActual.intValue() + 1;
							} else {
								wconsec = 1;
							}

							nota.getId().setHnelconsecutiv(wconsec);
							session.saveOrUpdate(nota);
						}
					}

					return liquidos;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		}
	}

	/**
	 * @param dia
	 * @return
	 * @throws ModelException
	 */
	public List<Cnconsclin> getConsultasTuberculinaDia(final Date dia, final Integer codclinica,
			final BigDecimal idMedico, final String numeroIden) throws ModelException {
		List<Cnconsclin> pis = (List<Cnconsclin>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				String HORA_INICIAL = " 00:00";
				String HORA_FINAL = " 23:59";

				Calendar fechaInic = Calendar.getInstance();
				fechaInic.set(Calendar.MONTH, -3);

				SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");

				String fechaI = dateFormat.format(dia) + HORA_INICIAL;
				String fechaF = dateFormat.format(dia) + HORA_FINAL;

				if (numeroIden != null) {
					fechaI = dateFormat.format(fechaInic.getTime()) + HORA_INICIAL;
				}
				StringBuffer sb = new StringBuffer();
				sb.append(
						"SELECT DISTINCT cncl.cconclinic,cncl.cconsalesp,cncl.ccodfeccon,cncl.ccoctipide,cncl.ccoanumide,cncl.ccocprinom,cncl.ccocsegnom,cncl.ccocpriape,cncl.ccocsegape,cncl.cconnumdoc,cncl.cconcontra,cncl.ccolusuario.huslnumero, cncl.ccontipdoc.ctdnnumero, cncl.ccocservic.csvntiphis, cncl.cconnumero,cncl.ccothorcon  from ");
				sb.append(Cnconsclin.class.getName()).append(" cncl ");
				sb.append(" WHERE cncl.ccocestado = 'VG' AND cncl.ccocetapa IN ('ES','EC')");
				if (numeroIden != null) {
					sb.append(" AND cncl.ccoanumide = :wnumide ");
				}
				sb.append(
						" AND (cncl.ccodfeccon BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))");
				sb.append(" AND cncl.cconclinic = :codclinica ");
				sb.append(" AND cncl.ccontipdoc not in (30) ");
				sb.append(" AND cncl.ccocservic.csvntiphis in (55)     ");
				sb.append(
						" group by  cncl.cconclinic,cncl.cconsalesp,cncl.ccodfeccon,cncl.ccoctipide,cncl.ccoanumide,cncl.ccocprinom,cncl.ccocsegnom,cncl.ccocpriape,cncl.ccocsegape,cncl.cconnumdoc,cncl.cconcontra,cncl.ccolusuario.huslnumero, cncl.ccontipdoc.ctdnnumero, cncl.ccocservic.csvntiphis, cncl.cconnumero,cncl.ccothorcon      ");
				sb.append(" order by cncl.ccothorcon asc ");
				String hql = sb.toString();

				Query query = session.createQuery(hql);

				query.setParameter("fechaI", fechaI);
				query.setParameter("fechaF", fechaF);
				query.setParameter("codclinica", codclinica);

				if (numeroIden != null) {
					query.setParameter("wnumide", numeroIden);
				}

				List<Object[]> lstaux;
				lstaux = query.list();
				List<Cnconsclin> pis = new ArrayList();

				if (lstaux != null) {
					for (Object[] ax : lstaux) {
						Chusuario usuarioAux;
						usuarioAux = new Chusuario();
						Cnconsclin consulta = new Cnconsclin();
						Cptipodocu tipoDocu = new Cptipodocu();
						consulta.setCconclinic((Integer) ax[0]);
						consulta.setCconsalesp((Integer) ax[1]);
						consulta.setCcodfeccon((Date) ax[2]);
						consulta.setCcoctipide((String) ax[3]);
						consulta.setCcoanumide((BigDecimal) ax[4]);
						consulta.setCcocprinom((String) ax[5]);
						consulta.setCcocsegnom((String) ax[6]);
						consulta.setCcocpriape((String) ax[7]);
						consulta.setCcocsegape((String) ax[8]);
						consulta.setCconnumdoc((BigDecimal) ax[9]);
						consulta.setCconcontra((Integer) ax[10]);
						usuarioAux.setHuslnumero((Long) ax[11]);
						consulta.setCcolusuario(usuarioAux);
						tipoDocu.setCtdnnumero((Integer) ax[12]);
						consulta.setCcontipdoc(tipoDocu);
						consulta.setTipoHistoria((Integer) ax[13]);
						consulta.setCconnumero((Integer) ax[14]);
						pis.add(consulta);
					}
				}

				return pis;
			}
		});
		return pis;
	}

	/**
	 * @param nota
	 * @throws ModelException
	 */
	public void saveNotaComplementarioEnfermeria(final Chregcomenf nota, final Chrefepaci referenciaPaciente)
			throws ModelException {

		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {
					Integer consecutivo = null;
					if (nota != null && nota.getId() != null) {
						if (nota.getId().gethrcenconsecuti() == null) {
							StringBuffer sb1 = new StringBuffer();
							sb1.append(" select max(chrce.id.hrcenconsecuti) from " + Chregcomenf.class.getName()
									+ " chrce  where chrce.id.hrcelconsulta = :consulta ");
							Query query1 = session.createQuery(sb1.toString());
							query1.setParameter("consulta", nota.getId().gethrcelconsulta());

							Integer secuenciaActual = (Integer) query1.uniqueResult();

							if (secuenciaActual != null) {
								consecutivo = secuenciaActual.intValue() + 1;
							} else {
								consecutivo = 1;
							}
							if (consecutivo != null) {
								nota.getId().sethrcenconsecuti(consecutivo);
							}

						}

						session.saveOrUpdate(nota);
					}
					if (referenciaPaciente != null && referenciaPaciente.getId() != null
							&& referenciaPaciente.getId().getHrpnconsecuti() == null) {

						StringBuffer sb = new StringBuffer();
						sb.append(" select max(chre.id.hrpnconsecuti) from  ");
						sb.append(" from Chrefepaci chre ");
						sb.append(" where chre.id.hrplconsulta = :numeroConsulta");

						Query query = session.createQuery(sb.toString());
						query.setParameter("numeroConsulta", referenciaPaciente.getId().getHrplconsulta());

						Integer secuenciaActual = (Integer) query.uniqueResult();

						if (secuenciaActual != null) {
							consecutivo = secuenciaActual.intValue() + 1;
						} else {
							consecutivo = 1;
						}

						referenciaPaciente.getId().setHrpnconsecuti(consecutivo);

						session.saveOrUpdate(referenciaPaciente);
					}

					return nota;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		}
	}

	/**
	 * @param consulta
	 * @return
	 * @throws ModelException
	 */
	public Chantecespec getAntecedentesTuberculina(Long consulta) throws ModelException {
		List<Chantecespec> resultList = null;
		List parametros = new ArrayList();
		try {
			if (consulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(
						" select chas from " + Chantecespec.class.getName() + " chas  where chas.id.haelconsulta = ? ");
				parametros.add(consulta);

				resultList = (List<Chantecespec>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Antecedentes Tuberculina:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Antecedentes Tuberculina :" + e.getMessage(), e);
		}

	}

	/**
	 * @param Antecedentes especificos
	 * @throws ModelException
	 */
	public void saveAntecedentesTuberculina(Chantecespec chantecespec) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(chantecespec);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Antecedentes especificos:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Antecedentes especificos:" + e.getMessage(), e);
		}
	}

	public List<Chconsulta> getFoliosUsuarioNotaComplementariaEnfemeria(final Long numeroUsuario, final String userName)
			throws ModelException {
		List<Chconsulta> pis = (List<Chconsulta>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				String HORA_INICIAL = " 00:00";
				String HORA_FINAL = " 23:59";
				String fechaI = null;
				String fechaF = null;

				Date fechaAyer = new Date();

				Date fechaFinal = new Date();

				SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");

				fechaI = dateFormat.format(fechaAyer) + HORA_INICIAL;

				fechaF = dateFormat.format(fechaFinal) + HORA_FINAL;

				StringBuffer sb = new StringBuffer();
				sb.append("select chco from ");
				sb.append(Chconsulta.class.getName()).append(" chco ");
				sb.append("WHERE chco.hcolusuario.huslnumero = :numeroUsuario ");
				sb.append(" AND (chco.hcoeetapa != 'CA') ");
				sb.append(" and chco.hcocservicio.csvntipcon != :wtipocon ");
				sb.append(
						" AND chco.hcocservicio.csvntiphis  not in (:wtiphistoma, :wtiphislectura, :wtiphiscero, :wconsultorioIve ) ");
				sb.append(
						" AND chco.hcodfecregistr BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi')");
				sb.append(" order by  chco.hcodfecregistr desc ");

				String hql = sb.toString();

				Query query = session.createQuery(hql);
				query.setParameter("numeroUsuario", numeroUsuario);
				query.setParameter("wtiphistoma", IConstantes.HISTORIA_PROCEDIMIENTO_CITOLOGIA_TOMA);
				query.setParameter("wtiphislectura", IConstantes.HISTORIA_PROCEDIMIENTO_CITOLOGIA_LECTURA);

				query.setParameter("wtiphiscero", IConstantes.HISTORIA_TODAS);
				query.setParameter("wconsultorioIve", IConstantes.CIRUGIA_PROCEDIMIENTO_CONSULTORIO_IVE);
				query.setParameter("wtipocon", 2);

				query.setParameter("fechaI", fechaI);
				query.setParameter("fechaF", fechaF);
				List<Chconsulta> pis;
				pis = query.list();

				for (Chconsulta co : pis) {
					Cpservicio servicio = co.getHcocservicio();
					Hibernate.initialize(servicio);

					Chusuario usu = co.getHcolusuario();
					Hibernate.initialize(usu);

				}

				return pis;
			}
		});
		return pis;
	}

	/**
	 * @param consulta
	 * @return
	 * @throws ModelException
	 */
	public Chantecpatol getAntecedentesPatologicosTuberculina(Long consulta) throws ModelException {
		List<Chantecpatol> resultList = null;
		List parametros = new ArrayList();
		try {
			if (consulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(
						" select chas from " + Chantecpatol.class.getName() + " chas  where chas.id.haplconsulta = ? ");
				parametros.add(consulta);

				resultList = (List<Chantecpatol>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Antecedentes Patologicos Tuberculina:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Antecedentes Patologicos Tuberculina :" + e.getMessage(), e);
		}

	}

	/**
	 * @param Antecedentes patologicos
	 * @throws ModelException
	 */
	public void saveAntecedentesPatologicosTuberculina(Chantecpatol chantecpatol) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(chantecpatol);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Antecedentes patologicos:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Antecedentes patologicos:" + e.getMessage(), e);
		}
	}

	/**
	 * @param consulta
	 * @return
	 * @throws ModelException
	 */
	public Chantecfarma getAntecedentesFarmacologicosTuberculina(Long consulta) throws ModelException {
		List<Chantecfarma> resultList = null;
		List parametros = new ArrayList();
		try {
			if (consulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(
						" select chas from " + Chantecfarma.class.getName() + " chas  where chas.id.haflconsulta = ? ");
				parametros.add(consulta);

				resultList = (List<Chantecfarma>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Antecedentes Farmacologicos Tuberculina:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Antecedentes Farmacologicos Tuberculina :" + e.getMessage(), e);
		}

	}

	/**
	 * @param Antecedentes farmacologicos
	 * @throws ModelException
	 */
	public void saveAntecedentesFarmacologicosTuberculina(Chantecfarma chantecfarma) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(chantecfarma);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Antecedentes farmacologicos:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Antecedentes famracologicos:" + e.getMessage(), e);
		}
	}

	/**
	 * @param numeroUsuario
	 * @return
	 * @throws ModelException
	 */
	public List<Cnconsclin> getCnconsclinLecturaTuberculina(final Long numeroUsuario, final int codigoClinica,
			final String codigoEtapa, List<Integer> listaTipoHistoria) throws ModelException {
		final String tiposHistoria = getStringFromIntegerList(listaTipoHistoria);
		List<Cnconsclin> pis = (List<Cnconsclin>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				StringBuffer sb = new StringBuffer();
				sb.append("select cncc from ");
				sb.append(" Cnconsclin cncc, Chusuario chus, Cpservicio cpsr, Chantecespec tube ");
				sb.append("WHERE ");
				sb.append(" cncc.ccocetapa =  'AT' and ");
				sb.append(" cncc.ccocestado = 'VG' and ");
				sb.append(" chus.huslnumero = cncc.ccolusuario ");
				sb.append(" and tube.id.haelconsulta= cncc.cconnumero ");
				sb.append(" and cncc.cconclinic = :wcodclinica ");
				sb.append(" and chus.huslnumero = :wnumusu ");
				sb.append(" and cpsr.csvccodigo = cncc.ccocservic ");
				sb.append(" and cncc.cconnumero not in (select t.id.hltlconsulta from  Chlecttuber t) ");
				sb.append(" and cpsr.csvntiphis IN (:wtipleccon) ");
				sb.append(" order by  cncc.ccodfecreg  desc  ");

				String hql = sb.toString();
				System.out.println("hql:" + hql);

				Query query = session.createQuery(hql);
				query.setParameter("wtipleccon", IConstantes.HISTORIA_TOMA_TUBERCULINA);
				query.setParameter("wcodclinica", codigoClinica);
				query.setParameter("wnumusu", numeroUsuario);

				List<Cnconsclin> pis;
				pis = query.list();

				for (Cnconsclin co : pis) {
					Cpservicio servicio = co.getCcocservic();
					Hibernate.initialize(servicio);

					Chusuario usu = co.getCcolusuario();
					Hibernate.initialize(usu);
				}

				return pis;
			}
		});
		return pis;
	}

	public Chlecttuber getLecturaTuberculina(Long numeroConsulta) throws ModelException {

		List<Chlecttuber> resultList = null;
		List parametros = new ArrayList();
		try {
			if (numeroConsulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(
						" select chas from " + Chlecttuber.class.getName() + " chas  where chas.id.hltlconsulta = ? ");
				parametros.add(numeroConsulta);

				resultList = (List<Chlecttuber>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Lectura Tuberculina:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Lectura Tuberculina :" + e.getMessage(), e);
		}
	}

	/**
	 * @param Antecedentes farmacologicos
	 * @throws ModelException
	 */
	public void saveLecturaTuberculina(Chlecttuber chlecttuber) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(chlecttuber);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Lectura Tuberculina:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Lectura Tuberculina:" + e.getMessage(), e);
		}
	}

	/**
	 * Obtener una Usuario.
	 */
	public Cpusuario getUsuarioPorOperador(String curcusuari) throws ModelException {
		Cpusuario cpusuario = null;
		java.util.List resultList = null;

		try {
			StringBuffer sb = new StringBuffer();
			sb.append("select a from Cpusuario as a where upper(a.curcusuari) = ? ");

			resultList = this.getHibernateTemplate().find(sb.toString(), curcusuari);

			if (resultList.size() != 0) {
				cpusuario = (Cpusuario) resultList.get(0);
			}

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Usuario:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Usuario:" + e.getMessage(), e);
		}
		return cpusuario;
	}

	public List<Chconsulta> getFoliosUsuarioInformePsicologico(final Long numeroUsuario, final String userName)
			throws ModelException {
		List<Chconsulta> pis = (List<Chconsulta>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				StringBuffer sb = new StringBuffer();
				sb.append("select chco from ");
				sb.append(Chconsulta.class.getName()).append(" chco ");
				sb.append("WHERE chco.hcolusuario.huslnumero = :numeroUsuario ");
				sb.append(" AND chco.hcoeetapa = 'CE' ");
				sb.append(" AND chco.hcocservicio.csvntiphis  not in (:wtiphistoma, :wtiphislectura, :wtiphiscero ) ");
				sb.append(
						" AND chco.hcolnumero in (select chan.haipnnumerconsu from Chautoinfopsic chan where chan.haipcaceptsolic = 'S' and chan.haipcetapa ='AP')");

				sb.append(" order by  chco.hcodfecregistr desc ");

				String hql = sb.toString();

				Query query = session.createQuery(hql);
				query.setParameter("numeroUsuario", numeroUsuario);
				query.setParameter("wtiphistoma", IConstantes.HISTORIA_PROCEDIMIENTO_CITOLOGIA_TOMA);
				query.setParameter("wtiphislectura", IConstantes.HISTORIA_PROCEDIMIENTO_CITOLOGIA_LECTURA);

				query.setParameter("wtiphiscero", IConstantes.HISTORIA_TODAS);

				List<Chconsulta> pis;
				pis = query.list();

				for (Chconsulta co : pis) {
					Cpservicio servicio = co.getHcocservicio();
					Hibernate.initialize(servicio);

					Chusuario usu = co.getHcolusuario();
					Hibernate.initialize(usu);

				}

				return pis;
			}
		});
		return pis;
	}

	/**
	 * @param informe
	 * @throws ModelException
	 */
	public void saveInformePsicologico(final Chinfopsico informe, final Chautoinfopsic autoriza) throws ModelException {

		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {
					Long consecutivo = null;
					if (informe != null && informe.getId() != null) {
						if (informe.getId().getHipnconsecuti() == null) {
							StringBuffer sb1 = new StringBuffer();
							sb1.append(" select max(chip.id.hipnconsecuti) from " + Chinfopsico.class.getName()
									+ " chip  where chip.id.hiplconsulta = :hiplconsulta   ");
							Query query1 = session.createQuery(sb1.toString());
							query1.setParameter("hiplconsulta", informe.getId().getHiplconsulta());

							Long secuenciaActual = (Long) query1.uniqueResult();

							if (secuenciaActual != null) {
								consecutivo = secuenciaActual + 1L;
							} else {
								consecutivo = 1L;
							}
							if (consecutivo != null) {
								informe.getId().setHipnconsecuti(consecutivo);
							}

						}

						session.saveOrUpdate(informe);

						if (autoriza != null) {
							session.saveOrUpdate(autoriza);
						}

					}

					return informe;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		}
	}

	public List<Cpprofesio> getProfesionalXCedulaXNombre(BigDecimal cedulaprof, Integer codclin, String nombreProf)
			throws ModelException {
		List<Cpprofesio> resultList = null;
		List parametros = new ArrayList();

		try {

			StringBuffer sb = new StringBuffer();

			if (codclin != null) {

				sb.append(" select cppr from " + Cpprofesio.class.getName() + " cppr  where  cppr.id.cpfnclinic = ? ");
				parametros.add(codclin);

			}

			if (cedulaprof != null && !"".equals(cedulaprof)) {
				sb.append("and cppr.cpfacedula = ?");
				parametros.add(cedulaprof);
			}

			if (nombreProf != null && !"".equals(nombreProf)) {
				sb.append("and cppr.cpfcnombre like ?");
				parametros.add("%" + nombreProf + "%");
			}

			resultList = (List<Cpprofesio>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			if (!resultList.isEmpty()) {
				return resultList;
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Profesionales por Codigo:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Profesionales por Codigo:" + e.getMessage(), e);
		}

	}

	/**
	 * @param fechaInicial
	 * @param fechaFinal
	 * @param codclin
	 * @return
	 * @throws ModelException
	 */
	public List<Object[]> getReporteComplEnfer(Date fechaInicial, Date fechaFinal, Integer codclin)
			throws ModelException {
		List resultList = null;
		String HORA_INICIAL = " 00:00";
		String HORA_FINAL = " 23:59";
		String fechaI = null;
		String fechaF = null;
		if (fechaInicial != null && fechaFinal != null) {
			SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
			fechaI = (new StringBuilder()).append(dateFormat.format(fechaInicial)).append(HORA_INICIAL).toString();
			fechaF = (new StringBuilder()).append(dateFormat.format(fechaFinal)).append(HORA_FINAL).toString();
		}
		try {
			if (fechaInicial != null && fechaFinal != null && codclin != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" Select reg.hrcedfecregistr as fechaRegistro,ser.csvccodigo as Codigo,  ");
				sb.append(" ser.csvcnombre as Nombre , co.hconclinica as Clinica, cl.cclcnombre as NombreClinca, ");
				sb.append(
						" reg.hrcecoperador as PersonaAtiende, usu.husetipoiden as TipoIdentificacion ,  usu.husanumeiden as NumeroIdentificacion,");
				sb.append(" to_char(REPLACE(replace(reg.hrcecdescripc,chr(10),''),chr(13),'')) as NotaRegistrada ");
				sb.append(" from historia.Chregcomenf reg, historia.Chconsulta co, ");
				sb.append(" clinico.Cpservicio ser,  historia.Chusuario usu,  clinico.Cpclinica cl ");
				sb.append(" where reg.hrcelconsulta = co.hcolnumero ");
				sb.append(" and co.hcolusuario= usu.huslnumero ");
				sb.append(" and co.hconclinica= cl.cclncodigo ");
				sb.append(" and co.hcocservicio = ser.csvccodigo ");
				sb.append(" and reg.hrcedfecregistr BETWEEN :fechaInicial AND :fechaFinal +1 ");
				// sb.append(" and (reg.hrcedfecregistr BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy
				// hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi')) ");
				if (codclin != null && codclin != 0) {
					sb.append(" and co.hconclinica = :clinica ");
				}

				Query query = getHibernateTemplate().getSessionFactory().getCurrentSession()
						.createQuery(sb.toString());
				if (codclin != null && codclin != 0) {
					query.setParameter("clinica", codclin);
				}

				query.setParameter("fechaInicial", fechaInicial);
				query.setParameter("fechaFinal", fechaFinal);

				resultList = query.list();
			}
			if (resultList != null && resultList.size() != 0) {
				List list = resultList;
				return list;
			}
		} catch (HibernateException e) {
			throw new ModelException(
					(new StringBuilder()).append("Error consultando Datos Reporte Complementario de Enfermeria:")
							.append(e.getMessage()).toString(),
					e);
		} catch (Exception e) {
			throw new ModelException(
					(new StringBuilder()).append("Error consultando Reporte Complementario de Enfermeria:")
							.append(e.getMessage()).toString(),
					e);
		}
		return null;
	}

	/**
	 * @param cuestionario
	 * @throws ModelException
	 */
	public void saveCuestionarioCovid(Cfencuecovid cuestionario) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(cuestionario);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Cuestionario Covid:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Cuestionario Covid:" + e.getMessage(), e);
		}
	}

	/**
	 * @param numeroUsuario
	 * @param fechaConsulta
	 * @return
	 * @throws ModelException
	 */
	public Cfencuecovid getEncuestaCovidXUsuario(final Long numeroUsuario, final Date fechaConsulta)
			throws ModelException {
		Cfencuecovid pis = (Cfencuecovid) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {
				String HORA_INICIAL = " 00:00";
				String HORA_FINAL = " 23:59";

				SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
				String fechaI = dateFormat.format(fechaConsulta.getTime()) + HORA_INICIAL;
				String fechaF = dateFormat.format(fechaConsulta.getTime()) + HORA_FINAL;

				StringBuffer sb = new StringBuffer();
				sb.append("SELECT chec from ");
				sb.append(Cfencuecovid.class.getName()).append(" chec ");
				sb.append("WHERE chec.ceclusuario = :numeroUsuario  ");
				sb.append(
						" AND (chec.cecdfechregi BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))");

				String hql = sb.toString();

				Query query = session.createQuery(hql);
				query.setParameter("numeroUsuario", numeroUsuario);
				query.setParameter("fechaI", fechaI);
				query.setParameter("fechaF", fechaF);
				List<Cfencuecovid> pis;
				pis = query.list();
				if (pis.isEmpty()) {
					return null;
				}
				return pis.get(0);
			}
		});
		return pis;
	}

	// generar reporte de referencias en .xls

	/**
	 * @param codClinica
	 * @return
	 * @throws ModelException
	 */
	public List<Object[]> getReporteReferencia(Integer codClinica, Date fechaInicial, Date fechaFinal)
			throws ModelException {
		List resultList = null;

		String HORA_INICIAL = " 00:00";
		String HORA_FINAL = " 23:59";

		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		String fechaI = dateFormat.format(fechaInicial) + HORA_INICIAL;
		String fechaF = dateFormat.format(fechaFinal) + HORA_FINAL;

		try {
			if (codClinica != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(
						"select chco.HCODFECREGISTR, chco.HCONCLINICA , cpcl.CCLCNOMBRE, chus.HUSETIPOIDEN,chus.HUSANUMEIDEN,(chus.HUSCPRIMERNOMB||' '||chus.HUSCSEGUNDNOMB||' '||chus.HUSCPRIMERAPEL||' '||chus.HUSCSEGUNDAPEL)");
				sb.append(
						",chco.HCOCSERVICIO,cpse.CSVCNOMBRE, chco.HCOCOPERADOR, cpus.CURCNOMBRE, chref.HRECSERVISOLIC");
				sb.append(
						" FROM historia.chconsulta  chco , historia.chreferencia chref , historia.chusuario chus,clinico.cpclinica cpcl,clinico.cpservicio cpse,clinico.cpusuario cpus where chco.HCOLNUMERO = chref.hrelconsulta and chus.HUSLNUMERO = chco.HCOLUSUARIO ");
				sb.append(
						"and cpcl.CCLNCODIGO = chco.HCONCLINICA and cpse.CSVCCODIGO = chco.HCOCSERVICIO and cpus.CURCUSUARI = chco.HCOCOPERADOR and  chref.hredfecregistr BETWEEN TO_DATE(:fechaI, 'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF, 'dd/MM/yyyy hh24:mi')");
				if (codClinica != 0) {
					sb.append(" AND cpcl.cclncodigo  = :codClinica  ");
				}

				Query sqlquery = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
						.createQuery(sb.toString());
				sqlquery.setParameter("fechaI", fechaI);
				sqlquery.setParameter("fechaF", fechaF);

				if (codClinica != 0) {
					sqlquery.setParameter("codClinica", codClinica);
				}

				resultList = sqlquery.list();

				if (!resultList.isEmpty()) {
					return resultList;
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Autorizacion Servicios :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Autorizacion Servicios  : " + e.getMessage(), e);
		}

	}

	/**
	 * @param antecedentes
	 * @param numeroConsulta
	 * @throws ModelException
	 */
	public void saveAntecedentesDetFertilidad(final Long numeroConsulta, final Chantecdetal antecedentesDetallado)
			throws ModelException {
		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {

					if (numeroConsulta != null) {
						if (antecedentesDetallado != null) {
							antecedentesDetallado.setHaddfecregistr(new Date());
							ChantecdetalPK chantecdetalPK = new ChantecdetalPK();
							chantecdetalPK.setHadlconsulta(numeroConsulta);
							chantecdetalPK.setHadnconsecuti(1);
							antecedentesDetallado.setComp_id(chantecdetalPK);

							session.saveOrUpdate(antecedentesDetallado);
						}
					}

					return antecedentesDetallado;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		}
	}

	public List<Chantecdetal> getHistorialAntecedentesDetallado(Long numeroUsuario) throws ModelException {
		List<Chantecdetal> resultList = null;
		List parametros = new ArrayList();
		try {

			if (numeroUsuario != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chandet from " + Chantecdetal.class.getName()).append(" chandet ,");
				sb.append(Chconsulta.class.getName()).append(" chco ");
				sb.append("  where chco.hcolusuario.huslnumero = ? ");
				sb.append("AND chco.hcolnumero = chandet.id.hadlconsulta");
				parametros.add(numeroUsuario);

				resultList = (List<Chantecdetal>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList;
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Antecedentes Detallados:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Antecedentes Detallados :" + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroConsulta
	 * @return
	 * @throws ModelException
	 */
	public Chhisteroscopia getConsultaRegistroHisteroscopia(final Long numeroConsulta) throws ModelException {
		Chhisteroscopia pis = (Chhisteroscopia) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				if (numeroConsulta != null) {
					StringBuffer sb = new StringBuffer();
					sb.append(" select chco from " + Chhisteroscopia.class.getName()
							+ " chco  where chco.hhtlnumero = :numeroConsulta  AND chco.hhtctiposerv = :hcoctiposervi ");

					String hql = sb.toString();

					Query query = session.createQuery(hql);
					query.setParameter("numeroConsulta", numeroConsulta);
					query.setParameter("hcoctiposervi", IConstantes.TIPO_HOSPITALIZACION);
					Chhisteroscopia pis;
					pis = (Chhisteroscopia) query.uniqueResult();

					return pis;
				}
				return null;
			}
		});
		return pis;
	}

	/**
	 * @param numeroConsulta
	 * @return
	 * @throws ModelException
	 */
	public Chhallahistero getConsultaHallazgoHisteroscopia(final Long numeroConsulta) throws ModelException {
		Chhallahistero pis = (Chhallahistero) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				if (numeroConsulta != null) {
					StringBuffer sb = new StringBuffer();
					sb.append(" select chco from " + Chhallahistero.class.getName()
							+ " chco  where chco.hhhlconsulta = :numeroConsulta  AND chco.hhhctiposerv = :hcoctiposervi ");

					String hql = sb.toString();

					Query query = session.createQuery(hql);
					query.setParameter("numeroConsulta", numeroConsulta);
					query.setParameter("hcoctiposervi", IConstantes.TIPO_HOSPITALIZACION);
					Chhallahistero pis;
					pis = (Chhallahistero) query.uniqueResult();

					return pis;
				}
				return null;
			}
		});
		return pis;
	}

	/**
	 * @param numeroConsulta
	 * @return
	 * @throws ModelException
	 */
	public Chconsulta getConsultaActualHisteroscopia(final Long numeroConsulta) throws ModelException {
		Chconsulta pis = (Chconsulta) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				if (numeroConsulta != null) {
					StringBuffer sb = new StringBuffer();
					sb.append(" select chco from " + Chconsulta.class.getName()
							+ " chco  where chco.hcolnumero = :numeroConsulta  AND chco.hcoctiposervi = :hcoctiposervi ");

					String hql = sb.toString();

					Query query = session.createQuery(hql);
					query.setParameter("numeroConsulta", numeroConsulta);
					query.setParameter("hcoctiposervi", IConstantes.TIPO_HOSPITALIZACION);
					Chconsulta pis;
					pis = (Chconsulta) query.uniqueResult();

					if (pis != null) {
						Chusuario usu = pis.getHcolusuario();
						Hibernate.initialize(usu);
						Cpservicio servicio = pis.getHcocservicio();
						Hibernate.initialize(servicio);
						Set impresion = pis.getChimprdiags();
						Hibernate.initialize(impresion);
					}

					return pis;
				}
				return null;
			}
		});
		return pis;
	}

	public List<Object[]> getRegistrosLogImpresion(Long clinica, Long numeroUsuario, Date fechaInicial, Date fechafinal)
			throws ModelException {
		List<Object[]> resultList = null;
		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		String fechaI = dateFormat.format(fechaInicial.getTime()) + HORA_INICIAL;
		String fechaF = dateFormat.format(fechafinal.getTime()) + HORA_FINAL;

		try {
			StringBuffer sb = new StringBuffer();

			sb.append(
					"select logImp.hlidfecharegis,clc.cclcnombre,usua.husetipoiden,usua.husanumeiden,usua.huscprimernomb,usua.huscsegundnomb,usua.huscprimerapel,"
							+ " usua.huscsegundapel,cons.hcocservicio, serv.csvcnombre,logImp.hlicmotiimpr,logImp.hlicmotivoeps,logImp.hlicmotivootro,logImp.hlicoperador,usuaReg.curcnombre  ");
			sb.append(
					"from historia.chlogimpresi logImp,clinico.cpservicio serv,historia.chusuario usua,clinico.cpclinica clc,historia.chconsulta cons,clinico.cpusuario usuaReg");
			sb.append(" where cons.hcocservicio = serv.csvccodigo ");
			sb.append(" and logImp.hlilusuario = usua.huslnumero ");
			sb.append(" and logImp.hlinclinica = clc.cclncodigo ");
			sb.append(" and logImp.hlilconsulta = cons.hcolnumero");
			sb.append(" and logImp.hlicoperador = usuaReg.curcusuari");
			if (numeroUsuario != null) {
				sb.append(" and logImp.hlilusuario = :usuario");
			}
			sb.append(
					" and logImp.hlidfecharegis  BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi') ");

			if (clinica != 0) {
				sb.append(" and logImp.hlinclinica = :clinica");
			}

			Query sqlquery = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
					.createQuery(sb.toString());
			if (clinica != 0) {
				sqlquery.setParameter("clinica", clinica);
			}
			sqlquery.setParameter("fechaI", fechaI);
			sqlquery.setParameter("fechaF", fechaF);
			if (numeroUsuario != null) {
				sqlquery.setParameter("usuario", numeroUsuario);
			}
			resultList = sqlquery.list();

			return resultList;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando el registro de log de impresi�n:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando el registro de log de impresion:" + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroUsuario
	 * @return
	 * @throws ModelException
	 */
	public List<Chconsulta> getFoliosUsuarioXnumConsulta(final Long numeroConsulta) throws ModelException {
		List<Chconsulta> pis = (List<Chconsulta>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				StringBuffer sb = new StringBuffer();
				sb.append("select chco from ");
				sb.append(Chconsulta.class.getName()).append(" chco ");
				sb.append("WHERE chco.hcolnumero = :numeroConsulta ");
				sb.append(" AND chco.hcoeetapa = 'CE' ");
				sb.append(" AND chco.hcocservicio.csvntiphis  not in (:wtiphistoma, :wtiphislectura ) ");
				sb.append("  order by  chco.hcodfecregistr desc ");

				String hql = sb.toString();

				Query query = session.createQuery(hql);
				query.setParameter("wtiphistoma", IConstantes.HISTORIA_PROCEDIMIENTO_CITOLOGIA_TOMA);
				query.setParameter("wtiphislectura", IConstantes.HISTORIA_PROCEDIMIENTO_CITOLOGIA_LECTURA);
				query.setParameter("numeroConsulta", numeroConsulta);

				List<Chconsulta> pis;
				pis = query.list();

				for (Chconsulta co : pis) {
					Cpservicio servicio = co.getHcocservicio();
					Hibernate.initialize(servicio);

					Chusuario usu = co.getHcolusuario();
					Hibernate.initialize(usu);

					Cptipodocu tip = co.getHcontipdoc();
					Hibernate.initialize(tip);

				}

				return pis;
			}
		});

		return pis;
	}

	/**
	 * @param numeroUsuario
	 * @return
	 * @throws ModelException
	 */
	public List getCopiaTuberculina(Long numeroUsuario) throws ModelException {

		List resultList = null;
		try {
			if (numeroUsuario != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(
						" select e.haedfecregistr,l.hltdfechlect, l.hltlconsulta, 0,u.husetipoiden, u.husanumeiden, u.huscprimernomb,nvl(u.huscsegundnomb,'--'),u.huscprimerapel,nvl(u.huscsegundapel,'--')  ");
				sb.append(" from historia.chlecttuber l  ");
				sb.append(" left join historia.chantecespec  e on  l.hltlconsulta= e.haelconsulta   ");
				sb.append(" left join historia.chconsulta c on l.hltlconsulta= c.hcolnumero  ");
				sb.append(" left join historia.chusuario u on u.huslnumero = c.hcolusuario  ");
				sb.append("  where c.hcolusuario= ? ");
				sb.append(" order by l.hltdfechlect desc  ");

				Query query = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
						.createQuery(sb.toString());
				query.setParameter(0, numeroUsuario);

				resultList = query.list();

				if (!resultList.isEmpty()) {
					return resultList;
				}

				return null;
			} else {
				return null;
			}

		} catch (HibernateException e) {
			throw new ModelException("Error obteniendo copia de citologia :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error obteniendo copia de citologia:" + e.getMessage(), e);
		}
	}

	/**
	 * @param numero
	 * @return
	 * @throws ModelException
	 */
	public List<Chescvalcai> getEscalaValoracionCaidasXdia(Long numero) throws ModelException {
		List<Chescvalcai> resultList = null;
		List parametros = new ArrayList<Chescvalcai>();

		String HORA_INICIAL = " 00:00";
		String HORA_FINAL = " 23:59";

		Date fecha = new Date();

		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		String fechaI = dateFormat.format(fecha) + HORA_INICIAL;
		String fechaF = dateFormat.format(fecha) + HORA_FINAL;

		try {

			StringBuffer sb = new StringBuffer();
			sb.append(" select chesc from " + Chescvalcai.class.getName()
					+ " chesc  where chesc.hevlusuario = ? and chesc.hevcdfecregistr BETWEEN TO_DATE(?,'dd/MM/yyyy hh24:mi') AND TO_DATE(?,'dd/MM/yyyy hh24:mi') order by chesc.comp_id.hevcnconsecuti ");

			parametros.add(numero);
			parametros.add(fechaI);
			parametros.add(fechaF);

			resultList = (List<Chescvalcai>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			if (!resultList.isEmpty()) {
				return resultList;
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Escala de Valoracion Caidas:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Escala de Valoracion Caidas: " + e.getMessage(), e);
		}

	}

	/**
	 * @param lectura
	 * @throws ModelException
	 */
	public void saveLecturaVphModificacion(final Cncitovphlect lectura) throws ModelException {
		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {
					Date fechaConsClin;
					Calendar calendar = Calendar.getInstance();
					fechaConsClin = calendar.getTime();
					session.saveOrUpdate(lectura);

					return lectura;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Lectura Vph:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Lectura Vph:" + e.getMessage(), e);
		}
	}

	public List<Cnconsclin> getCnconsclinLecturaVPHMod(final Long numeroUsuario, final int codigoClinica,
			final String codigoEtapa, List<Integer> listaTipoHistoria) throws ModelException {
		final String tiposHistoria = getStringFromIntegerList(listaTipoHistoria);
		List<Cnconsclin> pis2 = (List<Cnconsclin>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				StringBuffer sb2 = new StringBuffer();
				sb2.append("select cncc from ");
				sb2.append("Cnconsclin cncc, Chusuario chus, Cpservicio cpsr ");
				sb2.append("WHERE ");
				sb2.append(" cncc.ccocetapa = 'AT' and ");
				// sb2.append(" cncc.ccocestado = 'VG' and ");
				sb2.append(" chus.huslnumero = cncc.ccolusuario ");
				sb2.append(" and chus.huslnumero = :wnumusu ");
				sb2.append(" and cpsr.csvccodigo = cncc.ccocservic ");
				sb2.append(" and cpsr.csvntiphis IN (:wtiplecvph) ");
				sb2.append("  order by  cncc.ccodfecreg  desc  ");

				String hq2 = sb2.toString();

				Query query2 = session.createQuery(hq2);
				query2.setParameter("wtiplecvph", IConstantes.HISTORIA_LECTURA_VPH_BASE_LIQUIDA);
				query2.setParameter("wnumusu", numeroUsuario);

				List<Cnconsclin> pis2;
				pis2 = query2.list();

				for (Cnconsclin co : pis2) {
					Cpservicio servicio = co.getCcocservic();
					Hibernate.initialize(servicio);

					Chusuario usu = co.getCcolusuario();
					Hibernate.initialize(usu);
				}

				return pis2;
			}
		});
		return pis2;
	}

	public List<Cnconsclin> getConsultaRegistroPAPsicologia(final Long numeroUsuario) throws ModelException {
		List<Cnconsclin> pis = (List<Cnconsclin>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				StringBuffer sb = new StringBuffer();
				sb.append("select cncc from ");
				sb.append(" Cnconsclin cncc, Chusuario chus, Cpservicio cpsr ");
				sb.append(" WHERE ");
				sb.append(" cncc.ccocestado = 'VG' and cncc.ccocetapa NOT IN('AT') and ");
				sb.append(" chus.huslnumero = cncc.ccolusuario ");
				sb.append(" and chus.huslnumero = :numeroUsuario ");
				sb.append(" and cpsr.csvntiphis IN (61) ");
				sb.append(" and cncc.ccocservic = cpsr.csvccodigo ");
				sb.append(" order by  cncc.ccodfecreg  desc  ");
				String hql = sb.toString();

				Query query = session.createQuery(hql);
				query.setParameter("numeroUsuario", numeroUsuario);

				List<Cnconsclin> pis;
				pis = query.list();

				for (Cnconsclin co : pis) {
					Cpservicio servicio = co.getCcocservic();
					Hibernate.initialize(servicio);

					Chusuario usu = co.getCcolusuario();
					Hibernate.initialize(usu);
				}

				return pis;
			}
		});
		return pis;
	}

	/**
	 * @param nota
	 * @throws ModelException
	 */
	public void savePAPsicologia(final Chpapsicologico nota, final Chusuario usuario, final Cnconsclin consulta)
			throws ModelException {
//TODO:
		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {
					if (nota != null) {

						Chconsulta consultaUsuario;
						List lstHonorarios = null;

						consultaUsuario = null;

						StringBuffer sb = new StringBuffer();
						sb.append(" select chco from Chconsulta" + " chco  where chco.hcolnumero = :numeroConsulta   ");
						Query query = session.createQuery(sb.toString());
						query.setParameter("numeroConsulta", nota.getHppnconsulta());

						consultaUsuario = (Chconsulta) query.uniqueResult();

						if (consultaUsuario == null) {
							consultaUsuario = new Chconsulta();

						}

						if (nota != null && usuario != null) {
							consultaUsuario.setHcodfecinicio(new Date());
							consultaUsuario.setHcocentidadadm(usuario.getHuscentidadadm());
							consultaUsuario.setHcocnombacompa(usuario.getHuscnomacompana());
							consultaUsuario.setHcocnombrespo(usuario.getHuscnomresponsa());
							consultaUsuario.setHcocoperador(nota.getHppcusuario());
							consultaUsuario.setHcocservicio(consulta.getCcocservic());
							consultaUsuario.setHcocteleacompa(usuario.getHusctelacompana());
							consultaUsuario.setHcoctelerespo(usuario.getHusctelresponsa());
							consultaUsuario.setHcodfecregistr(new Date());
							consultaUsuario.setHcoeetapa(IConstantes.ESTADO_CERRADO);
							consultaUsuario.setHconfolio(usuario.getHusnfolioactua());
							consultaUsuario.setHcontipoconsu(consulta.getCcontconcl());
							consultaUsuario.setHconnumdoc(consulta.getCconnumdoc());
							consultaUsuario.setHcontipdoc(consulta.getCcontipdoc());
							consultaUsuario.setHconclinica(consulta.getCconclinic());
							consultaUsuario.setHcoctiposervi(IConstantes.TIPO_CONSULTA);
							if (consulta.getCconnumero() != null)
								consultaUsuario.setHcolconsuclini(new Long(consulta.getCconnumero()));
							consultaUsuario.setHcolnumero(new Long(consulta.getCconnumero()));
							consultaUsuario.setHcolusuario(usuario);

							consultaUsuario.setHcocreaconinf(usuario.getHcocreaconinf());

							consultaUsuario.setHcoccuacondil(usuario.getHcoccuacondil());

							consultaUsuario.setHcocautusodat(usuario.getHcocautusodat());

							session.saveOrUpdate(consultaUsuario);

						}

						// VERIFICAMOS SI EXISTE MAS DE UN PROFESIONAL VIGENTE ASIGNADO A LA CONSULTA NO
						// CAMBIAMOS LA FECHA DE LA CONSULTA,. NI ACTUALIZAMOS LA FECHA DE LA CONSULTA

						if (consulta != null) {

							StringBuffer sb5 = new StringBuffer();
							sb5.append(" select cnpc from " + Cnprofxcon.class.getName()
									+ " cnpc  where cnpc.id.cpnnconcli = :cpnnconcli AND cnpc.cpncestado != 'XX'  ");
							Query query5 = session.createQuery(sb5.toString());
							query5.setParameter("cpnnconcli", consulta.getCconnumero());

							lstHonorarios = query5.list();

						}

						if (consulta != null && lstHonorarios != null && lstHonorarios.size() <= 1) {
							consulta.setCcodfeccon(new Date());
							generarHonorariosProfesional(session, consulta, consultaUsuario, nota.getHppcusuario(),
									null);

						}

						if (consulta != null) {

							StringBuffer sbAda = new StringBuffer();
							sbAda.append(" update clinico.Cnconsclin   set CCOCETAPA = 'AT' ");
							sbAda.append(" where CCONNUMERO =  :wnumero  ");

							Query queryAda = session.createQuery(sbAda.toString());
							queryAda.setParameter("wnumero", consulta.getCconnumero());

							queryAda.executeUpdate();

						}

						session.saveOrUpdate(nota);
					}

					return nota;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		}
	}

	/**
	 * @param numeroUsuario
	 * @return
	 * @throws ModelException
	 */
	public List getCopiaPAPsicologia(Long numeroUsuario) throws ModelException {

		List resultList = null;
		try {
			if (numeroUsuario != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(
						" select e.haedfecregistr,l.hltdfechlect, l.hltlconsulta, 0,u.husetipoiden, u.husanumeiden, u.huscprimernomb,nvl(u.huscsegundnomb,'--'),u.huscprimerapel,nvl(u.huscsegundapel,'--')  ");
				sb.append(" from historia.chlecttuber l  ");
				sb.append(" left join historia.chantecespec  e on  l.hltlconsulta= e.haelconsulta   ");
				sb.append(" left join historia.chconsulta c on l.hltlconsulta= c.hcolnumero  ");
				sb.append(" left join chusuario u on u.huslnumero = c.hcolusuario  ");
				sb.append("  where c.hcolusuario= ? ");
				sb.append(" order by l.hltdfechlect desc  ");

				Query query = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
						.createQuery(sb.toString());
				query.setParameter(0, numeroUsuario);

				resultList = query.list();

				if (!resultList.isEmpty()) {
					return resultList;
				}

				return null;
			} else {
				return null;
			}

		} catch (HibernateException e) {
			throw new ModelException("Error obteniendo copia de citologia :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error obteniendo copia de citologia:" + e.getMessage(), e);
		}
	}

	/**
	 * @param numeroUsuario
	 * @return
	 * @throws ModelException
	 */
	public List getCopiaPapsicologico(Long numeroUsuario) throws ModelException {

		List resultList = null;
		try {
			if (numeroUsuario != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(
						"  select d.hppnconsulta,d.hppcobservacion,d.hppdfecreg,d.hppcusuario,d.hppnpaciente,u.husetipoiden,u.husanumeiden,u.huscprimernomb,u.huscsegundnomb,u.huscprimerapel,u.huscsegundapel ");
				sb.append(" from historia.chpapsicologico d , historia.chusuario u ");
				sb.append(" where u.huslnumero = d.hppnpaciente AND d.hppnpaciente= ? ");
				sb.append(" order by d.hppdfecreg desc  ");

				Query query = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
						.createQuery(sb.toString());
				query.setParameter(0, numeroUsuario);

				resultList = query.list();

				if (!resultList.isEmpty()) {
					return resultList;
				}

				return null;
			} else {
				return null;
			}

		} catch (HibernateException e) {
			throw new ModelException("Error obteniendo copia de primeros auxilios psicologicos :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error obteniendo copia de primeros auxilios psicologicos :" + e.getMessage(), e);
		}
	}

	/**
	 * @param consulta
	 * @return
	 * @throws ModelException
	 */
	public Chpapsicologico getPapsicologicosUser(Long consulta) throws ModelException {
		List<Chpapsicologico> resultList = null;
		List parametros = new ArrayList();
		try {
			if (consulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(
						" select chas from " + Chpapsicologico.class.getName() + " chas  where chas.hppnconsulta = ? ");
				parametros.add(consulta);

				resultList = (List<Chpapsicologico>) this.getHibernateTemplate().find(sb.toString(),
						parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Primeros auxilios Psicologicos:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Primeros auxilios Psicologicos:" + e.getMessage(), e);
		}

	}

	/**
	 * @param dia
	 * @param codclinica
	 * @param idMedico
	 * @return
	 * @throws ModelException
	 */

	public List<Cnconsclin> getMisConsultasCovidAntigenos(final Date dia, final Integer codclinica,
			final BigDecimal idMedico) throws ModelException {
		List<Cnconsclin> pis = (List<Cnconsclin>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {
				String HORA_INICIAL = " 00:00";
				String HORA_FINAL = " 23:59";

				SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
				String fechaI = dateFormat.format(dia) + HORA_INICIAL;
				String fechaF = dateFormat.format(dia) + HORA_FINAL;

				StringBuffer sb = new StringBuffer();
				sb.append("SELECT cncl from ");
				sb.append(Cnconsclin.class.getName()).append(" cncl ");
				sb.append(" WHERE cncl.ccocestado = 'VG' AND cncl.ccocetapa IN ('ES','EC')");
				sb.append(
						" AND (cncl.ccodfeccon BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))");
				sb.append(" AND cncl.ccontipdoc not in (30) ");
				sb.append(" AND cncl.cconclinic = :codclinica ");
				sb.append(" AND cncl.ccocservic.csvntiphis  in (58)");
				sb.append(
						" AND cncl.cconnumero not in (select chco.hcolconsuclini from Chconsulta chco where chco.hcolconsuclini =  cncl.cconnumero and chco.hconclinica = :codclinica and chco.hcoeetapa = 'CE') ");
				sb.append("  AND cncl.ccocservic.csvccodigo in  (SELECT cptp.id.ctacservic from ");
				sb.append(Cptarxprof.class.getName()).append(
						" cptp where cptp.id.ctanprofes = :idMedico and cptp.id.ctanclinic  = :codclinica and cptp.ctacestado = :tarxEstado ");
				sb.append(" ) ");
				sb.append(" order by cncl.ccothorcon asc  ");
				String hql = sb.toString();

				Query query = session.createQuery(hql);

				query.setParameter("fechaI", fechaI);
				query.setParameter("fechaF", fechaF);
				query.setParameter("codclinica", codclinica);
				query.setParameter("idMedico", idMedico);
				query.setParameter("codclinica", codclinica);
				query.setParameter("tarxEstado", IConstantes.ESTADO_VIGENTE);

				List<Cnconsclin> pis;
				pis = query.list();

				for (Cnconsclin pi : pis) {
					Cpservicio servicio = pi.getCcocservic();
					Hibernate.initialize(servicio);
					Cptipodocu tipo = pi.getCcontipdoc();
					Hibernate.initialize(tipo);

					Chusuario ccolusuario = pi.getCcolusuario();
					Hibernate.initialize(ccolusuario);

				}

				return pis;
			}
		});
		return pis;
	}

	public Chregisabort findOneRegistroUsuarioAbort(final Long numeroUsuario) throws ModelException {
		Chregisabort dto = (Chregisabort) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				if (numeroUsuario != null) {
					StringBuffer sb = new StringBuffer();
					sb.append(" select chre from " + Chregisabort.class.getName()
							+ " chre  where chre.hralregiusua = :numeroUsuario  AND chre.hracetapa = 'AC' ");

					String hql = sb.toString();

					Query query = session.createQuery(hql);
					query.setParameter("numeroUsuario", numeroUsuario);

					Chregisabort dto;
					dto = (Chregisabort) query.uniqueResult();

					return dto;
				}
				return null;
			}
		});
		return dto;
	}

	public void saveSeguimientoUsuarioAbort(final Chcontabor chcontabor) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(chcontabor);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		}
	}

	public Chusuarioabor findOneUsuarioAbort(final Long numeId, final String tipoId) {
		Chusuarioabor dto = (Chusuarioabor) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				if (numeId != null && tipoId != null) {
					StringBuffer sb = new StringBuffer();
					sb.append(" select chus from " + Chusuarioabor.class.getName()
							+ " chus  where chus.huaanumeiden = :numeId  AND chus.huactipoiden = :tipoId ");

					String hql = sb.toString();

					Query query = session.createQuery(hql);
					query.setParameter("numeId", numeId);
					query.setParameter("tipoId", tipoId);

					Chusuarioabor dto;
					dto = (Chusuarioabor) query.uniqueResult();

					return dto;
				}
				return null;
			}
		});
		return dto;
	}

	public void saveRegistroUsuarioAbort(final Chregisabort chregisabort) throws ModelException {
		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {
					session.saveOrUpdate(chregisabort);
					return chregisabort;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		}
	}

	public List<Cnconsclin> getConsultasDiaPruebasRapidas(final Date dia, final Integer codclinica,
			final BigDecimal idMedico, final String numeroIdentificacion) throws ModelException {
		List<Cnconsclin> pis = (List<Cnconsclin>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				String HORA_INICIAL = " 00:00";
				String HORA_FINAL = " 23:59";

				SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
				String fechaI = dateFormat.format(dia) + HORA_INICIAL;
				String fechaF = dateFormat.format(dia) + HORA_FINAL;

				if (numeroIdentificacion != null && !numeroIdentificacion.equals("")) {

					Date fechaInicial = null;
					Calendar cal = Calendar.getInstance();
					cal.setTime(dia);
					cal.add(Calendar.MONTH, -3);
					fechaInicial = cal.getTime();
					fechaI = dateFormat.format(fechaInicial) + HORA_INICIAL;
				}

				StringBuffer sb = new StringBuffer();
				sb.append(
						"SELECT DISTINCT cncl.cconclinic,cncl.ccodfeccon,cncl.ccoctipide,cncl.ccoanumide,cncl.ccocprinom,cncl.ccocsegnom,cncl.ccocpriape,cncl.ccocsegape,cncl.cconnumdoc,cncl.cconcontra,cncl.ccolusuario.huslnumero, cncl.ccontipdoc.ctdnnumero ");
				sb.append("    from ");
				sb.append(Cnconsclin.class.getName()).append(" cncl ");
				sb.append(" WHERE cncl.ccocestado = 'VG' AND cncl.ccocetapa IN ('ES','EC')");
				sb.append(
						" AND (cncl.ccodfeccon BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))");
				sb.append(" AND cncl.cconclinic = :codclinica ");
				sb.append(" AND cncl.ccontipdoc not in (30) ");
				sb.append(
						" AND cncl.cconnumero not in (select cnpc.id.cpnnconcli from Cnprofxcon cnpc where cnpc.id.cpnnconcli =  cncl.cconnumero and cnpc.cpnnclinic = :codclinica and cnpc.id.cpnnprofes = :idMedico AND cnpc.cpncestado != 'XX' ) ");
				sb.append(
						" AND cncl.cconnumero not in (select chco.hcolconsuclini from Chconsulta chco where chco.hcolconsuclini =  cncl.cconnumero and chco.hconclinica = :codclinica and chco.hcoeetapa = 'CE') ");

				sb.append(" AND cncl.ccocservic.csvntiphis = :tipoHistoria");
				if (numeroIdentificacion != null) {
					sb.append(" AND cncl.ccoanumide = :numIden  ");
				}

				sb.append(
						" group by  cncl.cconclinic,cncl.ccodfeccon,cncl.ccoctipide,cncl.ccoanumide,cncl.ccocprinom,cncl.ccocsegnom,cncl.ccocpriape,cncl.ccocsegape,cncl.cconnumdoc,cncl.cconcontra,cncl.ccolusuario.huslnumero, cncl.ccontipdoc.ctdnnumero  ");
				// sb.append(" order by cncl.ccothorcon asc ");
				String hql = sb.toString();

				Query query = session.createQuery(hql);

				query.setParameter("fechaI", fechaI);
				query.setParameter("fechaF", fechaF);
				query.setParameter("codclinica", codclinica);
				query.setParameter("tipoHistoria", IConstantes.HISTORIA_PRUEBAS_RAPIDAS);
				// query.setParameter("tarxEstado", IConstantes.ESTADO_VIGENTE);
				query.setParameter("idMedico", idMedico);

				if (numeroIdentificacion != null && !numeroIdentificacion.equals("")) {
					query.setParameter("numIden", numeroIdentificacion);
				}

				List<Object[]> lstaux;
				lstaux = query.list();
				List<Cnconsclin> pis = new ArrayList();

				if (lstaux != null) {
					for (Object[] ax : lstaux) {
						Chusuario usuarioAux;
						usuarioAux = new Chusuario();
						Cnconsclin consulta = new Cnconsclin();
						Cptipodocu tipoDocu = new Cptipodocu();
						Cpservicio servicio = new Cpservicio();
						consulta.setCconclinic((Integer) ax[0]);
						consulta.setCconsalesp(0);
						consulta.setCcodfeccon((Date) ax[1]);
						consulta.setCcoctipide((String) ax[2]);
						consulta.setCcoanumide((BigDecimal) ax[3]);
						consulta.setCcocprinom((String) ax[4]);
						consulta.setCcocsegnom((String) ax[5]);
						consulta.setCcocpriape((String) ax[6]);
						consulta.setCcocsegape((String) ax[7]);
						consulta.setCconnumdoc((BigDecimal) ax[8]);
						consulta.setCconcontra((Integer) ax[9]);
						usuarioAux.setHuslnumero((Long) ax[10]);
						consulta.setCcolusuario(usuarioAux);
						sb = new StringBuffer();
						sb.append("SELECT cpti from ");
						sb.append(Cptipodocu.class.getName()).append(" cpti ");
						sb.append(" WHERE cpti.ctdnnumero = :numdoc ");
						hql = sb.toString();
						query = session.createQuery(hql);
						query.setParameter("numdoc", (Integer) ax[11]);

						List<Cptipodocu> lstaux1;
						lstaux1 = query.list();
						if (lstaux1 != null && !lstaux1.isEmpty()) {
							tipoDocu = lstaux1.get(0);
						}

						consulta.setCcontipdoc(tipoDocu);
						if (tipoDocu != null && tipoDocu.getCtdnnumero() != null && consulta.getCconnumdoc() != null) {
							sb = new StringBuffer();
							sb.append("SELECT cncl from ");
							sb.append(Cnconsclin.class.getName()).append(" cncl ");
							sb.append(
									"  where cncl.ccontipdoc = :tipDoc and cncl.cconnumdoc = :numDoc AND cncl.ccocetapa IN ('ES','EC') ");
							hql = sb.toString();
							query = session.createQuery(hql);
							query.setParameter("tipDoc", tipoDocu.getCtdnnumero());
							query.setParameter("numDoc", consulta.getCconnumdoc());

							List<Cnconsclin> lstaux2;
							lstaux2 = query.list();
							if (lstaux2 != null && !lstaux2.isEmpty()) {
								String nombreServicio = "";
								for (int i = 0; i < lstaux2.size(); i++) {
									if (lstaux2.get(i).getCcocservic().getCsvntiphis()
											.equals(IConstantes.HISTORIA_PRUEBAS_RAPIDAS)) {
										nombreServicio = nombreServicio + " * "
												+ lstaux2.get(i).getCcocservic().getCsvccodigo() + " "
												+ lstaux2.get(i).getCcocservic().getCsvcnombre();
									}
								}
								consulta.setNombreServicio(nombreServicio);
							}
						}

						// servicio.setCsvcnombre((String)ax[12]);
						consulta.setCcocservic(servicio);
						pis.add(consulta);
					}
				}

				return pis;
			}
		});
		return pis;
	}

	public List<Cnconsclin> getConsultasPruebasRapidasXFactura(final Integer tipoDcoumento,
			final BigDecimal numeroDocumento) throws ModelException {
		List<Cnconsclin> pis = (List<Cnconsclin>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				StringBuffer sb = new StringBuffer();
				sb.append("SELECT cncl from ");
				sb.append(Cnconsclin.class.getName()).append(" cncl ");
				sb.append(" WHERE cncl.ccocestado = 'VG' AND cncl.ccocetapa IN ('ES','EC')");
				sb.append(" AND cncl.ccontipdoc not in (30) ");
				sb.append(" AND cncl.ccocservic.csvntiphis = :tipoHistoria");
				sb.append(" and cncl.ccontipdoc.ctdnnumero = :tipoDcoumento and cncl.cconnumdoc = :numeroDocumento ");

				sb.append(" order by cncl.ccothorcon asc  ");

				String hql = sb.toString();

				Query query = session.createQuery(hql);

				query.setParameter("tipoDcoumento", tipoDcoumento);
				query.setParameter("numeroDocumento", numeroDocumento);
				query.setParameter("tipoHistoria", IConstantes.HISTORIA_PRUEBAS_RAPIDAS);

				List<Cnconsclin> pis;
				pis = query.list();

				for (Cnconsclin pi : pis) {
					Cpservicio servicio = pi.getCcocservic();
					Hibernate.initialize(servicio);
					Cptipodocu tipo = pi.getCcontipdoc();
					Hibernate.initialize(tipo);

					Chusuario usuaaux = pi.getCcolusuario();
					Hibernate.initialize(usuaaux);

				}

				return pis;
			}
		});
		return pis;
	}

	/**
	 * @param aplicacion
	 * @throws ModelException
	 */
	public void saveAnticuerposCovid(final Chpruecovidanticu covidAnticuerpo, final Chusuario usuario,
			final Cnconsclin consulta) throws ModelException {
		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {
					if (covidAnticuerpo != null) {

						session.saveOrUpdate(covidAnticuerpo);
					}

					return covidAnticuerpo;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		}
	}

	/**
	 * @param numeroConsulta
	 * @return
	 * @throws ModelException
	 */
	public Chpruecovidanticu getpruebaAnticuerpos(Long numeroConsulta) throws ModelException {
		List<Chpruecovidanticu> resultList = null;
		List parametros = new ArrayList();
		try {
			if (numeroConsulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chva from " + Chpruecovidanticu.class.getName()
						+ " chva  where chva.hpanconsulta = ?  ");
				parametros.add(numeroConsulta);

				resultList = (List<Chpruecovidanticu>) this.getHibernateTemplate().find(sb.toString(),
						parametros.toArray());

			}

		} catch (HibernateException e) {
			throw new ModelException("Error consultando prueba Anticuerpos:" + e.getMessage(), e);

		} catch (Exception e) {
			throw new ModelException("Error consultando prueba Anticuerpos:" + e.getMessage(), e);

		}
		if (resultList != null && !resultList.isEmpty()) {
			return resultList.get(0);
		} else {
			return null;
		}
	}

	/**
	 * @param dia
	 * @param codclinica
	 * @param idMedico
	 * @return
	 * @throws ModelException
	 */

	public List<Cnconsclin> getMisConsultasCovidAnticuerpos(final Date dia, final Integer codclinica,
			final BigDecimal idMedico) throws ModelException {
		List<Cnconsclin> pis = (List<Cnconsclin>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {
				String HORA_INICIAL = " 00:00";
				String HORA_FINAL = " 23:59";

				SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
				String fechaI = dateFormat.format(dia) + HORA_INICIAL;
				String fechaF = dateFormat.format(dia) + HORA_FINAL;

				StringBuffer sb = new StringBuffer();
				sb.append("SELECT cncl from ");
				sb.append(Cnconsclin.class.getName()).append(" cncl ");
				sb.append(" WHERE cncl.ccocestado = 'VG' AND cncl.ccocetapa IN ('ES','EC')");
				sb.append(
						" AND (cncl.ccodfeccon BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))");
				sb.append(" AND cncl.ccontipdoc not in (30) ");
				sb.append(" AND cncl.cconclinic = :codclinica ");
				sb.append(" AND cncl.ccocservic.csvntiphis  in (59)");
				sb.append(
						" AND cncl.cconnumero not in (select chco.hcolconsuclini from Chconsulta chco where chco.hcolconsuclini =  cncl.cconnumero and chco.hconclinica = :codclinica and chco.hcoeetapa = 'CE') ");
				sb.append(" AND cncl.ccocservic.csvccodigo in  (SELECT cptp.id.ctacservic from ");
				sb.append(Cptarxprof.class.getName()).append(
						" cptp where cptp.id.ctanprofes = :idMedico and cptp.id.ctanclinic  = :codclinica and cptp.ctacestado = :tarxEstado ");
				sb.append(" ) ");
				sb.append(" order by cncl.ccothorcon asc  ");
				String hql = sb.toString();

				Query query = session.createQuery(hql);

				query.setParameter("fechaI", fechaI);
				query.setParameter("fechaF", fechaF);
				query.setParameter("codclinica", codclinica);
				query.setParameter("idMedico", idMedico);
				query.setParameter("codclinica", codclinica);
				query.setParameter("tarxEstado", IConstantes.ESTADO_VIGENTE);

				List<Cnconsclin> pis;
				pis = query.list();

				for (Cnconsclin pi : pis) {
					Cpservicio servicio = pi.getCcocservic();
					Hibernate.initialize(servicio);
					Cptipodocu tipo = pi.getCcontipdoc();
					Hibernate.initialize(tipo);

					Chusuario ccolusuario = pi.getCcolusuario();
					Hibernate.initialize(ccolusuario);

				}

				return pis;
			}
		});
		return pis;
	}

	/**
	 * @param
	 * @throws ModelException
	 */
	public void saveAntigenosCovid(Chpruecovidantige covidAnticuerpo) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(covidAnticuerpo);

		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Pruebas Antigenos covid-19" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Pruebas Antigenos covid-19" + e.getMessage(), e);
		}
	}

	/**
	 * @param numeroConsulta
	 * @return
	 * @throws ModelException
	 */
	public Chpruecovidantige getpruebaAntigenos(Long numeroConsulta) throws ModelException {
		List<Chpruecovidantige> resultList = null;
		List parametros = new ArrayList();
		try {
			if (numeroConsulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chva from " + Chpruecovidantige.class.getName()
						+ " chva  where chva.hpgnconsulta = ?  ");
				parametros.add(numeroConsulta);

				resultList = (List<Chpruecovidantige>) this.getHibernateTemplate().find(sb.toString(),
						parametros.toArray());

			}

		} catch (HibernateException e) {
			throw new ModelException("Error consultando prueba Antigenos:" + e.getMessage(), e);

		} catch (Exception e) {
			throw new ModelException("Error consultando prueba Antigenos:" + e.getMessage(), e);

		}
		if (resultList != null && !resultList.isEmpty()) {
			return resultList.get(0);
		} else {
			return null;
		}
	}

	public List<Object[]> getRegistrosAnticuerposCovid(Long clinica, Long numeroUsuario, Date fechaInicial,
			Date fechafinal) throws ModelException {
		List<Object[]> resultList = null;
		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		String fechaI = dateFormat.format(fechaInicial.getTime()) + HORA_INICIAL;
		String fechaF = dateFormat.format(fechafinal.getTime()) + HORA_FINAL;

		try {
			StringBuffer sb = new StringBuffer();
			sb.append(
					"select anti.hpadfechreg, clc.cclcnombre,usua.husetipoiden, usua.husanumeiden,usua.huscprimernomb,usua.huscsegundnomb,usua.huscprimerapel,usua.huscsegundapel, ");
			sb.append(
					" usua.huscentidadadm,usua.husesexo, anti.hpaccercepid,anti.hpactrabsalud, anti.hpaccontadias,anti.hpacsintopaci,anti.hpadfecsinto, ");
			sb.append(
					" anti.hpannumesintevol,anti.hpaclugatoma,anti.hpantempambi, anti.hpacmarca,anti.hpaclote, anti.hpacreginvim, anti.hpadfechfabr, ");
			sb.append(
					" anti.hpadfechvenci,anti.hpacresultado,anti.hpactipoantig,usuareg.curcnombre,usuareg.curcusuari,anti.hpacobserv ,usua.husdfechanacim");
			sb.append(
					" from historia.chpruecovidanticu anti ,historia.chusuario usua,clinico.cpclinica clc,historia.chconsulta cons,clinico.cpusuario usuaReg");
			sb.append(" where anti.hpannumepaci= usua.huslnumero ");
			sb.append(" and anti.hpanconsulta = cons.hcolnumero");
			sb.append(" and  cons.hconclinica= clc.cclncodigo");
			sb.append(" and anti.hpausuareg= usuareg.curcusuari");
			if (numeroUsuario != null) {
				sb.append(" and anti.hpannumepaci = :usuario");
			}
			sb.append(
					" and anti.hpadfechreg BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi') ");

			if (clinica != 0) {
				sb.append(" and cons.hconclinica = :clinica");
			}

			Query sqlquery = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
					.createQuery(sb.toString());
			if (clinica != 0) {
				sqlquery.setParameter("clinica", clinica);
			}
			sqlquery.setParameter("fechaI", fechaI);
			sqlquery.setParameter("fechaF", fechaF);
			if (numeroUsuario != null) {
				sqlquery.setParameter("usuario", numeroUsuario);
			}
			resultList = sqlquery.list();

			return resultList;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando el registro de Anticuerpos Covid 19:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando el registro de Anticuerpos Covid-19:" + e.getMessage(), e);
		}

	}

	public List<Object[]> getRegistrosAntigenosCovid(Long clinica, Long numeroUsuario, Date fechaInicial,
			Date fechafinal) throws ModelException {
		List<Object[]> resultList = null;
		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		String fechaI = dateFormat.format(fechaInicial.getTime()) + HORA_INICIAL;
		String fechaF = dateFormat.format(fechafinal.getTime()) + HORA_FINAL;

		try {
			StringBuffer sb = new StringBuffer();

			sb.append(
					" select anti.hpgdfechreg, clc.cclcnombre,usua.husetipoiden, usua.husanumeiden,usua.huscprimernomb,usua.huscsegundnomb,usua.huscprimerapel,usua.huscsegundapel,");
			sb.append(
					" usua.husesexo,usua.huscentidadadm, usua.husnciudad ,anti.hpgctrabsalud, anti.hpgccontadias,anti.hpgdfecsinto, anti.hpgnnumesinto,");
			sb.append(
					" anti.hpgclugatoma,anti.hpgclugaproc ,anti.hpgntempambi, anti.hpgcmarca,anti.hpgclote, anti.hpgcreginvim, anti.hpgdfechfabr, ");
			sb.append(
					" anti.hpgdfechvenci,anti.hpgcresultado,usuareg.curcnombre,usuareg.curcusuari,anti.hpgcobserv,usua.husdfechanacim,clc.cclcciudad,anti.hpgcsintopaci  ");
			sb.append(
					" from historia.chpruecovidantige anti ,historia.chusuario usua,clinico.cpclinica clc,historia.chconsulta cons,clinico.cpusuario usuaReg ");
			sb.append(" where anti.hpgnnumepaci= usua.huslnumero  ");
			sb.append(" and anti.hpgnconsulta = cons.hcolnumero ");
			sb.append(" and cons.hconclinica= clc.cclncodigo");
			sb.append(" and anti.hpgusuareg= usuareg.curcusuari ");
			if (numeroUsuario != null) {
				sb.append(" and anti.hpgnnumepaci = :usuario ");
			}
			sb.append(
					" and anti.hpgdfechreg  BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi') ");

			if (clinica != 0) {
				sb.append(" and cons.hconclinica = :clinica");
			}

			Query sqlquery = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
					.createQuery(sb.toString());
			if (clinica != 0) {
				sqlquery.setParameter("clinica", clinica);
			}
			sqlquery.setParameter("fechaI", fechaI);
			sqlquery.setParameter("fechaF", fechaF);
			if (numeroUsuario != null) {
				sqlquery.setParameter("usuario", numeroUsuario);
			}
			resultList = sqlquery.list();

			return resultList;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando el registro de Antigenos Covid-19:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando el registro de Antigenos Covid-19:" + e.getMessage(), e);
		}

	}

	public ResultadosLCResponse envioResultadosColposcopiaSaludTotal(Chusuario usuario, Cnconsclin consulta,
			Chimprdiag impresion, String userName) throws ModelException {

		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy HH:MM");
		String ftoday = dateFormat.format(new Date());

		Cfadmision admision = null;

		if (consulta != null && consulta.getCcontipdoc() != null
				&& consulta.getCcontipdoc().getCtdnnumero().equals(IConstantes.CDOC_ADMISION)) {

			admision = getAdmision(consulta.getCconnumdoc().longValue());
		}

		Chconsulta consultaActual = null;

		consultaActual = getConsultaActual(consulta.getCconnumero().longValue());

		Cpusuario cpsusuario = getUsuarioPorCodigo(userName);

		Cpprofesio profesional = getProfesionalXCodigo(cpsusuario.getCurnprofes().toString(),
				consultaActual.getHconclinica());

		SaludTotalWS saludTotalWS = new SaludTotalWS();
		ResultadosLCResponse resultadosLCResponse = new ResultadosLCResponse();
		IPS ips = new IPS();
		ips.setNit(IConstantes.NIT_PROFAMILIA);
		ips.setNombre(IConstantes.NOMBRE_PROFAMILIA);
		ips.setCodigoips(IConstantes.CODIGO_PROFAMILIA);
		ips.setFechageneracion(ftoday);
		ips.setEmail("");

		Afiliado afiliado = new Afiliado();
		afiliado.setDocumento(usuario.getHusanumeiden().toString());
		afiliado.setTipodocumento(usuario.getHusetipoiden());
		afiliado.setNombresusuario(
				formatearCampo(usuario.getHuscprimernomb()) + " " + formatearCampo(usuario.getHuscsegundnomb()));
		afiliado.setApellidosusuario(
				formatearCampo(usuario.getHuscprimerapel()) + "" + formatearCampo(usuario.getHuscsegundapel()));
		afiliado.setEncabezado(IConstantes.ENCABEZADO_PROFAMILIA);

		Clasificacion clasificacion = new Clasificacion();
		List<Clasificacion> clasificacionList = new ArrayList<Clasificacion>();
		clasificacion.setNombre("Apoyo Diagnostico");
		Cpservicio cpservicio = consulta.getCcocservic();
		Servicio servicio = new Servicio();
		servicio.setTipoatencion("1");
		if (admision.getCacnumrem() != null) {
			if (admision.getCacnumrem().length() > 16) {
				servicio.setNap(admision.getCacnumrem().substring(0, 16));
			} else {
				servicio.setNap(admision.getCacnumrem());
			}
		} else {
			servicio.setNap("");
		}
		servicio.setTipoayudadx("1");
		String codigoServicio = cpservicio.getCsvccodigo();
		if (codigoServicio != null && !"".equals(codigoServicio)) {

			if (codigoServicio.contains(".")) {
				servicio.setCodservicio(codigoServicio.substring(1, codigoServicio.length() - 2));
			} else {
				servicio.setCodservicio(codigoServicio.substring(1, codigoServicio.length() - 0));
			}
		}
		servicio.setNombreservicio(cpservicio.getCsvcnombre());
		servicio.setNombreprofesional(profesional.getCpfcnombre() + " reg. no " + profesional.getCpfcregmedic());
		servicio.setFechaservicio(ftoday);
		servicio.setResultado("");

		String IMPRESION_DIAG_COLPOS = "";

		String OTRO_DIAG_COLPOS = "";

		String impresionOtra = "";

		String impresionDiag = "";

		if (impresion.getHidcimprenorma() != null && impresion.getHidcimprenorma().equals("S")) {
			IMPRESION_DIAG_COLPOS = IMPRESION_DIAG_COLPOS + " Normal - ";
		}

		if (impresion.getHidcimpresuges() != null && impresion.getHidcimpresuges().equals("S")) {
			IMPRESION_DIAG_COLPOS = IMPRESION_DIAG_COLPOS + " Sugestiva de VPH - ";

		}

		if (impresion.getHidcimpreinfla() != null && impresion.getHidcimpreinfla().equals("S")) {
			IMPRESION_DIAG_COLPOS = IMPRESION_DIAG_COLPOS + " Inflamatoria - ";
		}

		if (impresion.getHidcimpreleyba() != null && impresion.getHidcimpreleyba().equals("S")) {
			IMPRESION_DIAG_COLPOS = IMPRESION_DIAG_COLPOS + " LEI de bajo grado - ";
		}

		if (impresion.getHidcimpreatrof() != null && impresion.getHidcimpreatrof().equals("S")) {
			IMPRESION_DIAG_COLPOS = IMPRESION_DIAG_COLPOS + " Atr�fica - ";
		}

		if (impresion.getHidcimpreleyal() != null && impresion.getHidcimpreleyal().equals("S")) {
			IMPRESION_DIAG_COLPOS = IMPRESION_DIAG_COLPOS + " LEI de alto grado - ";
		}

		if (impresion.getHidcimprecarci() != null && impresion.getHidcimprecarci().equals("S")) {
			IMPRESION_DIAG_COLPOS = IMPRESION_DIAG_COLPOS + " Carcinoma invasivo - ";
		}

		if (impresion.getHidcimpreotro() != null && impresion.getHidcimpreotro().equals("S")) {
			IMPRESION_DIAG_COLPOS = IMPRESION_DIAG_COLPOS + " Otros - ";
			OTRO_DIAG_COLPOS = impresion.getHidcimprecual();

		}
		impresionDiag = IMPRESION_DIAG_COLPOS.substring(0, IMPRESION_DIAG_COLPOS.length() - 2);
		if (OTRO_DIAG_COLPOS != null && !OTRO_DIAG_COLPOS.equals("")) {
			impresionOtra = OTRO_DIAG_COLPOS.substring(0, OTRO_DIAG_COLPOS.length() - 2);

		}

		GrupoLaboratorio grupoLaboratorio = new GrupoLaboratorio();
		grupoLaboratorio.setNombre("COLPOSCOPIA");
		Analito analito = new Analito();
		analito.setNombre("IMPRESION DIAGNOSTICA");
		if (impresionOtra != null && !impresionOtra.equals("")) {
			analito.setValor(impresionDiag + " " + "Cual: " + impresionOtra + "");
		} else {
			analito.setValor(impresionDiag);
		}
		analito.setObservaciones("");
		if (impresion.getHidtrecomen() != null) {
			analito.setObservaciones(impresion.getHidtrecomen());
		}

		analito.setUnidad("");

		List<Analito> analitoList = new ArrayList<Analito>();
		analitoList.add(analito);
		grupoLaboratorio.setAnalito(analitoList);

		servicio.setGrupolaboratorio(grupoLaboratorio);
		clasificacion.setServicio(servicio);
		clasificacionList.add(clasificacion);
		afiliado.setClasificacion(clasificacionList);
		ips.setAfiliado(afiliado);

		try {
			resultadosLCResponse = saludTotalWS.registroResultadosLC(ips);

		} catch (IOException e) {
			e.getMessage();
		}

		try {
			if (resultadosLCResponse != null) {
				Cwsaludtotal saludtotal = new Cwsaludtotal();
				saludtotal.setCstcerror(resultadosLCResponse.getData().getError());
				saludtotal.setCstcdescrip(resultadosLCResponse.getData().getDescripcion());
				saludtotal.setCstcresutlc(resultadosLCResponse.getData().getResultadoLC());
				saludtotal.setCstdfechregi(new Date());
				saludtotal.setCstlnumcon(consulta.getCconnumero().longValue());
				saludtotal.setCstcusuareg(userName);
				saludtotal.setCstcxml(resultadosLCResponse.getData().getXml());
				this.getHibernateTemplate().saveOrUpdate(saludtotal);
			}

		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Registro Web Service:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Registro Web Service:" + e.getMessage(), e);
		}
		return resultadosLCResponse;
	}

	public ResultadosLCResponse envioResultadosVphSaludTotal(Chusuario usuario, Cnconsclin consulta,
			Cncitovphlect lectura) throws ModelException {

		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy HH:MM");
		String ftoday = dateFormat.format(new Date());

		Cfadmision admision = null;

		if (consulta != null && consulta.getCcontipdoc() != null
				&& consulta.getCcontipdoc().getCtdnnumero().equals(IConstantes.CDOC_ADMISION)) {

			admision = getAdmision(consulta.getCconnumdoc().longValue());
		}

		Cpusuario cpsusuario = getUsuarioPorCodigo(lectura.getCcvcusureg());

		Cpprofesio profesional = getProfesionalXCodigo(cpsusuario.getCurnprofes().toString(), lectura.getCcvnclinic());

		SaludTotalWS saludTotalWS = new SaludTotalWS();
		ResultadosLCResponse resultadosLCResponse = new ResultadosLCResponse();
		IPS ips = new IPS();
		ips.setNit(IConstantes.NIT_PROFAMILIA);
		ips.setNombre(IConstantes.NOMBRE_PROFAMILIA);
		ips.setCodigoips(IConstantes.CODIGO_PROFAMILIA);
		ips.setFechageneracion(ftoday);
		ips.setEmail("");

		Afiliado afiliado = new Afiliado();
		afiliado.setDocumento(usuario.getHusanumeiden().toString());
		afiliado.setTipodocumento(usuario.getHusetipoiden());
		afiliado.setNombresusuario(
				formatearCampo(usuario.getHuscprimernomb()) + " " + formatearCampo(usuario.getHuscsegundnomb()));
		afiliado.setApellidosusuario(
				formatearCampo(usuario.getHuscprimerapel()) + "" + formatearCampo(usuario.getHuscsegundapel()));
		afiliado.setEncabezado(IConstantes.ENCABEZADO_PROFAMILIA);

		Clasificacion clasificacion = new Clasificacion();
		List<Clasificacion> clasificacionList = new ArrayList<Clasificacion>();
		clasificacion.setNombre("BIOLOGIA MOLECULAR");
		Cpservicio cpservicio = consulta.getCcocservic();
		Servicio servicio = new Servicio();
		servicio.setTipoatencion("1");
		if (admision.getCacnumrem() != null) {
			servicio.setNap(admision.getCacnumrem());
		} else {
			servicio.setNap("");
		}
		servicio.setTipoayudadx("1");
		/*
		 * String codigoServicio = cpservicio.getCsvccodigo(); if(codigoServicio != null
		 * && !"".equals(codigoServicio)){
		 * 
		 * if(codigoServicio.contains(".")){
		 * servicio.setCodservicio(codigoServicio.substring(1, codigoServicio.length() -
		 * 2)); }else{ servicio.setCodservicio(codigoServicio.substring(1,
		 * codigoServicio.length() - 0)); } }
		 */
		servicio.setCodservicio("908436");

		servicio.setNombreservicio(cpservicio.getCsvcnombre());
		servicio.setNombreprofesional(profesional.getCpfcnombre() + " reg. no " + profesional.getCpfcregmedic());
		servicio.setFechaservicio(ftoday);
		servicio.setResultado("");

		String resultadoVPH = "";

		String resultadoVPHEnvio = "";

		if (lectura.getCcvcgt16() != null && lectura.getCcvcgt16().equals("S")) {
			resultadoVPH = resultadoVPH + " 16 - ";
		}

		if (lectura.getCcvcgt18() != null && lectura.getCcvcgt18().equals("S")) {
			resultadoVPH = resultadoVPH + " 18 - ";
		}

		if (lectura.getCcvcgt31() != null && lectura.getCcvcgt31().equals("S")) {
			resultadoVPH = resultadoVPH + " 31 - ";
		}

		if (lectura.getCcvcgt45() != null && lectura.getCcvcgt45().equals("S")) {
			resultadoVPH = resultadoVPH + " 45 - ";
		}

		if (lectura.getCcvcgt51() != null && lectura.getCcvcgt51().equals("S")) {
			resultadoVPH = resultadoVPH + " 51 - ";
		}

		if (lectura.getCcvcgt52() != null && lectura.getCcvcgt52().equals("S")) {
			resultadoVPH = resultadoVPH + " 52 - ";
		}

		if (lectura.getCcvcgt3858() != null && lectura.getCcvcgt3858().equals("S")) {
			resultadoVPH = resultadoVPH + " Grupo 1(3858) - ";
		}

		if (lectura.getCcvcgt353968() != null && lectura.getCcvcgt353968().equals("S")) {
			resultadoVPH = resultadoVPH + " Grupo 3(353968) - ";
		}

		if (lectura.getCcvcgt565966() != null && lectura.getCcvcgt565966().equals("S")) {
			resultadoVPH = resultadoVPH + " Grupo 2(565966) - ";
		}

		GrupoLaboratorio grupoLaboratorio = new GrupoLaboratorio();
		grupoLaboratorio.setNombre("BIOLOGIA MOLECULAR");
		Analito analito = new Analito();
		analito.setNombre("VPH");
		if (lectura.getCcvcgenoneg() != null && "S".equals(lectura.getCcvcgenoneg())) {
			analito.setValor("Negativo");
		} else if (lectura.getCcvcgenoneg() != null && "N".equals(lectura.getCcvcgenoneg())) {
			analito.setValor("Positivo");
		} else if (lectura.getCcvcgenoneg() != null && "NS".equals(lectura.getCcvcgenoneg())) {
			analito.setValor("No satisfactoria");
		}
		analito.setUnidad("");

		if (resultadoVPH != null && !resultadoVPH.equals("")) {
			resultadoVPHEnvio = resultadoVPH.substring(0, resultadoVPH.length() - 2);
			analito.setObservaciones("Se encontraron positivos los siguientes genotipos: " + resultadoVPHEnvio);
		} else {
			analito.setObservaciones("");
		}
		List<Analito> analitoList = new ArrayList<Analito>();
		analitoList.add(analito);
		grupoLaboratorio.setAnalito(analitoList);

		servicio.setGrupolaboratorio(grupoLaboratorio);

		clasificacion.setServicio(servicio);
		clasificacionList.add(clasificacion);
		afiliado.setClasificacion(clasificacionList);
		ips.setAfiliado(afiliado);

		try {
			resultadosLCResponse = saludTotalWS.registroResultadosLC(ips);
		} catch (IOException e) {
			e.getMessage();
		}

		try {
			if (resultadosLCResponse != null) {
				Cwsaludtotal saludtotal = new Cwsaludtotal();
				saludtotal.setCstcerror(resultadosLCResponse.getData().getError());
				saludtotal.setCstcdescrip(resultadosLCResponse.getData().getDescripcion());
				saludtotal.setCstcresutlc(resultadosLCResponse.getData().getResultadoLC());
				saludtotal.setCstdfechregi(new Date());
				saludtotal.setCstlnumcon(consulta.getCconnumero().longValue());
				saludtotal.setCstcusuareg(lectura.getCcvcusureg());
				saludtotal.setCstcxml(resultadosLCResponse.getData().getXml());
				this.getHibernateTemplate().saveOrUpdate(saludtotal);
			}

		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Registro Web Service:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Registro Web Service:" + e.getMessage(), e);
		}
		return resultadosLCResponse;
	}

	public ResultadosLCResponse envioResultadosBaseLiquidSaludTotal(Chusuario usuario, Cnconsclin consulta,
			Cncitolect lectura) throws ModelException {

		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy HH:MM");
		String ftoday = dateFormat.format(new Date());

		Cfadmision admision = null;

		if (consulta != null && consulta.getCcontipdoc() != null
				&& consulta.getCcontipdoc().getCtdnnumero().equals(IConstantes.CDOC_ADMISION)) {

			admision = getAdmision(consulta.getCconnumdoc().longValue());
		}

		Cpusuario cpsusuario = getUsuarioPorCodigo(lectura.getClccusureg());

		Cpprofesio profesional = getProfesionalXCodigo(cpsusuario.getCurnprofes().toString(), lectura.getClcnclinic());

		SaludTotalWS saludTotalWS = new SaludTotalWS();
		ResultadosLCResponse resultadosLCResponse = new ResultadosLCResponse();
		IPS ips = new IPS();
		ips.setNit(IConstantes.NIT_PROFAMILIA);
		ips.setNombre(IConstantes.NOMBRE_PROFAMILIA);
		ips.setCodigoips(IConstantes.CODIGO_PROFAMILIA);
		ips.setFechageneracion(ftoday);
		ips.setEmail("");

		Afiliado afiliado = new Afiliado();
		afiliado.setDocumento(usuario.getHusanumeiden().toString());
		afiliado.setTipodocumento(usuario.getHusetipoiden());
		afiliado.setNombresusuario(
				formatearCampo(usuario.getHuscprimernomb()) + " " + formatearCampo(usuario.getHuscsegundnomb()));
		afiliado.setApellidosusuario(
				formatearCampo(usuario.getHuscprimerapel()) + "" + formatearCampo(usuario.getHuscsegundapel()));
		afiliado.setEncabezado(IConstantes.ENCABEZADO_PROFAMILIA);

		Clasificacion clasificacion = new Clasificacion();
		List<Clasificacion> clasificacionList = new ArrayList<Clasificacion>();
		clasificacion.setNombre("Biologia molecular");
		Cpservicio cpservicio = consulta.getCcocservic();
		Servicio servicio = new Servicio();
		servicio.setTipoatencion("1");
		if (admision.getCacnumrem() != null) {
			servicio.setNap(admision.getCacnumrem());
		} else {
			servicio.setNap("");
		}
		servicio.setTipoayudadx("1");
		String codigoServicio = cpservicio.getCsvccodigo();
		if (codigoServicio != null && !"".equals(codigoServicio)) {

			if (codigoServicio.contains(".")) {
				servicio.setCodservicio(codigoServicio.substring(1, codigoServicio.length() - 2));
			} else {
				servicio.setCodservicio(codigoServicio.substring(1, codigoServicio.length() - 0));
			}
		}

		servicio.setNombreservicio(cpservicio.getCsvcnombre());
		servicio.setNombreprofesional(profesional.getCpfcnombre() + " reg. no " + profesional.getCpfcregmedic());
		servicio.setFechaservicio(ftoday);
		servicio.setResultado("");

		GrupoLaboratorio grupoLaboratorio = new GrupoLaboratorio();
		grupoLaboratorio.setNombre("Citologia");
		Analito analito = new Analito();
		analito.setNombre("CALIDAD DE LA MUESTRA");
		ArrayList<Cndesccito> lstLecturaAux = null;
		boolean calidadPrueba = false;
		boolean renderCategorizacion = false;

		String resultadoMuestra = "";
		String resultadoCategorizacion = "";
		String resultadoAnormalidadesCE = "";
		String resultadoAnormalidadesGL = "";
		try {
			lstLecturaAux = (ArrayList<Cndesccito>) getListaDescripcionesCitologia("cncitolect", "clcccalmue");
		} catch (ModelException e) {
			e.printStackTrace();
		}

		for (Cndesccito muestra : lstLecturaAux) {
			if (muestra.getCdicvalor().equals(lectura.getClcccalmue())) {
				if ("4.1".equals(lectura.getClcccalmue()) || "4.2".equals(lectura.getClcccalmue())) {
					resultadoMuestra = muestra.getCdicdescri().substring(38, muestra.getCdicdescri().length() - 1);
					analito.setValor("Satisfactoria " + resultadoMuestra);
					calidadPrueba = true;
					break;
				} else if ("4.3".equals(lectura.getClcccalmue())) {
					analito.setValor(muestra.getCdicdescri());
					break;
				} else if ("4.4".equals(lectura.getClcccalmue())) {
					analito.setValor(muestra.getCdicdescri());
					break;
				}
			}
		}
		analito.setUnidad("");
		analito.setObservaciones("");

		List<Analito> analitoList = new ArrayList<Analito>();
		analitoList.add(analito);

		if (calidadPrueba) {
			Analito analitoCategorizacion = new Analito();
			analitoCategorizacion.setNombre("CATEGORIZACION GENERAL");
			ArrayList<Cndesccito> lstCategorizacionAux = null;

			try {
				lstCategorizacionAux = (ArrayList<Cndesccito>) getListaDescripcionesCitologia("cncitolect",
						"clcccatego");
			} catch (ModelException e) {
				e.printStackTrace();
			}

			for (Cndesccito categorizacion : lstCategorizacionAux) {
				if (categorizacion.getCdicvalor().equals(lectura.getClcccatego())) {
					if ("6.2".equals(lectura.getClcccatego())) {
						resultadoCategorizacion = categorizacion.getCdicdescri();
						analitoCategorizacion.setValor(categorizacion.getCdicdescri());
						renderCategorizacion = true;
					} else {
						analitoCategorizacion.setValor(categorizacion.getCdicdescri());
					}
				}
			}
			analitoCategorizacion.setUnidad("");
			analitoCategorizacion.setObservaciones("");
			analitoList.add(analitoCategorizacion);

		}

		if (renderCategorizacion) {
			Analito analitoAnormalidades = new Analito();
			analitoAnormalidades.setNombre("RESULTADO");
			if (lectura.getClccanoesc() != null) {
				ArrayList<Cndesccito> lstAnormalidadesCEAux = null;

				try {
					lstAnormalidadesCEAux = (ArrayList<Cndesccito>) getListaDescripcionesCitologia("cncitolect",
							"clccanoesc");
				} catch (ModelException e) {
					e.printStackTrace();
				}

				for (Cndesccito anormalidadesCE : lstAnormalidadesCEAux) {
					if (anormalidadesCE.getCdicvalor().equals(lectura.getClccanoesc())) {
						resultadoAnormalidadesCE = "Anormalidades C�lulas Escamosas: " + anormalidadesCE.getCdicdescri()
								+ " - ";
					}
				}
			}
			if (lectura.getClccanogla() != null) {
				ArrayList<Cndesccito> lstAnormalidadesGLAux = null;

				try {
					lstAnormalidadesGLAux = (ArrayList<Cndesccito>) getListaDescripcionesCitologia("cncitolect",
							"clccanogla");
				} catch (ModelException e) {
					e.printStackTrace();
				}

				for (Cndesccito anormalidadesGL : lstAnormalidadesGLAux) {
					if (anormalidadesGL.getCdicvalor().equals(lectura.getClccanogla())) {
						resultadoAnormalidadesGL = "Anormalidades en c�lulas glandulas: "
								+ anormalidadesGL.getCdicdescri();
					}
				}
			}
			analitoAnormalidades.setValor("POSITIVO");
			analitoAnormalidades.setUnidad("");
			analitoAnormalidades.setObservaciones(resultadoAnormalidadesCE + resultadoAnormalidadesGL);
			analitoList.add(analitoAnormalidades);
		}
		// analito.setObservaciones(resultadoMuestra + resultadoCategorizacion
		// +resultadoAnormalidadesCE + resultadoAnormalidadesGL);
		grupoLaboratorio.setAnalito(analitoList);

		servicio.setGrupolaboratorio(grupoLaboratorio);

		clasificacion.setServicio(servicio);
		clasificacionList.add(clasificacion);
		afiliado.setClasificacion(clasificacionList);
		ips.setAfiliado(afiliado);

		try {
			resultadosLCResponse = saludTotalWS.registroResultadosLC(ips);
		} catch (IOException e) {
			e.getMessage();
		}

		try {
			if (resultadosLCResponse != null) {
				Cwsaludtotal saludtotal = new Cwsaludtotal();
				saludtotal.setCstcerror(resultadosLCResponse.getData().getError());
				saludtotal.setCstcdescrip(resultadosLCResponse.getData().getDescripcion());
				saludtotal.setCstcresutlc(resultadosLCResponse.getData().getResultadoLC());
				saludtotal.setCstdfechregi(new Date());
				saludtotal.setCstlnumcon(consulta.getCconnumero().longValue());
				saludtotal.setCstcusuareg(lectura.getClccusureg());
				saludtotal.setCstcxml(resultadosLCResponse.getData().getXml());
				this.getHibernateTemplate().saveOrUpdate(saludtotal);
			}

		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Registro Web Service:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Registro Web Service:" + e.getMessage(), e);
		}
		return resultadosLCResponse;
	}

	public ResultadosLCResponse envioResultadosPatologiaSaludTotal(Chusuario usuario, Cnconsclin consulta,
			Chmotivocon motivo, String userName) throws ModelException {

		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy HH:MM");
		String ftoday = dateFormat.format(new Date());

		Cfadmision admision = null;

		if (consulta != null && consulta.getCcontipdoc() != null
				&& consulta.getCcontipdoc().getCtdnnumero().equals(IConstantes.CDOC_ADMISION)) {

			admision = getAdmision(consulta.getCconnumdoc().longValue());
		}

		Chconsulta consultaActual = null;

		consultaActual = getConsultaActual(consulta.getCconnumero().longValue());

		Cpusuario cpsusuario = getUsuarioPorCodigo(userName);

		Cpprofesio profesional = getProfesionalXCodigo(cpsusuario.getCurnprofes().toString(),
				consultaActual.getHconclinica());

		SaludTotalWS saludTotalWS = new SaludTotalWS();
		ResultadosLCResponse resultadosLCResponse = new ResultadosLCResponse();
		IPS ips = new IPS();
		ips.setNit(IConstantes.NIT_PROFAMILIA);
		ips.setNombre(IConstantes.NOMBRE_PROFAMILIA);
		ips.setCodigoips(IConstantes.CODIGO_PROFAMILIA);
		ips.setFechageneracion(ftoday);
		ips.setEmail("");

		Afiliado afiliado = new Afiliado();
		afiliado.setDocumento(usuario.getHusanumeiden().toString());
		afiliado.setTipodocumento(usuario.getHusetipoiden());
		afiliado.setNombresusuario(
				formatearCampo(usuario.getHuscprimernomb()) + " " + formatearCampo(usuario.getHuscsegundnomb()));
		afiliado.setApellidosusuario(
				formatearCampo(usuario.getHuscprimerapel()) + "" + formatearCampo(usuario.getHuscsegundapel()));
		afiliado.setEncabezado(IConstantes.ENCABEZADO_PROFAMILIA);

		Clasificacion clasificacion = new Clasificacion();
		List<Clasificacion> clasificacionList = new ArrayList<Clasificacion>();
		clasificacion.setNombre("Patologia");
		Cpservicio cpservicio = consulta.getCcocservic();
		Servicio servicio = new Servicio();
		servicio.setTipoatencion("1");
		if (admision.getCacnumrem() != null) {
			servicio.setNap(admision.getCacnumrem());
		} else {
			servicio.setNap("");
		}
		servicio.setTipoayudadx("1");
		String codigoServicio = cpservicio.getCsvccodigo();
		if (codigoServicio != null && !"".equals(codigoServicio)) {

			if (codigoServicio.contains(".")) {
				servicio.setCodservicio(codigoServicio.substring(1, codigoServicio.length() - 2));
			} else {
				servicio.setCodservicio(codigoServicio.substring(1, codigoServicio.length() - 0));
			}
		}
		servicio.setNombreservicio(cpservicio.getCsvcnombre());
		servicio.setNombreprofesional(profesional.getCpfcnombre() + " reg. no " + profesional.getCpfcregmedic());
		servicio.setFechaservicio(ftoday);

		String interpretacion = "";
		if (motivo != null) {
			if (motivo != null && motivo.getHmcctrapatol() != null) {
				String traePatologia = "No";
				String tipoPatologia = "";
				String resultado = "Negativo";
				String biposia = "";
				if (motivo.getHmcctrapatol().equals("S")) {
					traePatologia = "Si";
				}
				interpretacion = "Trae Patolog�a: " + traePatologia + " - ";
				if (!motivo.getHmcctrapatol().equals("N")) {
					if (("PR").equals(motivo.getHmcctippatol())) {
						tipoPatologia = "Prostata";
					} else if (("PE").equals(motivo.getHmcctippatol())) {
						tipoPatologia = "Pene";
					} else if (("PI").equals(motivo.getHmcctippatol())) {
						tipoPatologia = "Piel";
					} else if (("TI").equals(motivo.getHmcctippatol())) {
						tipoPatologia = "Tiroides";
					} else if (("GN").equals(motivo.getHmcctippatol())) {
						tipoPatologia = "Ganglio";
					} else if (("CX").equals(motivo.getHmcctippatol())) {
						tipoPatologia = "C�rvix";
					} else if (("EN").equals(motivo.getHmcctippatol())) {
						tipoPatologia = "Endometrio";
					} else if (("VU").equals(motivo.getHmcctippatol())) {
						tipoPatologia = "Vulva";
					} else if (("MA").equals(motivo.getHmcctippatol())) {
						tipoPatologia = "Mama";
					} else {
						tipoPatologia = "Otro";
					}

					interpretacion = interpretacion + " Tipo de Patolog�a: " + tipoPatologia + " - ";

					if (tipoPatologia.equals("Otro")) {
						interpretacion = interpretacion + " �Cual?: " + motivo.getHmcccualpat() + " - ";

					}
					if (motivo.getHmccdesres() != null) {
						interpretacion = interpretacion + " Descripci�n del Resultado: " + motivo.getHmccdesres()
								+ " - ";

					} else {
						if (("NN").equals(motivo.getHmccresbiop())) {
							biposia = "Negativo para neoplasia";
						} else if (("DI").equals(motivo.getHmccresbiop())) {
							biposia = "Displasia";
						} else if (("NB").equals(motivo.getHmccresbiop())) {
							biposia = "NIC de bajo grado (NIC) I";
						} else if (("NA").equals(motivo.getHmccresbiop())) {
							biposia = "NIC de alto grado: (NIC II - NIC III)";
						} else if (("NM").equals(motivo.getHmccresbiop())) {
							biposia = "Neoplasia micro infiltrante: escamocelular o adenocarcinoma";
						} else if (("NI").equals(motivo.getHmccresbiop())) {
							biposia = "Neoplasia Infiltrante: escamocelular o adenocarcinoma";
						} else if (("BE").equals(motivo.getHmccresbiop())) {
							biposia = "Benigna";
						} else if (("AT").equals(motivo.getHmccresbiop())) {
							biposia = "At�pica (Indeterminada)";
						} else if (("MS").equals(motivo.getHmccresbiop())) {
							biposia = "Malignidad sospechosa/probable";
						} else if (("MA").equals(motivo.getHmccresbiop())) {
							biposia = "Maligna";
						} else if (("NS").equals(motivo.getHmccresbiop())) {
							biposia = "No Satisfactoria";
						}

						interpretacion = interpretacion + " Resultado de biopsia: " + biposia + " - ";

					}
					if ("P".equals(motivo.getHmccrespatol())) {
						resultado = "Maligno";
					}

				}

				GrupoLaboratorio grupoLaboratorio = new GrupoLaboratorio();
				grupoLaboratorio.setNombre("BIOPSIAS");
				Analito analito = new Analito();
				analito.setNombre("PATOLOGIA");
				analito.setValor(resultado);

				analito.setObservaciones(interpretacion);
				analito.setUnidad("");

				List<Analito> analitoList = new ArrayList<Analito>();
				analitoList.add(analito);
				grupoLaboratorio.setAnalito(analitoList);

				servicio.setGrupolaboratorio(grupoLaboratorio);
			}
		}
		servicio.setResultado("");

		clasificacion.setServicio(servicio);
		clasificacionList.add(clasificacion);
		afiliado.setClasificacion(clasificacionList);
		ips.setAfiliado(afiliado);

		try {
			resultadosLCResponse = saludTotalWS.registroResultadosLC(ips);

		} catch (IOException e) {
			e.getMessage();
		}

		try {
			if (resultadosLCResponse != null) {
				Cwsaludtotal saludtotal = new Cwsaludtotal();
				saludtotal.setCstcerror(resultadosLCResponse.getData().getError());
				saludtotal.setCstcdescrip(resultadosLCResponse.getData().getDescripcion());
				saludtotal.setCstcresutlc(resultadosLCResponse.getData().getResultadoLC());
				saludtotal.setCstdfechregi(new Date());
				saludtotal.setCstlnumcon(consulta.getCconnumero().longValue());
				saludtotal.setCstcusuareg(userName);
				saludtotal.setCstcxml(resultadosLCResponse.getData().getXml());
				this.getHibernateTemplate().saveOrUpdate(saludtotal);
			}

		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Registro Web Service:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Registro Web Service:" + e.getMessage(), e);
		}
		return resultadosLCResponse;

	}

	/**
	 * Obtener una Usuario.
	 */
	public Cpusuario getUsuarioPorCodigo(String curcusuari) throws ModelException {
		Cpusuario cpusuario = null;
		java.util.List resultList = null;

		try {
			StringBuffer sb = new StringBuffer();
			sb.append("select a from Cpusuario as a where a.curcusuari = ? ");

			resultList = this.getHibernateTemplate().find(sb.toString(), curcusuari);

			if (resultList.size() != 0) {
				cpusuario = (Cpusuario) resultList.get(0);
			}

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Usuario:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Usuario:" + e.getMessage(), e);
		}
		return cpusuario;
	}

	public String formatearCampo(String campo) {
		if (campo == null) {
			campo = "";
		}
		return campo;
	}

	public List<Chantegineco> getAntecedentesGinecologicosXUsuario(final Long usuario) throws ModelException {
		List<Chantegineco> pis = (List<Chantegineco>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {
				String HORA_INICIAL = " 00:00";
				String HORA_FINAL = " 23:59";

				Date fechaInicial = new Date();
				Date fechaFinal = new Date();

				Calendar cal = Calendar.getInstance();
				cal.setTime(fechaFinal);
				cal.add(Calendar.MONTH, -9);
				fechaInicial = cal.getTime();

				SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
				String fechaI = dateFormat.format(fechaInicial) + HORA_INICIAL;
				String fechaF = dateFormat.format(fechaFinal) + HORA_FINAL;

				// VERIFICAMOS QUE EL USUARIO ATIENDE SOLO CONSULTAS PRIORITARIAS
				StringBuffer sb0 = new StringBuffer();
				sb0.append("SELECT chag from ");
				sb0.append(Chantegineco.class.getName()).append(" chag , ");
				sb0.append(Chconsulta.class.getName()).append(" con , ");
				sb0.append(Cpservicio.class.getName()).append(" serv  ");
				sb0.append("WHERE con.hcolnumero = chag.id.haglconsulta ");
				sb0.append(" AND con.hcocservicio = serv.csvccodigo ");
				sb0.append(" AND con.hcolusuario = :usuario  ");
				sb0.append(" AND serv.csvntiphis = :tipoHistoria  ");
				sb0.append(
						" AND chag.hagdfecregistr  BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi')");
				sb0.append(" order by chag.hagdfecregistr desc  ");

				String hql1 = sb0.toString();

				Query query = session.createQuery(hql1);
				query.setParameter("usuario", usuario);
				query.setParameter("fechaI", fechaI);
				query.setParameter("fechaF", fechaF);
				query.setParameter("tipoHistoria", IConstantes.HISTORIA_INTERRUPCION);

				List<Chantegineco> pis;
				pis = query.list();

				return pis;
			}
		});
		return pis;
	}

	/**
	 * @param usuario
	 * @param consulta
	 * @throws ModelException
	 */
	public void savePruebasRapidas(final Chpruerapi chpruerapi, final Chusuario usuario, final Cnconsclin consulta,
			final String userName) throws ModelException {

		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {

					Chconsulta consultaUsuario;

					consultaUsuario = null;
					if (usuario != null) {
						usuario.setHusdultimacons(new Date());
						session.update(usuario);
					}

					StringBuffer sb = new StringBuffer();
					sb.append(" select chco from Chconsulta"
							+ " chco  where chco.hcolnumero = :numeroConsulta AND chco.hcoctiposervi = :tipoServicio ");
					Query query = session.createQuery(sb.toString());
					query.setParameter("numeroConsulta", consulta.getCconnumero());
					query.setParameter("tipoServicio", IConstantes.TIPO_CONSULTA);

					consultaUsuario = (Chconsulta) query.uniqueResult();
					if (consultaUsuario != null) {
						chpruerapi.setHprlconsulta(consultaUsuario.getHcolnumero());
						chpruerapi.setHprdfecregistr(new Date());
						chpruerapi.setHprcoperador(userName);

						session.saveOrUpdate(chpruerapi);
					}
					return chpruerapi;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		}
	}

	/**
	 * Obtener Lista de Citologias para lectura.
	 */
	public List getCitologiaLecturaUsuario(String tipoId, Long numIde, int codCentro, String tipoLectura,
			List<Integer> listaTipoHistoria) throws ModelException {

		List resultList = null;
		String tiposHistoria = getStringFromIntegerList(listaTipoHistoria);

		try {
			StringBuffer sb = new StringBuffer();

			sb.append(" SELECT cnci.ccinconsec, cnci.ccidfecreg, cnci.ccidfeccit, cnci.ccictipide, cnci.ccianumide,");
			sb.append("  cnci.ccicprinom, cnci.ccicsegnom, cnci.ccicpriape, cnci.ccicsegape, cnci.ccinnumero,");
			sb.append("  cnct.ctmcusureg, ccinconsec, ccinclinic, ccictipide, ccianumide, ");
			sb.append("  ccicprinom, ccicsegnom, ccicpriape, ccicsegape, ccinedad, ");
			sb.append("  ccictipafi, ccicasegur, ccidfeccit, ccinnumdoc, ccintipdoc, ");
			sb.append("  ccinnumdoc, ctmctomada, ctmcnomtom, ctmcesquem, ctmdultmen, ");
			sb.append("  ctmdultpar, ctmngestac, ctmnpartos, ctmnaborto, ctmcembara, ");
			sb.append("  ctmnedarel, ctmcmetpla,ctmcotrmet,ctmntiemet,ctmdultcit,");
			sb.append("  ctmcultres,ctmcotrhal,ctmcpningu,ctmcpcaute,ctmdpcaute,");
			sb.append("  ctmcphiste,ctmdphiste,ctmcpconiz, ctmdpconiz,ctmcpradio,");
			sb.append("  ctmdpradio,ctmcpbiops,ctmdpbiops,ctmcpcriot,ctmdpcriot, ");
			sb.append("  ctmcpata,ctmdpata,ctmcpotro,ctmdpotro,ctmcpdotro, ");
			sb.append("  ctmcpvapor,ctmdpvapor,ctmcphormo,ctmdphormo,ctmcaspcue, ");
			sb.append("  ctmcobstom,ctmccomvph,ctmclactan, ctmnnumero,ccilconcli, cont.ccncdescri ");
			sb.append(
					" FROM clinico.Cncitologi cnci, clinico.Cncitotoma cnct,clinico.cnconsclin cnco, clinico.Cpservicio cpse, clinico.Cfadmision ad, clinico.Cpcontrato cont ");

			sb.append(
					" WHERE cnci.ccinconsec = cnct.ctmnconsec and cnco.cconnumero = cnci.ccilconcli  AND cpse.csvccodigo = cnco.ccocservic ");
			sb.append(
					"  AND ad.cannumero =  cnci.ccinnumdoc AND cont.ccnnnumero= ad.cancontra AND cont.ccnnclinic= cnci.ccinclinic ");
			sb.append("  AND cnci.ccictipide = ? AND cnci.ccianumide = ?  AND cnci.ccinclinic = ? ");
			sb.append(" AND cpse.csvntiphis in (" + tiposHistoria + ") ");
			sb.append(
					" AND cnci.ccinconsec NOT IN ( SELECT chde.hdencitologia FROM historia.Chdetaentcito chde) ORDER BY cnci.ccinconsec DESC");

			Query sqlquery = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
					.createQuery(sb.toString());
			sqlquery.setParameter(0, tipoId);
			sqlquery.setParameter(1, numIde);
			sqlquery.setParameter(2, codCentro);
			resultList = sqlquery.list();

		} catch (HibernateException e) {
			throw new ModelException("Error consultando citologias:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando citologias:" + e.getMessage(), e);
		}

		return resultList;
	}

	public List<Object[]> getPruebasRapidas(final Long codigoUsuario) throws ModelException {

		List<Object[]> resultList = null;
		try {
			if (codigoUsuario != null) {
				StringBuffer sb = new StringBuffer();
				sb.append("select chcon.hcolnumero, chcon.hcodfecregistr,cpse.csvcnombre ,chus.husetipoiden, ");
				sb.append(
						" chus.husanumeiden,chus.husdfechanacim, chus.huscprimernomb,nvl(chus.huscsegundnomb,'--'),chus.huscprimerapel,nvl(chus.huscsegundapel,'--'),cpse.csvntiphis ");
				sb.append(" from historia.chconsulta chcon ");
				sb.append(" left join historia.chpruerapi chra on chra.hprlconsulta = chcon.hcolnumero ");
				sb.append(" inner join historia.chusuario chus on chcon.hcolusuario = chus.huslnumero ");
				sb.append(" inner join clinico.cpservicio cpse on cpse.csvccodigo=chcon.hcocservicio ");
				sb.append(" where cpse.csvntiphis in (57,58,59) and ");
				sb.append("  chcon.hcolusuario = ? ");
				sb.append(" order by chcon.hcodfecregistr desc ");

				Query query = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
						.createQuery(sb.toString());
				query.setParameter(0, codigoUsuario);

				resultList = query.list();

				if (!resultList.isEmpty()) {
					return resultList;
				}

				return null;
			} else {
				return null;
			}
		} catch (HibernateException e) {
			throw new ModelException("Error obteniendo pruebas rapidas :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error obteniendo pruebas rapidas:" + e.getMessage(), e);
		}
	}

	public List<Object[]> getPruebasRapidasByConsulta(final Long consulta) throws ModelException {

		List<Object[]> resultList = null;
		try {
			if (consulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(
						" select 57,chus.HUSANUMEIDEN,chus.HUSCPRIMERNOMB,chus.HUSCPRIMERAPEL,chus.HUSCSEGUNDNOMB,chus.HUSCSEGUNDAPEL, chpr.HPRCLOTEHEPAB,chpr.HPRCLOTEHEPAC,chpr.HPRCLOTEPRUEMB,chpr.HPRCLOTESIFI,");
				sb.append(
						"  chpr.HPRCLOTEVIH,chpr.HPRCMARCAHEPAB,chpr.HPRCMARCAHEPAC,chpr.HPRCMARCAPRUEMB,chpr.HPRCMARCASIFIL,  ");
				sb.append(
						"  chpr.HPRCMARCAVIH,chpr.HPRCREGINVHEPB,chpr.HPRCREGINVHEPC,chpr.HPRCREGINVPRUEMB,chpr.HPRCREGINVSIF, ");
				sb.append(
						"  chpr.HPRCREGINVVIH,chpr.HPRDFECVENHEPB,chpr.HPRDFECVENHEPC,chpr.HPRDFECVENPRUEMB,chpr.HPRDFECVENSIF, ");
				sb.append(
						"  chpr.HPRDFECVENVIH,chpr.HPRCRESULHEPAB,chpr.HPRCRESULHEPAC,chpr.HPRCRESULPRUEMB,chpr.HPRCRESULSIFIL,chpr.HPRCRESULVIH,57,chpr.HPRDFECREGISTR,chpr.HPRCOPERADOR ");
				sb.append(
						"  from HISTORIA.chpruerapi chpr, HISTORIA.chusuario chus,HISTORIA.chconsulta chcon where chpr.HPRLCONSULTA=chcon.HCOLNUMERO and chcon.hcolusuario = chus.HUSLNUMERO and chpr.HPRLCONSULTA = ? ");
				Query query = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
						.createQuery(sb.toString());
				query.setParameter(0, consulta);

				resultList = query.list();

				if (!resultList.isEmpty()) {
					return resultList;
				}

				return null;
			} else {
				return null;
			}

		} catch (HibernateException e) {
			throw new ModelException("Error obteniendo datos de la prueba rapida :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error obteniendo datos de la prueba rapida:" + e.getMessage(), e);
		}
	}

	/**
	 * @param codClinica
	 * @param fechaInicial
	 * @param fechaFinal
	 * @param tDoc
	 * @param tIden
	 * @return
	 * @throws ModelException
	 */
	public List<Object[]> getReportePruebasRapidas(Integer codClinica, Date fechaInicial, Date fechaFinal, String tDoc,
			Long numIden) throws ModelException {
		List resultList = null;

		String HORA_INICIAL = " 00:00";
		String HORA_FINAL = " 23:59";

		String fechaI = null;
		String fechaF = null;
		String mensajeSinPureba = "NO SE REALIZO ESTA PRUEBA";

		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		if (fechaInicial != null && fechaFinal != null) {
			fechaI = dateFormat.format(fechaInicial) + HORA_INICIAL;
			fechaF = dateFormat.format(fechaFinal) + HORA_FINAL;
		}

		try {
			if (codClinica != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(
						"SELECT UNIQUE trunc(chpru.HPRDFECREGISTR), cpclin.CCLCNOMBRE, chusu.HUSETIPOIDEN, chusu.HUSANUMEIDEN ,chusu.HUSCPRIMERNOMB, "
								+ " chusu.HUSCSEGUNDNOMB, chusu.HUSCPRIMERAPEL, chusu.HUSCSEGUNDAPEL,"
								+ " (EXTRACT(YEAR FROM sysdate) - EXTRACT(YEAR FROM chusu.husdfechanacim)) EDAD, (select CPCDESCRIP from CLINICO.CPPARAMETR where chusu.HUSESEXO= CPCVALOR and CPCCAMPO='sexo' ) sexo, (select CPCDESCRIP from CLINICO.CPPARAMETR where chusu.HUSCIDENGENE= CPCVALOR and CPCCAMPO='identidadgen') identidad, chusu.HUSCCELULAR, "
								+ " cpmun.CMDCNOMDPT, cpmun.CMDCNOMMUN, chpru.HPRNTEMPERATURA, chpru.HPRCHEPATITISB,chpru.HPRCHEPATITISC,chpru.HPRCPRUEEMBA,chpru.HPRCSIFILIS,chpru.HPRCVIH, "
								+ " nvl(chpru.HPRCMARCAHEPAB,:mensajeSinPureba), nvl(chpru.HPRCMARCAHEPAC,:mensajeSinPureba), nvl(chpru.HPRCMARCAPRUEMB,:mensajeSinPureba), nvl(chpru.HPRCMARCASIFIL,:mensajeSinPureba), nvl(chpru.HPRCMARCAVIH,:mensajeSinPureba), "
								+ " nvl(chpru.HPRCLOTEHEPAB,:mensajeSinPureba), nvl(chpru.HPRCLOTEHEPAC,:mensajeSinPureba), nvl(chpru.HPRCLOTEPRUEMB,:mensajeSinPureba), nvl(chpru.HPRCLOTESIFI,:mensajeSinPureba), nvl(chpru.HPRCLOTEVIH,:mensajeSinPureba), "
								+ " nvl(chpru.HPRCREGINVHEPB,:mensajeSinPureba), nvl(chpru.HPRCREGINVHEPC,:mensajeSinPureba), nvl(chpru.HPRCREGINVPRUEMB,:mensajeSinPureba), nvl(chpru.HPRCREGINVSIF,:mensajeSinPureba), nvl(chpru.HPRCREGINVVIH,:mensajeSinPureba), "
								+ " chpru.HPRDFECVENHEPB, chpru.HPRDFECVENHEPC, chpru.HPRDFECVENPRUEMB, chpru.HPRDFECVENSIF,chpru.HPRDFECVENVIH, "
								+ " nvl(chpru.HPRCRESULHEPAB,:mensajeSinPureba), nvl(chpru.HPRCRESULHEPAC,:mensajeSinPureba), nvl(chpru.HPRCRESULPRUEMB,:mensajeSinPureba), nvl(chpru.HPRCRESULSIFIL,:mensajeSinPureba), nvl(chpru.HPRCRESULVIH,:mensajeSinPureba), "
								+ " cpusu.CURCNOMBRE, cptip.CTECDESCRI, chpru.HPRCOBSERVACION "
								+ " FROM HISTORIA.CHPRUERAPI chpru, CLINICO.CPCLINICA cpclin, CLINICO.CPUSUARIO cpusu, HISTORIA.CHUSUARIO chusu, CLINICO.CPMUNIDANE cpmun, HISTORIA.CHCONSULTA chcon,"
								+ " CLINICO.CPTIPOESPE cptip, CLINICO.CPPROFESIO cppro "
								+ " WHERE chpru.HPRLCONSULTA= chcon.HCOLNUMERO and chcon.HCONCLINICA= cpclin.CCLNCODIGO and chcon.HCOLUSUARIO= chusu.HUSLNUMERO and "
								+ " chpru.HPRNDEPARTAMEN = cpmun.CMDNCODDEP and chpru.HPRNMUNICIPIO = cpmun.CMDNCODMUN and chpru.HPRCOPERADOR = cpusu.CURCUSUARI and "
								+ " cpusu.CURNPROFES = cppro.CPFNCODIGO and cppro.CPFNTIPOESPE= cptip.CTENCODIGO ");

				if (tDoc != null && numIden != null) {
					sb.append(" and chusu.HUSETIPOIDEN = :tDoc and chusu.HUSANUMEIDEN = :numIden");
				} else {
					sb.append(
							" and chpru.HPRDFECREGISTR BETWEEN TO_DATE(:fechaI, 'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF, 'dd/MM/yyyy hh24:mi') ");
				}

				if (codClinica != 0) {
					sb.append(" AND chcon.HCONCLINICA  = :codClinica  ");
				}

				Query sqlquery = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
						.createQuery(sb.toString());

				if (tDoc != null && numIden != null) {
					sqlquery.setParameter("tDoc", tDoc);
					sqlquery.setParameter("numIden", numIden);

				} else {
					sqlquery.setParameter("fechaI", fechaI);
					sqlquery.setParameter("fechaF", fechaF);
				}

				if (codClinica != 0) {
					sqlquery.setParameter("codClinica", codClinica);
				}
				sqlquery.setParameter("mensajeSinPureba", mensajeSinPureba);

				resultList = sqlquery.list();

				if (!resultList.isEmpty()) {
					return resultList;
				}
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Autorizacion Servicios :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Autorizacion Servicios  : " + e.getMessage(), e);
		}

	}

	public List<Object[]> getRegistrosVPH(Long clinica, Date fechaInicial, Date fechafinal) throws ModelException {
		List<Object[]> resultList = null;
		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		String fechaI = dateFormat.format(fechaInicial.getTime()) + HORA_INICIAL;
		String fechaF = dateFormat.format(fechafinal.getTime()) + HORA_FINAL;

		try {
			StringBuffer sb = new StringBuffer();
			sb.append(
					"select usua.husetipoiden,usua.husanumeiden,usua.huscprimernomb,usua.huscsegundnomb,usua.huscprimerapel,usua.huscsegundapel,clinic.cclcnombre,toma.ctmdfecreg,"
							+ " case  when citovph.ccvcgenoneg  = 'N' then 'Positivo' "
							+ " when citovph.ccvcgenoneg  = 'S' then 'Negativo' "
							+ " when citovph.ccvcgenoneg  = 'NS' then 'No satisfactoria' else 'no registra'  end, entre.hecdfechaenvio ");
			sb.append(" from clinico.cncitologi ");
			sb.append(" JOIN clinico.cpclinica clinic ");
			sb.append(" ON clinic.cclncodigo = ccinclinic ");
			sb.append(" JOIN historia.chusuario usua  ");
			sb.append(" ON ccilusuario = usua.huslnumero  ");
			sb.append(" LEFT JOIN clinico.cncitotoma toma   ");
			sb.append(" ON toma.ctmnconsec = ccinconsec  ");
			sb.append(" LEFT JOIN clinico.cncitovphlect citovph  ");
			sb.append(" ON citovph.ccvnconsec = ccinconsec  ");
			sb.append(" LEFT JOIN historia.chdetaentcito detaent  ");
			sb.append(" ON detaent.hdencitologia = ccinconsec  ");
			sb.append(" LEFT JOIN historia.chentregacitol entre  ");
			sb.append(" ON entre.heclidentificador = detaent.hdelidentregacitol  ");
			sb.append(" where ccintiphis = '50'   ");

			sb.append(
					" and ccidfecreg  BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi') ");
			if (clinica != 0) {
				sb.append("and  ccinclinic = :clinica");
			}

			Query sqlquery = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
					.createQuery(sb.toString());
			if (clinica != 0) {
				sqlquery.setParameter("clinica", clinica);
			}
			sqlquery.setParameter("fechaI", fechaI);
			sqlquery.setParameter("fechaF", fechaF);
			resultList = sqlquery.list();

			return resultList;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando el registro de reporte vph:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando el registro de reporte vph:" + e.getMessage(), e);
		}

	}

	public List<Object[]> getPruebasAnticuerposByConsulta(final Long consulta) throws ModelException {

		List<Object[]> resultList = null;
		try {
			if (consulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(
						"  select 59,chus.HUSANUMEIDEN,chus.HUSCPRIMERNOMB,chus.HUSCPRIMERAPEL,chus.HUSCSEGUNDNOMB,chus.HUSCSEGUNDAPEL, chpr.* ");
				sb.append(
						"  from HISTORIA.CHPRUECOVIDANTICU chpr, HISTORIA.chusuario chus,HISTORIA.chconsulta chcon where chpr.HPANCONSULTA=chcon.HCOLNUMERO and chcon.hcolusuario = chus.HUSLNUMERO and chpr.HPANCONSULTA = ? ");
				Query query = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
						.createQuery(sb.toString());
				query.setParameter(0, consulta);

				resultList = query.list();

				if (!resultList.isEmpty()) {
					return resultList;
				}

				return null;
			} else {
				return null;
			}

		} catch (HibernateException e) {
			throw new ModelException("Error obteniendo datos de la prueba rapida :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error obteniendo datos de la prueba rapida:" + e.getMessage(), e);
		}
	}

	public List<Object[]> getPruebasAntigenosByConsulta(final Long consulta) throws ModelException {

		List<Object[]> resultList = null;
		try {
			if (consulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(
						" select 58,chus.HUSANUMEIDEN,chus.HUSCPRIMERNOMB,chus.HUSCPRIMERAPEL,chus.HUSCSEGUNDNOMB,chus.HUSCSEGUNDAPEL, chpr.*");
				sb.append(
						" from HISTORIA.CHPRUECOVIDANTIGE chpr, HISTORIA.chusuario chus,HISTORIA.chconsulta chcon where chpr.HPGNCONSULTA=chcon.HCOLNUMERO and chcon.hcolusuario = chus.HUSLNUMERO and chpr.HPGNCONSULTA = ? ");
				Query query = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
						.createQuery(sb.toString());
				query.setParameter(0, consulta);

				resultList = query.list();

				if (!resultList.isEmpty()) {
					return resultList;
				}

				return null;
			} else {
				return null;
			}

		} catch (HibernateException e) {
			throw new ModelException("Error obteniendo datos de la prueba rapida :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error obteniendo datos de la prueba rapida:" + e.getMessage(), e);
		}
	}

	/**
	 * @param amdmsion
	 * @return
	 * @throws ModelException
	 */
	public List<Cnconsclin> getMedicamentosByAdm(final BigDecimal admision) throws ModelException {
		List<Cnconsclin> pis = (List<Cnconsclin>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {
				StringBuffer sb = new StringBuffer();
				sb.append("Select clin  from ");
				sb.append(Cnconsclin.class.getName()).append(" clin ");
				sb.append("where  clin.ccontipdoc=100 ");
				sb.append("and clin.cconnumdoc= :admi ");
				sb.append("and clin.ccocetapa not in('AT') ");
				sb.append("and clin.ccocservic.csvntiphis  in(40,41) ");
				String hql = sb.toString();

				Query query = session.createQuery(hql);

				query.setParameter("admi", admision);

				List<Cnconsclin> pis;
				pis = query.list();

				for (Cnconsclin pi : pis) {
					Cpservicio servicio = pi.getCcocservic();
					Hibernate.initialize(servicio);
					Cptipodocu tipo = pi.getCcontipdoc();
					Hibernate.initialize(tipo);

				}

				return pis;
			}
		});
		return pis;
	}

	/**
	 * @param numeroConsulta
	 * @return
	 * @throws ModelException
	 */
	public Chmedicament getMedicamentoByConsultaAsociada(final Long consulta) throws ModelException {
		List<Chmedicament> resultList = null;
		List parametros = new ArrayList();
		try {
			if (consulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append("Select med  from ");
				sb.append(Chmedicament.class.getName()).append(" med ");
				sb.append("where  med.id.hmelconsuasoci= ? ");
				parametros.add(consulta);

				resultList = (List<Chmedicament>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			}

		} catch (HibernateException e) {
			throw new ModelException("Error consultando medicamento por consulta Asociada:" + e.getMessage(), e);

		} catch (Exception e) {
			throw new ModelException("Error consultando medicamento por consulta Asociada:" + e.getMessage(), e);

		}
		if (resultList != null && !resultList.isEmpty()) {
			return resultList.get(0);
		} else {
			return null;
		}
	}

	/**
	 * @param numeroConsulta
	 * @return
	 * @throws ModelException
	 */
	public List<Chmedicament> getMedicamentoByConsulta(final Long consulta) throws ModelException {
		List<Chmedicament> resultList = null;
		List parametros = new ArrayList();
		try {
			if (consulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append("Select med  from ");
				sb.append(Chmedicament.class.getName()).append(" med ");
				sb.append("where  med.id.hmelconsulta = ? ");
				parametros.add(consulta);

				resultList = (List<Chmedicament>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());
			}

		} catch (HibernateException e) {
			throw new ModelException("Error consultando medicamento :" + e.getMessage(), e);

		} catch (Exception e) {
			throw new ModelException("Error consultando medicamento :" + e.getMessage(), e);

		}
		return resultList;
	}

	public void saveOrUpdateParamCorreo(final Chcorreo correo) throws ModelException {
		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {
					Integer consecutivo = null;
					if (correo != null) {

						session.saveOrUpdate(correo);
					}
					return correo;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Correos:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Correos:" + e.getMessage(), e);
		}
	}

	public List<Chcorreo> readCorreo() throws ModelException {
		List<Object[]> resultList = null;
		List<Chcorreo> lstCorreo = null;
		try {

			StringBuffer sb = new StringBuffer();
			sb.append(
					" select distinct chco.hcncontrato,cpco.ccncdescri,chco.hccdocum,chco.hcccorreo,chco.hccestado,chco.hcnconsec,chco.hccusuareg,chco.hcdfecreg  from ")
					.append(Chcorreo.class.getName()).append(" chco, ").append(Cpcontrato.class.getName())
					.append(" cpco");
			sb.append(" where chco.hcncontrato = cpco.id.ccnnnumero");
			sb.append(" order by chco.hcdfecreg DESC ");

			resultList = (List<Object[]>) this.getHibernateTemplate().find(sb.toString());

			if (!resultList.isEmpty()) {
				lstCorreo = new ArrayList<Chcorreo>();
				for (int i = 0; i < resultList.size(); i++) {
					Chcorreo correo = new Chcorreo();
					Object[] aux = resultList.get(i);
					correo.setHcncontrato((Integer) aux[0]);
					correo.setDescripcion(aux[1].toString());
					correo.setHccdocum(aux[2].toString());
					correo.setHcccorreo(aux[3].toString());
					correo.setHccestado(aux[4].toString());
					correo.setHcnconsec((Long) aux[5]);
					correo.setHccusuareg(aux[6].toString());
					correo.setHcdfecreg((Date) aux[7]);
					lstCorreo.add(correo);
				}
				return lstCorreo;
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Parametrizaci�n de Correos :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Parametrizacion de Correos :" + e.getMessage(), e);
		}

	}

	public List<Cpcontrato> getCriteriosContrato(Cpcontrato contrato, boolean exacto) throws ModelException {
		List resultList = null;
		List parametros = new ArrayList();
		try {
			StringBuffer sb = new StringBuffer();
			sb.append(
					"SELECT cpco FROM Cpcontrato cpco WHERE (cpco.id.ccnnnumero,cpco.id.ccnnclinic) IN (SELECT cpco1.id.ccnnnumero, min(cpco1.id.ccnnclinic)");
			sb.append(
					" FROM  Cpcontrato cpco1  WHERE cpco1.ccncestado='VG' group by cpco1.id.ccnnnumero) AND cpco.ccncestado='VG'  ");
			if (!exacto && contrato.getId().getCcnnnumero() != null && !contrato.getId().getCcnnnumero().equals("")) {
				sb.append(" and cpco.id.ccnnnumero like ?");
				parametros.add(contrato.getId().getCcnnnumero() + "%");
			} else if (exacto && contrato.getId().getCcnnnumero() != null
					&& !contrato.getId().getCcnnnumero().equals("")) {
				sb.append(" and cpco.id.ccnnnumero = ?");
				parametros.add(contrato.getId().getCcnnnumero());
			}
			sb.append("  and  cpco.ccncdescri like ?  ORDER BY cpco.id.ccnnnumero DESC ");
			parametros.add("%" + contrato.getCcncdescri().toUpperCase() + "%");

			resultList = this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Contratos por criterios:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Contratos por criterios:" + e.getMessage(), e);
		}
		return resultList;
	}

	public List<Chcorreo> getCorreosByParam(Long numeroContrato) throws ModelException {
		List<Cfadmision> resultList = null;
		List<Chcorreo> lstCorreo = null;
		List parametros = new ArrayList();
		try {

			StringBuffer sb = new StringBuffer();
			sb.append(" select cfad  from ").append(Cfadmision.class.getName()).append(" cfad");
			sb.append(" where cfad.cannumero = ? ");
			parametros.add(numeroContrato);

			resultList = (List<Cfadmision>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			if (resultList != null && !resultList.isEmpty()) {
				parametros = new ArrayList();
				StringBuffer sb1 = new StringBuffer();
				sb1.append(" select chco  from ").append(Chcorreo.class.getName()).append(" chco");
				sb1.append(" where chco.hcncontrato = ? and chco.hccestado = 'VG' ");
				parametros.add(resultList.get(0).getCancontra());

				lstCorreo = (List<Chcorreo>) this.getHibernateTemplate().find(sb1.toString(), parametros.toArray());

				return lstCorreo;
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Parametrizaci�n de Correos :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Parametrizacion de Correos :" + e.getMessage(), e);
		}
	}

	public Object[] getNombreEntidad(String codigoEntidad) throws ModelException {
		List<Object[]> resultList = null;
		List parametros = new ArrayList();
		try {

			StringBuffer sb = new StringBuffer();
			sb.append(" select cpen.ceaccodigo, cpen.ceacnombre  from ").append(Cpentidadadm.class.getName())
					.append(" cpen");
			sb.append(" where cpen.ceaccodigo = ? ");
			parametros.add(codigoEntidad);

			resultList = (List<Object[]>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());
			if (resultList != null && !resultList.isEmpty()) {
				return resultList.get(0);
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Entidad :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Entidad :" + e.getMessage(), e);
		}
	}

	public List<Cnconsclin> getMisConsultasDiaPruebasRapidas(final Date dia, final Integer codclinica,
			final BigDecimal idMedico, final String numeroIdentificacion) {
		List<Cnconsclin> pis = (List<Cnconsclin>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				String HORA_INICIAL = " 00:00";
				String HORA_FINAL = " 23:59";

				SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
				String fechaI = dateFormat.format(dia) + HORA_INICIAL;
				String fechaF = dateFormat.format(dia) + HORA_FINAL;

				if (numeroIdentificacion != null && !numeroIdentificacion.equals("")) {

					Date fechaInicial = null;
					Calendar cal = Calendar.getInstance();
					cal.setTime(dia);
					cal.add(Calendar.MONTH, -3);
					fechaInicial = cal.getTime();
					fechaI = dateFormat.format(fechaInicial) + HORA_INICIAL;
				}

				StringBuffer sb = new StringBuffer();
				sb.append(
						"SELECT DISTINCT cncl.cconclinic,cncl.ccodfeccon,cncl.ccoctipide,cncl.ccoanumide,cncl.ccocprinom,cncl.ccocsegnom,cncl.ccocpriape,cncl.ccocsegape,cncl.cconnumdoc,cncl.cconcontra,cncl.ccolusuario.huslnumero, cncl.ccontipdoc.ctdnnumero ");
				sb.append("    from ");
				sb.append(Cnconsclin.class.getName()).append(" cncl ");
				sb.append(" WHERE cncl.ccocestado = 'VG' AND cncl.ccocetapa IN ('ES','EC')");
				sb.append(
						" AND (cncl.ccodfeccon BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))");
				sb.append(" AND cncl.cconclinic = :codclinica ");
				sb.append(" AND cncl.ccontipdoc not in (30) ");
				sb.append(
						" AND cncl.cconnumero  in (select cnpc.id.cpnnconcli from Cnprofxcon cnpc where cnpc.id.cpnnconcli =  cncl.cconnumero and cnpc.cpnnclinic = :codclinica and cnpc.id.cpnnprofes = :idMedico AND cnpc.cpncestado != 'XX' ) ");
				sb.append(
						" AND cncl.cconnumero not in (select chco.hcolconsuclini from Chconsulta chco where chco.hcolconsuclini =  cncl.cconnumero and chco.hconclinica = :codclinica and chco.hcoeetapa = 'CE') ");

				sb.append(" AND cncl.ccocservic.csvntiphis = :tipoHistoria");
				if (numeroIdentificacion != null) {
					sb.append(" AND cncl.ccoanumide = :numIden  ");
				}

				sb.append(
						" group by  cncl.cconclinic,cncl.ccodfeccon,cncl.ccoctipide,cncl.ccoanumide,cncl.ccocprinom,cncl.ccocsegnom,cncl.ccocpriape,cncl.ccocsegape,cncl.cconnumdoc,cncl.cconcontra,cncl.ccolusuario.huslnumero, cncl.ccontipdoc.ctdnnumero  ");
				// sb.append(" order by cncl.ccothorcon asc ");
				String hql = sb.toString();

				Query query = session.createQuery(hql);

				query.setParameter("fechaI", fechaI);
				query.setParameter("fechaF", fechaF);
				query.setParameter("codclinica", codclinica);
				query.setParameter("tipoHistoria", IConstantes.HISTORIA_PRUEBAS_RAPIDAS);
				// query.setParameter("tarxEstado", IConstantes.ESTADO_VIGENTE);
				query.setParameter("idMedico", idMedico);

				if (numeroIdentificacion != null && !numeroIdentificacion.equals("")) {
					query.setParameter("numIden", numeroIdentificacion);
				}

				List<Object[]> lstaux;
				lstaux = query.list();
				List<Cnconsclin> pis = new ArrayList();

				if (lstaux != null) {
					for (Object[] ax : lstaux) {
						Chusuario usuarioAux;
						usuarioAux = new Chusuario();
						Cnconsclin consulta = new Cnconsclin();
						Cptipodocu tipoDocu = new Cptipodocu();
						Cpservicio servicio = new Cpservicio();
						consulta.setCconclinic((Integer) ax[0]);
						consulta.setCconsalesp(0);
						consulta.setCcodfeccon((Date) ax[1]);
						consulta.setCcoctipide((String) ax[2]);
						consulta.setCcoanumide((BigDecimal) ax[3]);
						consulta.setCcocprinom((String) ax[4]);
						consulta.setCcocsegnom((String) ax[5]);
						consulta.setCcocpriape((String) ax[6]);
						consulta.setCcocsegape((String) ax[7]);
						consulta.setCconnumdoc((BigDecimal) ax[8]);
						consulta.setCconcontra((Integer) ax[9]);
						usuarioAux.setHuslnumero((Long) ax[10]);
						consulta.setCcolusuario(usuarioAux);
						sb = new StringBuffer();
						sb.append("SELECT cpti from ");
						sb.append(Cptipodocu.class.getName()).append(" cpti ");
						sb.append(" WHERE cpti.ctdnnumero = :numdoc ");
						hql = sb.toString();
						query = session.createQuery(hql);
						query.setParameter("numdoc", (Integer) ax[11]);

						List<Cptipodocu> lstaux1;
						lstaux1 = query.list();
						if (lstaux1 != null && !lstaux1.isEmpty()) {
							tipoDocu = lstaux1.get(0);
						}

						consulta.setCcontipdoc(tipoDocu);
						if (tipoDocu != null && tipoDocu.getCtdnnumero() != null && consulta.getCconnumdoc() != null) {
							sb = new StringBuffer();
							sb.append("SELECT cncl from ");
							sb.append(Cnconsclin.class.getName()).append(" cncl ");
							sb.append("  where cncl.ccontipdoc = :tipDoc and cncl.cconnumdoc = :numDoc "
									+ "and cncl.ccocetapa in ('ES','EC') ");
							hql = sb.toString();
							query = session.createQuery(hql);
							query.setParameter("tipDoc", tipoDocu.getCtdnnumero());
							query.setParameter("numDoc", consulta.getCconnumdoc());

							List<Cnconsclin> lstaux2;
							lstaux2 = query.list();
							if (lstaux2 != null && !lstaux2.isEmpty()) {
								String nombreServicio = "";
								for (int i = 0; i < lstaux2.size(); i++) {
									if (lstaux2.get(i).getCcocservic().getCsvntiphis()
											.equals(IConstantes.HISTORIA_PRUEBAS_RAPIDAS)) {
										nombreServicio = nombreServicio + " * "
												+ lstaux2.get(i).getCcocservic().getCsvccodigo() + " "
												+ lstaux2.get(i).getCcocservic().getCsvcnombre();
									}
								}
								consulta.setNombreServicio(nombreServicio);
							}
						}
						// servicio.setCsvcnombre((String)ax[12]);
						consulta.setCcocservic(servicio);
						pis.add(consulta);
					}
				}

				return pis;
			}
		});
		return pis;
	}

	public void closePruebasRapidas(final Chpruerapi chpruerapi, final Chusuario usuario, final Cnconsclin consulta,
			final String userName) throws ModelException {
		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {
					String ESTADO_CERRADO = "CE";
					Chconsulta consultaUsuario;
					List lstHonorarios = null;

					consultaUsuario = null;
					if (usuario != null) {
						usuario.setHusdultimacons(new Date());
						session.update(usuario);
					}

					StringBuffer sb = new StringBuffer();
					sb.append(" select chco from Chconsulta"
							+ " chco  where chco.hcolnumero = :numeroConsulta AND chco.hcoctiposervi = :tipoServicio ");
					Query query = session.createQuery(sb.toString());
					query.setParameter("numeroConsulta", consulta.getCconnumero());
					query.setParameter("tipoServicio", IConstantes.TIPO_CONSULTA);

					consultaUsuario = (Chconsulta) query.uniqueResult();

					if (consultaUsuario == null) {
						consultaUsuario = new Chconsulta();

					}

					if (consulta != null && usuario != null) {
						consultaUsuario.setHcodfecinicio(new Date());
						consultaUsuario.setHcocentidadadm(usuario.getHuscentidadadm());
						consultaUsuario.setHcocnombacompa(usuario.getHuscnomacompana());
						consultaUsuario.setHcocnombrespo(usuario.getHuscnomresponsa());
						consultaUsuario.setHcocoperador(userName);
						consultaUsuario.setHcocservicio(consulta.getCcocservic());
						consultaUsuario.setHcocteleacompa(usuario.getHusctelacompana());
						consultaUsuario.setHcoctelerespo(usuario.getHusctelresponsa());
						consultaUsuario.setHcodfecregistr(new Date());
						consultaUsuario.setHcoeetapa(ESTADO_CERRADO);
						consultaUsuario.setHconfolio(usuario.getHusnfolioactua());
						consultaUsuario.setHcontipoconsu(consulta.getCcontconcl());
						consultaUsuario.setHconnumdoc(consulta.getCconnumdoc());
						consultaUsuario.setHcontipdoc(consulta.getCcontipdoc());
						consultaUsuario.setHconclinica(consulta.getCconclinic());
						consultaUsuario.setHcoctiposervi(IConstantes.TIPO_CONSULTA);
						consultaUsuario.setHcodfeccierre(new Date());
						if (consulta.getCconnumero() != null)
							consultaUsuario.setHcolconsuclini(new Long(consulta.getCconnumero()));
						consultaUsuario.setHcolnumero(new Long(consulta.getCconnumero()));
						consultaUsuario.setHcolusuario(usuario);
						consultaUsuario.setHcocreaconinf(usuario.getHcocreaconinf());

						consultaUsuario.setHcoccuacondil(usuario.getHcoccuacondil());

						consultaUsuario.setHcocautusodat(usuario.getHcocautusodat());

						session.saveOrUpdate(consultaUsuario);
						// GENERAR LA FACTURACION Y ETAPA ATENDIDA
						StringBuffer sbAda = new StringBuffer();
						sbAda.append(" update clinico.CFDETAFACTURA ccdf1  set ccdf1.CDFCETAPA = 'AT' ");
						sbAda.append(" where (ccdf1.CDFNCONSFACT, ccdf1.CDFNNUMITEM) in( ");
						sbAda.append(" select ccdf.CDFNCONSFACT, ccdf.CDFNNUMITEM ");
						sbAda.append(" from clinico.CFFACTURA ccfa, clinico.CFDETAFACTURA ccdf ");
						sbAda.append(" where ccfa.CFNCONSFACT = ccdf.CDFNCONSFACT ");
						sbAda.append(" and ccfa.CFNADMISION = :wadmision ");
						sbAda.append(" and ccdf.CDFCSERVICIO = :wservicio ) ");

						Query queryAda = session.createQuery(sbAda.toString());
						queryAda.setParameter("wadmision", consulta.getCconnumdoc());
						queryAda.setParameter("wservicio", consulta.getCcocservic().getCsvccodigo());
						queryAda.executeUpdate();
						// VERIFICAMOS SI EXISTE MAS DE UN PROFESIONAL ASIGNADO A LA CONSULTA NO
						// CAMBIAMOS LA FECHA DE LA CONSULTA,. NI ACTUALIZAMOS LA FECHA DE LA CONSULTA

						if (consulta != null) {

							StringBuffer sb5 = new StringBuffer();
							sb5.append(" select cnpc from " + Cnprofxcon.class.getName()
									+ " cnpc  where cnpc.id.cpnnconcli = :cpnnconcli AND cnpc.cpncestado != 'XX'  ");
							Query query5 = session.createQuery(sb5.toString());
							query5.setParameter("cpnnconcli", consulta.getCconnumero());

							lstHonorarios = query5.list();
						}
						if (consulta != null && lstHonorarios != null && lstHonorarios.size() <= 1) {
							consulta.setCcodfeccon(new Date());
							generarHonorariosProfesional(session, consulta, consultaUsuario, userName, null);

						}
						if (consulta != null) {
							consulta.setCcothorate(new Date());
							consulta.setCcocetapa(IConstantes.ETAPA_ATENDIDO);
							consulta.setCcocusumod(userName);

							// Cambiamos el estado de la consulta x clinica a atendida
							session.update(consulta);
						}
					}
					return chpruerapi;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		}

	}

	public Chpruerapi getOnePruebasRapidasByConsulta(final Long consulta) {
		Chpruerapi pis = (Chpruerapi) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				if (consulta != null) {
					StringBuffer sb = new StringBuffer();
					sb.append(" select chpr from " + Chpruerapi.class.getName()
							+ " chpr  where chpr.hprlconsulta = :numeroConsulta ");

					String hql = sb.toString();

					Query query = session.createQuery(hql);
					query.setParameter("numeroConsulta", consulta);

					Chpruerapi pis = null;
					List<Chpruerapi> aux;
					aux = query.list();
					if (aux != null && !aux.isEmpty()) {
						pis = aux.get(0);
					}

					return pis;
				}
				return null;
			}
		});
		return pis;
	}

	public List<Object[]> getRegistrosPruebasCovid(Long clinica, Long contrato, Date fechaInicial, Date fechafinal,
			String tipoPrueba) throws ModelException {
		List<Object[]> resultList = null;
		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		String fechaI = dateFormat.format(fechaInicial.getTime()) + HORA_INICIAL;
		String fechaF = dateFormat.format(fechafinal.getTime()) + HORA_FINAL;

		try {
			StringBuffer sb = new StringBuffer();
			sb.append(" select COVID.* from ( ");
			sb.append(
					" select 58 tipo, chpr.hpgnconsulta consulta, chus.HUSANUMEIDEN numeiden,chus.HUSCPRIMERNOMB primernombre,chus.HUSCPRIMERAPEL primerapellido,chus.HUSCSEGUNDNOMB segundonombre,chus.HUSCSEGUNDAPEL segundoapellido,chus.HUSCDIRECCION direccion,chus.HUSCTELEFONO telefono ");
			sb.append(
					"  ,(EXTRACT(YEAR FROM sysdate) - EXTRACT(YEAR FROM chus.husdfechanacim)) EDAD,chus.HUSETIPOIDEN tipodien,chus.HUSANUMEIDEN numeiden2,chpr.HPGCCONTADIAS dias,chpr.HPGDFECSINTO fecsintomas,chpr.HPGCMARCA marca,chpr.HPGCLOTE lote,chpr.HPGCREGINVIM reginvima,chpr.HPGDFECHFABR fecfab ");
			sb.append(
					"  ,chpr.HPGDFECHVENCI fecvenci,chpr.HPGCRESULTADO res,'NA' tipoantigeno,chpr.HPGCSINTOPACI sintopac,chpr.hpgdfechreg fecreg ");
			sb.append(
					" from  HISTORIA.CHPRUECOVIDANTIGE chpr, HISTORIA.chusuario chus,HISTORIA.chconsulta chcon,CLINICO.CFADMISION cfad, ");
			sb.append(
					" CLINICO.CNCONSCLIN cnco where chpr.HPGNCONSULTA=chcon.HCOLNUMERO and chcon.hcolusuario = chus.HUSLNUMERO ");
			sb.append(
					" and cnco.CCONNUMDOC = cfad.CANNUMERO and chcon.HCOLNUMERO = cnco.CCONNUMERO and cfad.CANCLINIC = :clinica and cfad.CANCONTRA = :contrato  ");
			sb.append(
					"  and chpr.hpgdfechreg BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi')");
			sb.append(" UNION ALL");

			sb.append(
					" select 59 tipo,chpr.hpanconsulta consulta, chus.HUSANUMEIDEN numeiden,chus.HUSCPRIMERNOMB primernombre,chus.HUSCPRIMERAPEL primerapellido,chus.HUSCSEGUNDNOMB segundonombre,chus.HUSCSEGUNDAPEL segundoapellido,chus.HUSCDIRECCION direccion,chus.HUSCTELEFONO telefono ");
			sb.append(
					"  ,(EXTRACT(YEAR FROM sysdate) - EXTRACT(YEAR FROM chus.husdfechanacim)) EDAD,chus.HUSETIPOIDEN tipodien,chus.HUSANUMEIDEN numeiden2,chpr.HPACCONTADIAS dias,chpr.HPADFECSINTO fecsintomas,chpr.HPACMARCA marca,chpr.HPACLOTE lote,chpr.HPACREGINVIM reginvima,chpr.HPADFECHFABR fecfab ");
			sb.append(
					"  ,chpr.HPADFECHVENCI fecvenci,chpr.HPACRESULTADO res,chpr.hpactipoantig tipoantigeno,chpr.HPACSINTOPACI sintopac,chpr.hpadfechreg fecreg ");
			sb.append(
					"  from  HISTORIA.CHPRUECOVIDANTICU chpr, HISTORIA.chusuario chus,HISTORIA.chconsulta chcon,CLINICO.CFADMISION cfad, ");
			sb.append(
					"  CLINICO.CNCONSCLIN cnco where chpr.HPANCONSULTA=chcon.HCOLNUMERO and chcon.hcolusuario = chus.HUSLNUMERO");
			sb.append(
					"  and cnco.CCONNUMDOC = cfad.CANNUMERO and chcon.HCOLNUMERO = cnco.CCONNUMERO and cfad.CANCLINIC = :clinica and cfad.CANCONTRA = :contrato ");
			sb.append(
					"  and chpr.hpadfechreg BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))COVID");
			if (tipoPrueba.equals("antigenos") || tipoPrueba.equals("anticuerpos")) {
				if (tipoPrueba.equals("antigenos")) {
					sb.append(" WHERE COVID.tipo = 58");
				}
				if (tipoPrueba.equals("anticuerpos")) {
					sb.append(" WHERE COVID.tipo = 59");
				}
			}
			sb.append(" ORDER BY COVID.fecreg ASC ");
			Query sqlquery = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
					.createQuery(sb.toString());
			sqlquery.setParameter("clinica", clinica);
			sqlquery.setParameter("contrato", contrato);
			sqlquery.setParameter("fechaI", fechaI);
			sqlquery.setParameter("fechaF", fechaF);
			resultList = sqlquery.list();

			return resultList;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando el registro de pruebas Covid 19:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando el registro de pruebas Covid-19:" + e.getMessage(), e);
		}

	}

	public List<Cpcontrato> getCriteriosContratoByClinica(Cpcontrato contrato, boolean exacto, Integer numeroClinica)
			throws ModelException {
		List resultList = null;
		List parametros = new ArrayList();
		try {
			StringBuffer sb = new StringBuffer();
			sb.append("SELECT cpco FROM Cpcontrato cpco WHERE ");
			sb.append(" cpco.id.ccnnclinic = ? AND cpco.ccncestado='VG'  ");
			parametros.add(numeroClinica);
			if (!exacto && contrato.getId().getCcnnnumero() != null && !contrato.getId().getCcnnnumero().equals("")) {
				sb.append(" and cpco.id.ccnnnumero like ?");
				parametros.add(contrato.getId().getCcnnnumero() + "%");
			} else if (exacto && contrato.getId().getCcnnnumero() != null
					&& !contrato.getId().getCcnnnumero().equals("")) {
				sb.append(" and cpco.id.ccnnnumero = ?");
				parametros.add(contrato.getId().getCcnnnumero());
			}
			sb.append("  and  cpco.ccncdescri like ?  ORDER BY cpco.id.ccnnnumero DESC ");
			parametros.add("%" + contrato.getCcncdescri().toUpperCase() + "%");

			resultList = this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Contratos por criterios:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Contratos por criterios:" + e.getMessage(), e);
		}
		return resultList;
	}

	public boolean getConsultaClinicaIVEXUsuario(final Cnconsclin consulta, final boolean accion)
			throws ModelException {
		boolean validacion = (Boolean) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {
				String HORA_INICIAL = " 00:00";
				String HORA_FINAL = " 23:59";

				Date fechaInicial = new Date();
				Date fechaFinal = new Date();

				Calendar cal = Calendar.getInstance();
				cal.setTime(fechaInicial);
				cal.add(Calendar.MONTH, -2);
				fechaInicial = cal.getTime();

				SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
				String fechaI = dateFormat.format(fechaInicial) + HORA_INICIAL;
				String fechaF = dateFormat.format(fechaFinal) + HORA_FINAL;

				boolean validacion = false;

				// VERIFICAMOS QUE EL USUARIO ATIENDE SOLO CONSULTAS PRIORITARIAS
				StringBuffer sb0 = new StringBuffer();
				sb0.append("SELECT con from ");
				sb0.append(Cnconsclin.class.getName()).append(" con , ");
				sb0.append(Cpservicio.class.getName()).append(" serv  ");
				sb0.append("WHERE con.ccolusuario = :usuario ");
				sb0.append(" AND con.ccocservic = serv.csvccodigo ");
				sb0.append(" AND con.ccocetapa = 'AT' ");
				sb0.append(" AND serv.csvntiphis = :tipoHistoria  ");
				sb0.append(
						" AND con.ccothorate  BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi')");

				String hql1 = sb0.toString();

				Query query = session.createQuery(hql1);
				query.setParameter("usuario", consulta.getCcolusuario());
				query.setParameter("fechaI", fechaI);
				query.setParameter("fechaF", fechaF);
				query.setParameter("tipoHistoria", IConstantes.HISTORIA_INTERRUPCION);

				List<Cnconsclin> pis;
				pis = query.list();
				List<Cnconsclin> pis2 = new ArrayList();

				if (pis != null && !pis.isEmpty()) {
					if (accion) {
						StringBuffer sb1 = new StringBuffer();
						sb1.append("SELECT con from ");
						sb1.append(Cnconsclin.class.getName()).append(" con , ");
						sb1.append(Cpservicio.class.getName()).append(" serv  ");
						sb1.append("WHERE con.ccontipdoc = 100 ");
						sb1.append(" AND con.cconnumdoc = :numDocu ");
						sb1.append(" AND con.ccocservic = serv.csvccodigo ");
						sb1.append(" AND con.ccocetapa != 'AT' ");
						sb1.append(" AND serv.csvngrupo = 61  and serv.csvnsubgru in(5,1,4) ");

						String hql = sb1.toString();

						Query query1 = session.createQuery(hql);
						query1.setParameter("numDocu", consulta.getCconnumdoc());
						pis2 = query1.list();
					} else {
						validacion = true;
					}

				}

				if (pis2 != null && !pis2.isEmpty() && accion) {
					validacion = true;
				}
				return validacion;
			}
		});
		return validacion;
	}

	/**
	 * @param numeroAdmision
	 * @return
	 * @throws ModelException
	 */
	public Cfremiadmi getRemisionAdmision(Long numeroAdmision) throws ModelException {
		List<Cfremiadmi> resultList = null;
		List parametros = new ArrayList();

		try {
			if (numeroAdmision != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select remi from " + Cfremiadmi.class.getName() + " remi  where remi.cranadmisi = ?  ");
				parametros.add(numeroAdmision);
				resultList = (List<Cfremiadmi>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

				return null;
			} else {
				return null;
			}

		} catch (HibernateException e) {
			throw new ModelException("Error Obteniendo Remision Admision:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Obteniendo Remision Admision:" + e.getMessage(), e);
		}

	}

	/**
	 * @param dia
	 * @return
	 * @throws ModelException
	 */
	public List<Cnconsclin> getConsultasFragmentacionEspermaDia(final Date dia, final Integer codclinica,
			final BigDecimal idMedico, final String numeroIden) throws ModelException {
		List<Cnconsclin> pis = (List<Cnconsclin>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				String HORA_INICIAL = " 00:00";
				String HORA_FINAL = " 23:59";

				Calendar fechaInic = Calendar.getInstance();
				fechaInic.set(Calendar.MONTH, -3);

				SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");

				String fechaI = dateFormat.format(dia) + HORA_INICIAL;
				String fechaF = dateFormat.format(dia) + HORA_FINAL;

				if (numeroIden != null) {
					fechaI = dateFormat.format(fechaInic.getTime()) + HORA_INICIAL;
				}
				StringBuffer sb = new StringBuffer();
				sb.append(
						"SELECT DISTINCT cncl.cconclinic,cncl.cconsalesp,cncl.ccodfeccon,cncl.ccoctipide,cncl.ccoanumide,cncl.ccocprinom,cncl.ccocsegnom,cncl.ccocpriape,cncl.ccocsegape,cncl.cconnumdoc,cncl.cconcontra,cncl.ccolusuario.huslnumero, cncl.ccontipdoc.ctdnnumero, cncl.ccocservic.csvntiphis, cncl.cconnumero,cncl.ccothorcon  from ");
				sb.append(Cnconsclin.class.getName()).append(" cncl ");
				sb.append(" WHERE cncl.ccocestado = 'VG' AND cncl.ccocetapa IN ('ES','EC')");
				if (numeroIden != null) {
					sb.append(" AND cncl.ccoanumide = :wnumide ");
				}
				sb.append(
						" AND (cncl.ccodfeccon BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))");
				sb.append(" AND cncl.cconclinic = :codclinica ");
				sb.append(" AND cncl.ccontipdoc not in (30) ");
				sb.append(" AND cncl.ccocservic.csvntiphis in (68)     ");
				sb.append(
						" group by  cncl.cconclinic,cncl.cconsalesp,cncl.ccodfeccon,cncl.ccoctipide,cncl.ccoanumide,cncl.ccocprinom,cncl.ccocsegnom,cncl.ccocpriape,cncl.ccocsegape,cncl.cconnumdoc,cncl.cconcontra,cncl.ccolusuario.huslnumero, cncl.ccontipdoc.ctdnnumero, cncl.ccocservic.csvntiphis, cncl.cconnumero,cncl.ccothorcon      ");
				sb.append(" order by cncl.ccothorcon asc ");
				String hql = sb.toString();

				Query query = session.createQuery(hql);

				query.setParameter("fechaI", fechaI);
				query.setParameter("fechaF", fechaF);
				query.setParameter("codclinica", codclinica);

				if (numeroIden != null) {
					query.setParameter("wnumide", numeroIden);
				}

				List<Object[]> lstaux;
				lstaux = query.list();
				List<Cnconsclin> pis = new ArrayList();

				if (lstaux != null) {
					for (Object[] ax : lstaux) {
						Chusuario usuarioAux;
						usuarioAux = new Chusuario();
						Cnconsclin consulta = new Cnconsclin();
						Cptipodocu tipoDocu = new Cptipodocu();
						consulta.setCconclinic((Integer) ax[0]);
						consulta.setCconsalesp((Integer) ax[1]);
						consulta.setCcodfeccon((Date) ax[2]);
						consulta.setCcoctipide((String) ax[3]);
						consulta.setCcoanumide((BigDecimal) ax[4]);
						consulta.setCcocprinom((String) ax[5]);
						consulta.setCcocsegnom((String) ax[6]);
						consulta.setCcocpriape((String) ax[7]);
						consulta.setCcocsegape((String) ax[8]);
						consulta.setCconnumdoc((BigDecimal) ax[9]);
						consulta.setCconcontra((Integer) ax[10]);
						usuarioAux.setHuslnumero((Long) ax[11]);
						consulta.setCcolusuario(usuarioAux);
						tipoDocu.setCtdnnumero((Integer) ax[12]);
						consulta.setCcontipdoc(tipoDocu);
						consulta.setTipoHistoria((Integer) ax[13]);
						consulta.setCconnumero((Integer) ax[14]);
						pis.add(consulta);
					}
				}

				return pis;
			}
		});
		return pis;
	}

	public boolean getDetalleAdmisionXTipoHistoria(Long numeroAdmision, Integer tipoHistoria) throws ModelException {
		List<Cfdetaadmision> lstDetadm = null;
		List parametros = new ArrayList();

		try {
			if (numeroAdmision != null && tipoHistoria != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(
						" select cfde from " + Cfdetaadmision.class.getName() + " cfde , " + Cpservicio.class.getName()
								+ " cpser " + " where cfde.id.cdannumadm = ? AND cfde.cdacservic = cpser.csvccodigo "
								+ " and cpser.csvntiphis = ? ");
				parametros.add(numeroAdmision);
				parametros.add(tipoHistoria);
				lstDetadm = (List<Cfdetaadmision>) this.getHibernateTemplate().find(sb.toString(),
						parametros.toArray());

				if (lstDetadm != null && !lstDetadm.isEmpty()) {
					return true;
				}

				return false;
			} else {
				return false;
			}

		} catch (HibernateException e) {
			throw new ModelException("Error Obteniendo Detalle Admision:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Obteniendo Detalle Admision:" + e.getMessage(), e);
		}

	}

	public List<Cnconsclin> getConsultaAdmisionXTipoHistoria(final Long numeroAdmision, final Integer tipoHistoria)
			throws ModelException {
		List<Cnconsclin> pis = (List<Cnconsclin>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				StringBuffer sb0 = new StringBuffer();
				sb0.append("SELECT con from ");
				sb0.append(Cnconsclin.class.getName()).append(" con , ");
				sb0.append(Cpservicio.class.getName()).append(" serv  ");
				sb0.append("WHERE con.ccontipdoc = 100 ");
				sb0.append(" AND con.cconnumdoc = :numeroAdmision ");
				sb0.append(" AND con.ccocservic = serv.csvccodigo ");
				sb0.append(" AND con.ccocetapa = 'ES' ");
				sb0.append(" AND serv.csvngrupo = 61  ");
				sb0.append(" AND serv.csvnsubgru in (5,4,1)  ");

				String hql = sb0.toString();

				Query query = session.createQuery(hql);
				query.setParameter("numeroAdmision", numeroAdmision);

				List<Cnconsclin> pis;
				pis = query.list();

				if (!pis.isEmpty()) {

					for (Cnconsclin consulta : pis) {
						Cpservicio servi = consulta.getCcocservic();
						Hibernate.initialize(servi);
					}

					return pis;
				}

				return pis;
			}
		});
		return pis;
	}

	public void atenderConsultaClinica(final List<Cnconsclin> listaConsultas, final String userName)
			throws ModelException {

		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {

					for (Cnconsclin consulta : listaConsultas) {
						if (consulta != null) {

							generarRipsProcedimiento(session, consulta, userName);
							consulta.setCcothorate(new Date());
							consulta.setCcocetapa(IConstantes.ETAPA_ATENDIDO);
							consulta.setCcocusumod(userName);

							// Cambiamos el estado de la consulta x clinica a atendida
							session.update(consulta);

							StringBuffer sbAda = new StringBuffer();
							sbAda.append(" update clinico.CFDETAFACTURA ccdf1  set ccdf1.CDFCETAPA = 'AT' ");
							sbAda.append(" where (ccdf1.CDFNCONSFACT, ccdf1.CDFNNUMITEM) in( ");
							sbAda.append(" select ccdf.CDFNCONSFACT, ccdf.CDFNNUMITEM ");
							sbAda.append(" from clinico.CFFACTURA ccfa, clinico.CFDETAFACTURA ccdf ");
							sbAda.append(" where ccfa.CFNCONSFACT = ccdf.CDFNCONSFACT ");
							sbAda.append(" and ccfa.CFNADMISION = :wadmision ");
							sbAda.append(" and ccdf.CDFCSERVICIO = :wservicio ) ");

							Query queryAda = session.createQuery(sbAda.toString());
							queryAda.setParameter("wadmision", consulta.getCconnumdoc());
							queryAda.setParameter("wservicio", consulta.getCcocservic().getCsvccodigo());
							queryAda.executeUpdate();
						}
					}
					return listaConsultas;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		}
	}

	public void atenderConsultaClinicaIve(final List<Cnconsclin> listaConsultas, final String userName,
			final Cnconsclin consultaActual) throws ModelException {

		try {
			this.getHibernateTemplate().execute(new HibernateCallback() {
				public Object doInHibernate(Session session) {

					for (Cnconsclin consulta : listaConsultas) {
						if (consulta != null) {

							generarRipsProcedimientoIve(session, consulta, userName, consultaActual);
							consulta.setCcothorate(new Date());
							consulta.setCcocetapa(IConstantes.ETAPA_ATENDIDO);
							consulta.setCcocusumod(userName);

							// Cambiamos el estado de la consulta x clinica a atendida
							session.update(consulta);

							StringBuffer sbAda = new StringBuffer();
							sbAda.append(" update clinico.CFDETAFACTURA ccdf1  set ccdf1.CDFCETAPA = 'AT' ");
							sbAda.append(" where (ccdf1.CDFNCONSFACT, ccdf1.CDFNNUMITEM) in( ");
							sbAda.append(" select ccdf.CDFNCONSFACT, ccdf.CDFNNUMITEM ");
							sbAda.append(" from clinico.CFFACTURA ccfa, clinico.CFDETAFACTURA ccdf ");
							sbAda.append(" where ccfa.CFNCONSFACT = ccdf.CDFNCONSFACT ");
							sbAda.append(" and ccfa.CFNADMISION = :wadmision ");
							sbAda.append(" and ccdf.CDFCSERVICIO = :wservicio ) ");

							Query queryAda = session.createQuery(sbAda.toString());
							queryAda.setParameter("wadmision", consulta.getCconnumdoc());
							queryAda.setParameter("wservicio", consulta.getCcocservic().getCsvccodigo());
							queryAda.executeUpdate();
						}
					}
					return listaConsultas;
				}
			});
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		}
	}

	public boolean getConsultaAdmisionXTiposHistorias(Long numeroAdmision, List<Integer> listaTipoHistoria)
			throws ModelException {
		List<Cnconsclin> lstConsulta = null;
		List parametros = new ArrayList();

		try {
			String tiposHistoria = getStringFromIntegerList(listaTipoHistoria);
			StringBuffer sb0 = new StringBuffer();
			sb0.append("SELECT con from ");
			sb0.append(Cnconsclin.class.getName()).append(" con , ");
			sb0.append(Cpservicio.class.getName()).append(" serv  ");
			sb0.append("WHERE con.ccontipdoc = 100 ");
			sb0.append(" AND con.cconnumdoc = ? ");
			sb0.append(" AND con.ccocservic = serv.csvccodigo ");
			sb0.append(" AND con.ccocetapa = 'ES' ");
			sb0.append(" AND serv.csvntiphis in (" + tiposHistoria + ") ");

			parametros.add(numeroAdmision);

			lstConsulta = (List<Cnconsclin>) this.getHibernateTemplate().find(sb0.toString(), parametros.toArray());

			if (lstConsulta != null && !lstConsulta.isEmpty()) {
				return true;
			}

		} catch (HibernateException e) {
			throw new ModelException("Error Obteniendo consultas por  Admision y tipos de historias:" + e.getMessage(),
					e);
		} catch (Exception e) {
			throw new ModelException("Error Obteniendo consultas por  Admision y tipos de historias:" + e.getMessage(),
					e);
		}

		return false;
	}

	public List<Cnconsclin> getConsultaAdmisionXGrupoSubGrupoInterrupcion(Long numeroAdmision) throws ModelException {
		List<Cnconsclin> lstConsulta = null;
		List parametros = new ArrayList();

		try {
			StringBuffer sb0 = new StringBuffer();
			sb0.append("SELECT con from ");
			sb0.append(Cnconsclin.class.getName()).append(" con , ");
			sb0.append(Cpservicio.class.getName()).append(" serv  ");
			sb0.append("WHERE con.ccontipdoc = 100 ");
			sb0.append(" AND con.cconnumdoc = ? ");
			sb0.append(" AND con.ccocservic = serv.csvccodigo ");
			sb0.append(" AND con.ccocetapa = 'ES' ");
			sb0.append(" AND serv.csvngrupo  = 61 ");
			sb0.append(" AND serv.csvnsubgru in (5,1,4) ");

			parametros.add(numeroAdmision);

			lstConsulta = (List<Cnconsclin>) this.getHibernateTemplate().find(sb0.toString(), parametros.toArray());

			if (lstConsulta != null && !lstConsulta.isEmpty()) {
				for (Cnconsclin co : lstConsulta) {
					Cpservicio servicio = co.getCcocservic();
					Hibernate.initialize(servicio);
				}
				return lstConsulta;
			}

		} catch (HibernateException e) {
			throw new ModelException("Error Obteniendo consultas por  Admision por grupo y subgrupo:" + e.getMessage(),
					e);
		} catch (Exception e) {
			throw new ModelException("Error Obteniendo consultas por  Admision por grupo y subgrupo:" + e.getMessage(),
					e);
		}

		return null;
	}

	/**
	 * @param antecedentes
	 * @param numeroConsulta
	 * @throws ModelException
	 */
	public void saveFragmentacionEspermatica(final Chfragesperma fragesperma) throws ModelException {
		try {

			if (fragesperma != null) {
				this.getHibernateTemplate().saveOrUpdate(fragesperma);
			}
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando :" + e.getMessage(), e);
		}
	}

	/**
	 * @param numeroConsulta
	 * @return
	 * @throws ModelException
	 */
	public Chfragesperma getFragmentEsperma(Long numeroConsulta) throws ModelException {
		List<Chfragesperma> resultList = null;
		List parametros = new ArrayList();
		try {
			if (numeroConsulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select es from " + Chfragesperma.class.getName() + " es  where es.cfelconsulta = ? ");
				parametros.add(numeroConsulta);

				resultList = (List<Chfragesperma>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Fragmentacion de espermatica:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Fragmentacion de espermatica: :" + e.getMessage(), e);
		}

	}

	/**
	 * @param numeroUsuario
	 * @return
	 * @throws ModelException
	 */
	public List getCopiaTestFragE(Long numeroUsuario) throws ModelException {

		List resultList = null;
		try {
			if (numeroUsuario != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(
						" select l.cfedfechtoma,l.cfetfechregi, l.cfelconsulta, 0,u.husetipoiden, u.husanumeiden, u.huscprimernomb,nvl(u.huscsegundnomb,'--'),u.huscprimerapel,nvl(u.huscsegundapel,'--')  ");
				sb.append(" from historia.chfragesperma l  ");
				sb.append(" left join historia.chconsulta c on l.cfelconsulta= c.hcolnumero    ");
				sb.append(" left join historia.chusuario u on u.huslnumero = c.hcolusuario   ");
				sb.append("  where c.hcolusuario= ? ");
				sb.append(" order by l.cfetfechregi desc  ");

				Query query = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
						.createQuery(sb.toString());
				query.setParameter(0, numeroUsuario);

				resultList = query.list();

				if (!resultList.isEmpty()) {
					return resultList;
				}

				return null;
			} else {
				return null;
			}

		} catch (HibernateException e) {
			throw new ModelException("Error obteniendo copia de Test Fragmentacion espermatica :" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error obteniendo copia de Test Fragmentacion espermatica :" + e.getMessage(), e);
		}
	}

	public Chfragesperma getTestFargEConsulta(Long numeroConsulta) throws ModelException {

		List<Chfragesperma> resultList = null;
		List parametros = new ArrayList();
		try {
			if (numeroConsulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chas from " + Chfragesperma.class.getName() + " chas  where chas.cfelconsulta = ? ");
				parametros.add(numeroConsulta);

				resultList = (List<Chfragesperma>) this.getHibernateTemplate().find(sb.toString(),
						parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Fragmentacion Espermatica:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Fragmentacion Espermatica :" + e.getMessage(), e);
		}
	}

	public Cnprofxcon getProfesionalByConsulta(Long numeroConsulta) throws ModelException {
		List<Cnprofxcon> resultList = null;
		List parametros = new ArrayList();
		try {
			if (numeroConsulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select cnpc from " + Cnprofxcon.class.getName()
						+ " cnpc  where cnpc.id.cpnnconcli = ? AND cnpc.cpncestado != 'XX'  ");

				parametros.add(numeroConsulta);

				resultList = (List<Cnprofxcon>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Profesional por Consulta:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Profesional por Consulta :" + e.getMessage(), e);
		}
	}

	public List<Chsegutelefo> getListVinisoUsuario(final Chusuario usuario) throws ModelException {
		List<Chsegutelefo> pis = (List<Chsegutelefo>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {

				StringBuffer sb = new StringBuffer();
				sb.append(" select seg from " + Chsegutelefo.class.getName());
				sb.append(" seg  ");
				sb.append(" where seg.hstlusuario = :wnumusu  ");
				sb.append(" order by seg.hstdfecregistr desc");
				String hql = sb.toString();

				Query query = session.createQuery(hql);
				query.setParameter("wnumusu", usuario.getHuslnumero());

				List<Chsegutelefo> pis;
				pis = query.list();

				return pis;
			}
		});
		return pis;
	}

	/**
	 * @return
	 * @throws ModelException
	 */
	public List<Chplanconsinfo> getConsentimientoInformado() throws ModelException {
		List<Chplanconsinfo> resultList = null;
		List parametros = new ArrayList();

		try {
			StringBuffer sb = new StringBuffer();
			sb.append(
					" select chpci from " + Chplanconsinfo.class.getName() + " chpci order by chpci.hpcicestado asc ");

			resultList = (List<Chplanconsinfo>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			if (!resultList.isEmpty()) {
				return resultList;
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Consentimientos Informados - Usuario:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Consentimientos Informados  - Usuario:" + e.getMessage(), e);
		}

	}

	/**
	 * @param consentimiento
	 * @throws ModelException
	 */
	public void saveConsentimientoInformado(final Chplanconsinfo consentimiento) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(consentimiento);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Consentimiento Informado:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Consentimiento Informado:" + e.getMessage(), e);
		}
	}

	/**
	 * @param codigo
	 * @return
	 * @throws ModelException
	 */
	public Chplanconsinfo getConsentimientoInformadoCodigo(Long codigo) throws ModelException {
		List<Chplanconsinfo> resultList = null;
		List parametros = new ArrayList();

		try {
			if (codigo != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chpci from " + Chplanconsinfo.class.getName()
						+ " chpci  where chpci.hpcinconsec = ? ");
				parametros.add(codigo);

				resultList = (List<Chplanconsinfo>) this.getHibernateTemplate().find(sb.toString(),
						parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Consentimientos Informados - Codigo:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Consentimientos Informados  - Codigo:" + e.getMessage(), e);
		}

	}

	/**
	 * @param numConsulta
	 * @return
	 * @throws ModelException
	 */
	public List<Chconinfxcon> getConsentimientoXConsulta(Long numConsulta) throws ModelException {
		List<Chconinfxcon> resultList = null;
		List parametros = new ArrayList();

		try {
			if (numConsulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chcin from " + Chconinfxcon.class.getName()
						+ " chcin  where chcin.hcicnconsulta = ? ");
				parametros.add(numConsulta);

				resultList = (List<Chconinfxcon>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {

					for (Chconinfxcon consulta : resultList) {
						Chplanconsinfo plant = consulta.getHcicnnucoin();
						Hibernate.initialize(plant);
					}

					return resultList;
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Consentimientos Informados X Consulta:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Consentimientos Informados X Usuario:" + e.getMessage(), e);
		}

	}

	/**
	 * @param listConsentimientoXConsulta
	 * @throws ModelException
	 */
	public void saveConsentimientoInformadoXconsulta(final List<Chconinfxcon> listConsentimientoXConsulta)
			throws ModelException {
		try {

			if (listConsentimientoXConsulta != null && !listConsentimientoXConsulta.isEmpty()) {
				for (Chconinfxcon chconinfxcon : listConsentimientoXConsulta) {
					this.getHibernateTemplate().saveOrUpdate(chconinfxcon);
				}
			}

		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Consentimiento Informado X Consulta:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Consentimiento Informado X Consulta:" + e.getMessage(), e);
		}
	}

	/**
	 * @param chplanconsinfo
	 * @return
	 * @throws ModelException
	 */
	public List<Chplanconsinfo> getConsentimientoInformadoXCliterios(Chplanconsinfo chplanconsinfo)
			throws ModelException {
		List<Chplanconsinfo> resultList = null;
		List parametros = new ArrayList();

		try {

			StringBuffer sb = new StringBuffer();
			sb.append(
					" select chpci from " + Chplanconsinfo.class.getName() + " chpci  where chpci.hpcicestado = 'AC'");

			if (chplanconsinfo.getHpciccodigo() != null && !chplanconsinfo.getHpciccodigo().equals("")) {
				sb.append(" and chpci.hpciccodigo like ? ");
				parametros.add("%" + chplanconsinfo.getHpciccodigo() + "%");
			}

			if (chplanconsinfo.getHpcicnombre() != null && !chplanconsinfo.getHpcicnombre().equals("")) {
				sb.append(" and chpci.hpcicnombre like ? ");
				parametros.add("%" + chplanconsinfo.getHpcicnombre() + "%");
			}

			resultList = (List<Chplanconsinfo>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			if (!resultList.isEmpty()) {
				return resultList;
			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Consentimientos Informados - Usuario:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Consentimientos Informados  - Usuario:" + e.getMessage(), e);
		}

	}

	/**
	 * @param codigo
	 * @return
	 * @throws ModelException
	 */
	public Chplanconsinfo getConsentimientoInformadoXCodigo(String codigo) throws ModelException {
		List<Chplanconsinfo> resultList = null;
		List parametros = new ArrayList();

		try {
			if (codigo != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chpci from " + Chplanconsinfo.class.getName()
						+ " chpci  where chpci.hpciccodigo = ? ");
				parametros.add(codigo);

				resultList = (List<Chplanconsinfo>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Consentimientos Informados - Codigo:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Consentimientos Informados  - Codigo:" + e.getMessage(), e);
		}

	}

	public List<Object[]> getPruebaDeEmbarazoDia(Long numeroUsuario, Date fecha, Date fechafinal)
			throws ModelException {
		String HORA_INICIAL = " 00:00";
		String HORA_FINAL = " 23:59";
		List<Object[]> resultList = null;
		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		String fechaI = dateFormat.format(fecha.getTime()) + HORA_INICIAL;
		String fechaF = dateFormat.format(fecha.getTime()) + HORA_FINAL;

		try {
			StringBuffer sb = new StringBuffer();

			sb.append(
					"select chpr.HPRCRESULPRUEMB,chpr.HPRDFECREGISTR,chpr.HPRCPRUEEMBA from historia.CHPRUERAPI chpr,historia.CHCONSULTA chcon where chpr.HPRLCONSULTA = chcon.HCOLNUMERO and chcon.HCODFECREGISTR "
							+ "  BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi')  ");
			sb.append(" AND chcon.HCOLUSUARIO = :numeroUsuario");

			Query sqlquery = this.getHibernateTemplate().getSessionFactory().getCurrentSession()
					.createQuery(sb.toString());

			sqlquery.setParameter("fechaI", fechaI);
			sqlquery.setParameter("fechaF", fechaF);
			sqlquery.setParameter("numeroUsuario", numeroUsuario);

			resultList = sqlquery.list();

			return resultList;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando el registro de prueba de embarazo" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando el registro de prueba de embarazo" + e.getMessage(), e);
		}

	}

	public List<Cnconsclin> getConsultasSaludTotal(final Date fechaIni, final Date fechaFin, final Integer codclinica,
			final Integer numDocPac, final Integer contrato1, final Integer contrato2, final String tipoReproceso)
			throws ModelException {
		List<Cnconsclin> pis = (List<Cnconsclin>) getHibernateTemplate().execute(new HibernateCallback() {
			public Object doInHibernate(Session session) throws HibernateException {
				String HORA_INICIAL = " 00:00";
				String HORA_FINAL = " 23:59";
				List<Integer> lstTiposBiop = new ArrayList();
				Integer tipoHistoria = null;

				SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
				String fechaI = null;
				String fechaF = null;
				if (fechaIni != null && fechaFin != null) {
					fechaI = dateFormat.format(fechaIni) + HORA_INICIAL;
					fechaF = dateFormat.format(fechaFin) + HORA_FINAL;
				}

				Chprioxmedi wprioaux = null;
				boolean wprior = false;

				StringBuffer sb = new StringBuffer();
				sb.append("SELECT cncl from ");
				sb.append(Cnconsclin.class.getName()).append(" cncl ");
				sb.append(" WHERE cncl.ccocestado = 'VG' AND cncl.ccocetapa IN ('AT')");

				sb.append(" AND cncl.ccontipdoc not in (30) ");
				sb.append(" AND cncl.ccocservic.csvntipcon  in (1,3,4,5,12,98,99) ");
				if (fechaIni != null && fechaFin != null) {
					sb.append(
							" AND (cncl.ccodfeccon BETWEEN TO_DATE(:fechaI,'dd/MM/yyyy hh24:mi') AND TO_DATE(:fechaF,'dd/MM/yyyy hh24:mi'))");
				}
				if (numDocPac != null) {
					sb.append(" AND cncl.ccoanumide = :numIden ");
				}
				// establecer que tipo de procedimiento se va a consultar
				if (tipoReproceso.equals("CBL") || tipoReproceso.equals("VPH") || tipoReproceso.equals("COL")) {
					sb.append(" AND cncl.cconcontra in (:contrato1,:contrato2) ");
					if (tipoReproceso.equals("CBL")) {
						tipoHistoria = IConstantes.HISTORIA_LECTURA_CITOLOGIA_BASE_LIQUIDA;
					} else if (tipoReproceso.equals("COL")) {
						tipoHistoria = IConstantes.HISTORIA_PROCEDIMIENTO_COLPOSCOPIA;
					}
					if (tipoReproceso.equals("CBL") || tipoReproceso.equals("COL")) {
						sb.append(" AND cncl.ccocservic.csvntiphis =:tipoHistoria");
					}
				} else {
					lstTiposBiop.add(IConstantes.HISTORIA_CONTROL_GINECOLOGIA);
					lstTiposBiop.add(IConstantes.HISTORIA_UROLOGIA);
					lstTiposBiop.add(IConstantes.HISTORIA_CONTROL_UROLOGIA);
					lstTiposBiop.add(IConstantes.HISTORIA_CONTROL_EXAMEN_MAMA);
					lstTiposBiop.add(IConstantes.HISTORIA_CONTROL_DERMATOLOGIA);
					lstTiposBiop.add(IConstantes.HISTORIA_EXAMEN_MAMA);
					lstTiposBiop.add(IConstantes.HISTORIA_OTRAS_ESPECIALIDADES);
					String tiposHistoria = getStringFromIntegerList(lstTiposBiop);
					sb.append(" AND cncl.ccocservic.csvntiphis IN ( " + tiposHistoria + " ) ");
				}
				sb.append(" order by cncl.ccodfeccon asc  ");
				String hql = sb.toString();

				Query query = session.createQuery(hql);
				if (fechaIni != null && fechaFin != null) {
					query.setParameter("fechaI", fechaI);
					query.setParameter("fechaF", fechaF);
				}
				if (numDocPac != null) {
					query.setParameter("numIden", numDocPac);
				}

				if (tipoReproceso.equals("CBL") || tipoReproceso.equals("VPH") || tipoReproceso.equals("COL")) {
					query.setParameter("contrato1", contrato1);
					query.setParameter("contrato2", contrato2);
					if (tipoReproceso.equals("CBL") || tipoReproceso.equals("COL")) {
						query.setParameter("tipoHistoria", tipoHistoria);
					}
				}
				List<Cnconsclin> pis;
				pis = query.list();
				for (Cnconsclin pi : pis) {
					Cpservicio servicio = pi.getCcocservic();
					Hibernate.initialize(servicio);
					Cptipodocu tipo = pi.getCcontipdoc();
					Hibernate.initialize(tipo);
					Chusuario usu = pi.getCcolusuario();
					Hibernate.initialize(usu);

				}

				return pis;
			}
		});
		return pis;
	}

	/**
	 * @param correlec
	 * @throws ModelException
	 */
	/**
	 * @param correlec
	 * @throws ModelException
	 */
	public void saveOrUpdateChcorrelec(Chcorrelec correlec) throws ModelException {
		try {
			this.getHibernateTemplate().saveOrUpdate(correlec);
		} catch (HibernateException e) {
			throw new ModelException("Error Insertando Envio de correo Informado:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error Insertando Envio de correo Informado:" + e.getMessage(), e);
		}
	}

	/**
	 * @param codigo
	 * @return
	 * @throws ModelException
	 */
	public Chcorrelec getChcorrelec(Long consulta) throws ModelException {
		List<Chcorrelec> resultList = null;
		List parametros = new ArrayList();
		try {
			if (consulta != null) {
				StringBuffer sb = new StringBuffer();
				sb.append(" select chco from " + Chcorrelec.class.getName() + " chco  where chco.hcenconsul = ? ");
				parametros.add(consulta);

				resultList = (List<Chcorrelec>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

				if (!resultList.isEmpty()) {
					return resultList.get(0);
				}

			}

			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Envio de correo electronico: " + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Envio de correo electronico: " + e.getMessage(), e);
		}

	}

	/**
	 * @param
	 * @return
	 * @throws ModelException
	 */
	public List<Cppais> getPaises() throws ModelException {
		List<Cppais> resultList = null;
		List parametros = new ArrayList();

		try {
			StringBuffer sb = new StringBuffer();
			sb.append(" select cppa from " + Cppais.class.getName() + " cppa  ");

			resultList = (List<Cppais>) this.getHibernateTemplate().find(sb.toString(), parametros.toArray());

			if (!resultList.isEmpty()) {
				return resultList;
			}
			return null;

		} catch (HibernateException e) {
			throw new ModelException("Error consultando Paises:" + e.getMessage(), e);
		} catch (Exception e) {
			throw new ModelException("Error consultando Paises:" + e.getMessage(), e);
		}

	}

	
	public void saveAntecedentes(List list, Long long1) throws ModelException {
		// TODO Auto-generated method stub
		
	}

	
	public void saveParaclinicos(List list, Long long1) throws ModelException {
		// TODO Auto-generated method stub
		
	}

	
	public void saveAntecedenteTemporal(List list) throws ModelException {
		// TODO Auto-generated method stub
		
	}

	
	public void saveListExamenParaclinicos(List list, Cnconsclin cnconsclin) throws ModelException {
		// TODO Auto-generated method stub
		
	}

	
	public void saveListFormulaMedica(List list, Long long1) throws ModelException {
		// TODO Auto-generated method stub
		
	}

	
	public void saveAutorizacion(Chautoriserv chautoriserv, List list) throws ModelException {
		// TODO Auto-generated method stub
		
	}

	
	public void saveListRemisionInterconsulta(List list, Long long1) throws ModelException {
		// TODO Auto-generated method stub
		
	}

	
	public void saveListRemisionInterconsultaCirugia(List list, Chevolucion chevolucion) throws ModelException {
		// TODO Auto-generated method stub
		
	}

	
	public void saveListRemisionInterconsultaCirugia(List list, Long long1, String s, Integer integer)
			throws ModelException {
		// TODO Auto-generated method stub
		
	}

	
	public void saveListExamenesElectrofisiologicos(List list, Long long1, String s) throws ModelException {
		// TODO Auto-generated method stub
		
	}

	
	public void saveListExamenesElectrofisiologicosCirugia(List list, Long long1, String s, Integer integer, String s1)
			throws ModelException {
		// TODO Auto-generated method stub
		
	}

	
	public void saveListExamenesLaboratorio(List list, Long long1, String s) throws ModelException {
		// TODO Auto-generated method stub
		
	}

	
	public void saveListExamenesLaboratorioCirugia(List list, Long long1, String s, Integer integer, String s1)
			throws ModelException {
		// TODO Auto-generated method stub
		
	}

	
	public void saveLstIngresoLiquidos(List list, Long long1) throws ModelException {
		// TODO Auto-generated method stub
		
	}

	
	public void saveLstIngresoLiquidosCanalizacion(List list, Long long1, Chcanalivena chcanalivena)
			throws ModelException {
		// TODO Auto-generated method stub
		
	}

	
	public void saveLstRegistroLiquidos(List list, Long long1, List list1) throws ModelException {
		// TODO Auto-generated method stub
		
	}

	
	public void saveLstRegistroOrden(List list, Long long1, Integer integer) throws ModelException {
		// TODO Auto-generated method stub
		
	}

	
	public void saveLstRegistroLiquidosViaOral(List list, Long long1) throws ModelException {
		// TODO Auto-generated method stub
		
	}

	
	public void saveLstRegistroLiquidosCanalizacion(List list, Long long1, Chcanalivena chcanalivena)
			throws ModelException {
		// TODO Auto-generated method stub
		
	}

	
	public void saveCuestionarioPreanestesia(List list, Long long1) throws ModelException {
		// TODO Auto-generated method stub
		
	}

	
	public void saveMedicamentosAnestesia(List list, Long long1, String s) throws ModelException {
		// TODO Auto-generated method stub
		
	}

	
	public void saveDetalleListaCitologias(List list) throws ModelException {
		// TODO Auto-generated method stub
		
	}

	
	public void savePlantillaUsuario(List list, String s) throws ModelException {
		// TODO Auto-generated method stub
		
	}

	
	public void asignarPrioridad(Integer integer, Integer integer1, List list) throws ModelException {
		// TODO Auto-generated method stub
		
	}

	
	public void saveProfesionalPrioridad(List list, Integer integer) throws ModelException {
		// TODO Auto-generated method stub
		
	}

	
	public void saveDetalleListaPatologias(List list) throws ModelException {
		// TODO Auto-generated method stub
		
	}

	
	public void liberarConsultaClinica(List list, String s) throws ModelException {
		// TODO Auto-generated method stub
		
	}

	
	public void savelstCitologia(List list) throws ModelException {
		// TODO Auto-generated method stub
		
	}

	
	public void saveUsuarioSap(Chusuario chusuario, String s, List list, Integer integer, String s1)
			throws ModelException {
		// TODO Auto-generated method stub
		
	}

	
	public void saveLstRegistroLiquidosAnestesia(List list, Long long1) throws ModelException {
		// TODO Auto-generated method stub
		
	}

	
	public List getLstLiquidosAdministradoParcialAnestesia(List list) throws ModelException {
		// TODO Auto-generated method stub
		return null;
	}

	
	public void saveLstRegistroLiquidosControlAnestesia(List list, Long long1) throws ModelException {
		// TODO Auto-generated method stub
		
	}

	public void saveLstRegistroLiquidosAnestesiaEtapaIniciadoLiquido(List list, Long long1) throws ModelException {
		// TODO Auto-generated method stub
		
	}

	public void saveListExamenesImagenes(List list, Long long1, String s) throws ModelException {
		// TODO Auto-generated method stub
		
	}

	public void saveListExamenesImagenesCirugia(List list, Long long1, String s, Integer integer, String s1)
			throws ModelException {
		// TODO Auto-generated method stub
		
	}


}
